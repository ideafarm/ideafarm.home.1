
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        }
            break ;
            stAgain << idPacketNext ;
            //etThread.strokeF( tin0P , T("packet ")+TF1(idPacketNext)+T(" requesting resend\r\n") ) ;
        {
        else
        }
            ++ idPacketNext ;
            if( idPacket != idPacketNext ) { BLAMMO ; }
            etThread.strokeF( tin0P , T("packet ")+TF1(idPacket)+T(" received\r\n") ) ;
            stGen >> idPacket ;
            ZE( countT , idPacket ) ;
        {
        if( stGen[ 1 ] == idPacketNext )
    {
    while( stGen && !ether && !etThread )

    stGen.waitF( tin0P ) ;
{
while( !ether && !etThread )
countT idPacketNext = 1 ;

etThread.osThreadF( tin0P , countTC() , tmGenF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&stGen , (countT)&stAgain ) ;

stackC stAgain( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO ) ;
stackC stGen( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_GIVEsIGNnEWpLATE ) ;

TODO

DONE( tmGenF )
}
    stGenP.sinkF( tin0P , countTC() , (countT)-1 ) ;
    }
        while( cTries -- && !stAgainP ) { ++ s ; ether.osSleepF( tin0P , TUCK * 0x10 ) ; }
        countT cTries = 0x10 ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        else            stGenP.sinkF( tin0P , countTC() , ++ idPacket , flSTACKsINK_UNIQUE ) ;
        if( !cDrawing ) ++ idPacket ;//etThread.strokeF( tin0P , T("packet ")+TF1(++idPacket)+T(" omitted\r\n") ) ;
        countT cDrawing = ru ;

        }
            stGenP.sinkF( tin0P , countTC() , idPacketAgain , flSTACKsINK_UNIQUE ) ;
            //etThread.strokeF( tin0P , T("packet ")+TF1(idPacketAgain)+T(" sending again\r\n") ) ;
            stAgainP >> idPacketAgain ;
            ZE( countT , idPacketAgain ) ;
        {
        while( stAgainP )
    {
    while( !ether && !etThread )
    ZE( countT , idPacket ) ;

    ranUniC ru( 0x4 , - 1 ) ;

    stackC& stAgainP = *(stackC*)pTaskP->c2 ;
    stackC& stGenP   = *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmGenF )

/*1*/WAKEhIDE( "doodle.ifc.streams.reliable.communication" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

