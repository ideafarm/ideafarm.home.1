
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    baton.ungrabF( tinBaseP ) ;

    }
        }
            ether.delF( tinBaseP , psttnu ) ;
            ether.boxPutUniqueF( tinBaseP , psttnu , T("///ideafarm/ephemeral/domains/com/ideafarm/1350007/transactions/")+TF1(idcHirer)+T("/share") , (byteT*)&c2b , sizeof c2b ) ; ___( psttnu ) ;
            ZE( strokeS* , psttnu ) ;
            c2b.c2 = swShare ; // ASSUME: sizeof( measureT ) == sizeof( countT )
            c2b.c1 = idCitizen ;
            count2S c2b ;
            idCitizen = swShare.leverF( tinBaseP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swShare.cFlavorsF( tinBaseP ) ;
    {
    if( swShare )

    }
        ether.delF( tinBaseP , psttnu ) ;
        ether.boxPutUniqueF( tinBaseP , psttnu , T("///ideafarm/ephemeral/domains/com/ideafarm/1350007/transactions/")+TF1(idcHirer)+T("/payin") , (byteT*)&c2b , sizeof c2b ) ; ___( psttnu ) ;
        ZE( strokeS* , psttnu ) ;
        c2b.c2 = *(countT*)&mPayin ; // ASSUME: sizeof( measureT ) == sizeof( countT )
        c2b.c1 = idcHirer ;
        count2S c2b ;
    {
    if( mPayin )

    }
        ether.delF( tinBaseP , psttnu ) ;
        ether.boxPutUniqueF( tinBaseP , psttnu , T("///ideafarm/ephemeral/domains/com/ideafarm/1350007/transactions/")+TF1(idcHirer)+T("/debit") , (byteT*)&c2b , sizeof c2b ) ; ___( psttnu ) ;
        ZE( strokeS* , psttnu ) ;
        c2b.c2 = *(countT*)&mPriceTotal ; // ASSUME: sizeof( measureT ) == sizeof( countT )
        c2b.c1 = idcHirer ;
        count2S c2b ;
    {

    ether.delF( tinBaseP , psttr52 ) ;
    ether.delF( tinBaseP , psttr51 ) ;
    ether.delF( tinBaseP , psttr42 ) ;
    ether.delF( tinBaseP , psttr41 ) ;
    ether.delF( tinBaseP , psttr32 ) ;
    ether.delF( tinBaseP , psttr31 ) ;
    ether.delF( tinBaseP , psttr22 ) ;
    ether.delF( tinBaseP , psttr21 ) ;
    ether.delF( tinBaseP , psttr12 ) ;
    ether.delF( tinBaseP , psttr11 ) ;

    ether.strFuseF( tinBaseP , psttP , psttr52 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr51 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr42 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr41 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr32 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr31 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr22 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr21 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr12 ) ; ___( psttP ) ;
    ether.strFuseF( tinBaseP , psttP , psttr11 ) ; ___( psttP ) ;
    if( psttr11 && psttr12 && psttr21 && psttr22 && psttr31 && psttr32 && psttr41 && psttr42 && psttr51 && psttr52 ) { ether.strMakeF( tinBaseP , LF , psttP , T("") , psttr11->idAdam + psttr12->idAdam + psttr21->idAdam + psttr22->idAdam + psttr31->idAdam + psttr32->idAdam + psttr41->idAdam + psttr42->idAdam + psttr51->idAdam + psttr52->idAdam ) ; ___( psttP ) ; }

    }
        ) ; ___( psttr52 ) ;

            "payIn received = ")+TF4(mPayin,flFORMAT_EXPONENT,2,6)+( mPayin ? T("  (thank you)\r\n") : T("") )
            "total cost = ")+TF4(mPriceTotal,flFORMAT_EXPONENT,2,6)+T("\r\n"
            T("cDatum = ")+TF1(cDatum)+T("\r\n"

        ether.strFuseF( tinBaseP , psttr52 ,

        ) ; ___( psttr51 ) ;

            T("\r\n\r\nNotes"":\r\n\r\n")

        ether.strFuseF( tinBaseP , psttr51 ,
    {
    ZE( strokeS* , psttr52 ) ;
    ZE( strokeS* , psttr51 ) ;

    }
        }
            }
                }
                    }
                        else               { ether.strFuseF( tinBaseP , psttr42 , T("\r\n") ) ; ___( psttr42 ) ; }
                        if( pcPart[ off ] ) { ether.strFuseF( tinBaseP , psttr42 , off < 5 ? T("  ") : T(".") ) ; ___( psttr42 ) ; }
                        ether.strFuseF( tinBaseP , psttr42 , off < 3 ? TF3(pcPart[off++],flFORMAT_FILLzE|flFORMAT_UNSIGNED,8) : ( off == 3 ? TF3(pcPart[off++],flFORMAT_FILLzE|flFORMAT_UNSIGNED,7) : TF1(pcPart[off++]) ) ) ; ___( psttr42 ) ;
                    {
                    while( pcPart[ off ] )
                    ZE( countT , off ) ;

                    ether.strFuseF( tinBaseP , psttr42 , ( mPrice ? TF4(mPrice,flFORMAT_EXPONENT,2,6) : TP("",0xd) )+T("  ")+TF3(qty,0,8)+T("  ") ) ; ___( psttr42 ) ;

                    mPriceTotal += mPrice ;
                    }
                        }
                            }
                                swShare = *(countT*)&mShareTotal ;
                                mShareTotal += mShare ;
                                measureT mShareTotal = *(measureT*)&cShareTotal ;
                                countT cShareTotal = swShare ;
                                idCitizen = idc ;
                                stShare >> idc ;
                                ZE( countT , idc ) ;
                            {
                            while( stShare )
                            measureT mShare = mPrice / (countT)stShare ;
                        {
                        if( stShare )

                        }
                            }
                                stShare << idCitizen ;
                                sock.readF( tinBaseP , (byteT*)&idCitizen , sizeof idCitizen ) ;
                                ZE( countT , idCitizen ) ;
                            {
                            while( cShare -- )
                            sock.readF( tinBaseP , (byteT*)&cShare , sizeof cShare ) ;
                            ZE( countT , cShare ) ;
                            sock.writeF( tinBaseP , (byteT*)( pcPart + 4 ) , ccPart * sizeof( countT ) ) ;
                            sock.writeF( tinBaseP , (byteT*)&ccPart , sizeof ccPart ) ;
                            sock.writeF( tinBaseP , (byteT*)&idCmd , sizeof idCmd ) ;
                            sock.connectF( tinBaseP , ifcPORToLD1pRICEaUTHORITY , 0x01010103 ) ;
                            socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;
                        {
                        idCmd = idCMDpRICER_SHARE ;
                        stackC stShare( tinBaseP , ether , TAG( TAGiDnULL ) ) ;

                        }
                            sock.readF( tinBaseP , (byteT*)&mPrice , sizeof mPrice ) ;
                            sock.writeF( tinBaseP , (byteT*)&qty , sizeof qty ) ;
                            sock.writeF( tinBaseP , (byteT*)( pcPart + 4 ) , ccPart * sizeof( countT ) ) ;
                            sock.writeF( tinBaseP , (byteT*)&ccPart , sizeof ccPart ) ;
                            sock.writeF( tinBaseP , (byteT*)&idCmd , sizeof idCmd ) ;
                            sock.connectF( tinBaseP , ifcPORToLD1pRICEaUTHORITY , 0x01010103 ) ;
                            socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;
                        {
                        countT ccPart   = ether.strBodyLengthF( tinBaseP , pcPart + 4 ) ; // pcPart IS PREFIXED WITH 4 countT OBJECTS THAT ARE NOT PART OF THE pcPart, NARROWLY DEFINED
                        countT idCmd = idCMDpRICER_PRICE ;
                    {
                    if( ccPartBig > 4 )
                    ZE( measureT , mPrice ) ;
                    countT ccPartBig = ether.strBodyLengthF( tinBaseP , pcPart ) ;
                    countT qty = swUsage ;
                {
                else
                if( !pcPart ) __1
                pcPart = (countT*)swUsage.leverF( tinBaseP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )

            }
                ether.strMakeF( tinBaseP , LF , psttr42 , T("") , csn ) ; ___( psttr42 ) ;
                }
                    csn += 0x20 * ( ccPart + 2 ) ; // (A FEW MORE PER LINE THAN WE REALLY NEED) //U: 0x10
                    countT ccPart = ether.strBodyLengthF( tinBaseP , (countT*)swUsage.leverF( tinBaseP , idf ) ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                ZE( countT , csn ) ;
            {

            ether.strMakeF( tinBaseP , LF , psttr41 , T("\r\n\r\nParts Usage:\r\n\r\n")+TPS("cost",0xd,S1C('-'))+T("  ")+TPS("qty",8,S1C('-'))+T("  ")+TPS("type",8,S1C('-'))+T("  ")+TPS("nicNameV4",8,S1C('-'))+T("  ")+TPS("idComp",8,S1C('-'))+T("  ")+TPS("idOwner",7,S1C('-'))+T("  ")+TPS("idPart",0x14,S1C('-'))+T("\r\n") ) ; ___( psttr41 ) ;
        {
        else
        if( !cFlavors ) { ether.strMakeF( tinBaseP , LF , psttr41 , T("") ) ; ___( psttr41 ) ; ether.strMakeF( tinBaseP , LF , psttr42 , T("") ) ; ___( psttr42 ) ; }
        const countT cFlavors = swUsage.cFlavorsF( tinBaseP ) ;
    {
    ZE( strokeS* , psttr42 ) ;
    ZE( strokeS* , psttr41 ) ;
    ZE( measureT , mPriceTotal ) ;
    switchC swShare( tinBaseP , ether , TAG( TAGiDnULL ) , flSTACKc_null , idCitizen ) ;
    ZE( countT , idCitizen ) ;

    }
        }
            while( ~handle ) ;
            }
                if( psttl ) { ether.strFuseF( tinBaseP , psttr32 , T(psttl)+T("\r\n") ) ; ___( psttr32 ) ; }
                strokeS* psttl = (strokeS*)stLog.downF( tinBaseP , handle ) ;
            {
            do

            }
                ether.strMakeF( tinBaseP , LF , psttr32 , T("") , csn ) ; ___( psttr32 ) ;
                while( ~handle ) ;
                }
                    if( psttl ) { csn += psttl->idAdam + 2 ; }
                    strokeS* psttl = (strokeS*)stLog.downF( tinBaseP , handle ) ;
                {
                do
                ZE( countT , csn ) ;
            {

            handleC handle( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            ether.strMakeF( tinBaseP , LF , psttr31 , T("\r\n\r\nEvents which did not result in impotence:\r\n\r\n") ) ; ___( psttr31 ) ;
        {
        else
        if( !stLog ) { ether.strMakeF( tinBaseP , LF , psttr31 , T("") ) ; ___( psttr31 ) ; ether.strMakeF( tinBaseP , LF , psttr32 , T("") ) ; ___( psttr32 ) ; }
    {
    ZE( strokeS* , psttr32 ) ;
    ZE( strokeS* , psttr31 ) ;

    }
        }
            while( ~handle ) ;
            }
                if( psttl ) { ether.strFuseF( tinBaseP , psttr22 , T(psttl)+T("\r\n") ) ; ___( psttr22 ) ; }
                strokeS* psttl = (strokeS*)stLogImpotence.downF( tinBaseP , handle ) ;
            {
            do

            }
                ether.strMakeF( tinBaseP , LF , psttr22 , T("") , csn ) ; ___( psttr22 ) ;
                while( ~handle ) ;
                }
                    if( psttl ) { csn += psttl->idAdam + 2 ; }
                    strokeS* psttl = (strokeS*)stLogImpotence.downF( tinBaseP , handle ) ;
                {
                do
                ZE( countT , csn ) ;
            {

            handleC handle( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

            ether.strMakeF( tinBaseP , LF , psttr21 , T("\r\n\r\nImpotence events"":\r\n\r\n") ) ; ___( psttr21 ) ;
        {
        else
        if( !stLogImpotence ) { ether.strMakeF( tinBaseP , LF , psttr21 , T("") ) ; ___( psttr21 ) ; ether.strMakeF( tinBaseP , LF , psttr22 , T("") ) ; ___( psttr22 ) ; }
    {
    ZE( strokeS* , psttr22 ) ;
    ZE( strokeS* , psttr21 ) ;

    }
        ether.strFuseF( tinBaseP , psttr12 , T("") ) ; ___( psttr12 ) ;
        ether.strFuseF( tinBaseP , psttr11 , T("IdeaFarm " "(tm) City / Citizen ")+TF1(idcHirer)+T(" Activity Report / http://www.ideafarm.com\r\n") ) ; ___( psttr11 ) ;
    {
    ZE( strokeS* , psttr12 ) ;
    ZE( strokeS* , psttr11 ) ;

    baton.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    _IO_

    if( ether ) return ;
{
/*1*/voidT carC::strF( tinBaseS& tinBaseP , strokeS*& psttP )/*1*/

/**/
*/
  should be 0 unless caller knows for sure how many strokes will be used
  if 0 then will always allocate enough strokes for psttP
  if not 0, then must have enough extra strokes to receive an appended string
  can be 0
 psttP
 tinBaseP
arguments
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1350007.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

