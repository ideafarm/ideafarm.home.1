
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tin0P , T("\r\npress the enter key") ) ;

}
    etThread.strokeF( tin0P , TF3(vv,0,2)+T("\t") ) ;

    stack >> vv ;
    ZE( countT , vv ) ;
{
while( stack )

while( cDone < cThreads ) etThread.osSleepF( tin0P , TUCK * 32 ) ;
}
    etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&stack , idt , (countT)&cDone ) ;
    ZE( countT , tnu ) ;
{
for( countT idt = 1 ; idt <= cThreads ; idt ++ )
const countT cThreads = 8 ;

ZE( countT , cDone ) ;

stackC stack( tin0P , ether , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmF )
}
    cDone ++ ;

    stack.ungrabF( tin0P ) ;
    }
        etThread.osSleepF( tin0P , TUCK ) ;
        stack << idThread * 0x10 + digit ;
    {
    for( countT digit = 1 ; digit <= 0xa ; digit ++ )
    stack.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    countT& cDone    = *(countT*)pTaskP->c3 ;
    countT  idThread =           pTaskP->c2 ;
    stackC& stack    = *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmF )

/*1*/WAKEhIDE( "example.simplest.func.1150024.stackC.operator_increment" )/*1*/
/**/
*/
\<A HREF=\"5.ed10104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

