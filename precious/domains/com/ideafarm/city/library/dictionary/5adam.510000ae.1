
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

DEL( pSgn ) ;
}
    }
        }
            ++ s ; etThread.osSleepF( tin0P , TUCK * 0x40 ) ;
        {
        while( cWaiters || cGivers )
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    {
    etThread.loafIF( tin0P ) ;

    }
        etThread.osSleepF( tin0P , TUCK * 0x40 ) ;
        etThread.osThreadF( tin0P , countTC() , tmGiveF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , idt , (countT)pSgn , (countT)&cWaiters , (countT)&cGivers ) ;
        inc02AM( cGivers ) ;
    {
    for( countT idt = 1 ; idt <= 1 ; idt ++ )

    }
        etThread.osThreadF( tin0P , countTC() , tmWaitF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , idt , (countT)pSgn , (countT)&cWaiters , (countT)&cGivers ) ;
        inc02AM( cWaiters ) ;
    {
    for( countT idt = 1 ; idt <= 4 ; idt ++ )

    ZE( countT , cGivers ) ;
    ZE( countT , cWaiters ) ;
{
if( pSgn )
signC* pSgn = new( 0 , tin0P , LF ) signC( tin0P , TAG( TAGiDnULL ) ) ; ___( pSgn ) ;

TODO

DONE( tmWaitF )
}
    dec02AM( cWaiters ) ;
    }
        etThread.strokeF( tin0P , tMe ) ;
        ss.waitF( tin0P ) ;
    {
    while( !ether && !etThread )
    TN( tMe , post2 ) ;
    const osTextT post2[] = { 'A' - 1 + idWaiter , 0 } ;

    countT& cGivers  = *(countT*)pTaskP->c4 ;
    countT& cWaiters = *(countT*)pTaskP->c3 ;
    signC& ss        =  *(signC*)pTaskP->c2 ;
    countT idWaiter  =           pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmWaitF )

DONE( tmGiveF )
}
    dec02AM( cGivers ) ;
    }
        etThread.osSleepF( tin0P , TOCK ) ;
        ss.giveF( tin0P ) ;
        etThread.strokeF( tin0P , tMe ) ;
    {
    while( cWaiters && !etThread )

    }
        ether.osSleepF( tin0P , TOCK ) ;
        ss.giveF( tin0P ) ;
        etThread.strokeF( tin0P , tMe ) ;
    {
    while( !ether && !etThread )
    TN( tMe , post2 ) ;
    const osTextT post2[] = { 'a' - 1 + idGiver , 0 } ;

    countT& cGivers  = *(countT*)pTaskP->c4 ;
    countT& cWaiters = *(countT*)pTaskP->c3 ;
    signC& ss        =  *(signC*)pTaskP->c2 ;
    countT idGiver   =           pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmGiveF )

/*1*/WAKEhIDE( "example.other.func.10b0001.signC.NEWdELcLASSuSEpRIMARYpOOLoLDiF" )/*1*/
/**/
*/
\<A HREF=\"5.ea00104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

