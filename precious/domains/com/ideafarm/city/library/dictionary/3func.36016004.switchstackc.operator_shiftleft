
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return *this ;
    if( pBaton ) pBaton->ungrabF( tin0P ) ;

    if( !third ) *pStack << valueP ;
    }
        __Z( pStack ) ;
        pStack = new( 0 , tin0P , LF ) stackC( tin0P , third , TAG( TAGiDnULL ) , flagsStack , idType , idGrabLayer , swMe.pLeverLathRefF( tin0P ) , 0 , pCbF ) ; ___BITScT( pStack , 0xe8c ) ;
    {
    if( !pStack )
    stackC*& pStack = (stackC*&)(countT&)swMe ;
    else if( osTidOwner != ((tin9S&)tin0P).osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = ((tin9S&)tin0P).osTid ;
    if( pBaton ) pBaton->grabF( tin0P , TAG( TAGiDnULL ) ) ;

    }
        if( third ) return *this ;
    {
    IFbEcAREFUL    

    SCOOP
    TINSL
{
/*1*/switchStackC& switchStackC::operator << ( const countT valueP )/*1*/

/**/
*/
 valueP
arguments
like pushF except does not support pTinHasLeverP
evaluates to a reference to this stack object
places the address of an object onto this stack object
  \<A HREF=\"5.7e20104.1.1.0.html\"\>7e20104:  WAKEsHOW( "example.simplest.func.1210005.switchStackC.operator_shiftLeft" )\</A\>
 simplest
examples
\<A HREF=\"5.1210005.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

