
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    }
        if( !cIn ) ether.osSleepF( tin0P , TOCK * 0x10 ) ;
        TELL( "taking my cycle nap" ) ;

        }
            etThread.delF( tin0P , pstt1m ) ;
            }
                etThread.osThreadF( tin0P , countTC() , tmSuperF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)psttFile ) ;

                etThread.diskMoveFileOrDirF( tin0P , psttFile , psttc1 ) ;
                etThread.strMakeF( tin0P , LF , psttFile , tStage2+TI(ifcIDtEXTgEN_UNIQUE) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;
            {
            FORsTRINGSiN1( pstt1m )
            const countT cToDo = etThread.boxMenuF( tin0P , soul1m , tStage1+tStar ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        TELL( "promoting each stage 1 file to stage 2 and launching a supervisor thread for it" ) ;

        }
            etThread.delF( tin0P , pstt1m ) ;
            FORsTRINGSiN1( pstt1m ) etThread.diskMoveFileOrDirF( tin0P , tStage1+TI(ifcIDtEXTgEN_UNIQUE) , psttc1 ) ;
            cIn = etThread.boxMenuF( tin0P , soul1m , tIn+tStar ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        ZE( countT , cIn ) ;
        TELL( "moving new job files into the stage 1 directory" ) ;

        TN( tStage2  , "" ) ; tStage2 = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+T(DDNUMB)+T("/2/") ;
        TN( tStage1  , "" ) ; tStage1 = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+T(DDNUMB)+T("/1/") ;
        etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
        ZE( sCountT , timeN2 ) ;
        ZE( countT , timeN1 ) ;
    {
    while( !ether && !etThread )
    TN( tIn , "" ) ; tIn = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+T(DDNUMB)+T("/in/" ) ;
    strokeS sttr('-') ;
    TN( tStar    , "*" ) ;

    //U::{ countT idAdam = 0x4010441 ; etThread.ifcHireF( tin0P , T("sentient.asynch.job.supervisor") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
    TELL( "hiring 144" )

    etThread.ifcChatF( tin0P , 0 , DDNUMB , jobFillCourseF , jobHearOrderF ) ;
    TELL( "preparing to accept chat clients" ) ;
    stateS state( tin0P , etThread ) ;
    TELL( "setting up" )
{

TELL( "preparing for work" ) ;
TODO

DONE( tmSuperF )
}
    etThread.delF( tin0P , psttFile ) ;
    doWoF( tin0P , etThread , psttFile ) ;
    strokeS* psttFile = (strokeS*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmSuperF )

}
    etThread.diskMoveFileOrDirF( tin0P , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+T(DDNUMB)+T("/done/")+TI(ifcIDtEXTgEN_UNIQUE) , psttFileP ) ;

    etThread.ifcJobF( tin0P , stCourses , idAdam , sOrder , stOrders , TF1(DDNUMB)+T("/sentient.asynch.job.supervisor/doWoF") , 1 ) ;
    stOrders << new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ;
    stackC stOrders(  tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
    stackC stCourses( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;

    souIn >> sOrder ;
    soulC sOrder( tin0P , TAG( TAGiDnULL ) ) ;

    souIn >> idAdam ;
    ZE( countT , idAdam ) ;

    __( (countT)souIn - 2 ) ;
    etThread.delF( tin0P , pbs ) ;
    souIn.shiftLeftF( tin0P , ifcIDtYPEsOULiTEM_soulC , pbs , 0 , 0 , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
    soulC souIn( tin0P , TAG( TAGiDnULL ) ) ;

    __( cbs - sizeof( countT ) - *(countT*)pbs ) ;
    etThread.boxGetShadowF( tin0P , pbs , cbs , psttFileP ) ; ___( pbs ) ;
    ZE( countT , cbs ) ;
    ZE( byteT* , pbs ) ;
{
voidT doWoF( tin0S& tin0P , etherC& etThread , const strokeS* const psttFileP )

STATE0

}
    if( ether && *((tin123S&)tin0P).zEtScratch && cArgP && c8argP.c1 && sDataP && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            }
                }
                    break ;
                    etThread.delF( tin0P , psttJobType ) ;

                    else __1
                    }
                    {
                    if( !etThread.strCompareF( tin0P , psttJobType , T("!fooey") ) )

                    sOrderP >> psttJobType ; ___( psttJobType ) ;
                    ZE( strokeS* , psttJobType )
                {
                case ifcIDcMDjOBoRDER_NAMED :
                }
                    break ;

                    etThread.delF( tin0P , psttBody ) ;
                    etThread.delF( tin0P , psttFrom ) ;

                    }
                        etThread.delF( tin0P , postBody ) ;
                        etThread.delF( tin0P , psttu ) ;
                        etThread.boxPutUniqueF( tin0P , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF1(DDNUMB)+T("/in/ignored/in") , postBody , costBody ) ;
                        ZE( strokeS* , psttu ) ;

                        countT costBody = etThread.strMakeF( tin0P , LF , postBody , psttBody ) ; ___( postBody ) ;
                        ZE( osTextT* , postBody ) ;
                    {

                    sOrderP >> psttBody ; ___( psttBody ) ;
                    ZE( strokeS* , psttBody ) ;

                    __( idAdamTo - DDNUMB ) ;
                    __Z(  idAdamTo ) ;
                    sOrderP >> idAdamTo ;
                    ZE( countT , idAdamTo ) ;

                    __(  psttFrom && !psttFrom->idAdam ) ;
                    __Z( psttFrom ) ;
                    sOrderP >> psttFrom ; ___( psttFrom ) ;
                    ZE( strokeS* , psttFrom ) ;
                {
                case ifcIDcMDjOBoRDER_MAIL :
            {
            switch( idJobType )

            sOrderP >> idJobType ;
            ZE( countT , idJobType ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    __( idAdamP - DDNUMB ) ;
{
voidT jobFillCourseF( tin0S& tin0P , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( cArgP && c8argP.c1 && sOrderP && ether && idChatSessionP ) ;

    __( idAdamP - DDNUMB ) ;
{
voidT jobHearOrderF( tin0S& tin0P , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

/*1*/WAKEhIDE( "sentient.asynch.job.supervisor" )/*1*/
/**/
*/
i supervise jobs that are dropped into my in box directory
\<A HREF=\"5.9440104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

