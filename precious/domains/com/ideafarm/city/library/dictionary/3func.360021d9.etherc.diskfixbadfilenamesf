
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

}
    return cBadOrCapFound ;

    delF( tin0P , psttFolderMapped ) ;
    while( ~hFind && ( !etPrime || bIgnoreEtPrime ) ) ;
    }
        DEL( pInfo ) ;
        }
            }
                }
                    }
                        }
                            delF( tin0P , postOsLongNew  ) ;
                            delF( tin0P , postOsLongLike ) ;

                            }
                                while( ~hFind2 ) ;
                                }
                                    DEL( pInfo2 ) ;
                                    }
                                        }
                                            delF( tin0P , postLongNew ) ;
                                            delF( tin0P , postLongWas ) ;
                                            }
                                                if( POOP ) POOPR

                                                if( !bDone ) traceF( tin0P , T("could not rename file: ")+T(pInfo->postOsName) ) ;
                                                
                                                }
                                                    }
                                                        thirdC::c_strcatIF( tin0P , postLongNew , tSuffix ) ;
                                                        TN( tSuffix , "." ) ; tSuffix += TF3(++idDupLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8) ;
                                                        postLongNew[ costLongNew ] = 0 ;
                                                        POOPR
                                                    {
                                                    else
                                                    }
                                                        break ;
                                                        bDone = 1 ;
                                                    {
                                                    if( !POOP )
                                                    thScratch.dosMoveF( tin0P , postLongNew , postLongWas , 1 ) ;
                                                {
                                                while( cTry -- )
                                                countT cTry = TUCK ;
                                                ZE( boolT , bDone ) ;
                                                ZE( countT , idDupLath ) ;

                                                thirdC& thScratch = *((tin1S&)tin0P).pEtScratch ;

                                                SCOOPS
                                            {
                                            IFsCRATCH

                                            // COLLISIONS ARE HANDLED BY UNIQUIFYING postLongNew BY APPENDING AN INTEGER
                                            // ONLY THE WOTH MATCHING FILE CAN BE RENAMED TO postLongNew

                                            const countT costLongNew = strMakeF( tin0P , LF , postLongNew , T(postOsLongNew) , 9 ) ; ___( postLongNew ) ; // EXTRA IS ALLOCATED TO ACCOMMODATE tSuffix
                                                                       strMakeF( tin0P , LF , postLongWas , T(pInfo2->postOsNameAlt?pInfo2->postOsNameAlt:pInfo2->postOsName) ) ; ___( postLongWas ) ;
                                            ZE( osTextT* , postLongNew ) ;
                                            ZE( osTextT* , postLongWas ) ;
                                        {
                                        if( bBadOrCapF( tin0P , pInfo2->postOsName ) )
                                    {
                                    if( pInfo2 )
                                    diskFindFileOrDirF( tin0P , pInfo2 , hFind2 , fnLike.pathF() , &pat ) ;
                                    ZE( infoFileS* , pInfo2 ) ;
                                {
                                do
                                handleC hFind2( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                                
                                patternC pat( tin0P , *this , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                                fileNameC fnLike( tin0P , *this , T(ifFileNameC(tin0P,third,postOsLongLike)) ) ;

                            {                
                            traceF( tin0P , T(" [new]: ")+T(postOsLongNew)     ) ;
                            traceF( tin0P , T("[like]: ")+T(postOsLongLike)    ) ;
                            traceF( tin0P , T(" [bad]: ")+T(pInfo->postOsName) ) ;

                            }
                                }
                                    postOsLongNew[  offr ] = '.' ;
                                    postOsLongLike[ offr ] = '?' ;
                                {
                                else if( bBad )
                                if( bCap ) postOsLongNew[ offr ] = (osTextT)( postOsLongNew[ offr ] + 'a' - 'A' ) ;

                                }
                                    }
                                        break ;
                                        bBad = 1 ;
                                    {
                                    BADcASEScHARiNfILEnAME
                                    //CS:CODEsYNC: 360021d9 360021d9
                                {
                                else switch( postOsLongLike[ offr ] )
                                else if( 0x20 > postOsLongLike[ offr ] || postOsLongLike[ offr ] > 0x7f ) bBad = 1 ;
                                     if( 'A' <= postOsLongLike[ offr ] && postOsLongLike[ offr ] <= 'Z' ) bCap = 1 ;
                                ZE( boolT , bCap ) ;
                                ZE( boolT , bBad ) ;
                            {
                            for( ; postOsLongLike[ offr ] ; offr ++ )
                            countT offr = offShort ;

                            thirdC::c_strcpyIF( tin0P , postOsLongNew  , pInfo->postOsName ) ;
                            thirdC::c_strcpyIF( tin0P , postOsLongLike , pInfo->postOsName ) ;
                            }
                                newF( tin0P , LF , postOsLongNew  , costa ) ; ___( postOsLongNew  ) ;
                                newF( tin0P , LF , postOsLongLike , costa ) ; ___( postOsLongLike ) ;
                                countT costa = thirdC::c_strlenIF( tin0P , pInfo->postOsName ) + 1 ;
                            {
                        {
                        ZE( osTextT* , postOsLongNew  ) ; // MADE FROM INVALID FILE NAME, WITH INVALID CHARACTERS REPLACED WITH '.'
                        ZE( osTextT* , postOsLongLike ) ; // MADE FROM INVALID FILE NAME, WITH INVALID CHARACTERS REPLACED WITH '?'

                        //20150204@1508: UPPER CASE CHARACTERS ARE "PSEUDO-BAD" IN THAT AS POLICY THEY ARE CONVERTED TO LOWER CASE

                        traceF( tin0P , T("invalid character found in file name.  repairing...") ) ;
                        cBadOrCapFound ++ ;
                    {
                    if( bBadOrCapF( tin0P , postOsShort ) )

                    countT offShort = postOsShort - pInfo->postOsName ;
                    postOsShort ++ ;
                {
                if( postOsShort )
                const osTextT* postOsShort = thirdC::c_strrchrIF( tin0P , pInfo->postOsName , '\\' ) ;
            {
            else if( !( F(flagsP) & flETHERfIXnAMES_FOLDERSoNLY ) )
            }
                if( F(flagsP) & flETHERfIXnAMES_RECURSE && !strIdF( tin0P , tSDS , pInfo->psttIfoName ) && !strIdF( tin0P , tSDDS , pInfo->psttIfoName ) ) cBadOrCapFound += disk FixBadFileNamesF( tin0P , pInfo->psttIfoName , flagsP ) ;
            {
            if( pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' )
        {
        if( pInfo && pInfo->psttIfoName )
        diskFindFileOrDirF( tin0P , pInfo , hFind , T(psttFolderMapped) ) ;
        ZE( infoFileS* , pInfo ) ;
    {
    do
    handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    TN( tOsLikePath , osFileNameC( tin0P , third , T(psttFolderMapped) ) ) ;
    TN( tSDDS , "/../" ) ;
    TN( tSDS , "/./" ) ;

    //THE JOB IS DONE FOR THE CURRENT FOLDER, EXCEPT FOR RECURSION

    if( !( F(flagsP) & flETHERfIXnAMES_SYSTEMpREwASH ) ) cBadOrCapFound = disk FixBadFileNamesF( tin0P , psttFolderMapped , ( flagsP & ~( F(flETHERfIXnAMES_RECURSE) ) ) | flETHERfIXnAMES_FOLDERSoNLY | flETHERfIXnAMES_SYSTEMpREwASH ) ; // THIS CLEANS UP THE DIRECTORY NAMES THAT MUST BE CLEAN WHEN I RECURSE INTO THEM
    ZE( countT , cBadOrCapFound ) ;

    diskMapFileNameF( tin0P , psttFolderMapped , psttFolderP ) ; ___( psttFolderMapped ) ;
    ZE( strokeS* , psttFolderMapped ) ;

    etherC& etPrime = etPrimeIF( tin0P ) ;
    const boolT bIgnoreEtPrime = F(flagsP) & flETHERfIXnAMES_KEEPwORKINGiFfIRED ;

    _IO_

    }
        if( POOP ) return 0 ;
        FV(flETHERfIXnAMES,flagsP) ;
        __Z( psttFolderP[ CSpREFIX - 1 + psttFolderP->idAdam ].idAdam == '/' ) ;
        if( POOP ) return 0 ;
        __Z( psttFolderP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::disk FixBadFileNamesF( tin0S& tin0P , const strokeS* const psttFolderP , const flagsT flagsP )/*1*/

#if defined( NEVERdEFINED )
//20170413@1406: THIS IS OBSOLETE NOW THAT FILESETS ARE USED FOR CLOUD ARCHIVAL; DISABLING THIS TO ENSURE THAT IT IS NOT USED TO MODIFY FILE NAMES; IT WORKS BUT SHOULD REMAIN DISABLED UNLESS A NEW NEED ARISES

}
    return bBadOrCap ;

    }
        }
            }
                break ;
                bBadOrCap = 1 ;
            {
            BADcASEScHARiNfILEnAME\
        {
        else switch( *postP )
        }
            break ;
            bBadOrCap = 1 ;
        {
        )
            ( 'A' <= *postP && *postP <= 'Z' )
            ||
            *postP > 0x7f
            ||
            *postP < 0x20
        (
        if
    {
    for( ; *postP ; postP ++ )
    ZE( boolT , bBadOrCap ) ;
{
boolT bBadOrCapF( tin0S& tin0P , const osTextT* postP )

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

