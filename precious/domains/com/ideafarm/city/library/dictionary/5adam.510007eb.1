
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etRock.traceF( tinP , T("tlsDelF will fail BLAMMO during termination since the __1 line left a drop on the tls stack") ) ;

etherC::loafIF( tinP ) ;    //THIS LINE WILL DO NOTHING SINCE etThread IS IMPOTENT (POOP IS SET)

//======================================================================================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//====  END:    THE WRONG WAY TO SET IMPOTENCE ON EXCEPTION  ===========================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//======================================================================================================================================================================================================================================

}
    }
        }
            etRock.traceF( tinP , T("detected impotence") ) ;
            POOPRqUIET
        {
        if( POOP )

        }
            }
                            //WHEN THE GRUNT EXCEPTION IS THROWN, THIS HANDLER WILL CATCH IT, AND THE tlsDelF FOR THE WOTH bitsC INSTANCE WILL NEVER BE CALLED
                            //THE REASON THAT THIS IS BAD IS THAT __1 CONSTRUCTS A bitsC INSTANCE, WHICH CALLS tlsNewF, BEFORE CALLING gruntF, WHICH WILL NORMALLY THROW A GRUNT EXCEPTION
                __1 ;       //THIS LINE WILL LEAVE A TLS DROP THE WOTH TIME THAT IT IS CALLED, SINCE IT THROWS AN EXCEPTION AFTER CALLING tlsNewF AND BEFORE CALLING tlsDelF
                            //SINCE SCOOPS, THE __1 LINE WILL NOT THROW AN EXCEPTION.  BUT IF POOP WAS A REFERENCE INTO etThread, THEN __1 WOULD THROW AN EXCEPTION.

                //EXCEPTION HANDLER CODE SHOULD NOT THROW EXCEPTIONS, INCLUDING THE GRUNT EXCEPTION THAT gruntF THROWS
                //BUT IT IS ALWAYS "NONCONFORMING" AND BAD IPDOS STYLE TO USE A __1 OR __ MACRO OR OTHERWISE CAUSE IMPOTENCE WITHIN AN EXCEPTION HANDLER
                //THIS EXAMPLE CODE GETS AWAY WITH IT BECAUSE IT USES SCOOPS, WHICH CAUSES gruntF TO NOT THROW AN EXCEPTION
                //THE POINT IS TO NOT USE __1 OR __() OR OTHERWISE CALL gruntF FROM WITHIN AN EXCEPTION HANDLER BLOCK.

                etRock.traceF( tinP , T("caught an exception") ) ;
            {
            else
            }
                etRock.traceF( tinP , T("won't ever see this trace") ) ;
                byteT bTest2 = *(byteT*)0x07 ;
                etRock.traceF( tinP , T("about to attempt to read from address 0x07") ) ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;
            RESTART
        {

        SCOOPS
    {
    IFsCRATCH
    _IO_
{
etRock.traceF( tinP , T("this is example of how NOT to code impotence on exception") ) ;

//======================================================================================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//====  BEGIN:  THE WRONG WAY TO SET IMPOTENCE ON EXCEPTION  ===========================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//======================================================================================================================================================================================================================================

//======================================================================================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//====  END:    THE RIGHT WAY TO SET IMPOTENCE ON EXCEPTION  ===========================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//======================================================================================================================================================================================================================================

}
    }
        }
            etRock.traceF( tinP , T("detected impotence") ) ;
            POOPRqUIET
        {
        if( POOP )

        __( bFail ) ;   //THE CORRECT WAY IS TO CALL gruntF OUTSIDE OF THE RESTART BLOCK

        }
            }
                bFail = 1 ;
                etRock.traceF( tinP , T("caught an exception") ) ;
            {
            else
            }
                etRock.traceF( tinP , T("won't ever see this trace") ) ;
                byteT bTest2 = *(byteT*)0x07 ;
                etRock.traceF( tinP , T("about to attempt to read from address 0x07") ) ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;
            RESTART
        {
        ZE( boolT , bFail ) ;

        SCOOPS
    {
    IFsCRATCH
    _IO_
{
etRock.traceF( tinP , T("this is example of how to code impotence on exception") ) ;

//======================================================================================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//====  BEGIN:  THE RIGHT WAY TO SET IMPOTENCE ON EXCEPTION  ===========================================================================================================================================================================
//====                                                       ===========================================================================================================================================================================
//======================================================================================================================================================================================================================================

etherC& etRock = etherC::etRockIF( tinP ) ;

TODO

/*1*/WAKEsHOWtEXT( "example.RESTART.__1.how.to.code.and.not.to.code.impotence.on.exception" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
