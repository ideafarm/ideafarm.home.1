
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

    
REST

etThread.delF( tinBaseP , psttLabel ) ;

sDone_tmWatchSliderF.waitF( tinBaseP ) ;
sSlider.giveF( tinBaseP ) ;

etThread.loafIF( tinBaseP ) ;

etThread.osThreadF( tinBaseP , countTC() , tmWatchSliderF , &sDone_tmWatchSliderF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&c8p ) ;
count8S c8p( (countT)&c8p1 ) ;
count8S c8p1( (countT)&tcSlider ) ;
signC sDone_tmWatchSliderF( tinBaseP , TAG( TAGiDnULL ) ) ;

etThread.strokeF( tinBaseP , T("")+S3(1,scOld_ccFRAMEfORsADAMfRAMES,1)+S3(0.0,scOld_mmPADfORsADAMfRAMES,1.0)+S3((measureT)(mFrames*2.0),scOld_mmFRAMEcELLS,(measureT)2.0)+tSay+T("\r\nHHHHHHHHHHHHHHHH HHHH")+S2(0,scOld_POPfRAME)+S2(0,scOld_POPfRAME) ) ;

strokeS::renderSizeIF( tinBaseP , etThread , tSay , mCols , mPads , mFrames ) ;
ZE( measureT , mFrames ) ;
ZE( measureT , mPads ) ;
ZE( measureT , mCols ) ;

TN( tSay , "" ) ; tSay = tcSlider+T(" ")+tcbQuit ;

tcButtonQuitC tcbQuit( tinBaseP ) ;

tcSliderC tcSlider( tinBaseP , etThread , mValue , bSlider , sSlider , 0x10 , 0xf , (const strokeS**)&psttLabel ) ;
signC  sSlider( tinBaseP , TAG( TAGiDnULL ) ) ;
batonC bSlider( tinBaseP , TAG( TAGiDnULL ) ) ;
ZE( measureT , mValue ) ;

etThread.strMakeF( tinBaseP , LF , psttLabel , T("")+S3(40.0,scOld_mmFRAMEcELLS,3.0)+T("value will appear here")+S2(0,scOld_POPfRAME) ) ; ___( psttLabel ) ;
ZE( strokeS* , psttLabel ) ;

TODO

DONE( tmWatchSliderF )
}
    }
        //napF( tinBaseP , ether , TOCK ) ;
        bSlider.ungrabF( tinBaseP ) ;
        tcSliderP.freshF( tinBaseP ) ;
        etThread.strMakeF( tinBaseP , LF , psttLabel , T("")+S3(10.0,scOld_mmFRAMEcELLS,3.0)+TF1(mValue)+S2(0,scOld_POPfRAME) ) ; ___( psttLabel ) ;
        etThread.delF( tinBaseP , psttLabel ) ;
        bSlider.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        sSlider.waitF( tinBaseP ) ;
    {
    while( !ether )

    strokeS*& psttLabel = *(strokeS**)tcSliderP ;
    measureT& mValue = tcSliderP ;
    signC&  sSlider = tcSliderP ;
    batonC& bSlider = tcSliderP ;

    tcSliderC& tcSliderP = *(tcSliderC*)c8p1P.c1 ;
    count8S&   c8p1P     =    *(count8S*)c8pP.c1 ;
    count8S&   c8pP      = *(count8S*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWatchSliderF )

}
    ++ s ; etherP.osSleepF( tinBaseP , time1P ) ;
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
{
voidT napF( tin0S& tinBaseP , etherC& etherP , const countT time1P )

/*1*/WAKEsHOW( "example.other.snip.00300d6.tcSliderC.label.volatile" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

