
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            (*pCbfP)( tin0P , cDirsP , cFilesP , bQuitP , 0 , pcArgP , pModuloDirsP , pModuloFilesP ) ;          //20180406@1337: ADDED WITHOUT ANALYSIS
            _IO_
        {
        if( pCbfP )
        *postNameEnd = 0 ;                                                                                   //20180406@1337: ADDED WITHOUT ANALYSIS

        BOSpOOP ;
        BOS( WHATsfr , BOSoK , FindClose( oshFind ) ) ;
        }
            if( !((tin123S&)tin0P).brcRaw ) break ;
            if( ((tin123S&)tin0P).bosFail && ((tin123S&)tin0P).brcQuery != ERROR_NO_MORE_FILES ) BOSpOOP ;

            if( bRetry ) { __( ifcIDiMPOTENCEbASEeRRORcODE_NOTrEADY ) ; }
            while( bRetry && -- cDo ) ;
            }
                else if( bRetry ) bRetry = 0 ;
                }
                    continue ;
                    bRetry = 1 ;
                    Sleep( 2000 ) ;
                    _IO_
                {
                else if( ((tin123S&)tin0P).brcLath == ERROR_NOT_READY )
                if( !((tin123S&)tin0P).bosFail ) break ;
                BOS( WHATsfr , BOSoK , FindNextFile( oshFind , &info ) ) ;
                _IO_
            {
            do                                                 //SILENTLY RETRY 8 TIMES IF ERROR_NOT_READY
            countT cDo = 8 ;
            ZE( boolT , bRetry ) ;
    
            }
                }
                    cFilesP ++ ;
                {
                if( bDoIt )
    
                ;
                    : 1
                    ? (*pCbfP)( tin0P , cDirsP , cFilesP , bQuitP , postNameP , pcArgP , pModuloDirsP , pModuloFilesP )
                boolT bDoIt = pCbfP && ( !pModuloFilesP || !( cDirsP % *pModuloFilesP ) )

                strcpy( postNameEnd , info.cFileName ) ;

                _IO_
            {
            else if( !( F(flagsP) & flDISKwALK_DIRECTORIESoNLY ) )
            }
                }
                    }
                        *postNameEnd = 0 ;
        
                        }
                            diskWalkPrivateIF( tin0P , cDirsP , cFilesP , postNameP , bQuitP , flagsP , pCbfP , pcArgP , pModuloDirsP , pModuloFilesP ) ;
                            cDirsP ++ ;
                            _IO_
                        {
                        if( bDoIt )
        
                        ;
                            : 1
                            ? (*pCbfP)( tin0P , cDirsP , cFilesP , bQuitP , postNameP , pcArgP , pModuloDirsP , pModuloFilesP )
                        boolT bDoIt = pCbfP && ( !pModuloDirsP || !( cDirsP % *pModuloDirsP ) )
        
                        BOSdOnOTtEST( WHATgbo , strcat( postNameEnd , "\\" ) )
                        BOSdOnOTtEST( WHATgbo , strcpy( postNameEnd , info.cFileName ) )
                        _IO_
                    {
                    if( b1 && b2 )
                    boolT b2 = ((tin123S&)tin0P).brcRaw ;
                    BOSdOnOTtEST( WHATgbo , strcmp( info.cFileName , ".." ) )
                    boolT b1 = ((tin123S&)tin0P).brcRaw ;
                    BOSdOnOTtEST( WHATgbo , strcmp( info.cFileName , "." ) )
                    _IO_
                {
                if( !( F(flagsP) & flDISKwALK_FILESoNLY ) )
                _IO_
            {
            else if( info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )
            if( info.dwFileAttributes & FILE_ATTRIBUTE_SYSTEM ) ;
            _IO_
        {
        while( !bQuitP )
        _IO_
    {
    if( oshFind != INVALID_HANDLE_VALUE )

    }
        }
            default :                  { BOSpOOP          ; break ; }
            case ERROR_ACCESS_DENIED : { ((tin123S&)tin0P).bosFail = 0 ; break ; }
            case ERROR_HOST_UNREACHABLE :                                   //20180602@1653: ADDED TO MAKE WALK OF c :\ WORK (OTHERWISE FAILS FOR postNameP == "d:\DFSRoots\Shared Folders\Company\*")
            case ERROR_PATH_NOT_FOUND :
            case ERROR_NO_MORE_FILES :
        {
        switch( ((tin123S&)tin0P).brcQuery )
        _IO_
    {
    if( ((tin123S&)tin0P).bosFail )

    if( bRetry ) { __( ifcIDiMPOTENCEbASEeRRORcODE_NOTrEADY ) ; }
    while( bRetry && -- cDo ) ;
    }
        else if( bRetry ) bRetry = 0 ;
        }
            continue ;
            bRetry = 1 ;
            Sleep( 2000 ) ;
        {
        else if( ((tin123S&)tin0P).brcLath == ERROR_NOT_READY )
        if( !((tin123S&)tin0P).bosFail ) oshFind = (HANDLE)((tin123S&)tin0P).brcRaw ;
        BOS( WHATsfr , BOShANDLE , FindFirstFile( postNameP , &info ) )
        _IO_
    {
    do                                                 //SILENTLY RETRY 8 TIMES IF ERROR_NOT_READY
    countT cDo = 8 ;
    ZE( boolT , bRetry ) ;
    HANDLE oshFind = INVALID_HANDLE_VALUE ;
    WIN32_FIND_DATA info ;

    BOSdOnOTtEST( WHATgbo , strcpy( postNameEnd , "*" ) )
    osTextT* const postNameEnd = postNameP + costName ;
    countT         costName    = ((tin123S&)tin0P).brcRaw ;
    BOSdOnOTtEST( WHATgbo , strlen( postNameP ) )
    _IO_

    }
        if( POOP ) return ;
        FV( flDISKwALK , flagsP ) ;
        __Z( postNameP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT thirdC::diskWalkPrivateIF( tin0S& tin0P , countT& cDirsP , countT& cFilesP , osTextT* const postNameP , const boolT& bQuitP , const flagsT flagsP , diskWalkCBFT pCbfP , countT* const pcArgP , countT* pModuloDirsP , countT* pModuloFilesP )/*1*/

/**/
*/
 pModuloFilesP
 pModuloDirsP
 pcArgP
 pCbfP
 bQuitP
   recommend: use size TUCK << 1
  must be a writeable buffer large enough to hold the longest possible fully qualified directory name plus a terminating '\' followed by a terminating 0
  will be modified
 postNameP
 cFilesP
 cDirsP
 tin0P
arguments
 the callback function is also called with a null postNameP at the end of each enumeration of a directory
 all are counted except when the callback function returns 0
i walk the directory tree, counting as i go
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

