
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

        }
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tin0P , pNapkinP ) ;                                                                            \
            if( !pNapkinP ) BLAMMOiD( 0x17 ) ;                                                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , napkinC* const pNapkinP )                                                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)pbZombieP ;                                                                                                    \
            if( cbZombieP - cbP ) BLAMMOiD( 0x16 ) ;                                                                                            \
            if( !pbZombieP ) BLAMMOiD( 0x15 ) ;                                                                                                 \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , byteT* pbZombieP , const countT cbZombieP )                                    \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tin0P , idLineP , idiFileP ) ;                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , const countT idLineP , const countT idiFileP )                                 \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
                                                                                                                                                \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMOiD( 0x14 ) ;                                                                                                              \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
                                                                                                                                                \
            if( pNapkinP && *pNapkinP == ( cbaFoot + cbP ) ) pvn = (voidT*)(byteT*)*pNapkinP ;                                                  \
            ZE( voidT* , pvn ) ;                                                                                                                \
                                                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            if( !pNapkinP ) BLAMMOiD( 0x13 ) ;                                                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , napkinC* const pNapkinP )                                 \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( pbZombieP + cbaFoot ) ;                                                                                      \
            }                                                                                                                                   \
                putNegAM( *(countT*)( pbZombieP + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                           \
                putNegAM( *(countT*)pbZombieP , FINGERnEG_FOOTc1 ) ;                                                                            \
                BLAMMOiD( 0x12 ) ;                                                                                                              \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            }                                                                                                                                   \
                BLAMMOiD( 0x11 ) ;                                                                                                              \
                /*((tin123S&)tin0P).pc Utility[ 4 ] = sizeof( batonC ) ; */                                                                                  \
                /*((tin123S&)tin0P).pc Utility[ 3 ] = cbP ;              */                                                                                  \
                /*((tin123S&)tin0P).pc Utility[ 2 ] = cbaFoot ;          */                                                                                  \
                /*((tin123S&)tin0P).pc Utility[ 1 ] = cbaFoot + cbP ;    */                                                                                  \
                /*((tin123S&)tin0P).pc Utility[ 0 ] = cbZombieP ;        */                                                                                  \
            {                                                                                                                                   \
            if( cbZombieP - ( cbaFoot + cbP ) )   /* DO A FULL BUILD (REFRESH HEADERS) IF THIS HAPPENS */                                       \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            if( !pbZombieP ) BLAMMOiD( 0x10 ) ;                                                                                                 \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , byteT* pbZombieP , const countT cbZombieP )               \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMOiD( 0xf ) ;                                                                                                               \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
                                                                                                                                                \
            }                                                                                                                                   \
                ___LF( pvn , idLineP , idiFileP ) ;                                                                                             \
                PUSE.newF( tin0P , LF , *(byteT**)&pvn , ( cbaFoot + cbP ) ) ;                                                                   \
            {                                                                                                                                   \
            else                                                                                                                                \
            if( !((tin123S&)tin0P).pPoolUse ) *(byteT**)&pvn = (processGlobal4IP).heap.newF( tin0P , LF , ( cbaFoot + cbP ) ) ;                               \
            ZE( voidT* , pvn ) ;                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , const countT idLineP , const countT idiFileP )            \
                                                                                                                                                \
        }                                                                                                                                       \
            operator delete( pvP ) ;                                                                                                            \
            _IO_                                                                                                                                \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::operator delete[]( voidT* pvP )                                                                                           \
                                                                                                                                                \
        }                                                                                                                                       \
            }                                                                                                                                   \
                PUSE( tin0P , *(byteT**)&pvP ) ;                                                                                                 \
            {                                                                                                                                   \
            if( pvP && !( F(((tin123S&)tin0P).flagsThreadMode2) & flTHREADmODE2_DOnOTcaLLdELif ) )                                                           \
                                                                                                                                                \
            if( idType == ifcIDtYPEdROPnOTE_strokeS && ((strokeS*)pvP)->idCaste != sc_cADAM ) { BLAMMOiD( 0xc ) ; }                             \
            countT idType = ifcIDtYPEdROPnOTE_##typeP ;                                                                                         \
            _IO_                                                                                                                                \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::operator delete( voidT* pvP )                                                                                             \
                                                                                                                                                \
    #define NEWdELcLASS0(classP,typeP,cbSizeP,processGlobal4IP)                                                                                 \

#else

        }
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tin0P , pNapkinP ) ;                                                                            \
            if( !pNapkinP ) BLAMMOiD( 0xb ) ;                                                                                                   \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , napkinC* const pNapkinP )                                                      \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)pbZombieP ;                                                                                                    \
            if( cbZombieP - cbP ) BLAMMOiD( 0xa ) ;                                                                                             \
            if( !pbZombieP ) BLAMMOiD( 0x9 ) ;                                                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , byteT* pbZombieP , const countT cbZombieP )                                    \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = operator new( cbP , 0 , tin0P , idLineP , idiFileP ) ;                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new[]( countT cbP , tin0S& tin0P , const countT idLineP , const countT idiFileP )                                 \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
                                                                                                                                                \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMOiD( 0x8 ) ;                                                                                                               \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
                                                                                                                                                \
            if( pNapkinP && *pNapkinP == ( cbaFoot + cbP ) ) pvn = (voidT*)(byteT*)*pNapkinP ;                                                  \
            ZE( voidT* , pvn ) ;                                                                                                                \
                                                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            if( !pNapkinP ) BLAMMOiD( 0x7 ) ;                                                                                                   \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , napkinC* const pNapkinP )                                 \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( pbZombieP + cbaFoot ) ;                                                                                      \
            }                                                                                                                                   \
                putNegAM( *(countT*)( pbZombieP + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                           \
                putNegAM( *(countT*)pbZombieP , FINGERnEG_FOOTc1 ) ;                                                                            \
                BLAMMOiD( 0x6 ) ;                                                                                                               \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            if( cbZombieP - ( cbaFoot + cbP ) ) BLAMMOiD( 0x5 ) ;                                                                               \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            if( !pbZombieP ) BLAMMOiD( 0x4 ) ;                                                                                                  \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , byteT* pbZombieP , const countT cbZombieP )               \
                                                                                                                                                \
        }                                                                                                                                       \
            return pvr ;                                                                                                                        \
            voidT* pvr = (voidT*)( (byteT*)pvn + cbaFoot ) ;                                                                                    \
            }                                                                                                                                   \
                putNegAM( *(countT*)( (byteT*)pvn + cbaFoot - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;                                         \
                putNegAM( *(countT*)pvn , FINGERnEG_FOOTc1 ) ;                                                                                  \
                BLAMMOiD( 0x3 ) ;                                                                                                               \
            {                                                                                                                                   \
            if( cbaFoot )                                                                                                                       \
            __Z( pvn ) ;                                                                                                                        \
            }                                                                                                                                   \
                pNote->cbRequested  = pNote->cbUsedReally = cbaFoot + cbP ;                                                                     \
                pNote->idType       = ifcIDtYPEdROPnOTE_##typeP ;                                                                               \
            {                                                                                                                                   \
            if( pNote )                                                                                                                         \
            dropNoteS* pNote = !((tin123S&)tin0P).pPoolUse ? 0 : PUSE.pDropNoteF( tin0P , (byteT*)pvn ) ;                                                     \
                                                                                                                                                \
            }                                                                                                                                   \
                ___LF( pvn , idLineP , idiFileP ) ;                                                                                             \
                PUSE.newF( tin0P , LF , *(byteT**)&pvn , ( cbaFoot + cbP ) ) ;                                                                   \
            {                                                                                                                                   \
            else                                                                                                                                \
            if( !((tin123S&)tin0P).pPoolUse ) *(byteT**)&pvn = (processGlobal4IP).heap.newF( tin0P , LF , ( cbaFoot + cbP ) ) ;                               \
            ZE( voidT* , pvn ) ;                                                                                                                \
            countT cbaFoot = cbFootP ? cbFootP + 2 * sizeof( countT ) : 0 ;                                                                     \
            _IO_                                                                                                                                \
        {                                                                                                                                       \
        voidT* classP::operator new( countT cbP , const countT cbFootP , tin0S& tin0P , const countT idLineP , const countT idiFileP )            \
                                                                                                                                                \
        }                                                                                                                                       \
            operator delete( pvP ) ;                                                                                                            \
            _IO_                                                                                                                                \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::operator delete[]( voidT* pvP )                                                                                           \
                                                                                                                                                \
        }                                                                                                                                       \
            }                                                                                                                                   \
                PUSE( tin0P , *(byteT**)&pvP ) ;                                                                                                 \
            {                                                                                                                                   \
            if( pvP && !( F(((tin123S&)tin0P).flagsThreadMode2) & flTHREADmODE2_DOnOTcaLLdELif ) )                                                           \
                                                                                                                                                \
            if( idType == ifcIDtYPEdROPnOTE_strokeS && ((strokeS*)pvP)->idCaste != sc_cADAM ) { BLAMMOiD( 0x1 ) ; }                             \
            countT idType = ifcIDtYPEdROPnOTE_##typeP ;                                                                                         \
            _IO_                                                                                                                                \
            TINSL                                                                                                                               \
        {                                                                                                                                       \
        voidT classP::operator delete( voidT* pvP )                                                                                             \
                                                                                                                                                \
    #define NEWdELcLASS0(classP,typeP,cbSizeP,processGlobal4IP)                                                                                 \

#if defined( ENABLEdROPnOTES )

// INOUT IS NOT USED, TO AVOID BLOWING STACK DURING INOUT TRACING
//U::I NEED INOUT, SO TRY TO MAKE THIS WORK

/*1*//*NEWdELcLASS0(classP,typeP,cbSizeP,processGlobal4IP)*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

