
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    grab.ungrabF( tin0P ) ;

    }
        idLevelP = 0 ;
        (*pCallBackFP)( tin0P , ether , ifcIDtYPEtREEwALKcb_END , flagsP , handleP , 0 , idLevelP , cArgP ) ;
    {
    if( idLevelP == 1 )

    }

        }
            //MUST NOT REFER TO pHere AFTER ifcIDtYPEtREEwALKcb_BRANCHbEGIN CALBACK CAUSE CALLBACK MIGHT HAVE DELETED THE BRANCH HEADER
            (*pCallBackFP)( tin0P , ether , !bReverse ? ifcIDtYPEtREEwALKcb_BRANCHeND : ifcIDtYPEtREEwALKcb_BRANCHbEGIN , flagsP , handleP , (byteT*)( pHere + !bHeaders ) , !!bHeaders * sizeof( branchHeaderOldS ) + cbd , cArgP ) ;
    
            }
                idLevelP -- ;
                }
                    if( pPreserve ) swsk[ idklhSave ] ;

                    (*pCallBackFP)( tin0P , ether , ifcIDtYPEtREEwALKcb_WIFEeND , flagsP , handleP , (byteT*)pHere->psttLeverKids , idLevelP , cArgP ) ;
                    }
                        while( !swsk.third && !bQuitP && ~hWalk ) ;
                        }
                            walkF( tin0P , hTreeWalk , bQuitP , idLevelP , pCallBackFP , cArgP , flagsP ) ;
                            hTreeWalk.osF( ifcIDtYPEhANDLE_TREEwALK , c_pKid ) ;
                            handleC hTreeWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_TREEwALK ) ;
                            countT c_pKid = (countT)&( bReverse ? swsk.downF( tin0P , hWalk ) : swsk.upF( tin0P , hWalk ) ) ;
                        {
                        do
                        handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( swsk )
                    (*pCallBackFP)( tin0P , ether , ifcIDtYPEtREEwALKcb_WIFEbEGIN , flagsP , handleP , (byteT*)pHere->psttLeverKids , idLevelP , cArgP ) ;

                    if( pPreserve ) ((stackC&)swsk).pPlateF( tin0P , idklhSave ) ;
                    ZE( countT , idklhSave ) ;
                    psttLeverKidsShared = pHere->psttLeverKids = (strokeS*)swsk.leverF( tin0P , idf ) ;
                {
                for( countT idf = 1 ; !bQuitP && idf <= cFlavors ; idf ++ )
                countT cFlavors = swsk.cFlavorsF( tin0P ) ;
                idLevelP ++ ;
    
                switchStackC& swsk = *pHere->pSwsKids ;
            {
            if( pHere->pSwsKids )

            (*pCallBackFP)( tin0P , ether , !bReverse ? ifcIDtYPEtREEwALKcb_BRANCHbEGIN : ifcIDtYPEtREEwALKcb_BRANCHeND , flagsP , handleP , (byteT*)( pHere + !bHeaders ) , !!bHeaders * sizeof( branchHeaderOldS ) + cbd , cArgP ) ;
        {
        if( pHere )
        branchHeaderOldS* pHere = (branchHeaderOldS*)handleP.osF( ifcIDtYPEhANDLE_TREEwALK ) ;
        if( !handleP ) handleP.osF( ifcIDtYPEhANDLE_TREEwALK , (countT)pCursor ) ;
        boolT pPreserve = F(flagsP) & flTREEwALK_PRESERVElATHrEF ;
        boolT bHeaders  = F(flagsP) & flTREEwALK_HEADERS ;
        boolT bReverse  = F(flagsP) & flTREEwALK_REVERSE ;
    {
    if( pCursor )
    PcURSOR

    }
        (*pCallBackFP)( tin0P , ether , ifcIDtYPEtREEwALKcb_BEGIN , flagsP , handleP , 0 , idLevelP , cArgP ) ;
        idLevelP = 1 ;
    {
    if( !idLevelP )

    *sw_pCursor.pLeverLathRefF( tin0P ) = cLeverCursor ;
    grab.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    }
        if( POOP ) return ;
        FV( flTREEwALK , flagsP ) ;
        __Z( pCallBackFP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    //0 IMPLIES WALK THE pCursor BRANCH
    //ASSUME: handleP IS EITHER 0 OR POINTS TO THE branchHeaderOldS OBJECT WHOSE KIDS ARE TO BE WALKED
{
/*1*/voidT treeOldC::walkF( tin0S& tin0P , handleC& handleP , const boolT& bQuitP , countT& idLevelP , treeOldCBFT pCallBackFP , countT& cArgP , const flagsT flagsP )/*1*/

/**/
*/
  must not be 0
 pCallBackFP
 bHeadersP
 bReverseP
 cArgP
  must be 0 except when i call myself
 idLevelP
 bQuitP
 handleP
 tin0P
arguments
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

