
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    diskZipNewF( tinP , etThread , "zippy.zip" , "*.txt" , "b.txt" , 0 , 0 , 0 ) ;

    hoverC hover( tinP , etThread , T("///d/tmp/zipplay/") ) ;
{


TODO

}
    etThread.traceF( tinP , T("zip ")+tArgsInfoZip ) ;

    TN( tArgsInfoZip , "" ) ; tArgsInfoZip = (postOptionsPKZipP?T(postOptionsPKZipP):tn)+tb+T(postZipP)+tb+T(postWildP)+(postWildIncludeP?T(" -i ")+T(postWildIncludeP):tn)+(postWildExcludeP?T(" -x ")+T(postWildExcludeP):tn) ;

    // ARGS FOR INFOZIP: [postOptionsPKZipP] [postZipP] [postWildP] -i [postWildIncludeP] -x [postWildExcludeP]

    // infozip: zip    [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list]              [-xi list]

    etThread.traceF( tinP , T("pkzipc ")+tArgsPKZip ) ;

    TN( tArgsPKZip , "" ) ; tArgsPKZip = T("-add")+(postOptionsPKZipP?tb+T(postOptionsPKZipP):tn)+(postWildIncludeP?T(" -include:\"")+T(postWildIncludeP)+tq:tn)+(postWildExcludeP?T(" -exclude:\"")+T(postWildExcludeP)+tq:tn)+tb+T(postZipP)+tb+T(postWildP) ;

    // ARGS FOR PKZIP: -add [postOptionsPKZipP] -include:"[postWildIncludeP]" -exclude:"[postWildExcludeP]" [postZipP] [postWildP]

    // pkzipc : PKZIPC [command] [options] zipfile [@list] [files...]

    TN( tq , "\"" ) ;
    TN( tb , " " ) ;
    TN( tn , "" ) ;

    etThread.traceF( tinP , T("[postOptionsInfoZipP]:    ")+T(postOptionsInfoZipP) ) ;
    etThread.traceF( tinP , T("[postOptionsPKZipP]  :    ")+T(postOptionsPKZipP  ) ) ;
    etThread.traceF( tinP , T("[postWildExcludeP]   :    ")+T(postWildExcludeP   ) ) ;
    etThread.traceF( tinP , T("[postWildIncludeP]   :    ")+T(postWildIncludeP   ) ) ;
    etThread.traceF( tinP , T("[postWildP]          :    ")+T(postWildP          ) ) ;
    etThread.traceF( tinP , T("[postZipP]           :    ")+T(postZipP           ) ) ;

    etherC& etThread = *((tinNormalS&)tinP).pEther ;
{
voidT diskZipNewF( tinNormalS& tinP , thirdC& thirdP , const osTextT* postZipP , const osTextT* postWildP , const osTextT* postWildIncludeP , const osTextT* postWildExcludeP , const osTextT* postOptionsPKZipP , const osTextT* postOptionsInfoZipP )

/*1*/WAKEsHOWtEXT( "scratch" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
