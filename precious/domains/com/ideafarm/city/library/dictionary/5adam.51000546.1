
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.strokeF( tinBaseP , T("aok\r\n") ) ;
}
    etThread.loafIF( tinBaseP ) ;

    tree2.walkF( tinBaseP , hWalk , ether , countTC() , myTreeCallBackF , cArg ) ;
    etThread.strokeF( tinBaseP , T("walking tree2 -----------------------------------------------\r\n") ) ;
    ZE( countT , cArg ) ;
    handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_TREEwALK ) ;

    etThread( tinBaseP , psBranch ) ;
    tree2.readF( tinBaseP , *psBranch ) ;
    etThread.strokeF( tinBaseP , T("reading into tree2 -----------------------------------------------\r\n") ) ;
    tree2.readF( tinBaseP , *psBranch ) ;
    etThread.strokeF( tinBaseP , T("reading into tree2 -----------------------------------------------\r\n") ) ;
    treeOldC tree2( tinBaseP , TAG( TAGiDnULL ) ) ;

    }
        tree.writeF( tinBaseP , *psBranch ) ;
        etThread.strokeF( tinBaseP , T("writing tree -----------------------------------------------\r\n") ) ;
        etThread( tinBaseP , psBranch , TAG( TAGiDnULL ) ) ;
        
        //tree.newKidF( tinBaseP , T("ac") ) ;
        //tree.downF( tinBaseP ) ;
        //tree.newKidF( tinBaseP , T("a2bc") ) ;
        //tree.newKidF( tinBaseP , T("a2bb") ) ;
        //tree.newKidF( tinBaseP , T("a2ba") ) ;
        //tree.upF( tinBaseP );
        //tree.newKidF( tinBaseP , T("a2b") ) ;
        //tree.newKidF( tinBaseP , T("a2a") ) ;
        //tree.wifeF( tinBaseP , T("sally2") ) ;
        //tree.newKidF( tinBaseP , T("a1b") ) ;
        //tree.newKidF( tinBaseP , T("a1a") ) ;
        //tree.wifeF( tinBaseP , T("sally1") ) ;
        //tree.newKidF( tinBaseP , T("a") ) ;
        //U::AOK FOR READ INTO VIRGIN

        tree.newKidF( tinBaseP , T("ac") ) ;
        tree.newKidF( tinBaseP , T("ab") ) ;
        tree.newKidF( tinBaseP , T("aa") ) ;
        tree.newKidF( tinBaseP , T("a") ) ;

        treeOldC tree( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    ZE( soulC* , psBranch ) ;
{

TODO

}
    if( cbP && flagsP && ((tinFullS&)tinBaseP).fingerprint && etherP ) ;

    }
        case ifcIDtYPEtREEwALKcb_WIFEeND   : {                                          /*etherP.strokeF( tinBaseP , T("wifeend:\r\n")                               ) ;*/ break ; }
        case ifcIDtYPEtREEwALKcb_WIFEbEGIN : { if( cArgP ) sBranch <<   (strokeS*)pbP ; /*etherP.strokeF( tinBaseP , T("wife   : \"")+T((strokeS*)pbP)+T("\"\r\n")   ) ;*/ break ; }
        case ifcIDtYPEtREEwALKcb_BRANCHbEGIN    : { if( cArgP ) sBranch << *(strokeS**)pbP ; /*etherP.strokeF( tinBaseP , T("branch : \"")+T(*(strokeS**)pbP)+T("\"\r\n") ) ;*/ break ; }
    {
    switch( idTypeP )

    if( cArgP ) sBranch << idTypeP ;
    soulC& sBranch = *(soulC*)cArgP ;
{
voidT myTreeCallBackF( tinBaseS& tinBaseP , etherC& etherP , const countT idTypeP , const flagsT flagsP , byteT* pbP , countT cbP , countT& cArgP )

/*1*/WAKEsHOW( "example.other.snip.0030094.treeOldC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

