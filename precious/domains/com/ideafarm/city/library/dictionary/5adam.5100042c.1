
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        etThread.delF( tin0P , *(nicNameC**)&tblAdam( idr , 2 ).c2 ) ;
    {
    for( countT idr = 1 ; idr <= cRows ; idr ++ )
    countT cRows = tblAdam.cRowsF( tin0P ) ;
{

}
    }
        DEL(                   *(stackC**)&tblHost(          idr , 9 ).c2 ) ;
        etThread.delF( tin0P , *(nicNameC**)&tblHost(          idr , 8 ).c2 ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 7 )    ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 6 )    ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 5 )    ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 4 )    ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 3 )    ) ;
        etThread.delF( tin0P ,              tblHost._CT1_07F( idr , 2 )    ) ;
    {
    for( countT idr = 1 ; idr <= cRows ; idr ++ )
    countT cRows = tblHost.cRowsF( tin0P ) ;
{

!tblAdam ;
!tblHost ;

}
    sChat2.writeF( tin0P , soulo3 ) ;
    soulC soulo3( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_BYE ) ;

    }
        }
            }
                }
                    tblAdam.newObjectF( tin0P , *pNicName ) ;
                    tblAdam.newObjectF( tin0P , idAdam   ) ;
                    tblAdam.newEventF( tin0P ) ;
                    *pNicName = idhLever ;
                {
                if( pNicName )
                etThread.newF( tin0P , LF , pNicName ) ; ___( pNicName ) ;
                ZE( nicNameC* , pNicName ) ;

                sws_idAdam << idAdam ;
                sIn2 >> idAdam ;
                ZE( countT , idAdam ) ;
            {
            while( cAdams -- )

            sIn2 >> cAdams ;
            ZE( countT , cAdams ) ;

            sIn2 >> idhLever ;
            idhLever = 0 ;
        {
        while( cFlavors -- )

        sIn2 >> cFlavors ;
        ZE( countT , cFlavors ) ;
    {
    switchStackC sws_idAdam( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idhLever ) ;
    nicNameC idhLever ;

    __( idReply - ifcIDcMDsESSION_QUERYaDAMSrEPLY ) ;
    sIn2 >> idReply ;
    idReply = 0 ;

    sChat2.readF( tin0P , sIn2 ) ;
    sChat2.writeF( tin0P , sOut2 ) ;
    soulC sOut2( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_QUERYaDAMS ) ;
    soulC sIn2( tin0P , TAG( TAGiDnULL ) ) ;

    }
        }
            tblHost.newObjectF( tin0P , *pStk_pNicName ) ;
            }
                }
                    *pStk_pNicName << pNicName ;
                    sIn1 >> *pNicName ;
                    *pNicName = 0 ;
                {
                if( pNicName )
                etThread.newF( tin0P , LF , pNicName ) ; ___( pNicName ) ;
                ZE( nicNameC* , pNicName ) ;
            {
            while( cNicName -- )
            sIn1 >> cNicName ;
            ZE( countT , cNicName ) ;

            tblHost.newObjectF( tin0P , *pNicNameRegistrand     ) ;
            tblHost.newObjectF( tin0P , psttOldCommentUsedByIFC   ) ;
            tblHost.newObjectF( tin0P , psttOldCommentUsedByOwner ) ;
            tblHost.newObjectF( tin0P , psttNameUsedByInternet ) ;
            tblHost.newObjectF( tin0P , psttNameUsedByIFC      ) ;
            tblHost.newObjectF( tin0P , psttNameUsedByOwner    ) ;
            tblHost.newObjectF( tin0P , psttEmailOwner         ) ;
            tblHost.newObjectF( tin0P , idComputer             ) ;
            tblHost.newEventF( tin0P ) ;

            sIn1 >> *pNicNameRegistrand     ;
            sIn1 >> psttOldCommentUsedByIFC   ; ___( psttOldCommentUsedByIFC   ) ;
            sIn1 >> psttOldCommentUsedByOwner ; ___( psttOldCommentUsedByOwner ) ;
            sIn1 >> psttNameUsedByInternet ; ___( psttNameUsedByInternet ) ;
            sIn1 >> psttNameUsedByIFC      ; ___( psttNameUsedByIFC      ) ;
            sIn1 >> psttNameUsedByOwner    ; ___( psttNameUsedByOwner    ) ;
            sIn1 >> psttEmailOwner         ; ___( psttEmailOwner         ) ;
            sIn1 >> idComputer             ;

            ZE( strokeS* , psttOldCommentUsedByIFC   ) ;
            ZE( strokeS* , psttOldCommentUsedByOwner ) ;
            ZE( strokeS* , psttNameUsedByInternet ) ;
            ZE( strokeS* , psttNameUsedByIFC      ) ;
            ZE( strokeS* , psttNameUsedByOwner    ) ;
            ZE( strokeS* , psttEmailOwner         ) ;
            ZE( countT   , idComputer             ) ;

            *pNicNameRegistrand = 0 ;
        {
        if( pNicNameRegistrand && pStk_pNicName )
        stackC* pStk_pNicName = new( 0 , tin0P , LF ) stackC( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_nicNameC ) ;
        etThread.newF( tin0P , LF , pNicNameRegistrand ) ; ___( pNicNameRegistrand ) ;
        ZE( nicNameC* , pNicNameRegistrand ) ;
    {
    while( cHosts -- )

    sIn1 >> cHosts ;
    ZE( countT , cHosts ) ;

    __( idReply - ifcIDcMDsESSION_QUERYnICnAMErEPLY ) ;
    sIn1 >> idReply ;
    ZE( countT , idReply ) ;

    sChat2.readF( tin0P , sIn1 ) ;
    sChat2.writeF( tin0P , sOut1 ) ;
    soulC sOut1( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_QUERYnICnAME ) ;
    soulC sIn1( tin0P , TAG( TAGiDnULL ) ) ;

    sChat2.connectF( tin0P , idPort2 , idhIfc ) ;
    socketC sChat2( tin0P , etThread , TAG( TAGiDnULL ) ) ;

    }
        souli >> idPort2 ;
        __( idReply - ifcIDcMDsESSION_NEWsOCKETrEPLY ) ;
        souli >> idReply ;
        ZE( countT , idReply ) ;
        sChat.readF( tin0P , souli ) ;
        soulC souli( tin0P , TAG( TAGiDnULL ) ) ;

        sChat.writeF( tin0P , soulo ) ;
        soulC soulo( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_NEWsOCKET ) ;

        sChat.connectF( tin0P , ifcPORToLD2_CHAT , idhIfc ) ;
        socketC sChat( tin0P , etThread , TAG( TAGiDnULL ) ) ;
    {
    ZE( countT , idPort2 ) ;
    nicNameC idhIfc = socketC::nicNameIF( tin0P , etThread , T("www.ideafarm.com") ) ;

    tblAdam.newColF( tin0P , T("nicName") ) ;
    tblAdam.newColF( tin0P , T("idAdam") ) ;

    tblHost.newColF( tin0P , T("nicNameAll") ) ;
    tblHost.newColF( tin0P , T("nicNameRegistrand") ) ;
    tblHost.newColF( tin0P , T("commentUsedByIFC") ) ;
    tblHost.newColF( tin0P , T("commentUsedByOwner") ) ;
    tblHost.newColF( tin0P , T("nameUsedByInternet") ) ;
    tblHost.newColF( tin0P , T("nameUsedByIFC") ) ;
    tblHost.newColF( tin0P , T("nameUsedByOwner") ) ;
    tblHost.newColF( tin0P , T("emailOwner") ) ;
    tblHost.newColF( tin0P , T("idComputer") ) ;
{
tableC tblAdam( tin0P , etThread , T("adamCells") ) ;
tableC tblHost( tin0P , etThread , T("host" ) ) ;

TODO

/*1*/WAKEhIDE( "example.simplest.query.hosts.and.adams" )/*1*/
/**/
*/
obsoleted by f240104
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

