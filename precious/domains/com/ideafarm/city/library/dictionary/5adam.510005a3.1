
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    etThread.delF( tinBaseP , pbChunk ) ;
    DEL( pInfo ) ;
    }
        CONoUTrAW( postb ) ;
        DEL( pso ) ;
        pso->readWoLineF( tinBaseP , countTC() , postb , sizeof postb ) ;
        osTextT postb[ TUCK ] ;
        
        }
            cbFile -= cbChunk ;
            pso->writeF( tinBaseP , pbChunk , cbChunk ) ;
            etThread.fileReadF( tinBaseP , pbChunk , cbChunk , hFile ) ;
            countT cbChunk = cbFile < CBcHUNK ? cbFile : CBcHUNK ;
        {
        while( cbFile )
    
        pso->writeF( tinBaseP , (byteT*)&cbFile , sizeof cbFile ) ;
        
        CONoUTrAW( "client connection accepted\r\n" ) ;
        sOut.acceptF( tinBaseP , pso , countTC() , nicNameC() , countTC() ) ; ___( pso ) ;
        ZE( socketC* , pso ) ;
        sOut.listenF( tinBaseP ) ;
        etThread.strokeF( tinBaseP , T("listening on port ")+TF2(idPort,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
        countT idPort = sOut.bindF( tinBaseP , 81 ) ;
        socketC sOut( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    
        countT cbFile = pInfo->cbUsed ;
    {
    if( pInfo && pbChunk )
    etThread.newF( tinBaseP , LF , pbChunk , CBcHUNK ) ; ___( pbChunk ) ;
    ZE( byteT* , pbChunk ) ;
    etThread.diskFileQueryF( tinBaseP , pInfo , hFile ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;
    etThread.fileOpenF( tinBaseP , hFile , countTC() , T("///d/tmp/blob.out") , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO ) ;
    handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
{
else
}
    etThread.delF( tinBaseP , pbChunk ) ;
    DEL( pInfo ) ;
    }
        CONoUTrAW( postb ) ;
        sOut.readWoLineF( tinBaseP , countTC() , postb , sizeof postb ) ;
        osTextT postb[ TUCK ] ;
        
        }
            cbFile -= cbChunk ;
            sOut.writeF( tinBaseP , pbChunk , cbChunk ) ;
            etThread.fileReadF( tinBaseP , pbChunk , cbChunk , hFile ) ;
            countT cbChunk = cbFile < CBcHUNK ? cbFile : CBcHUNK ;
        {
        while( cbFile )
    
        sOut.writeF( tinBaseP , (byteT*)&cbFile , sizeof cbFile ) ;
        CONoUTrAW( "connected\r\n" ) ;
        sOut.connectF( tinBaseP , 81 , socketC::nicNameIF( tinBaseP , etThread , T("72.167.92.180") ) ) ;
        CONoUTrAW( "connecting\r\n" ) ;
        sOut.bindF( tinBaseP ) ;
        socketC sOut( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    
        countT cbFile = pInfo->cbUsed ;
    {
    if( pInfo && pbChunk )
    etThread.newF( tinBaseP , LF , pbChunk , CBcHUNK ) ; ___( pbChunk ) ;
    ZE( byteT* , pbChunk ) ;
    etThread.diskFileQueryF( tinBaseP , pInfo , hFile ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;
    etThread.fileOpenF( tinBaseP , hFile , countTC() , T("///d/tmp/blob.out") , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO ) ;
    handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
{
if( bLaptop )

const boolT bCenter = IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 == etThread.diskIdF( tinBaseP , T("///c") ) ;
const boolT bLaptop = IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0     == etThread.diskIdF( tinBaseP , T("///c") ) ;

TODO

#define CBcHUNK TOCK

/*1*/WAKEsHOWtEXT( "tool.blob.out" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

