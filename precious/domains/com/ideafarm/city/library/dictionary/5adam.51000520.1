
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.delF( tin0P , pbOut ) ;
etThread.delF( tin0P , pbIn ) ;
etThread.delF( tin0P , pcCode ) ;

//etThread.strokeF( tin0P , T("out: \"")+T(pbOut)+T("\"\r\nin:  \"")+T(pbIn)+T("\"\r\n") ) ;

etThread.boxPutF( tin0P , T("///d/test.copy") , pbIn , cbIn ) ;
etThread.strokeF( tin0P , T("done\r\n") ) ;

dad( tin0P , pbIn , cbIn , pcCode , ccCode ) ; ___( pbIn ) ;
ZE( countT , cbIn ) ;
ZE( byteT* , pbIn ) ;
etThread.strokeF( tin0P , T("phase 2: decoding\r\n") ) ;

//etThread.strokeF( tin0P , T("\r\n") ) ;
//for( countT off = 0 ; off < ccCode ; off ++ ) etThread.strokeF( tin0P , TF3(pcCode[off],flFORMAT_UNSIGNED,8)+T(off%8==7?"\r\n":" ") ) ;
//etThread.strokeF( tin0P , T("code:\r\n") ) ;

etThread.boxPutF( tin0P , T("///d/test.codes") , (byteT*)pcCode , ccCode * sizeof( countT ) ) ;

mom( tin0P , pcCode , ccCode , pbOut , cbOut ) ; ___( pcCode ) ;
ZE( countT  , ccCode ) ;
ZE( countT* , pcCode ) ;
etThread.strokeF( tin0P , T("phase 1: encoding\r\n") ) ;

etThread.boxGetShadowF( tin0P , pbOut , cbOut , T("///d/test") ) ; ___( pbOut ) ;
ZE( countT , cbOut ) ;
ZE( byteT* , pbOut ) ;
//byteT*  pbOut   = "wxyzwxyzwxyz" ;

spouseC dad( tin0P , etThread ) ;
spouseC mom( tin0P , etThread ) ;

TODO

}
    }
        pbP[ off ] = 0 ;
        for( countT off = 0 ; off < ccP ; off ++ ) pbP[ off ] = (*this)( tin0P , pcP[ off ] ) ;
    {
    if( pbP )
    ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
    cbP = ccP ;
    if( !ccP ) ccP = ether.strBodyLengthF( tin0P , pcP ) ;
{
voidT spouseC::operator ()( tin0S& tin0P , byteT*& pbP , countT& cbP , const countT* const pcP , countT ccP )

}
    if( pcP ) for( countT off = 0 ; off < cbP ; off ++ ) pcP[ off ] = (*this)( tin0P , pbP[ off ] ) ;
    ether.newF( tin0P , LF , pcP , ccP ) ; ___( pcP ) ;
    ccP = cbP ;
    if( !cbP ) cbP = ether.strBodyLengthF( tin0P , pbP ) ;
{
voidT spouseC::operator ()( tin0S& tin0P , countT*& pcP , countT& ccP , const byteT* const pbP , countT cbP )

}
    return bb ;

    pbInAll[ offIn ++ ] = bb ;

    byteT bb = pbInAll[ offPrior ] ;

    if( !( offIn % 0x100 ) ) { CONoUTrAW( "." ) ; }

    countT offPrior = offIn - cP ;

    }
        offIn ++ ;
        pbInAll[ offIn ] = (byteT)offIn ;
    {
    while( offIn < 0x100 )
{
byteT spouseC::operator ()( tin0S& tin0P , const countT cP ) //"dad" LISTENER, DECODER

}
    return ( offIn ++ ) - code ; //SET code TO THE BACKWARD OFFSET OF THE OCCURANCE

    swsOff << offIn ;

    else                 code = bP ;
    else if( swsOff )    code = swsOff[ 1 ] ;
    if( swsOff > 0x100 ) swsOff >> code ;
    lever = bP ;
    ZE( countT , code ) ; //SET code TO THE ABSOLUTE OFFSET OF AN EARLIER OCCURANCE

    if( !offIn ) offIn = 0x100 ;
{
countT spouseC::operator ()( tin0S& tin0P , const byteT bP ) //"mom" TALKER, ENCODER

}
    ether.memSetF( tin0P , pbInAll , cbInAllMax + 1 ) ;
    ether.newF( tin0P , LF , pbInAll , cbInAllMax + 1 ) ; ___( pbInAll ) ;
    cbInAllMax = 0x10000 ;
{
cbInAllMax( 0 )
cbInAll( 0 ) ,
pbInAll( 0 ) ,
offIn( 0 ) ,
swsOff( tin0P , etherP , TAG( TAGiDnULL ) , flSTACKc_null , lever , flSTACKc_FIFO ) ,
lever( 0 ) ,
ether( etherP ) ,
spouseC::spouseC( tin0S& tin0P , etherC& etherP ) :

}
    ether.delF( tin0P , pbInAll ) ;
    TINSL
{
spouseC::~spouseC( voidT )

;
}
  voidT operator ()( tin0S& tin0P , byteT*& pbP , countT& cbP , const countT* const pcP , countT ccP ) ;
  voidT operator ()( tin0S& tin0P , countT*& pcP , countT& ccP , const byteT* const pbP , countT cbP = 0 ) ;
 /*utilities*/

  byteT operator ()( tin0S& tin0P , const countT cP ) ; //IF THIS IS USED, CALL THE OBJECT "dad" (LISTENER)
  countT operator ()( tin0S& tin0P , const byteT bP ) ; //IF THIS IS USED, CALL THE OBJECT "mom" (TALKER)
 /*encode,decode*/ //EACH spouseC OBJECT IS EITHER THE TALKER (ENCODER,MOM) OR THE LISTENER (DECODER,DAD)

  spouseC( tin0S& tin0P , etherC& etherP ) ;
  ~spouseC( voidT ) ;
 /*birth,death*/

 public :

 countT       cbInAllMax ;
 countT       cbInAll ;
 byteT*       pbInAll ;
 countT       offIn ;
 switchStackC swsOff ;
 countT       lever ;
 etherC&      ether ;
{
class spouseC

/*1*/WAKEhIDE( "doodle.spouseC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

