
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

THREADmODE3rESTORE
}
    }
        }
            }
                else       etThread.osThreadF( TaRG1( tmcSerialNumberServeF ) , (countT)pso , (countT)&puseList ) ;
                if( POOP ) { DEL( pso ) ; }
                __( bRefuse ) ;
                socket.acceptF( tinBaseP , pso , idPortPeer , nnPeer , bRefuse ) ; ___( pso ) ;
                ZE( boolT , bRefuse ) ;
                ZE( countT , idPortPeer ) ;
                nicNameC nnPeer ;
                ZE( socketC* , pso ) ;
            {
            while( !ether && !POOP )
    
            //etThread.osThreadF( TaRG1( tmTestF ) ) ;
        
            socket.listenF( tinBaseP ) ;
            homeS::homeIF().idPortSerialNumberDispenser = socket.bindF( tinBaseP ) ;
            socketC socket( tinBaseP , *((tinFullS&)tinBaseP).pEtScratch , TAG( TAGiDnULL ) ) ;
        {
        while( !ether )
    {
    IFsCRATCH
    
    /*PROD*/ ether.osThreadAdamF( tinBaseP , ifcIDaDAM_LISTsERVEReMAILiDaCCOUNT ) ; //PRODUCTION
    
    puseC puseWork( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;
    puseC puseList( tinBaseP , "list.serialname.cref" , flPOOLc_null , ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) ) ;
{
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

TODO

DONE( tmcSerialNumberServeF )

}
    }
        DEL( psoP ) ;
        if( POOP ) POOPR

        }
            psoP->writeF( tinBaseP , sOut ) ;
            }
                }
                    break ;
                    __1 ;
                    __( idCmd ) ;
                {
                default :
                }
                    break ;

                    sOut << idSerial ;
                    }
                        PUSE( tinBaseP , *(byteT**)&pczList ) ;
                        }
                            THREADmODE3rESTORE
                            }
                                idSerial = 1 + incv02AM( C F( listC::countIF( tinBaseP , hRec , "idSerial" ) ) ) ;
                                listC::openIF( tinBaseP , hRec , pczList ) ;
                                handleC hRec( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                            
                                grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;

                                puseC puseList( puseListP ) ;
                            {
                            THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

                            //CONoUTrAW( T(pczList)+T("\r\n") ) ;
                            etherC::strStretchIF( tinBaseP , pczList , count8S( LISTnAMEsYS_ROOTaPPLICATION ) , pczName ) ;
                            pczList[ offo ] = 0 ;
                            for( countT offo = 0 ; offo < ccList ; offo ++ ) pczList[ offo ] = LISTnAMEsYS_PLACEhOLDER ;
                        {
                        if( pczList )
                        countT* pczList = (countT*)PUSE.newF( tinBaseP , LF , sizeof( countT ) * ( ccList + 1 ) ) ; ___( pczList ) ;
                        const countT ccList = 1 + thirdC::c_strlenIF( tinBaseP , pczName ) ;
                    {
                    if( pczName && *pczName )
                    ZE( countT , idSerial ) ;

                    sIn >> pczName ;
                    ZE( countT* , pczName ) ;
                {
                case ifcIDcMDsERIALnUMBERdISPENSER_DISPENSEnAMEcOUNTsTRING :
                }
                    break ;

                    sOut << idSerial ;
                    PUSE( tinBaseP , *(byteT**)&psttName ) ;
                    }
                        PUSE( tinBaseP , *(byteT**)&pczList ) ;
                        }
                            THREADmODE3rESTORE
                            }
                                idSerial = 1 + incv02AM( C F( listC::countIF( tinBaseP , hRec , "idSerial" ) ) ) ;
                                listC::openIF( tinBaseP , hRec , pczList ) ;
                                handleC hRec( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                            
                                grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;

                                puseC puseList( puseListP ) ;
                            {
                            THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

                            //CONoUTrAW( T(pczList)+T("\r\n") ) ;
                            etherC::strStretchIF( tinBaseP , pczList , count8S( LISTnAMEsYS_ROOTaPPLICATION ) , T(psttName) ) ;
                            pczList[ offo ] = 0 ;
                            for( countT offo = 0 ; offo < ccList ; offo ++ ) pczList[ offo ] = LISTnAMEsYS_PLACEhOLDER ;
                        {
                        if( pczList )
                        countT* pczList = (countT*)PUSE.newF( tinBaseP , LF , sizeof( countT ) * ( ccList + 1 ) ) ; ___( pczList ) ;
                        const countT ccList = 1 + psttName->idAdam ;
                    {
                    if( psttName && psttName->idAdam )
                    ZE( countT , idSerial ) ;

                    sIn >> psttName ; ___( psttName ) ;
                    ZE( strokeS* , psttName ) ;
                {
                case ifcIDcMDsERIALnUMBERdISPENSER_DISPENSEnAMEsTROKEsTRING :
            {
            switch( idCmd )

            sOut << (countT)1 ; //idFormat
            sOut << (countT)FINGERnEG_SERIALnUMBERdISPENSERrEPLY ;
            soulC sOut( tinBaseP , TAG( TAGiDnULL ) ) ;

            sIn >> idCmd ;
            ZE( countT , idCmd ) ;

            __( idFormat - 1 ) ;
            sIn >> idFormat ;
            ZE( countT , idFormat ) ;

            __( finger - FINGERnEG_SERIALnUMBERdISPENSERcMD ) ;
            sIn >> finger ;
            ZE( countT , finger ) ;

            if( POOP ) break ;
            psoP->readF( tinBaseP , sIn ) ;
            soulC sIn( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        while( !ether && !POOP )

        psoP->etherF( tinBaseP , *((tinFullS&)tinBaseP).pEtScratch ) ;
        SCOOPS
    {
    IFsCRATCH

    puseC&    puseListP =  *(puseC*)pTaskP->c2 ;
    socketC*  psoP      = (socketC*)pTaskP->c1 ;
    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmcSerialNumberServeF )

#endif

DONE( tmTestF )
}
    if( idPortP ) ;

    FIREmYSELF ; //U::FOR TESTING

    CONoUTrAW( T("[idSerial,serial]: ")+TF3(idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+tSerialName+T("\r\n") ) ;
    sIn >> idSerial ;
    ZE( countT , idSerial ) ;

    __( idFormat - 1 ) ;
    sIn >> idFormat ;
    ZE( countT , idFormat ) ;

    __( finger - FINGERnEG_SERIALnUMBERdISPENSERrEPLY ) ;
    sIn >> finger ;
    ZE( countT , finger ) ;

    sock.readF( tinBaseP , sIn ) ;
    soulC sIn( tinBaseP , TAG( TAGiDnULL ) ) ;

    sock.writeF( tinBaseP , sOut ) ;

    sOut << (strokeS*)tSerialName ;
    sOut << (countT)ifcIDcMDsERIALnUMBERdISPENSER_DISPENSEnAMEsTROKEsTRING ;
    sOut << (countT)1 ;
    sOut << (countT)FINGERnEG_SERIALnUMBERdISPENSERcMD ;
    soulC sOut( tinBaseP , TAG( TAGiDnULL ) ) ;

    TN( tSerialName , "serial.number.idAccount" ) ;

    sock.connectF( tinBaseP , homeS::homeIF().idPortSerialNumberDispenser ) ;
    socketC sock( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;

    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 )
TASK( tmTestF )

#if defined( NEVERdEFINED )

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_DOMAINsERIALnUMBERdISPENSER" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

