
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

        }
            }                                                                           \
                }                                                                       \
                    }                                                                   \
                        thirdC::c_memsetIF( tinBaseP , (byteT*)pP , cba ) ;                 \
                        /*ENSURES NO sc_cADAM CASTE VALUES*/                            \
                    {                                                                   \
                    if( idType == ifcIDtYPEdROPnOTE_strokeS )                           \
                    countT idType = idTypeP ;                                           \
                {                                                                       \
                if( pP )                                                                \
                poolNewF( tinBaseP , idLineP , idiFileP , *(byteT**)&pP , cba ) ; /*___( pP ) ; CALLER MUST TAG*/ \
                countT cba = cP * NDsIZEoF( typeP ) ;                                   \
            {                                                                           \
            if( !*this )                                                                \
                                                                                        \
            }                                                                           \
                __( cP ) ;                                                              \
            {                                                                           \
            if( ( (countT)(-1) >> 1 ) / NDsIZEoF( typeP ) <= cP ) /*NOT ADDRESSABLE*/   \
                                                                                        \
            DROPnOTEdOESnOTwANTmE                                                       \
            _IO_                                                                        \
        {                                                                               \
        voidT thirdC::newF( tinBaseS& tinBaseP , const countT idLineP , const countT idiFileP , typeP*& pP , const countT cP )                 \
                                                                                        \
        }                                                                               \
            if( pP ) pP = 0 ;                                                           \
            poolDelF( tinBaseP , (voidT*)pP ) ;                                             \
                                                                                        \
            }                                                                           \
                }                                                                       \
                    else if( ((strokeS*)pP)[ off ].idCaste == sc_cADAMeXPORT ) off += ((strokeS*)pP)[ off ].idAdam ; \
                    }                                                                   \
                        DELzOMBIE( pstta ) ;                                            \
                        strokeS* pstta = ((strokeS*)pP) + off ;                         \
                    {                                                                   \
                    if( ((strokeS*)pP)[ off ].idCaste == sc_cADAM )                     \
                {                                                                       \
                for( countT off = CSpREFIX ; off < offe ; off ++ )                      \
                const countT offe = CSpREFIX + csttw ;                                  \
                const countT csttw = ((strokeS*)pP)->idAdam ;                           \
            {                                                                           \
            if( idType == ifcIDtYPEdROPnOTE_strokeS && pP )                             \
            countT idType = idTypeP ;                                                   \
            _IO_                                                                        \
        {                                                                               \
        voidT thirdC::delF( tinBaseS& tinBaseP , typeP*& pP )                                   \
                                                                                        \
    #define NEWdELtYPEtHIRD(typeP,idTypeP)                                              \

#else

        }
            }                                                                           \
                }                                                                       \
                    }                                                                   \
                        thirdC::c_memsetIF( tinBaseP , (byteT*)pP , cba ) ;                 \
                        /*ENSURES NO sc_cADAM CASTE VALUES*/                            \
                    {                                                                   \
                    if( idType == ifcIDtYPEdROPnOTE_strokeS )                           \
                    countT idType = idTypeP ;                                           \
                                                                                        \
                    }                                                                   \
                        pNote->cbRequested  = pNote->cbUsedReally = cba ;               \
                        pNote->idType       = ifcIDtYPEdROPnOTE_##typeP ;               \
                    {                                                                   \
                    if( pNote )                                                         \
                    dropNoteS* pNote = PUSE.pDropNoteF( tinBaseP , (byteT*)pP ) ;           \
                    _IO_                                                                \
                {                                                                       \
                if( pP )                                                                \
                poolNewF( tinBaseP , idLineP , idiFileP , *(byteT**)&pP , cba ) ; ___LF( pP , idLineP , idiFileP ) ; \
                countT cba = cP * NDsIZEoF( typeP ) ;                                   \
                _IO_                                                                    \
            {                                                                           \
            if( !*this )                                                                \
                                                                                        \
            }                                                                           \
                __( cP ) ;                                                              \
            {                                                                           \
            if( ( (countT)(-1) >> 1 ) / NDsIZEoF( typeP ) <= cP ) /*NOT ADDRESSABLE*/   \
                                                                                        \
            DROPnOTEdOESnOTwANTmE                                                       \
            if( !((tinNormalS&)tinBaseP).pPoolUse ) { BLAMMO ; }                                           \
            _IO_                                                                        \
        {                                                                               \
        voidT thirdC::newF( tinBaseS& tinBaseP , const countT idLineP , const countT idiFileP , typeP*& pP , const countT cP )                 \
                                                                                        \
        }                                                                               \
            if( pP ) pP = 0 ;                                                           \
            poolDelF( tinBaseP , (voidT*)pP ) ;                                             \
                                                                                        \
            }                                                                           \
                }                                                                       \
                    else if( ((strokeS*)pP)[ off ].idCaste == sc_cADAMeXPORT ) off += ((strokeS*)pP)[ off ].idAdam ; \
                    }                                                                   \
                        DELzOMBIE( pstta ) ;                                            \
                        strokeS* pstta = ((strokeS*)pP) + off ;                         \
                    {                                                                   \
                    if( ((strokeS*)pP)[ off ].idCaste == sc_cADAM )                     \
                    _IO_                                                                \
                {                                                                       \
                for( countT off = CSpREFIX ; off < offe ; off ++ )                      \
                const countT offe = CSpREFIX + csttw ;                                  \
                const countT csttw = ((strokeS*)pP)->idAdam ;                           \
                _IO_                                                                    \
            {                                                                           \
            if( idType == ifcIDtYPEdROPnOTE_strokeS && pP )                             \
            countT idType = idTypeP ;                                                   \
            _IO_                                                                        \
        {                                                                               \
        voidT thirdC::delF( tinBaseS& tinBaseP , typeP*& pP )                                   \
                                                                                        \
    #define NEWdELtYPEtHIRD(typeP,idTypeP)                                              \

#if defined( ENABLEdROPnOTES )

//_IO_ NEEDED, SO MAKE THIS WORK (DEBUG INOUT TRACE)
//INOUT NOT USED, TO AVOID BLOWING STACK DURING INOUT TRACE

/*1*//*NEWdELtYPEtHIRD(typeP,idTypeP))*//*1*/

/**/
*/
see the documentation for NEWdELtYPEeTHER
  \<A HREF=\"5.0b30104.1.1.0.html\"\>0b30104:  WAKEsHOW( "example.simplest.snip.11000014.NEWdELtYPEtHIRD" )\</A\>
 simplest
examples
\<A HREF=\"5.11000014.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

