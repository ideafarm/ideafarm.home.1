
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;

etThread.strokeF( tin0P , T("[cFound,cGood,cBad]: ")+TF4(cFound,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+T(" ")+TF4(cGood,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+T(" ")+TF4(cBad,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+tcr ) ;
LOGrAW( T("[cFound,cGood,cBad]: ")+TF4(cFound,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+T(" ")+TF4(cGood,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+T(" ")+TF4(cBad,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,0,0xa)+tcr ) ;

etThread.delF( tin0P , pstt1l ) ;
}
    psttLag = psttc1 ;

    }
        etThread.delF( tin0P , psttTimec ) ;
        etThread.delF( tin0P , psttSizec ) ;
        etThread.delF( tin0P , psttNamec ) ;

        etThread.delF( tin0P , psttTimem ) ;
        etThread.delF( tin0P , psttSizem ) ;
        etThread.delF( tin0P , psttNamem ) ;

        }
            LOGrAW( T(psttTimem)+tb+T(psttNamem)+td+T(psttTimec)+tb+T(psttNamec)+tcr ) ;

            etThread.strSubstringF( tin0P , psttNamem , idf , idl , psttLag ) ; ___( psttNamem ) ;
            idl = 0 ;
            idf = 36 ;

            etThread.strSubstringF( tin0P , psttTimem , idf , idl , psttLag ) ; ___( psttTimem ) ;
            idl = 17 ;
            idf = 1 ;

            cGood ++ ;
        {
        else
        }
            cBad ++ ;
            LOGrAW( T("********************* NOT FOUND *************: ")+T(psttTimec)+tb+T(psttNamec)+tcr ) ;
        {
        if( etThread.strCompareF( tin0P , psttSizec , psttSizem ) )

        etThread.strSubstringF( tin0P , psttSizem , idf , idl , psttLag ) ; ___( psttSizem ) ;
        idl = 35 ;
        idf = 18 ;

        etThread.strSubstringF( tin0P , psttNamec , idf , idl , psttc1 ) ; ___( psttNamec ) ;
        idl = 0 ;
        etThread.strSubstringF( tin0P , psttSizec , idf , idl , psttc1 ) ; ___( psttSizec ) ;
        idl = 35 ;
        etThread.strSubstringF( tin0P , psttTimec , idf , idl , psttc1 ) ; ___( psttTimec ) ;
        countT idl = 17 ;
        countT idf = 1 ;

        ZE( strokeS* , psttNamem ) ;
        ZE( strokeS* , psttSizem ) ;
        ZE( strokeS* , psttTimem ) ;

        ZE( strokeS* , psttNamec ) ;
        ZE( strokeS* , psttSizec ) ;
        ZE( strokeS* , psttTimec ) ;

        cFound ++ ;
    {
    if( etThread.strIdF( tin0P , countTC( 1 ) , tTest , psttc1 ) )
{
FORsTRINGSiN1( pstt1l )
ZE( strokeS* , psttLag ) ;
TN( td , " ******** " ) ;
TN( tb , " " ) ;
TN( tTest , "Picture " ) ;
ZE( countT , cGood ) ;
ZE( countT , cBad ) ;
ZE( countT , cFound ) ;

etThread.delF( tin0P , pstti ) ;
etThread.strWordsF( tin0P , pstt1l , pstti , sttq , tcr ) ; ___( pstt1l ) ;
TN( tcr , "\r\n" ) ;
strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
ZE( strokeS* , pstt1l ) ;

etThread.delF( tin0P , posti ) ;
etThread.strMakeFromOsTextF( tin0P , pstti , posti ) ; ___( pstti ) ;
ZE( strokeS* , pstti ) ;

etThread.boxGetShadowF( tin0P , posti , costi , T("///d/tmp/2011.10.04/list.size.all.ttt") ) ; ___( posti ) ;

ZE( countT   , costi ) ;
ZE( osTextT* , posti ) ;

TODO

/*1*/WAKEsHOWtEXT( "doodle.utility.merge.file.dir.lists" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

