
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

etThread.traceF( tin0P , T(USCORE127 " wo folder (end)") ) ;
queryFileListF( tin0P , tFolder ) ;
etThread.traceF( tin0P , T(USCORE127 " wo folder (begin)") ) ;
TN( tFolder , "///d/tmp/locked.test/2/" ) ;

etThread.traceF( tin0P , T(USCORE127 " all (end)") ) ;
queryFileListAllF( tin0P ) ;
etThread.traceF( tin0P , T(USCORE127 " all (begin)") ) ;

TODO

}
    }
        }
            }
                ((tin1S&)tin0P).pEther->delF( tin0P , psttf ) ;
                etherC::etRockIF( tin0P ).traceF( tin0P , psttf ) ;
                sIn >> psttf ; ___( psttf ) ;
                ZE( strokeS* , psttf ) ;
            {
            while( sIn )

            }
                __( idReply - ifcIDrEPLYcLOAK_FOLDERcONTENTS) ;
                sIn >> idReply ;
                ZE( countT , idReply ) ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_CLOAKrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;

                bWoth = 0 ;
            {
            if( bWoth )

            else if( !sIn ) break ;
            }
                break ;
                POOPR
            {
            if( POOP )
        
            sock.readF( tin0P , sIn ) ;
            static soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
        {
        for(;;)
        boolT bWoth = 1 ;
    
        sock.writeF( tin0P , sOut ) ;
        sOut << (countT)flFILEiNFO_NAME ;
        sOut << psttFolderP ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYfOLDERcONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tin0P , homeS::homeIF().portCloak ) ;
        socketC sock( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCHoK

    if( POOP ) return ;
{
voidT queryFileListF( tin0S& tin0P , const strokeS* const psttFolderP )

}
    }
        }
            }
                ((tin1S&)tin0P).pEther->delF( tin0P , psttf ) ;
                etherC::etRockIF( tin0P ).traceF( tin0P , psttf ) ;
                sIn >> psttf ; ___( psttf ) ;
                ZE( strokeS* , psttf ) ;
            {
            while( sIn )

            }
                __( idReply - ifcIDrEPLYcLOAK_ALLlOCKEDfOLDERScONTENTS ) ;
                sIn >> idReply ;
                ZE( countT , idReply ) ;
            
                __( idFormat - 1 ) ;
                sIn >> idFormat ;
                ZE( countT , idFormat ) ;
            
                __( finger - FINGERnEG_CLOAKrEPLY ) ;
                sIn >> finger ;
                ZE( countT , finger ) ;

                bWoth = 0 ;
            {
            if( bWoth )

            else if( !sIn ) break ;
            }
                break ;
                POOPR
            {
            if( POOP )
        
            sock.readF( tin0P , sIn ) ;
            static soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
        {
        for(;;)
        boolT bWoth = 1 ;
    
        sock.writeF( tin0P , sOut ) ;
        sOut << (countT)flFILEiNFO_NAME ;
        sOut << (countT)ifcIDcMDcLOAK_QUERYaLLlOCKEDfOLDERScONTENTS ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_CLOAKcOMMAND ;
        static soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tin0P , homeS::homeIF().portCloak ) ;
        socketC sock( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

        SCOOPS
    {
    IFsCRATCHoK

    if( POOP ) return ;
{
voidT queryFileListAllF( tin0S& tin0P )

/*1*/WAKEhIDE( "scratch.e.inactive.doodle.query.file.list.from.cloak" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
