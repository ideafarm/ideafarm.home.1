
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return idDispensed ;

    __Z( idDispensed ) ;
    sIn >> idDispensed ;
    ZE( countT , idDispensed ) ;

    __( idFormat - 1 ) ;
    sIn >> idFormat ;
    ZE( countT , idFormat ) ;

    __( finger - FINGERnEG_SERIALnUMBERdISPENSERrEPLY ) ;
    sIn >> finger ;
    ZE( countT , finger ) ;

    sock.readF( tin0P , sIn ) ;
    soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;

    sock.writeF( tin0P , sOut ) ;

    sOut << pczP ;
    sOut << (countT)ifcIDcMDsERIALnUMBERdISPENSER_DISPENSEnAMEcOUNTsTRING ;
    sOut << (countT)1 ;
    sOut << (countT)FINGERnEG_SERIALnUMBERdISPENSERcMD ;
    soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

    sock.connectF( tin0P , idPortDispenser ) ;
    socketC sock( tin0P , *this , TAG( TAGiDnULL ) ) ;

    CONoUTrAW( T("ifcGetNextSerialNumberF [pczP]: \"")+T(pczP)+T("\"\r\n") ) ; //U::

    _IO_

    }
        if( POOP ) return 0 ;
        __Z( idPortDispenser ) ;
        __Z( pczP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    const countT idPortDispenser = homeS::homeIF().idPortSerialNumberDispenser ;
{
/*1*/countT etherC::ifcGetNextSerialNumberF( tin0S& tin0P , const countT* const pczP )/*1*/

/**/
*/
  is the name of the serial number space for the ip domain IDEAFARM.COM
  must be terminated by 0
  must not be 0
 pczP
 tin0P
parameters
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

