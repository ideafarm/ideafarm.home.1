

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
}
    return rc ;

    ppMe[ idWorkerP - 1 ]->sp.idNest -- ;

    //}
    //    ppMe[ idWorkerP - 1 ]->traceMarkSelectedElementsF( strokeS( 'z' ) , pbUpDn , 1 ) ;
    //    byteT* pbUpDn[] = { ppMe[ idWorkerP - 1 ]->sp.pbHighs } ;
    //{
    //else
    //}
    //    ((tin123S&)tin0P).pEther->traceF( tin0P , T("sp.pbHighs is 0") , flTRACE_NOpREFIX ) ;
    //    TINSL
    //{
    //if( !ppMe[ idWorkerP - 1 ]->sp.pbHighs )

    }
        rc = ifcIDtYPEsTEPrECURSION_DONE ;
        }
            if( ppMe[ idWorkerP - 1 ]->sp.pbHighs - pbv ) { BLAMMO ; }
            byteT* pbv = ppMe[ idWorkerP - 1 ]->verifySortF( pbP , cbP , ppMe[ idWorkerP - 1 ]->sp.shift ) ;
            if( F(ppMe[ idWorkerP - 1 ]->flagsCt) & flSORTAc_CHATTER ) ppMe[ idWorkerP - 1 ]->traceRangeIsSortedF( pbP , cbP , ppMe[ idWorkerP - 1 ]->sp.shift ) ;
        {
        if( !ppMe[ idWorkerP - 1 ]->idError )
    {
    if( ppMe[ idWorkerP - 1 ]->sp.idNest == 1 )

    countT rc = ifcIDtYPEsTEPrECURSION_CALLePILOG ;
    TRACEpARAMSsORTAc( "swapRsEpilogIF" )
{
/*1*/countT sortaC::swapRsEpilogIF( recursionSimulatorC& rsP )/*1*/


/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
