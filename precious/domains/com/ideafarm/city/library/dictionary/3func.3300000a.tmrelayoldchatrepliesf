
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmRelayOldChatRepliesF )
}
    }
        if( POOP ) POOPR
        TELL( "tmRelayOldChatRepliesF: cleaning up" )
        if( bWoth ) sgnUpTested.giveF( tin0P ) ;
        }
            if( !sReply ) break ;
    
            soDn.writeF( tin0P , sWrite ) ;
            etThread.traceF( tin0P , T("writing sWrite (sNull or sReply)") ) ;
            TELL( "writing to below the reply soul read from above" )
            soulC& sWrite = soUp.etherF( tin0P ) ? sNull : sReply ;
            soulC sNull( tin0P , TAG( TAGiDnULL ) ) ;
    
            }
                break ;
                soDn.stopWaitingF( tin0P ) ;
                }
                    thirdC::dosTellMonitorIF( tin0P , tellC( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEtELLsYS_LOG , ostoe , ostoe.costF() + 1 ) , ifcIDbOOKStELL_SYS ) ;
                    OStEXTV( ostoe , "!tin123S tmRelayOldChatRepliesF: canceling soDn because soUp is impotent" )
                {
                //etText.strokeF( tin0P , T("RcHAT/")+TF1(idRelay)+T("/tmRelayOldChatRepliesF/telling soDn to stop waiting for an order\r\n") ) ;
                POOPR
            {
            if( POOP )
            }
                sgnUpTested.giveF( tin0P ) ;
                bWoth = 0 ;
            {
            if( bWoth )
    
            //else                      etText.strokeF( tin0P , T("RcHAT/")+TF1(idRelay)+T("/tmRelayOldChatRepliesF/read a nonnull sReply from up\r\n") ) ;
            //else if( !sReply )        etText.strokeF( tin0P , T("RcHAT/")+TF1(idRelay)+T("/tmRelayOldChatRepliesF/read a null sReply from up\r\n") ) ;
            //if( soUp.etherF( tin0P ) ) etText.strokeF( tin0P , T("RcHAT/")+TF1(idRelay)+T("/tmRelayOldChatRepliesF/could not read sReply from up\r\n") ) ;
    
            TELL( "handling the soulC read from above" )
            soUp.readF( tin0P , sReply ) ;
            TELL( "reading from above a reply soulC" )
            soulC sReply( tin0P , TAG( TAGiDnULL ) ) ;
            idTray ++ ;
        {
        while( !POOP && !etThread )
        ZE( countT , idTray ) ;
        boolT bWoth = 1 ;
    
        soUp.etherF( tin0P , *((tin1S&)tin0P).pEtScratch ) ;
        soDn.etherF( tin0P , *((tin1S&)tin0P).pEtScratch ) ;
        etherC& etText = etherC::etTextIF( tin0P ) ;
        SCOOPS
    {
    IFsCRATCH

    countT   idRelay     =            pTaskP->c4 ;
    signC&   sgnUpTested =   *(signC*)pTaskP->c3 ;
    socketC& soUp        = *(socketC*)pTaskP->c2 ;
    socketC& soDn        = *(socketC*)pTaskP->c1 ;
    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
/*1*/TASK( tmRelayOldChatRepliesF )/*1*/
/**/
*/
\<A HREF=\"5.0b00015.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$tmRelayOldChatRepliesF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

