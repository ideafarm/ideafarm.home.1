
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        ___BITS( pObjectP , 0x1235 , idLineP , idiFileP , pbBitsP ) ;                                                                                                                                                                                              \
                                                                                                                                                                                                                                                                   \
        }                                                                                                                                                                                                                                                          \
            pObjectP = classP::newRecyclableIF( tinBaseP , recycleLever1P , recycleLever2P ) ;                                                                                                                                                                         \
        {                                                                                                                                                                                                                                                          \
        if( !pObjectP )                                                                                                                                                                                                                                            \
                                                                                                                                                                                                                                                                   \
        }                                                                                                                                                                                                                                                          \
            ((tinNormalS&)tinBaseP).pag1->_etherC_.pSwsRecycle->ungrabF( tinBaseP ) ;                                                                                                                                                                                                                         \
            if( *((tinNormalS&)tinBaseP).pag1->_etherC_.pSwsRecycle ) *((tinNormalS&)tinBaseP).pag1->_etherC_.pSwsRecycle >> *(countT*)&pObjectP ;                                                                                                                                                                                               \
            ((tinNormalS&)tinBaseP).pag1->_etherC_.pczl_pSwsRecycle = c4Lever ;                                                                                                                                                                                                                           \
            ((tinNormalS&)tinBaseP).pag1->_etherC_.pSwsRecycle->grabF( tinBaseP , TAG( TAGiDnULL ) ) ;                                                                                                                                                                                                        \
        {                                                                                                                                                                                                                                                          \
        else                                                                                                                                                                                                                                                       \
        }                                                                                                                                                                                                                                                          \
            if( *((tinNormalS&)tinBaseP).pSwsRecycle ) *((tinNormalS&)tinBaseP).pSwsRecycle >> *(countT*)&pObjectP ;                                                                                                                                                                                     \
            ((tinNormalS&)tinBaseP).pczl_pSwsRecycle = c4Lever ;                                                                                                                                                                                                                      \
        {                                                                                                                                                                                                                                                          \
        if( bOwn && ((tinNormalS&)tinBaseP).pSwsRecycle )                                                                                                                                                                                                                             \
                                                                                                                                                                                                                                                                   \
        if( bOwn && !((tinNormalS&)tinBaseP).pSwsRecycle ) { ((tinNormalS&)tinBaseP).pSwsRecycle = new( 0 , tinBaseP , LF ) switchStackC( tinBaseP , *((tinNormalS&)tinBaseP).pag1->_etherC_.pEtRock , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ((tinNormalS&)tinBaseP).pczl_pSwsRecycle , flSTACKc_DOnOTsERIALIZE | flSTACKc_XRAY ) ; ___( ((tinNormalS&)tinBaseP).pSwsRecycle ) ; }  \
        boolT bOwn = F(((tinNormalS&)tinBaseP).flagsThreadMode3) & flTHREADmODE3_MYoWNrECYCLER ;                                                                                                                                                                                      \
                                                                                                                                                                                                                                                                   \
        if( !c4Lever.c2 ) c4Lever.c2 = - 1 ;                                                                                                                                                                                                                       \
        count4S c4Lever( ifcIDtYPErECYCLE_##classP , recycleLever1P , recycleLever2P ) ;                                                                                                                                                                           \
                                                                                                                                                                                                                                                                   \
        _IO_                                                                                                                                                                                                                                                       \
                                                                                                                                                                                                                                                                   \
        }                                                                                                                                                                                                                                                          \
            if( POOP ) return ;                                                                                                                                                                                                                                    \
            __NZ( pObjectP ) ;                                                                                                                                                                                                                                     \
            if( POOP ) return ;                                                                                                                                                                                                                                    \
        {                                                                                                                                                                                                                                                          \
        IFbEcAREFUL                                                                                                                                                                                                                                                \
        SCOOP                                                                                                                                                                                                                                                      \
    {                                                                                                                                                                                                                                                              \
    voidT etherC::operator ()( tinBaseS& tinBaseP , classP*& pObjectP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP , const countT recycleLever1P , const countT recycleLever2P )                                                            \
                                                                                                                                                                                                                                                                   \
#define GETfROMrECYCLER2(classP)                                                                                                                                                                                                                                   \

/*1*//*GETfROMrECYCLER2*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

