
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

etThread.strokeF( tinBaseP , T("ok\r\n") ) ;
etThread.ifcJobF( tinBaseP , stCourses , 0x4010474 , sOrderPrimary , stOrders , tComm , 0 ) ;
TN( tComm , "" ) ; tComm = /*U:T("count for me at ")+TT(timeN1,timeN2)*/T("foobar") ;
etThread.osThreadF( tinBaseP , countTC() , tmTalkF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&stOrders , (countT)&stCourses ) ;

etThread.osTimeNowF( tinBaseP , timeN1 , timeN2 ) ;
ZE( sCountT , timeN2 ) ;
ZE( countT , timeN1 ) ;

stackC stOrders(  tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
stackC stCourses( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;

sOrderPrimary << (countT)ifcIDcMDjOBoRDER_NAMED ;
soulC sOrderPrimary( tinBaseP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmTalkF )
}
    }
        }
            DEL( psCourse ) ;
            }
                }
                    stOrders.ungrabF( tinBaseP ) ;
                    etThread.strokeF( tinBaseP , T("stOrders contains ")+TF1(stOrders)+T(" plates after pushing a dummy order and a null order\r\n") ) ;
                    stOrders << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
                    stOrders << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , (countT)1 ) ; //U: THE ORDER NEEDS TO CONTAIN SOMETHING SO THAT IT WILL REACH 2540104
                    stOrders.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                if( bOrderNull )

                }
                    //}
                    //    FIREmYSELF ;
                    //    etThread.strokeF( tinBaseP , T("firing myself\r\n") ) ;
                    //{
                    //if( vv == 8 )
                    etThread.strokeF( tinBaseP , T("received ")+TF1(vv)+T("\r\n") ) ;
                    sData >> vv ;
                    ZE( countT , vv ) ;
                {
                else
                }
                    if( !sData ) etThread.strokeF( tinBaseP , T("empty sData received\r\n") ) ;
                    bOrderNull = 1 ;
                {
                if( !sData || ether )

                etThread.strokeF( tinBaseP , T("unstacked an sData containing ")+TF1(sData)+T(" items\r\n") ) ;
        
                *psCourse >> sNotesData ;
                *psCourse >> sNotesText ;
                *psCourse >> sData ;
                *psCourse >> sCodes ;
                soulC sNotesData( tinBaseP , TAG( TAGiDnULL ) ) ;
                soulC sNotesText( tinBaseP , TAG( TAGiDnULL ) ) ;
                soulC sData( tinBaseP , TAG( TAGiDnULL ) ) ;
                soulC sCodes( tinBaseP , TAG( TAGiDnULL ) ) ;
            {
            if( psCourse )
            stCourses >> psCourse ;
            ZE( soulC* , psCourse ) ;
        {
        while( stCourses && !bOrderNull )
        stCourses.waitF( tinBaseP ) ;
    {
    while( !etThread && !stCourses.third && !bOrderNull )
    ZE( boolT , bOrderNull ) ;

    stackC& stCourses = *(stackC*)pTaskP->c2 ;
    stackC& stOrders  = *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmTalkF )

/*1*/WAKEhIDE( "doodle.ongoing.job.client" )/*1*/
/**/
*/
\<A HREF=\"5.5740104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

