
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#undef SETcOL2EMAILrELAY

}
    etThread.delF( tin0P , psttIdAccount ) ;
    etThread.delF( tin0P , psttEmail ) ;

    }
        }
            if( POOP ) POOPR

            }
                }
                    meP.pushSnipF( tin0P , stBodyP , idSnipEnd ) ;
                    }
                        }
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT81 ) ;
    
                            }
                               }
                                    etThread.delF( tin0P , psttEmailPenpalContainsAnd ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleEmailPenpalContainsAnd , psttEmailPenpalContainsAnd ) ;
                                    *info.pStkEmailPenpalContainsAnd >> psttEmailPenpalContainsAnd ; ___( psttEmailPenpalContainsAnd ) ;
                                    ZE( strokeS* , psttEmailPenpalContainsAnd ) ;
                                {
                                while( *info.pStkEmailPenpalContainsAnd )
    
                                }
                                    etThread.delF( tin0P , psttEmailPenpalContainsOr ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleEmailPenpalContainsOr , psttEmailPenpalContainsOr ) ;
                                    *info.pStkEmailPenpalContainsOr >> psttEmailPenpalContainsOr ; ___( psttEmailPenpalContainsOr ) ;
                                    ZE( strokeS* , psttEmailPenpalContainsOr ) ;
                                {
                                while( *info.pStkEmailPenpalContainsOr )
    
                                }
                                    etThread.delF( tin0P , psttEmailPenpalExactOr ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleEmailPenpalExactOr , psttEmailPenpalExactOr ) ;
                                    *info.pStkEmailPenpalExactOr >> psttEmailPenpalExactOr ; ___( psttEmailPenpalExactOr ) ;
                                    ZE( strokeS* , psttEmailPenpalExactOr ) ;
                                {
                                while( *info.pStkEmailPenpalExactOr )
    
                                }
                                    etThread.delF( tin0P , psttRecipe ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleRecipe , psttRecipe ) ;
                                    *info.pStkRecipe >> psttRecipe ; ___( psttRecipe ) ;
                                    ZE( strokeS* , psttRecipe ) ;
                                {
                                while( *info.pStkRecipe )
    
                                }
                                    etThread.delF( tin0P , psttAutoresponse ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleAutoresponse , psttAutoresponse ) ;
                                    *info.pStkAutoresponse >> psttAutoresponse ; ___( psttAutoresponse ) ;
                                    ZE( strokeS* , psttAutoresponse ) ;
                                {
                                while( *info.pStkAutoresponse )
    
                                }
                                    }
                                        meP.pushSnipF( tin0P , stBodyP , idSnipTagOff ) ;
                                        meP.pushSnipF( tin0P , stBodyP , T("relayed to all<BR>") ) ;
                                        meP.pushSnipF( tin0P , stBodyP , idSnipTagOn ) ;
                                    {
                                    else
                                    }
                                        etThread.delF( tin0P , psttw ) ;
                                        if( psttw ) { meP.sayFieldF( tin0P , stBodyP , tTitlew , psttw ) ; }
                                        TN( tTitlew , "relay random drawings" ) ;
                                        etThread.strMakeF( tin0P , LF , psttw , TF2(info.cEmailRelayDrawings,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ; ___( psttw ) ;
                                        ZE( strokeS* , psttw ) ;
                                    {
                                    if( info.cEmailRelayDrawings )
                                {
                                if( cRelays )
    
                                }
                                    etThread.delF( tin0P , psttEmailRelay ) ;
                                    meP.sayFieldF( tin0P , stBodyP , tTitleEmailRelay , psttEmailRelay ) ;
                                    *info.pStkEmailRelay >> psttEmailRelay ; ___( psttEmailRelay ) ;
                                    ZE( strokeS* , psttEmailRelay ) ;
                                {
                                while( *info.pStkEmailRelay )
                                const countT cRelays = *info.pStkEmailRelay ;
    
                                meP.sayFieldF( tin0P , stBodyP , tTitleNameOut , info.psttNameOut ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleNameIn  , info.psttNameIn  ) ;

                                }
                                    meP.pushSnipF( tin0P , stBodyP , tMode ) ;
    
                                    ) ;
                                        : "reply from relay continues conversation<BR>"
                                        ? "reply from relay ends conversation<BR>"
                                    TN( tMode , F(info.flagsMode) & fliSUBACCOUNTmODE_RELAYrEPLYeNDScONVERSATION
                                {
    
                                if( F(info.flagsMode) & fliSUBACCOUNTmODE_OWNEDbYdIRECTORYoRhELLO ) meP.pushSnipF( tin0P , stBodyP , T("directory clicker<BR>") ) ;
    
                                meP.sayFieldF( tin0P , stBodyP , tTitleTitle   , info.psttTitle   ) ;
                                ZE( osTextT* , postsw ) ;
        
                                }
                                    DEL( prPostsIdSub ) ;
                                    DEL( prPostsEmailSub ) ;
                                    }
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT71 ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT61 ) ;
                                        meP.pushSnipF( tin0P , stBodyP , *prPostsIdSub ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT51 ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT41 ) ;
                                        meP.pushSnipF( tin0P , stBodyP , *prPostsIdSub ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT31 ) ;

                                        }
                                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT21 ) ;
                                            meP.pushSnipF( tin0P , stBodyP , *prPostsIdSub ) ;
                                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT11 ) ;
                                        {
                                        if( !( F(info.flagsMode) & fliSUBACCOUNTmODE_OWNEDbYdIRECTORYoRhELLO ) )

                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT01 ) ;
                                        meP.pushSnipF( tin0P , stBodyP , *prPostsIdSub ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTf ) ;
                                        meP.pushSnipF( tin0P , stBodyP , *prPostsEmailSub ) ;
                                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTe ) ;
                                        meP.pushSnipF( tin0P , stBodyP , idSnipParagraph ) ;
                                    {
                                    if( prPostsEmailSub && prPostsIdSub )
                
                                    etThread.strMakeF( tin0P , LF , prPostsIdSub , TF4(idSub,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0,36) , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPostsIdSub ) ;
                                    ZE( pbRefC* , prPostsIdSub ) ;

                                    etThread.strMakeF( tin0P , LF , prPostsEmailSub , TF4(idSub,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE,0,36)+tSuffix , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPostsEmailSub ) ;
                                    ZE( pbRefC* , prPostsEmailSub ) ;
                                {
                            {
                            if( !POOP && F(info.flagsMode) & fliSUBACCOUNTmODE_OWNERcONFIRMED && !( F(info.flagsMode) & fliSUBACCOUNTmODE_DELETED ) )
                            subaccountS info( tin0P , etThread , idAccount , idSub ) ;
    
                            //CONoUTrAW3( "enumeration [idSub]: " , idSub , "\r\n" ) ;
                            stkIdSub >> idSub ;
                            ZE( countT , idSub ) ;
                        {
                        while( stkIdSub )
                        stkIdSubC stkIdSub( tin0P , idAccount ) ;

                        TN( tcr , "\r\n" ) ;
                        //CONoUTrAW( "querying enumeration of idSub\r\n" ) ;
                    {
                    //CONoUTrAW( "compiling report\r\n" ) ;

                    }
                        }
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT83 ) ;

                            }
                                meP.sayFieldF( tin0P , stBodyP , tTitlePaypalProtectionEligibility     , info.psttPaypalProtectionEligibility     ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitlePaypalPayerStatus               , info.psttPaypalPayerStatus               ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitlePaypalPayerId                   , info.psttPaypalPayerId                   ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitlePaypalPayerEmail                , info.psttPaypalPayerEmail                ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleCharset                         , info.psttCharset                         ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleZipAt                           , info.psttZipAt                           ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleResidenceCountry                , info.psttResidenceCountry                ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleLastName                        , info.psttLastName                        ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleFirstName                       , info.psttFirstName                       ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressStatus                   , info.psttAddressStatus                   ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressCountry                  , info.psttAddressCountry                  ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressZip                      , info.psttAddressZip                      ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressCountryCode              , info.psttAddressCountryCode              ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressState                    , info.psttAddressState                    ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressCity                     , info.psttAddressCity                     ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressStreet                   , info.psttAddressStreet                   ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleAddressName                     , info.psttAddressName                     ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleHelloGreeting                   , info.psttHelloGreeting                   ) ;
                                meP.sayFieldF( tin0P , stBodyP , tTitleDirectoryGreeting               , info.psttDirectoryGreeting               ) ;
                                }
                                    meP.pushSnipF( tin0P , stBodyP , tMode ) ;
    
                                    ) ;
                                        : "i am not listed in " postIFH "<BR>"
                                        ? "i am listed in " postIFH "<BR>"
                                    TN( tMode , F(info.flagsMode) & fliACCOUNTmODE_LISTmEhELLO
                                {
                                }
                                    meP.pushSnipF( tin0P , stBodyP , tMode ) ;
    
                                    ) ;
                                        : "i am not listed in " postIFD "<BR>"
                                        ? "i am listed in " postIFD "<BR>"
                                    TN( tMode , F(info.flagsMode) & fliACCOUNTmODE_LISTmEdIRECTORY
                                {
                            {
                            else
                            }
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT44 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT24 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT34 ) ;
                            {
                            if( bNoFieldsOccupied )

                            ;
    
                                ( !info.psttHelloGreeting               || !info.psttHelloGreeting->idAdam                )
                                ( !info.psttDirectoryGreeting           || !info.psttDirectoryGreeting->idAdam            ) &&
                                ( !info.psttPaypalProtectionEligibility || !info.psttPaypalProtectionEligibility->idAdam  ) &&
                                ( !info.psttPaypalPayerStatus           || !info.psttPaypalPayerStatus->idAdam            ) &&
                                ( !info.psttPaypalPayerId               || !info.psttPaypalPayerId->idAdam                ) &&
                                ( !info.psttPaypalPayerEmail            || !info.psttPaypalPayerEmail->idAdam             ) &&
                                ( !info.psttCharset                     || !info.psttCharset->idAdam                      ) &&
                                ( !info.psttZipAt                       || !info.psttZipAt->idAdam                        ) &&
                                ( !info.psttResidenceCountry            || !info.psttResidenceCountry->idAdam             ) &&
                                ( !info.psttLastName                    || !info.psttLastName->idAdam                     ) &&
                                ( !info.psttFirstName                   || !info.psttFirstName->idAdam                    ) &&
                                ( !info.psttAddressStatus               || !info.psttAddressStatus->idAdam                ) &&
                                ( !info.psttAddressCountry              || !info.psttAddressCountry->idAdam               ) &&
                                ( !info.psttAddressZip                  || !info.psttAddressZip->idAdam                   ) &&
                                ( !info.psttAddressCountryCode          || !info.psttAddressCountryCode->idAdam           ) &&
                                ( !info.psttAddressState                || !info.psttAddressState->idAdam                 ) &&
                                ( !info.psttAddressCity                 || !info.psttAddressCity->idAdam                  ) &&
                                ( !info.psttAddressStreet               || !info.psttAddressStreet->idAdam                ) &&
                                ( !info.psttAddressName                 || !info.psttAddressName->idAdam                  ) &&
    
                            const boolT bNoFieldsOccupied = 

                            ZE( osTextT* , postsw ) ;

                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT73 ) ;
                            meP.pushSnipF( tin0P , stBodyP , psttEmail ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT63 ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT14 ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT44 ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTe3 ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT34 ) ;
                            meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT04 ) ;
                        {
                        if( !POOP )
                        accountS info( tin0P , etThread , idAccount ) ;
                    {
    
                    meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT4 ) ;
                    meP.pushSnipF( tin0P , stBodyP , psttEmail ) ;
                    meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT3 ) ;
                    meP.pushSnipF( tin0P , stBodyP , psttIdAccount ) ;
                    meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT2 ) ;
                {
                if( !POOP )

                }
                    ((tin123S&)tin0P).pEtScratch->delF( tin0P , psttEmailOwner ) ;
                    __( ((tin123S&)tin0P).pEtScratch->strCompareF( tin0P , psttEmail , psttEmailOwner ) ) ;
                    sIn >> psttEmailOwner ; ___( psttEmailOwner ) ;
                    ZE( strokeS* , psttEmailOwner ) ;
                
                    __( idFormat - 1 ) ;
                    sIn >> idFormat ;
                    ZE( countT , idFormat ) ;
                
                    __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
                    sIn >> finger ;
                    ZE( countT , finger ) ;
                
                    sock.readF( tin0P , sIn ) ;
                    soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
                
                    sock.writeF( tin0P , sOut ) ;
                    sOut << idAccount ;
                    sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKeMAILfROMiDaCCOUNT ;
                    sOut << (countT)1 ;
                    sOut << (countT)FINGERnEG_LISTsERVERcMD ;
                    soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
                
                    sock.connectF( tin0P , homeS::homeIF().idPortListServerEmailIdAccount ) ;
                    socketC sock( tin0P , *((tin123S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                {
            {
            if( bShowAll )

            }
                }
                    meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT62 ) ;

                    }
                        EPILOGeDIT( EmailPenpalContainsAnd , ifcIDsNIPpREDEFINED_HELPd , ifcIDsNIPpREDEFINED_HELP21 , 0 )
                        }
                            etThread.delF( tin0P , psttEmailPenpalContainsAnd ) ;
                            if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleEmailPenpalContainsAnd , tKeyEmailPenpalContainsAnd , flagsSay , ifcIDsNIPpREDEFINED_HELPd , ifcIDsNIPpREDEFINED_HELP21 , psttEmailPenpalContainsAnd ) ;
                            *info.pStkEmailPenpalContainsAnd >> psttEmailPenpalContainsAnd ; ___( psttEmailPenpalContainsAnd ) ;
                            ZE( strokeS* , psttEmailPenpalContainsAnd ) ;
                        {
                        while( *info.pStkEmailPenpalContainsAnd )
                        PROLOGeDIT( EmailPenpalContainsAnd )

                        EPILOGeDIT( EmailPenpalContainsOr , ifcIDsNIPpREDEFINED_HELPc , ifcIDsNIPpREDEFINED_HELP11 , 0 )
                        }
                            etThread.delF( tin0P , psttEmailPenpalContainsOr ) ;
                            if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleEmailPenpalContainsOr , tKeyEmailPenpalContainsOr , flagsSay , ifcIDsNIPpREDEFINED_HELPc , ifcIDsNIPpREDEFINED_HELP11 , psttEmailPenpalContainsOr ) ;
                            *info.pStkEmailPenpalContainsOr >> psttEmailPenpalContainsOr ; ___( psttEmailPenpalContainsOr ) ;
                            ZE( strokeS* , psttEmailPenpalContainsOr ) ;
                        {
                        while( *info.pStkEmailPenpalContainsOr )
                        PROLOGeDIT( EmailPenpalContainsOr )

                        EPILOGeDIT( EmailPenpalExactOr , ifcIDsNIPpREDEFINED_HELPb , ifcIDsNIPpREDEFINED_HELP01 , 0 )
                        }
                            etThread.delF( tin0P , psttEmailPenpalExactOr ) ;
                            if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleEmailPenpalExactOr , tKeyEmailPenpalExactOr , flagsSay , ifcIDsNIPpREDEFINED_HELPb , ifcIDsNIPpREDEFINED_HELP01 , psttEmailPenpalExactOr ) ;
                            *info.pStkEmailPenpalExactOr >> psttEmailPenpalExactOr ; ___( psttEmailPenpalExactOr ) ;
                            ZE( strokeS* , psttEmailPenpalExactOr ) ;
                        {
                        while( *info.pStkEmailPenpalExactOr )
                        PROLOGeDIT( EmailPenpalExactOr )

                        }
                            EPILOGeDIT( Recipe , ifcIDsNIPpREDEFINED_HELPa , ifcIDsNIPpREDEFINED_HELPf , 0 )
                            }
                                etThread.delF( tin0P , psttRecipe ) ;
                                if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                                meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleRecipe , tKeyRecipe , flagsSay , ifcIDsNIPpREDEFINED_HELPa , ifcIDsNIPpREDEFINED_HELPf , psttRecipe ) ;
                                *info.pStkRecipe >> psttRecipe ; ___( psttRecipe ) ;
                                ZE( strokeS* , psttRecipe ) ;
                            {
                            while( *info.pStkRecipe )
                            PROLOGeDIT( Recipe )
                        {
                        if( idAccount == 1 )

                        flagsSay &= ~F(flSAYfIELDeDIT_AREA) ;
                        flagsSay |= flSAYfIELDeDIT_MOREaLLOWED ;
                        EPILOGeDIT( Autoresponse , ifcIDsNIPpREDEFINED_HELP9 , 0 , 0 )
                        }
                            etThread.delF( tin0P , psttAutoresponse ) ;
                            if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAutoresponse , tKeyAutoresponse , flagsSay , ifcIDsNIPpREDEFINED_HELP9 , 0 , psttAutoresponse ) ;
                            *info.pStkAutoresponse >> psttAutoresponse ; ___( psttAutoresponse ) ;
                            ZE( strokeS* , psttAutoresponse ) ;
                        {
                        while( *info.pStkAutoresponse )
                        PROLOGeDIT( Autoresponse )
                        flagsSay &= ~F(flSAYfIELDeDIT_MOREaLLOWED) ;
                        flagsSay |= flSAYfIELDeDIT_AREA ;

                        }
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleEmailRelay , tKeyEmailRelay , flagsSay , ifcIDsNIPpREDEFINED_HELP8 , ifcIDsNIPpREDEFINED_HELPe , 0 , tCol2 ) ;
                            SETcOL2EMAILrELAY( info.cEmailRelayDrawings )
                        {
                        while( cExtra -- )
                        }
                            if( idRow == 2 ) tCol2 = T("") ;

                            etThread.delF( tin0P , psttEmailRelay ) ;
                            if( F(flagsSay) & flSAYfIELDeDIT_WOTH ) flagsSay &= ~F(flSAYfIELDeDIT_WOTH) ;
                            meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleEmailRelay , tKeyEmailRelay , flagsSay , ifcIDsNIPpREDEFINED_HELP7 , ifcIDsNIPpREDEFINED_HELPe , psttEmailRelay , tCol2 ) ;
                            *info.pStkEmailRelay >> psttEmailRelay ; ___( psttEmailRelay ) ;
                            ZE( strokeS* , psttEmailRelay ) ;

                            SETcOL2EMAILrELAY( info.cEmailRelayDrawings )
                        {
                        while( *info.pStkEmailRelay )
                        const countT cRelays = cNew ;
                        ZE( countT , idRow ) ;
                        PROLOGeDIT( EmailRelay )
                        flagsSay |= flSAYfIELDeDIT_MOREaLLOWED ;

                        TN( tCol2 , "" ) ;

                        meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleNameOut , tKeyNameOut , flagsSay , ifcIDsNIPpREDEFINED_HELP6 , 0 , info.psttNameOut ) ;
                        idBoxLath = 0 ;
                        meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleNameIn , tKeyNameIn , flagsSay , ifcIDsNIPpREDEFINED_HELP5 , 0 , info.psttNameIn ) ;
                        idBoxLath = 0 ;

                        flagsSay &= ~( F(flSAYfIELDeDIT_CHECKBOX) ) ;
                        meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleFlagReplyEndsConversation , tKeyFlagReplyEndsConversation , flagsSay , ifcIDsNIPpREDEFINED_HELP31 , 0 , (strokeS*)!!( F(info.flagsMode) & fliSUBACCOUNTmODE_RELAYrEPLYeNDScONVERSATION ) ) ;
                        idBoxLath = 0 ;
                        meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleFlagOwnedByDirectory , tKeyFlagOwnedByDirectory , flagsSay , ifcIDsNIPpREDEFINED_HELP31 , 0 , (strokeS*)!!( F(info.flagsMode) & fliSUBACCOUNTmODE_OWNEDbYdIRECTORYoRhELLO ) ) ;
                        idBoxLath = 0 ;
                        flagsSay |= flSAYfIELDeDIT_CHECKBOX ;

                        meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleTitle , tKeyTitle , flagsSay , ifcIDsNIPpREDEFINED_HELP4 , 0 , info.psttTitle ) ;
                        ZE( countT , cNew ) ;
                        ZE( osTextT* , postsw    ) ;
                        ZE( countT   , idBoxLath ) ;
                        ZE( countT   , cExtra    ) ;
                        flagsT flagsSay = flSAYfIELDeDIT_WOTH ;

                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTd1 ) ;
                        if( !bAllFieldsOccupied && !bAllFields ) { meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTc1 ) ; }
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTb1 ) ;
                        meP.pushSnipF( tin0P , stBodyP , tSubaccount ) ;
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTa1 ) ;
                        meP.pushSnipF( tin0P , stBodyP , tEmailSub ) ;
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT91 ) ;
                        meP.pushSnipF( tin0P , stBodyP , idSnipParagraph ) ;

                        ;

                            *info.pStkEmailPenpalContainsAnd
                            *info.pStkEmailPenpalContainsOr          &&
                            *info.pStkEmailPenpalExactOr             &&
                            *info.pStkRecipe                         &&
                            *info.pStkAutoresponse                   &&
                            *info.pStkEmailRelay                     &&

                        const boolT bAllFieldsOccupied = 
                    {
                    if( !POOP && F(info.flagsMode) & fliSUBACCOUNTmODE_OWNERcONFIRMED && !( F(info.flagsMode) & fliSUBACCOUNTmODE_DELETED ) )

                    subaccountS info( tin0P , etThread , idAccount , idSub ) ;
                    bShowAll = 0 ;
                {
                else if( bEditSub )
                }
                    __Z( bDone ) ;
                    sIn >> bDone ;
                    ZE( boolT , bDone ) ;
                
                    __( idFormat - 1 ) ;
                    sIn >> idFormat ;
                    ZE( countT , idFormat ) ;
                
                    __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
                    sIn >> finger ;
                    ZE( countT , finger ) ;
                
                    sock.readF( tin0P , sIn ) ;
                    soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
                
                    sock.writeF( tin0P , sOut ) ;
                    sOut << idSub ;
                    sOut << idAccount ;
                    sOut << (countT)ifcIDcMDlISTsERVERiDaCCOUNTdESCRIPTION_DELETEsUBACCOUNTdESCRIPTION ;
                    sOut << (countT)1 ;
                    sOut << (countT)FINGERnEG_LISTsERVERcMD ;
                    soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
                
                    sock.connectF( tin0P , homeS::homeIF().idPortListServerIdAccountDescription ) ;
                    socketC sock( tin0P , *((tin123S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                {
                if( bDeleteSub )

                }
                    //bDeleteSub = 1 ;
                    etThread.boxPutF( tin0P , T("//smtp/" ifcEMAIL_WEBsITEcOMPLAINTfORWARDER "/" ifcEMAIL_WEBmASTER) , tSay , tSay.csF( tin0P ) ) ;

                    ) ;

                        "\"")+T(psttEmail)+T("\" reports that \"")+tSpammer+T("\" has abused the subaccount that is managed by IdeaFarm " "(tm) Directory for his exclusive use."
                        "\r\n"
                        "Subject: Complaint of abuse\r\n"

                    TN( tSay , "" ) ; tSay = T(

                    }
                        break ;
                        etThread.delF( tin0P , psttw ) ;
                        tSpammer = T(psttw) ;
                        *sub.pStkEmailPenpalExactOr >> psttw ;
                        ZE( strokeS* , psttw ) ;
                    {
                    if( sub.pStkEmailPenpalExactOr ) while( *sub.pStkEmailPenpalExactOr )

                    TN( tSpammer , "" ) ;

                    subaccountS sub( tin0P , etThread , idAccount , idSub , flSUBACCOUNT_QUERYeMAILpENPALeXACToR ) ;
                {
                if( bSpamSub )

                }
                    { _IO_ etThread( tin0P , pStkEmailPenpalContainsAnd     ) ; }
                    { _IO_ etThread( tin0P , pStkEmailPenpalContainsOr      ) ; }
                    { _IO_ etThread( tin0P , pStkEmailPenpalExactOr         ) ; }
                    { _IO_ etThread( tin0P , pStkRecipe                     ) ; }
                    { _IO_ etThread( tin0P , pStkAutoresponse               ) ; }
                    { _IO_ etThread( tin0P , pStkEmailRelayDrawings         ) ; }
                    { _IO_ etThread( tin0P , pStkEmailRelay                 ) ; }
                    { _IO_ etThread( tin0P , pStkNameOut                    ) ; }
                    { _IO_ etThread( tin0P , pStkNameIn                     ) ; }
                    { _IO_ etThread( tin0P , pStkFlagReplyEndsConversation  ) ; }
                    { _IO_ etThread( tin0P , pStkFlagOwnedByDirectory       ) ; }
                    { _IO_ etThread( tin0P , pStkTitle                      ) ; }

                    }
                        pushFieldValuesF( tin0P , *info.pStkEmailPenpalContainsAnd , *pStkEmailPenpalContainsAnd ) ;
                        pushFieldValuesF( tin0P , *info.pStkEmailPenpalContainsOr  , *pStkEmailPenpalContainsOr  ) ;
                        pushFieldValuesF( tin0P , *info.pStkEmailPenpalExactOr     , *pStkEmailPenpalExactOr     ) ;
                        pushFieldValuesF( tin0P , *info.pStkRecipe                 , *pStkRecipe                 ) ;
                        pushFieldValuesF( tin0P , *info.pStkAutoresponse           , *pStkAutoresponse           ) ;
                        if( *pStkEmailRelayDrawings ) *pStkEmailRelayDrawings >> info.cEmailRelayDrawings ; //DROP DOWN MENU WILL NOT APPEAR IF < 2 RELAYS
                        pushFieldValuesF( tin0P , *info.pStkEmailRelay             , *pStkEmailRelay             ) ;

                        etThread.delF( tin0P , psttNameOut ) ;
                        etThread.delF( tin0P , psttNameIn ) ;
                        etThread.delF( tin0P , psttTitle ) ;
                        subaccountS info( tin0P , etThread , idAccount , idSub , psttTitle , psttNameIn , psttNameOut , flagsMode ) ;

                        }
                            if( !etThread.strCompareF( tin0P , psttv , T("yes") ) ) flagsMode |= fliSUBACCOUNTmODE_RELAYrEPLYeNDScONVERSATION ;
                            *pStkFlagReplyEndsConversation >> psttv ;
                            ZE( strokeS* , psttv ) ;
                        {
                        if( *pStkFlagReplyEndsConversation )
                        }
                            if( !etThread.strCompareF( tin0P , psttv , T("yes") ) ) flagsMode |= fliSUBACCOUNTmODE_OWNEDbYdIRECTORYoRhELLO ;
                            *pStkFlagOwnedByDirectory >> psttv ;
                            ZE( strokeS* , psttv ) ;
                        {
                        if( *pStkFlagOwnedByDirectory )
                        flagsT flagsMode = fliSUBACCOUNTmODE_OWNERcONFIRMED ;

                        *pStkNameOut >> psttNameOut ; ___( psttNameOut ) ;
                        *pStkNameIn  >> psttNameIn  ; ___( psttNameIn  ) ;
                        *pStkTitle   >> psttTitle   ; ___( psttTitle   ) ;
                        ZE( strokeS* , psttNameOut ) ;
                        ZE( strokeS* , psttNameIn ) ;
                        ZE( strokeS* , psttTitle ) ;
                    {
                    if( *pStkTitle && *pStkNameIn && *pStkNameOut )

                    }
                        }
                            }
                                }
                                    *pStko << psttc ;
                                    strokeS* psttc = psttOldC( tin0P , etThread , zsttv ) ; ___( psttc ) ;
                                    if( zsttv && !bArea ) { etThread.strTrimF( tin0P , zsttv , 0 , T(TbLACKnEWlINE) ) ; ___( zsttv ) ; }
                                {
                                else
                                }
                                    }
                                        if( vv ) *pStko << vv ;
                                        countT vv = etThread.strDigitsToSCountF( tin0P , zsttv ) ;
                                    {
                                    if( zsttv )
                                {
                                if( bCount )
                                strokeS*& zsttv = *(strokeS**)&(countT&)swKVP ;
                            {
                            if( pStko )
    
                            }
                                else if( 1 == etThread.strIdF( tin0P , tKeyEmailPenpalContainsAnd    , psttLeverKVP ) )   pStko = pStkEmailPenpalContainsAnd    ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyEmailPenpalContainsOr     , psttLeverKVP ) )   pStko = pStkEmailPenpalContainsOr     ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyEmailPenpalExactOr        , psttLeverKVP ) )   pStko = pStkEmailPenpalExactOr        ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyRecipe                    , psttLeverKVP ) )   pStko = pStkRecipe                    ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyAutoresponse              , psttLeverKVP ) ) { pStko = pStkAutoresponse              ; bArea  = 1 ; }
                                else if( 1 == etThread.strIdF( tin0P , tKeyEmailRelayDrawings        , psttLeverKVP ) ) { pStko = pStkEmailRelayDrawings        ; bCount = 1 ; }
                                else if( 1 == etThread.strIdF( tin0P , tKeyEmailRelay                , psttLeverKVP ) )   pStko = pStkEmailRelay                ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyNameOut                   , psttLeverKVP ) )   pStko = pStkNameOut                   ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyNameIn                    , psttLeverKVP ) )   pStko = pStkNameIn                    ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyFlagReplyEndsConversation , psttLeverKVP ) )   pStko = pStkFlagReplyEndsConversation ;
                                else if( 1 == etThread.strIdF( tin0P , tKeyFlagOwnedByDirectory      , psttLeverKVP ) )   pStko = pStkFlagOwnedByDirectory      ;
                                     if( 1 == etThread.strIdF( tin0P , tKeyTitle                     , psttLeverKVP ) )   pStko = pStkTitle                     ;
                            {
                            if( psttLeverKVP )
                            ZE( stackC* , pStko ) ;
                            ZE( boolT , bCount ) ;
                            ZE( boolT , bArea ) ;

                            psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
                        {
                        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                        countT cFlavors = swKVP.cFlavorsF( tin0P ) ;
                    {
                    )
                        pStkEmailPenpalContainsAnd
                        pStkEmailPenpalContainsOr      &&
                        pStkEmailPenpalExactOr         &&
                        pStkRecipe                     &&
                        pStkAutoresponse               &&
                        pStkEmailRelayDrawings         &&
                        pStkEmailRelay                 &&
                        pStkNameOut                    &&
                        pStkNameIn                     &&
                        pStkFlagReplyEndsConversation  &&
                        pStkFlagOwnedByDirectory       &&
                        pStkTitle                      &&
                    (
                    if

                    etThread( tin0P , pStkEmailPenpalContainsAnd    , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalContainsAnd    ) ;
                    etThread( tin0P , pStkEmailPenpalContainsOr     , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalContainsOr     ) ;
                    etThread( tin0P , pStkEmailPenpalExactOr        , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalExactOr        ) ;
                    etThread( tin0P , pStkRecipe                    , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkRecipe                    ) ;
                    etThread( tin0P , pStkAutoresponse              , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkAutoresponse              ) ;
                    etThread( tin0P , pStkEmailRelayDrawings        , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_countT      ) ; ___( pStkEmailRelayDrawings        ) ;
                    etThread( tin0P , pStkEmailRelay                , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailRelay                ) ;
                    etThread( tin0P , pStkNameOut                   , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkNameOut                   ) ;
                    etThread( tin0P , pStkNameIn                    , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkNameIn                    ) ;
                    etThread( tin0P , pStkFlagReplyEndsConversation , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkFlagReplyEndsConversation ) ;
                    etThread( tin0P , pStkFlagOwnedByDirectory      , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkFlagOwnedByDirectory      ) ;
                    etThread( tin0P , pStkTitle                     , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE | flSTACKc_ALLOWmULTIPLEuNSERIALIZED | flSTACKc_XRAY , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkTitle                     ) ;

                    ZE( stackC* , pStkEmailPenpalContainsAnd ) ;
                    ZE( stackC* , pStkEmailPenpalContainsOr ) ;
                    ZE( stackC* , pStkEmailPenpalExactOr ) ;
                    ZE( stackC* , pStkRecipe ) ;
                    ZE( stackC* , pStkAutoresponse ) ;
                    ZE( stackC* , pStkEmailRelayDrawings ) ;
                    ZE( stackC* , pStkEmailRelay ) ;
                    ZE( stackC* , pStkNameOut ) ;
                    ZE( stackC* , pStkNameIn ) ;
                    ZE( stackC* , pStkFlagReplyEndsConversation ) ;
                    ZE( stackC* , pStkFlagOwnedByDirectory      ) ;
                    ZE( stackC* , pStkTitle ) ;
                {
                if( bSaveSub )

                }
                    bSaveSub = bEditSub = 1 ;
                    bFieldMore = 0 ;
                {
                else if( bFieldMore )
                if( bAllFields ) bSaveSub = bEditSub = 1 ;

                TN( tEmailSub , "" ) ; tEmailSub = tSubaccount+tDot+T(psttIdAccount)+T(".doubleblind.1@ideafarm.com") ;
            {
            else
            }
                }
                    }
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT72 ) ;
                        }
                            }
                                if( bAllFields || ( info.psttPaypalProtectionEligibility  && info.psttPaypalProtectionEligibility->idAdam ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitlePaypalProtectionEligibility , tKeyPaypalProtectionEligibility    , flagsSay , ifcIDsNIPpREDEFINED_HELP42 , 0 , info.psttPaypalProtectionEligibility     ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttPaypalPayerStatus            && info.psttPaypalPayerStatus->idAdam           ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitlePaypalPayerStatus           , tKeyPaypalPayerStatus              , flagsSay , ifcIDsNIPpREDEFINED_HELP32 , 0 , info.psttPaypalPayerStatus               ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttPaypalPayerId                && info.psttPaypalPayerId->idAdam               ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitlePaypalPayerId               , tKeyPaypalPayerId                  , flagsSay , ifcIDsNIPpREDEFINED_HELP22 , 0 , info.psttPaypalPayerId                   ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttPaypalPayerEmail             && info.psttPaypalPayerEmail->idAdam            ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitlePaypalPayerEmail            , tKeyPaypalPayerEmail               , flagsSay , ifcIDsNIPpREDEFINED_HELP12 , 0 , info.psttPaypalPayerEmail                ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttCharset                      && info.psttCharset->idAdam                     ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleCharset                     , tKeyCharset                        , flagsSay , ifcIDsNIPpREDEFINED_HELP02 , 0 , info.psttCharset                         ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttResidenceCountry             && info.psttResidenceCountry->idAdam            ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleResidenceCountry            , tKeyResidenceCountry               , flagsSay , ifcIDsNIPpREDEFINED_HELPe1 , 0 , info.psttResidenceCountry                ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttLastName                     && info.psttLastName->idAdam                    ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleLastName                    , tKeyLastName                       , flagsSay , ifcIDsNIPpREDEFINED_HELPd1 , 0 , info.psttLastName                        ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttFirstName                    && info.psttFirstName->idAdam                   ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleFirstName                   , tKeyFirstName                      , flagsSay , ifcIDsNIPpREDEFINED_HELPc1 , 0 , info.psttFirstName                       ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressStatus                && info.psttAddressStatus->idAdam               ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressStatus               , tKeyAddressStatus                  , flagsSay , ifcIDsNIPpREDEFINED_HELPb1 , 0 , info.psttAddressStatus                   ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressCountry               && info.psttAddressCountry->idAdam              ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressCountry              , tKeyAddressCountry                 , flagsSay , ifcIDsNIPpREDEFINED_HELPa1 , 0 , info.psttAddressCountry                  ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressZip                   && info.psttAddressZip->idAdam                  ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressZip                  , tKeyAddressZip                     , flagsSay , ifcIDsNIPpREDEFINED_HELP91 , 0 , info.psttAddressZip                      ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressCountryCode           && info.psttAddressCountryCode->idAdam          ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressCountryCode          , tKeyAddressCountryCode             , flagsSay , ifcIDsNIPpREDEFINED_HELP81 , 0 , info.psttAddressCountryCode              ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressState                 && info.psttAddressState->idAdam                ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressState                , tKeyAddressState                   , flagsSay , ifcIDsNIPpREDEFINED_HELP71 , 0 , info.psttAddressState                    ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressCity                  && info.psttAddressCity->idAdam                 ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressCity                 , tKeyAddressCity                    , flagsSay , ifcIDsNIPpREDEFINED_HELP61 , 0 , info.psttAddressCity                     ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressStreet                && info.psttAddressStreet->idAdam               ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressStreet               , tKeyAddressStreet                  , flagsSay , ifcIDsNIPpREDEFINED_HELP51 , 0 , info.psttAddressStreet                   ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttAddressName                  && info.psttAddressName->idAdam                 ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleAddressName                 , tKeyAddressName                    , flagsSay , ifcIDsNIPpREDEFINED_HELP41 , 0 , info.psttAddressName                     ) ; idBoxLath = 0 ; }
                                flagsSay |= flSAYfIELDeDIT_LOCKED ;
                                //FIELDS THAT THE ACCOUNT OWNER IS NOT ALLOWED TO MODIFY
    
                                if( bAllFields || ( info.psttZipAt                        && info.psttZipAt->idAdam                       ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleZipAt                       , tKeyZipAt                          , flagsSay , ifcIDsNIPpREDEFINED_HELPf1 , 0 , info.psttZipAt                           ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttHelloGreeting                && info.psttHelloGreeting->idAdam               ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleDirectoryGreeting           , tKeyHelloGreeting                  , flagsSay , ifcIDsNIPpREDEFINED_HELP72 , 0 , info.psttHelloGreeting                   ) ; idBoxLath = 0 ; }
                                if( bAllFields || ( info.psttDirectoryGreeting            && info.psttDirectoryGreeting->idAdam           ) ) { meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleDirectoryGreeting           , tKeyDirectoryGreeting              , flagsSay , ifcIDsNIPpREDEFINED_HELP62 , 0 , info.psttDirectoryGreeting               ) ; idBoxLath = 0 ; }
                                flagsSay &= ~( F(flSAYfIELDeDIT_CHECKBOX) ) ;
                                meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleFlagListInHello     , tKeyFlagListInHello     , flagsSay , ifcIDsNIPpREDEFINED_HELP82 , 0 , (strokeS*)!!( F(info.flagsMode) & fliACCOUNTmODE_LISTmEhELLO     ) ) ;
                                meP.sayFieldEditF( tin0P , stBodyP , idBoxLath , tTitleFlagListInDirectory , tKeyFlagListInDirectory , flagsSay , ifcIDsNIPpREDEFINED_HELP52 , 0 , (strokeS*)!!( F(info.flagsMode) & fliACCOUNTmODE_LISTmEdIRECTORY ) ) ;
                                flagsSay |= flSAYfIELDeDIT_CHECKBOX ;
                                //FIELDS THAT THE ACCOUNT OWNER IS ALLOWED TO MODIFY
                            {
                            else
                            }
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTf3 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT44 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTe3 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT34 ) ;
                                meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTd3 ) ;
                            {
                            if( !bAllFields && bNoFieldsOccupied )

                            ZE( countT , cNew ) ;
                            ZE( osTextT* , postsw    ) ;
                            ZE( countT   , idBoxLath ) ;
                            ZE( countT   , cExtra    ) ;
                            flagsT flagsSay = flSAYfIELDeDIT_ACCOUNT | flSAYfIELDeDIT_WOTH ;
                        {
                        //FOR EACH FIELD:

                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTc3 ) ;
                        if( !bAllFieldsOccupied && !bAllFields ) { meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTb3 ) ; }
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNTa3 ) ;
                        meP.pushSnipF( tin0P , stBodyP , psttEmail ) ;
                        meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT93 ) ;

                        ;

                            ( !info.psttHelloGreeting                || !info.psttHelloGreeting->idAdam                 )
                            ( !info.psttDirectoryGreeting            || !info.psttDirectoryGreeting->idAdam             ) &&
                            ( !info.psttPaypalProtectionEligibility  || !info.psttPaypalProtectionEligibility->idAdam   ) &&
                            ( !info.psttPaypalPayerStatus            || !info.psttPaypalPayerStatus->idAdam             ) &&
                            ( !info.psttPaypalPayerId                || !info.psttPaypalPayerId->idAdam                 ) &&
                            ( !info.psttPaypalPayerEmail             || !info.psttPaypalPayerEmail->idAdam              ) &&
                            ( !info.psttCharset                      || !info.psttCharset->idAdam                       ) &&
                            ( !info.psttZipAt                        || !info.psttZipAt->idAdam                         ) &&
                            ( !info.psttResidenceCountry             || !info.psttResidenceCountry->idAdam              ) &&
                            ( !info.psttLastName                     || !info.psttLastName->idAdam                      ) &&
                            ( !info.psttFirstName                    || !info.psttFirstName->idAdam                     ) &&
                            ( !info.psttAddressStatus                || !info.psttAddressStatus->idAdam                 ) &&
                            ( !info.psttAddressCountry               || !info.psttAddressCountry->idAdam                ) &&
                            ( !info.psttAddressZip                   || !info.psttAddressZip->idAdam                    ) &&
                            ( !info.psttAddressCountryCode           || !info.psttAddressCountryCode->idAdam            ) &&
                            ( !info.psttAddressState                 || !info.psttAddressState->idAdam                  ) &&
                            ( !info.psttAddressCity                  || !info.psttAddressCity->idAdam                   ) &&
                            ( !info.psttAddressStreet                || !info.psttAddressStreet->idAdam                 ) &&
                            ( !info.psttAddressName                  || !info.psttAddressName->idAdam                   ) &&

                        const boolT bNoFieldsOccupied = 

                        ;

                            info.psttHelloGreeting                && info.psttHelloGreeting->idAdam
                            info.psttDirectoryGreeting            && info.psttDirectoryGreeting->idAdam           &&
                            info.psttPaypalProtectionEligibility  && info.psttPaypalProtectionEligibility->idAdam &&
                            info.psttPaypalPayerStatus            && info.psttPaypalPayerStatus->idAdam           &&
                            info.psttPaypalPayerId                && info.psttPaypalPayerId->idAdam               &&
                            info.psttPaypalPayerEmail             && info.psttPaypalPayerEmail->idAdam            &&
                            info.psttCharset                      && info.psttCharset->idAdam                     &&
                            info.psttZipAt                        && info.psttZipAt->idAdam                       &&
                            info.psttResidenceCountry             && info.psttResidenceCountry->idAdam            &&
                            info.psttLastName                     && info.psttLastName->idAdam                    &&
                            info.psttFirstName                    && info.psttFirstName->idAdam                   &&
                            info.psttAddressStatus                && info.psttAddressStatus->idAdam               &&
                            info.psttAddressCountry               && info.psttAddressCountry->idAdam              &&
                            info.psttAddressZip                   && info.psttAddressZip->idAdam                  &&
                            info.psttAddressCountryCode           && info.psttAddressCountryCode->idAdam          &&
                            info.psttAddressState                 && info.psttAddressState->idAdam                &&
                            info.psttAddressCity                  && info.psttAddressCity->idAdam                 &&
                            info.psttAddressStreet                && info.psttAddressStreet->idAdam               &&
                            info.psttAddressName                  && info.psttAddressName->idAdam                 &&

                        const boolT bAllFieldsOccupied = 
                    {
                    if( !POOP )
    
                    accountS info( tin0P , etThread , idAccount ) ;
                    bShowAll = 0 ;
                {
                if( bEditAcc )

                }
                    }
                        if( ppstto ) { etThread.strMakeF( tin0P , LF , *ppstto , *(strokeS**)&(countT&)swKVP ) ; ___( *ppstto ) ; }
    
                        else if( 1 == etThread.strIdF( tin0P , tKeyHelloGreeting                 , psttLeverKVP ) ) ppstto = &info.psttHelloGreeting                 ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyDirectoryGreeting             , psttLeverKVP ) ) ppstto = &info.psttDirectoryGreeting             ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyPaypalProtectionEligibility   , psttLeverKVP ) ) ppstto = &info.psttPaypalProtectionEligibility   ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyPaypalPayerStatus             , psttLeverKVP ) ) ppstto = &info.psttPaypalPayerStatus             ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyPaypalPayerId                 , psttLeverKVP ) ) ppstto = &info.psttPaypalPayerId                 ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyPaypalPayerEmail              , psttLeverKVP ) ) ppstto = &info.psttPaypalPayerEmail              ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyCharset                       , psttLeverKVP ) ) ppstto = &info.psttCharset                       ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyZipAt                         , psttLeverKVP ) ) ppstto = &info.psttZipAt                         ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyResidenceCountry              , psttLeverKVP ) ) ppstto = &info.psttResidenceCountry              ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyLastName                      , psttLeverKVP ) ) ppstto = &info.psttLastName                      ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyFirstName                     , psttLeverKVP ) ) ppstto = &info.psttFirstName                     ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressStatus                 , psttLeverKVP ) ) ppstto = &info.psttAddressStatus                 ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressCountry                , psttLeverKVP ) ) ppstto = &info.psttAddressCountry                ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressZip                    , psttLeverKVP ) ) ppstto = &info.psttAddressZip                    ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressCountryCode            , psttLeverKVP ) ) ppstto = &info.psttAddressCountryCode            ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressState                  , psttLeverKVP ) ) ppstto = &info.psttAddressState                  ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressCity                   , psttLeverKVP ) ) ppstto = &info.psttAddressCity                   ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressStreet                 , psttLeverKVP ) ) ppstto = &info.psttAddressStreet                 ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyAddressName                   , psttLeverKVP ) ) ppstto = &info.psttAddressName                   ;
                        else if( 1 == etThread.strIdF( tin0P , tKeyFlagListInHello               , psttLeverKVP ) && !etThread.strCompareF( tin0P , tYes , *(strokeS**)&(countT&)swKVP ) ) info.flagsMode |= fliACCOUNTmODE_LISTmEhELLO ;
                             if( 1 == etThread.strIdF( tin0P , tKeyFlagListInDirectory           , psttLeverKVP ) && !etThread.strCompareF( tin0P , tYes , *(strokeS**)&(countT&)swKVP ) ) info.flagsMode |= fliACCOUNTmODE_LISTmEdIRECTORY ;
                        ZE( strokeS** , ppstto ) ;

                        TN( tYes , "yes" ) ;
    
                        psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = swKVP.cFlavorsF( tin0P ) ;
    
                    accountS info( tin0P , etThread , idAccount , fliACCOUNTmODE_OWNERcONFIRMED , (strokeS*)0 ) ;
                {
                if( bSaveAcc )

                }
                    bSaveAcc = bEditAcc = 1 ;
                    bFieldMore = 0 ;
                {
                else if( bFieldMore )
                }
                    bSaveAcc = bEditAcc = 1 ;
                {
                if( bAllFields )
            {
            if( !idSub )
            boolT bShowAll = 1 ;

            TN( tKeyHelloGreeting                   , "hellogreeting."                                                                                                                                      ) ;
            TN( tKeyDirectoryGreeting               , "directorygreeting."                                                                                                                                  ) ;
            TN( tKeyPaypalProtectionEligibility     , "paypalprotectioneligibility."                                                                                                                        ) ;
            TN( tKeyPaypalPayerStatus               , "paypalpayerstatus."                                                                                                                                  ) ;
            TN( tKeyPaypalPayerId                   , "paypalpayerid."                                                                                                                                      ) ;
            TN( tKeyPaypalPayerEmail                , "paypalpayeremail."                                                                                                                                   ) ;
            TN( tKeyCharset                         , "characterset."                                                                                                                                       ) ;
            TN( tKeyZipAt                           , "zipat."                                                                                                                                              ) ;
            TN( tKeyResidenceCountry                , "residencecountry."                                                                                                                                   ) ;
            TN( tKeyLastName                        , "lathname."                                                                                                                                           ) ;
            TN( tKeyFirstName                       , "wothname."                                                                                                                                           ) ;
            TN( tKeyAddressStatus                   , "addressstatus."                                                                                                                                      ) ;
            TN( tKeyAddressCountry                  , "addresscountry."                                                                                                                                     ) ;
            TN( tKeyAddressZip                      , "addresszip."                                                                                                                                         ) ;
            TN( tKeyAddressCountryCode              , "addresscountrycode."                                                                                                                                 ) ;
            TN( tKeyAddressState                    , "addressstate."                                                                                                                                       ) ;
            TN( tKeyAddressCity                     , "addresscity."                                                                                                                                        ) ;
            TN( tKeyAddressStreet                   , "addressstreet."                                                                                                                                      ) ;
            TN( tKeyAddressName                     , "addressname."                                                                                                                                        ) ;

            TN( tKeyEmailPenpalContainsAnd          , "penpalcontainsand."                                                                                                                                  ) ;
            TN( tKeyEmailPenpalContainsOr           , "penpalcontainsor."                                                                                                                                   ) ;
            TN( tKeyEmailPenpalExactOr              , "penpalexactor."                                                                                                                                      ) ;
            TN( tKeyRecipe                          , "recipe."                                                                                                                                             ) ;
            TN( tKeyAutoresponse                    , "autoresponse."                                                                                                                                       ) ;
            TN( tKeyEmailRelayDrawings              , "relaydrawings."                                                                                                                                      ) ;
            TN( tKeyEmailRelay                      , "relay."                                                                                                                                              ) ;
            TN( tKeyNameOut                         , "nameout."                                                                                                                                            ) ;
            TN( tKeyNameIn                          , "namein."                                                                                                                                             ) ;
            TN( tKeyFlagListInHello                 , "listinhello."                                                                                                                                    ) ;
            TN( tKeyFlagListInDirectory             , "listindirectory."                                                                                                                                    ) ;
            TN( tKeyFlagReplyEndsConversation       , "replyendsconversation."                                                                                                                              ) ;
            TN( tKeyFlagOwnedByDirectory            , "ownedbydirectory."                                                                                                                                   ) ;
            TN( tKeyTitle                           , "title."                                                                                                                                              ) ;

            TN( tTitleHelloGreeting                 , "greeting text for conversation opener from hello@ideafarm.com"                                                                                       ) ;
            TN( tTitleDirectoryGreeting             , "greeting text for directory clicker"                                                                                                                 ) ;
            TN( tTitlePaypalProtectionEligibility   , "PayPal (tm) protection eligibility"                                                                                                                  ) ;
            TN( tTitlePaypalPayerStatus             , "PayPal (tm) payer status"                                                                                                                            ) ;
            TN( tTitlePaypalPayerId                 , "PayPal (tm) payer id"                                                                                                                                ) ;
            TN( tTitlePaypalPayerEmail              , "PayPal (tm) payer email"                                                                                                                             ) ;
            TN( tTitleCharset                       , "character set"                                                                                                                                       ) ;
            TN( tTitleZipAt                         , "zip at"                                                                                                                                              ) ;
            TN( tTitleResidenceCountry              , "residence country"                                                                                                                                   ) ;
            TN( tTitleLastName                      , "lath name"                                                                                                                                           ) ;
            TN( tTitleFirstName                     , "woth name"                                                                                                                                           ) ;
            TN( tTitleAddressStatus                 , "address status"                                                                                                                                      ) ;
            TN( tTitleAddressCountry                , "address country"                                                                                                                                     ) ;
            TN( tTitleAddressZip                    , "address zip"                                                                                                                                         ) ;
            TN( tTitleAddressCountryCode            , "address country code"                                                                                                                                ) ;
            TN( tTitleAddressState                  , "address state"                                                                                                                                       ) ;
            TN( tTitleAddressCity                   , "address city"                                                                                                                                        ) ;
            TN( tTitleAddressStreet                 , "address street"                                                                                                                                      ) ;
            TN( tTitleAddressName                   , "address name"                                                                                                                                        ) ;

            TN( tTitleEmailPenpalContainsAnd        , "penpal (contains and)"                                                                                                                               ) ;
            TN( tTitleEmailPenpalContainsOr         , "penpal (contains or)"                                                                                                                                ) ;
            TN( tTitleEmailPenpalExactOr            , "penpal (exact or)"                                                                                                                                   ) ;
            TN( tTitleRecipe                        , "recipe"                                                                                                                                              ) ;
            TN( tTitleAutoresponse                  , "autoresponse"                                                                                                                                        ) ;
            TN( tTitleEmailRelay                    , "relay"                                                                                                                                               ) ;
            TN( tTitleNameOut                       , "from (seen by others)"                                                                                                                               ) ;
            TN( tTitleNameIn                        , "from (seen by relay)"                                                                                                                                ) ;
            TN( tTitleFlagListInHello               , "i am listed in IdeaFarm " "(tm) Hello"                                                                                                                 ) ;
            TN( tTitleFlagListInDirectory           , "i am listed in IdeaFarm " "(tm) Directory"                                                                                                                 ) ;
            TN( tTitleFlagReplyEndsConversation     , "reply from relay ends conversation"                                                                                                                  ) ;
            TN( tTitleFlagOwnedByDirectory          , "owned by directory"                                                                                                                                  ) ;
            TN( tTitleTitle                         , "title"                                                                                                                                               ) ;

            const countT idSnipTextArea3        = ifcIDsNIPpREDEFINED_MYaCCOUNT13  ;
            const countT idSnipTextArea2        = ifcIDsNIPpREDEFINED_MYaCCOUNTf2  ;
            const countT idSnipTextArea1        = ifcIDsNIPpREDEFINED_MYaCCOUNTe2  ;

            const countT idSnipInput3big        = ifcIDsNIPpREDEFINED_MYaCCOUNTd2  ;
            const countT idSnipInput3small      = ifcIDsNIPpREDEFINED_MYaCCOUNTa2  ;
            const countT idSnipInput2           = ifcIDsNIPpREDEFINED_MYaCCOUNT92  ;
            const countT idSnipInput1           = ifcIDsNIPpREDEFINED_MYaCCOUNT82  ;

            //ORDER OF PUSHING: 1 [idSuba] 2 [idSuba] 3 4 [label] 5 [input] 4 [label] 5 [input] ... 6
        
            const countT idSnipDelete2          = ifcIDsNIPpREDEFINED_MYaCCOUNTd   ;
            const countT idSnipDelete1          = ifcIDsNIPpREDEFINED_MYaCCOUNTc   ;
            const countT idSnipTagOff           = ifcIDsNIPpREDEFINED_MYaCCOUNTb   ;
            const countT idSnipTagOn            = ifcIDsNIPpREDEFINED_MYaCCOUNTa   ;
            const countT idSnipEnd              = ifcIDsNIPpREDEFINED_MYaCCOUNT9   ;
            const countT idSnipColon            = ifcIDsNIPpREDEFINED_MYaCCOUNT8   ;
            const countT idSnipSubaccountColon  = ifcIDsNIPpREDEFINED_MYaCCOUNT7   ;
            const countT idSnipParagraph        = ifcIDsNIPpREDEFINED_MYaCCOUNT6   ;
            const countT idSnipBreak            = ifcIDsNIPpREDEFINED_MYaCCOUNT5   ;

            SCOOPS
        {
        IFsCRATCH

        TN( tSuffix , "" ) ; tSuffix = tDot+T(psttIdAccount)+T(ifcEMAIL_DOUBLEbLINDsUFFIX) ;
        TN( tDot , "." ) ;

        }
            }
                idSub = etThread.strDigitsToSCountF( tin0P , tSubaccount , 36 ) ;
                tSubaccount = T(zsttv) ;
                if( zsttv ) { etThread.strTrimF( tin0P , zsttv , 0 , T(TbLACKnEWlINE) ) ; ___( zsttv ) ; }
                strokeS*& zsttv = *(strokeS**)&(countT&)swKVP ;
                psttLeverKVP = tKeySuba ;
            {
            if( ( bAllFields || bSpamSub || bEditSub || bDeleteSub || bSaveSub || bFieldMore ) && swKVP.idSlotOfLeverF( tin0P , (countT)(strokeS*)tKeySuba ) )

            }
                }
                    else if( !etThread.strCompareF( tin0P , tValueFormEditAcc , tForm ) ) bEditAcc = 1 ;
                         if( !etThread.strCompareF( tin0P , tValueFormEditSub , tForm ) ) bEditSub = 1 ;
                {
                else if( !etThread.strCompareF( tin0P , zsttw , tValueDoEdit   ) )
                }
                    if( !etThread.strCompareF( tin0P , tValueFormSpamSub , tForm ) ) bSpamSub = 1 ;
                {
                else if( !etThread.strCompareF( tin0P , zsttw , tValueDoSpam   ) )
                }
                    else if( !etThread.strCompareF( tin0P , tValueFormSaveAcc , tForm ) ) bSaveAcc = 1 ;
                         if( !etThread.strCompareF( tin0P , tValueFormSaveSub , tForm ) ) bSaveSub = 1 ;
                {
                else if( !etThread.strCompareF( tin0P , zsttw , tValueDoSave   ) )
                else if( !etThread.strCompareF( tin0P , zsttw , tValueDoMore   ) ) bAllFields = 1 ;
                     if( !etThread.strCompareF( tin0P , zsttw , tValueDoDelete ) ) bDeleteSub    = 1 ;

                strokeS* zsttw = (strokeS*)(countT)swKVP ;
                psttLeverKVP = tKeyDo ;
            {
            if( !bFieldMore && swKVP.idSlotOfLeverF( tin0P , (countT)(strokeS*)tKeyDo ) )

            }
                }
                    }
                        break ;
                        tForm = T((strokeS*)(countT)swKVP) ;
                    {
                    if( !etThread.strCompareF( tin0P , tKeyForm , psttLeverKVP ) )

                    psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )

                }
                    }
                        }
                            break ;
                            bFieldMore = 1 ;
                            etThread.delF( tin0P , psttw ) ;
                            tFieldMore = T(psttw) ;
                            etThread.strSubstringF( tin0P , psttw , idf , idl , psttLeverKVP ) ; ___( psttw ) ;
                            ZE( countT , idl ) ;
                            countT idf = tKeyDoFieldDot.csF( tin0P ) + 1 ;
                            ZE( strokeS* , psttw ) ;
                        {
                        if( 1 == etThread.strIdF( tin0P , tKeyDoFieldDot , psttLeverKVP ) )
    
                        psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                {
                countT cFlavors = swKVP.cFlavorsF( tin0P ) ;
            {
            TN( tForm , "" ) ;

            TN( tValueFormSaveAcc , "saveacc"      ) ;
            TN( tValueFormSaveSub , "savesuba"     ) ;
            TN( tValueFormEditAcc , "editacc"      ) ;
            TN( tValueFormEditSub , "editsuba"     ) ;
            TN( tValueFormSpamSub , "spamsuba"     ) ;
            TN( tValueDoSave      , "Save"         ) ;
            TN( tValueDoMore      , "More"         ) ;
            TN( tValueDoEdit      , "Edit"         ) ;
            TN( tValueDoSpam      , "Report Abuse" ) ;
            TN( tValueDoDelete    , "Delete"       ) ;
            TN( tKeyDoFieldDot    , "dofield."     ) ;
            TN( tKeyDo            , "do"           ) ;
            TN( tKeySuba          , "idsuba"       ) ;
            TN( tKeyForm          , "form"         ) ;
        {
        TN( tFieldMore , "" ) ;
        ZE( countT , idSub ) ;
        TN( tSubaccount , "" ) ;
        ZE( boolT  , bSaveAcc ) ;
        ZE( boolT  , bSaveSub ) ;
        ZE( boolT  , bAllFields ) ;
        ZE( boolT  , bFieldMore ) ;
        ZE( boolT  , bEditAcc ) ;
        ZE( boolT  , bEditSub ) ;
        ZE( boolT  , bSpamSub ) ;
        ZE( boolT  , bDeleteSub ) ;
    {
    else
    if( !psttEmail ){ meP.pushSnipF( tin0P , stBodyP , ifcIDsNIPpREDEFINED_MYaCCOUNT1 ) ; }

    }
        if( psttEmail && psttEmail->idAdam ) { etThread.strFromF( tin0P , psttIdAccount , idAccount , flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_NObASE , 0 , 36 ) ; ___( psttIdAccount ) ; }
        idAccount = session.getIdAccountF( tin0P ) ;
        session.getEmailF( tin0P , psttEmail ) ; ___( psttEmail ) ;
        sessionC& session = sessionsP( tin0P , nnPeerP ) ;
    {
    ZE( strokeS* , psttIdAccount ) ;
    ZE( countT   , idAccount ) ;
    ZE( strokeS* , psttEmail ) ;

    //}
    //    if( tSay.csF( tin0P ) ) { P OPUP( tSay ) ; }
    //    }
    //        tSay += T(psttLeverKVP)+T(": \"")+T((strokeS*)(countT&)swKVP)+T("\"")+tcr ;
    //        psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
    //    {
    //    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //    countT cFlavors = swKVP.cFlavorsF( tin0P ) ;
    //    
    //    TN( tSay , "" ) ;
    //    TN( tcr , "\r\n" ) ;
    //{
{
/*1*/voidT myAccountSettingsCBF( tin0S& tin0P , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/


    }
        tCol2 += T("</SELECT>\r\n") ;                                                                                                                           \
        for( countT cDraw = 1 ; cDraw < cRelays ; cDraw ++ ) tCol2 += T("<OPTION")+T(cDraw<cRelays&&cDraw==cEmailRelayDrawingsP?" SELECTED":"")+T(">")+TF2(cDraw,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n") ; \
        tCol2 = TQ(ifcIDsNIPpREDEFINED_HELP3)+T(" <SELECT NAME=\"relaydrawings.00000001\" onMouseOut=\"swatF();\" onMouseOver=\"flyF( this , 'Use this drop down menu to specify the number of randomly selected relay email addresses to relay each incoming item to.' );\">\r\n<OPTION")+T(cRelays>1&&cEmailRelayDrawingsP&&cEmailRelayDrawingsP<cRelays?"":" SELECTED")+T(" VALUE=\"0\">all\r\n") ; \
    {                                                                                                                                                           \
    if( ++ idRow == 2 )                                                                                                                                         \
                                                                                                                                                                \
#define SETcOL2EMAILrELAY(cEmailRelayDrawingsP)                                                                                                                 \

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

