
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tin0P , T("\r\n\r\npress the enter key") ) ;

}
    sgnDoneR.waitF( tin0P ) ;
    sgnDoneL.waitF( tin0P ) ;

    cbDatum = 0 ; sTalk.writeF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ;
    cbDatum = 4 ; sTalk.writeF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ; sTalk.writeF( tin0P , "dddd" ) ;
    cbDatum = 3 ; sTalk.writeF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ; sTalk.writeF( tin0P , "ccc" ) ;
    cbDatum = 2 ; sTalk.writeF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ; sTalk.writeF( tin0P , "bb" ) ;
    cbDatum = 1 ; sTalk.writeF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ; sTalk.writeF( tin0P , "a" ) ;
    ZE( countT , cbDatum ) ;

    sTalk.connectF( tin0P , idPortR ) ;
    socketC sTalk( tin0P , ether , TAG( TAGiDnULL ) ) ;

    sgnReadyR.waitF( tin0P ) ;
    { ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmRelayOldF , &sgnDoneR , flTHREADlAUNCH_null , 0 , 0 , (countT)&sRelayOut , (countT)&idPortR , (countT)&sgnReadyR ) ; }
    signC sgnDoneR( tin0P , TAG( TAGiDnULL ) ) ;
    signC sgnReadyR( tin0P , TAG( TAGiDnULL ) ) ;
    ZE( countT , idPortR ) ;
    sRelayOut.connectF( tin0P , idPortL ) ;
    socketC sRelayOut( tin0P , ether , TAG( TAGiDnULL ) ) ;

    sgnReadyL.waitF( tin0P ) ;
    { ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmListenF , &sgnDoneL , flTHREADlAUNCH_null , 0 , 0 , (countT)&idPortL , (countT)&sgnReadyL ) ; }
    signC sgnDoneL( tin0P , TAG( TAGiDnULL ) ) ;
    signC sgnReadyL( tin0P , TAG( TAGiDnULL ) ) ;
    ZE( countT , idPortL ) ;
{

TODO

DONE( tmRelayOldF )
etThread.strokeF( tin0P , T("tmRelayOld -\r\n") ) ;
}
    DEL( pso ) ;
    }
        sRelayOut.writeF( tin0P , (byteT*)&cbo , sizeof cbo ) ;
        ZE( countT , cbo ) ;
        etThread.sockRelayF( tin0P , sRelayOut , *pso ) ;
    {
    if( pso )
    sRelay.acceptF( tin0P , pso , idPortPeer , nnPeer , countTC() ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ++ sgnReadyR ;
    ZE( socketC* , pso ) ;
    sRelay.listenF( tin0P ) ;
    idPortRelay = sRelay.bindF( tin0P ) ;
    socketC sRelay( tin0P , ether , TAG( TAGiDnULL ) ) ;

    signC&   sgnReadyR   = *(signC*)  pTaskP->c3 ;
    countT&  idPortRelay = *(countT*) pTaskP->c2 ;
    socketC& sRelayOut   = *(socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
etThread.strokeF( tin0P , T("tmRelayOld +\r\n") ) ;
TASK( tmRelayOldF )

DONE( tmListenF )
etThread.strokeF( tin0P , T("tmListen -\r\n") ) ;
}
    DEL( pso ) ;
    }
        }
            etThread.delF( tin0P , pbDatum ) ;
            }
                etThread.strokeF( tin0P , T("tmListen received ")+TF1(cbDatum)+T(" bytes"": \"")+T(pbDatum)+T("\"\r\n") ) ;
                pbDatum[ cbDatum ] = 0 ;
                pso->readF( tin0P , pbDatum , cbDatum ) ;
            {
            if( pbDatum )
            etThread.newF( tin0P , LF , pbDatum , cbDatum + 1 ) ; ___( pbDatum ) ;
            ZE( byteT* , pbDatum ) ;

            if( !cbDatum ) break ;
            pso->readF( tin0P , (byteT*)&cbDatum , sizeof cbDatum ) ;
            ZE( countT , cbDatum ) ;
        {
        while( !ether && !etThread )
    {
    if( pso )
    sL.acceptF( tin0P , pso , idPortPeer , nnPeer , countTC() ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ++ sgnReadyL ;
    ZE( socketC* , pso ) ;

    sL.listenF( tin0P ) ;
    idPortL = sL.bindF( tin0P ) ;
    socketC sL( tin0P , ether , TAG( TAGiDnULL ) ) ;

    signC&  sgnReadyL = *(signC*) pTaskP->c2 ;
    countT& idPortL   = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
etThread.strokeF( tin0P , T("tmListen +\r\n") ) ;
TASK( tmListenF )

/*1*/WAKEhIDE( "example.simplest.func.1030109.etherC.sockRelayF" )/*1*/
/**/
*/
\<A HREF=\"5.9430104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

