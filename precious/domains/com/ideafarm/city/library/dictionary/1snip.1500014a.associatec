
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    friend boolT gossipCBF( tin0S& tinBaseP , assViewC& assViewP , associateC& vieweeP , associateC& viewerP , const countT cArgP , staqC* const pStqWalkerP ) ;

    inline countT ungrabF( tin0S& tinBaseP , const flagsT flagsP = flGRABcUNGRABf_null ) { return stAss.ungrabF( tinBaseP , flagsP ) ; }
    inline voidT grabF( tin0S& tinBaseP , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP ) { stAss.grabF( tinBaseP , idLineP , idiFileP , pbBitsP ) ; }
    inline countT idGroupF( voidT ) const { return idGroup ; }

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.associateC.gossipF!||
    boolT gossipF( tin0S& tinBaseP , const countT idMsgP , const countT cArgP = 0 , const countT idTypeP = ifcIDtYPEgOSSIP_APPLICATION , const countT* const pczIncludeP = 0 , const countT* const pczExcludeP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.associateC.moonThePhotographersF!||
    voidT moonThePhotographersF( tin0S& tinBaseP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.associateC.walkF!||
    boolT walkF( tin0S& tinBaseP , associateCBFT pAssociateCBFP , countT cArgP = 0 , const flagsT flagsP = flASSOCIATEcwALK_null , const countT* const pczIncludeP = 0 , const countT* const pczExcludeP = 0 , staqC* const pStqWalkerP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.associateC.operator_element!||
    associateC& operator []( countT idP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.associateC.operator_countT!||
    operator countT( voidT ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.associateC.operator_decrementBy!||
    voidT operator -=( associateC& assP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.associateC.operator_incrementBy!||
    voidT operator +=( associateC& assP ) ;

    public :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.associateC.associateC!||
    associateC( tin0S& tinBaseP , etherC& etherP , const countT idGroupP , const countT cbViewP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.associateC.dt_associateC!||
    virtual ~associateC( voidT ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.associateC.NEWdELcLASSb!||
    //NEWdELcLASSpROTOS

    protected :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.associateC.takeMyPictureF!||
    voidT takeMyPictureF( tin0S& tinBaseP , associateC& vieweeP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.associateC.sayCheeseF!||
    virtual voidT sayCheeseF( tin0S& tinBaseP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.associateC.hearGossipF!||
    virtual boolT hearGossipF( tin0S& tinBaseP , associateC& originP , const countT idTypeP , const countT idMsgP , const countT cArgP ) ;

    private :

    byteT* const pbZes ;
    stackC       stAss ;
    const countT cbView ;
    etherC&      ether ;
    countT       idGroup ; //IT IS LEGAL (OK) FOR DERIVED CLASS CT'OR TO CHANGE THIS SO TO IDENTIFY ITSELF

    protected :
{
/*1*/class _export associateC/*1*/

/**/
*/
  but nothing in this class constrains the state information passed within assViewC instances to the semantics of "views" in 3 dimensional space
  this class was crafted to support a 3 dimensional vector graphics presentation system in which each associateC instance is a vertex in a 3 dimensional line drawing that are "seen" by an eyeC instance located at a particular location, with a particular orientation
  but the assViewC instances that are communicated are "buckets" that can contain any kind of state information
  identifiers in the source code use the photography analog for readability and understandability
 generality
  the end result is that each associate A is informed that associate C's state ("view") has changed and obtains that new state ("view") of associate C
  (3) for each such call, associate C returns its new state to the associate A caller
  (2) each associate A then calls associate C's sayCheeseF to obtain C's new state ("view")
  (1) when associate C has changed, it calls moonThePhotographersF to tell each of its associates A that its state ("view") has changed, by calling each associate A's takeMyPictureF
 that narrative is an analog to how associateC instances "see" each other
   (3) when the light from each strobe hits the woman, it reflects back into the camera lens to inform the film of the woman's appearance
   (2) in response, each photographer's camera then flashes its strobe to illuminate the woman
   (1) she then tells each of the photographers to take her picture
   the woman changes her pose
  the photo shoot consists of repeated cycles of the following actions
 narrative for hypothetical beautiful woman on a beach at night, surrounded by photographers
  sayCheeseF( tin0S& tinBaseP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP ) :  constructs an assViewC instance at pbaViewP
  takeMyPictureF( tin0S& tinBaseP , associateC& vieweeP )                                       :  if vieweeP is known to me, call vieweeP.sayCheeseF( tin0S& tinBaseP , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )
  moonThePhotographersF( tin0S& tinBaseP )                                                      :  for each associate       , call takeMyPictureF( tinBaseP , *this )
 calls
photography analog
associates can be heterogeneous (not all of the same derived class)
derived class instance can walk its list of associates
instances that have been explicitly associated with each other will inform each other when they are destroyed
mixin
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

