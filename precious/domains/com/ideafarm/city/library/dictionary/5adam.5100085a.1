
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

//THREADmODE2rESTORE
THREADmODE4rESTORE

}
    //++ s ; ether.osSleepF( tinP , TOCK << 3 ) ;
    etThread.traceF( tinP , T("napping while having record") ) ;

    }
        //++ s ; ether.osSleepF( tinP , TOCK << 3 ) ;
        etThread.traceF( tinP , T("napping while having field vsp") ) ;
        *pc1 = 0x12121212 ;
        countT*  pc1 = vsp1Lath ;

        countVSP vsp1Lath = listC::countIF( tinP , myRecord , count2S( 1 | BM_HIGH ) ) ;
    {

    recordC myRecord( tinP , pcNameRecord , flLISToPEN_null , ifcIDgRABlAYER_7BASEmISC1 ) ;
    countT  pcNameRecord[] = { LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION , LISTnAME_GLOBALrECORD , LISTnAME_MEMO , 0 } ;
{
sleepC s( tinP , TAG( TAGiDnULL ) ) ;

THREADmODE4oN( flTHREADmODE4_ALLOWwRITEABLEpOINTERgET )
//THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

etThread.traceF( tinP , T("[idCell]:  ")+TF2(idCell,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
const countT idCell = tinP.pag1->idCell ;
TN( tb4 , "    " ) ;

TODO

/*1*/WAKEsHOWtEXT( "baseline.858.recordC.sleep.blammo" )/*1*/
/**/
*/
 if sleep is necessary, set flTHREADmODE2_ALLOWsTOPwHILEgRABBING
 best practice is to never sleep between ct a recordC and dt it
i demonstrate "sleep blammo" when a recordC instance has been ct on the thread
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

