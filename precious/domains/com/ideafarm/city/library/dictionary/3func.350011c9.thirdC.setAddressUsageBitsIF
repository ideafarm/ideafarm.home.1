
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    }
        }
            pbc += cbPiece ;

            }
                default                            : { BLAMMOiD( 0x75757575 )                                  ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_FILE    : { processGlobal2I.pbAddressBitsFile[    offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_SEX     : { processGlobal2I.pbAddressBitsSex[     offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_SHARED  : { processGlobal2I.pbAddressBitsShared[  offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_PRIVATE : { processGlobal2I.pbAddressBitsPrivate[ offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_STACK   : { processGlobal2I.pbAddressBitsStack[   offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_DATA    : { processGlobal2I.pbAddressBitsData[    offByte ] |= mask ; break ; }
                case ifcIDtYPEaDDRESSuSAGE_CODE    : { processGlobal2I.pbAddressBitsCode[    offByte ] |= mask ; break ; }
            {
            switch( idTypeP )
                                                       processGlobal2I.pbAddressBitsAll[     offByte ] |= mask ;

            if( offByte >= sizeof processGlobal2I.pbAddressBitsAll ) { BLAMMOiD( 0x24242424 ) ; }

            byteT  mask     = (byteT)( 1 << offBit ) ;
            countT offBit   = offPiece % SB ;
            countT offByte  = offPiece / SB ;
            countT offPiece = (countT)pbc / cbPiece ;
        {
        while( pbc < pbEnd )
        const byteT* pbc = pbStart ;

        }
            }
                countT foo = 2 ;
            {
            if( idTypeP == ifcIDtYPEaDDRESSuSAGE_DATA )
        {
        if( 0x00700000 <= (countT)pbP && (countT)pbP < 0x01900000 )
    {
    if( bOk )

    }
        }
            pbc = pbrEnd ;

            const byteT* pbrEnd   = (const byteT*)infor.BaseAddress + infor.RegionSize ;
            const byteT* pbrStart = (const byteT*)infor.BaseAddress                    ;

            if( idTypeP == ifcIDtYPEaDDRESSuSAGE_STACK && pbStart != (const byteT*)infor.AllocationBase ) { BLAMMO ; }

            VirtualQuery( (voidT*)pbc , &infor , sizeof infor ) ;
            MEMORY_BASIC_INFORMATION infor ;
        {                                                                                       //THIS BLOCK OF CODE IS A STUB THAT DOES NOTHING
        while( pbc < pbEnd )                                                                    //U: EDIT THIS LOOP TO RESET bOk IF THE ALLOCATION RANGE DOES NOT LOOK AS EXPECTED
        const byteT* pbc = pbStart ;
    {
    boolT bOk = 1 ;

    ;
        : pbStart + cbGrain                                                                     //A:ASSUME: FOR ANY OTHER KIND OF ADDRESS USAGE, ASSUME ONLY THAT THE SAME USAGE APPLIES FOR THE ENTIRE STARTING ALLOCATION GRAIN
        ? (const byteT*)info1.BaseAddress    + info1.RegionSize                                 //A:ASSUME: FOR A THREAD STACK, pbP LIES WITHIN THE LATH RANGE OF THE ALLOCATION (IF NOT TRUE, THEN I DO NOT SET BITS FOR THE GRAINS THAT CONTAIN HIGHER RANGES)
    const byteT* pbEnd = idTypeP == ifcIDtYPEaDDRESSuSAGE_STACK

    ;                                                                                           //FOR EXAMPLE, THE LOADER WILL CREATE AN ALLOCATION FOR CODE THAT ALSO CONTAINS GLOBAL STATIC DATA
        : (const byteT*)info1.BaseAddress                                                       //FOR ANY OTHER KIND OF USAGE, MAKE NO ASSUMPTIONS ABOUT WHAT IS BETWEEN AllocationBase AND BaseAddress
        ? (const byteT*)info1.AllocationBase                                                    //A:ASSUME: FOR A THREAD STACK, THE ENTIRE ALLOCATION IS USED AS THE STACK, INCLUDING LOW ADDRESSES RESERVED AND WO OR MORE GUARD PAGES
    const byteT* pbStart = idTypeP == ifcIDtYPEaDDRESSuSAGE_STACK

    VirtualQuery( (voidT*)pbP , &info1 , sizeof info1 ) ;
    MEMORY_BASIC_INFORMATION info1 ;

    countT cbPiece = cbGrain >> EXPmAGNIFYgRAIN ;
    countT cbGrain = thirdC::os_cbAllocationGrain_IF() ;
{
/*1*/voidT thirdC::setAddressUsageBitsIF( const byteT* pbP , countT idTypeP )/*1*/


/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

