
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        ((tin9S&)tinBaseP).pag5->frPaper.grab.ungrabF( tinBaseP ) ;
        }
            etherP( tinBaseP , pstk_pSadam ) ;
            }
                }
                    ((tin9S&)tinBaseP).pag5->frPaper.grab.ungrabF( tinBaseP ) ;
                    }
                        while( bContinue || ( ~hWalk && !bFound ) ) ;
                        }
                            }
                                else                    break ;
                                if( !bFound && bArmed ) bContinue = 1 ;
                            {
                            if( !hWalk )
                            
                            }
                                }
                                    }
                                        break ;
            
                                        }
                                            }
                                                break ;
                                                }
                                                    }
                                                        bArmed = 1 ;
                                                        pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABlEAVING , idEvent , 0 , 0 ) ;
                                                    {
                                                    else if( F(pSadam->flags) & flSADAMc_OWNtAB )
                                                    }
                                                        pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABaRRIVING , idEvent , 0 , 0 ) ;
                                                        bFound = 1 ;
                                                        bArmed = 0 ;
                                                    {
                                                    else if( bArmed )
                                                    }
                                                        pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABaRRIVING , idEvent , 0 , 0 ) ;
                                                        bFound = 1 ;
                                                    {
                                                    if( !bInherit )
                                                {
                                                if( pSadam->features.fc.idTabClass )
                                            {
                                            case ifcIDtYPEtABfRESH_LEFT :
                                            case ifcIDtYPEtABfRESH_RIGHT :
                                            }
                                                break ;
                                                else if( F(pSadam->flags) & flSADAMc_OWNtAB ) pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABlEAVING  , idEvent , 0 , 0 ) ;
                                                     if( pSadam == pSadamJumpToP            ) pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABaRRIVING , idEvent , 0 , 0 ) ;
                                            {
                                            case ifcIDtYPEtABfRESH_JUMP :
                                            }
                                                break ;
                                                }
                                                    }
                                                        break ;
                                                        pSadam->doF( tinBaseP , etherP , ifcIDtYPEsTROKEcALLbACK_TABaRRIVING , idEvent , 0 , 0 ) ; //RETURN CODE IS INTENTIONALLY IGNORED
                                                        bFound = 1 ;
                                                    {
                                                    if( !bInherit || ( F(pSadam->flags) & flSADAMc_TABwAShERE || F(pSadam->flags) & flSADAMc_OWNtAB ) )
                                                {
                                                if( pSadam->features.fc.idTabClass )
                                            {
                                            case ifcIDtYPEtABfRESH_FRESH :
                                        {
                                        switch( idTypeP )
                                    {
                                    case 2 : 
                                    }
                                        break ;
                                        }
                                            else            pSadam->flags &= ~( F(flSADAMc_TABwAShERE) ) ; //CODEsYNC: DUPLICATED CODE 1020187 10301bf
                                            if( !bInherit ) bInherit = 1 ;
                                        {
                                        if( pSadam->features.fc.idTabClass && ( F(pSadam->flags) & flSADAMc_TABwAShERE || F(pSadam->flags) & flSADAMc_OWNtAB ) )
                                    {
                                    case 1 : //LOOK FOR INHERITED b TabWasHere; RESET ALL REDUNDANT
                                {
                                switch( idPass )
                            {
                            //if( pSadam->pStrike && pSadam->pStrike->sc.pPaper->bShowF( tinBaseP ) ) //U:: THIS LINE IS OBSOLETED BY bAwakePresentIF AND WRONG
                            sadamC* pSadam = (sadamC*)pstk_pSadam->downF( tinBaseP , hWalk ) ;
                        {
                        do
                        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    for( countT idPass = 1 ; idPass <= 2 ; idPass ++ )
                    ((tin9S&)tinBaseP).pag5->frPaper.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                    ZE( boolT , bFound ) ;
                    ZE( boolT , bContinue ) ;
                    ZE( boolT , bInherit ) ;
                    ZE( boolT , bArmed ) ;
                {
                if( *pstk_pSadam )
                const countT idEvent = 1 + incv02AM( ((tin9S&)tinBaseP).pag1->idEventSadamsLath ) ;
    
                }
                    while( ~hWalk ) ;
                    }
                        if( !sad.bAwakePresentF( tinBaseP ) || !features.fc.idTabClass ) pstk_pSadam->extractF( 0 , tinBaseP ) ;
    
                        featuresS& features = *(featuresS*)&(const featuresS&)sad ;
                        sadamC& sad = *(sadamC*)pstk_pSadam->downF( tinBaseP , hWalk ) ;
                    {
                    do
                    handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                {
            {
            if( pstk_pSadam && *pstk_pSadam )
            getF( tinBaseP , pstk_pSadam , idTypeP != ifcIDtYPEtABfRESH_LEFT ? flGETsADAMsTATES_FIFO : flGETsADAMsTATES_null ) ;
            ZE( stackC* , pstk_pSadam ) ;
        {
        if( !( F(((tin9S&)tinBaseP).pag1->_pulpOldC_.flagsMode) & flPAPERmODEi_SUPPRESStABfRESH ) )
        ((tin9S&)tinBaseP).pag5->frPaper.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( c_this )
    countT c_this = (countT)this ; //U::EDIT CODE TO REMOVE THE NEED FOR THIS (DESTROY WINDOW EARLIER OR PURGE paperOldC BEFORE DT *this
{
/*1*/voidT sadamsC::tabFreshF( tin0S& tinBaseP , etherC& etherP , const countT idTypeP , const sadamC* const pSadamJumpToP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

