
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __( bFail ) ;
    }
        if( POOP ) POOPR

        while( bFail && ( bNoQuit || ( !cTriesP && !etPrime ) || ( cTriesP && -- cTriesP ) ) ) ;
        }
            }
                ++ s ; ( bNoQuit ? (etherC&)*((tinNormalS&)tinBaseP).pEtScratch : etPrime ).osSleepF( tinBaseP , TOCK * 0x10 ) ;
                sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
            {
            if( bFail )

            else       bFail = 0 ;
            if( POOP ) POOPR

            sChat2.writeF( tinBaseP , sOut3 ) ;
            soulC sOut3( tinBaseP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcIDcMDsESSION_BYE ) ;
    
            }
                b_idaLeverP.ungrabF( tinBaseP ) ;
                b_idhLeverP.ungrabF( tinBaseP ) ;
                }
                    }
                        }
                            tblCellsP.newObjectF( tinBaseP , *pNicName ) ;
                            tblCellsP.newObjectF( tinBaseP , idaLeverP   ) ;
                            tblCellsP.newEventF( tinBaseP ) ;
                            stDelete_nicNameC_ptrP << pNicName ;
    
                            swsNicNameP << pNicName2 ;
                            *pNicName2 = *pNicName = idhLeverP ;
                        {
                        if( pNicName && pNicName2 )
                        ((tinNormalS&)tinBaseP).pEtScratch->newF( tinBaseP , LF , pNicName2 ) ; ___( pNicName2 ) ;
                        ((tinNormalS&)tinBaseP).pEtScratch->newF( tinBaseP , LF , pNicName  ) ; ___( pNicName  ) ;
                        ZE( nicNameC* , pNicName2 ) ;
                        ZE( nicNameC* , pNicName  ) ;
    
                        swsIdAdamP << idaLeverP ;
                        sIn2 >> idaLeverP ;
                        idaLeverP = 0 ;
                    {
                    while( cAdams -- )
    
                    sIn2 >> cAdams ;
                    ZE( countT , cAdams ) ;
    
                    idhLeverP << sIn2 ;
                    idhLeverP = 0 ;
                {
                while( cFlavors -- )
                b_idhLeverP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                b_idaLeverP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    
                sIn2 >> cFlavors ;
                ZE( countT , cFlavors ) ;
            {
    
            __( idReply - ifcIDcMDsESSION_QUERYaDAMSrEPLY ) ;
            sIn2 >> idReply ;
            idReply = 0 ;
    
            sChat2.readF( tinBaseP , sIn2 ) ;
            sChat2.writeF( tinBaseP , sOut2 ) ;
            soulC sOut2( tinBaseP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcIDcMDsESSION_QUERYaDAMS ) ;
            soulC sIn2( tinBaseP , TAG( TAGiDnULL ) ) ;
    
            }
                }
                    tblHostsP.newObjectF( tinBaseP , *pStk_pNicName ) ;
                    }
                        }
                            *pStk_pNicName << pNicName ;
                            *pNicName << sIn1 ;
                            *pNicName = 0 ;
                            //(pNicName WILL BE DELETED WHEN pStk_pNicName IS DELETED) stDelete_nicNameC_ptrP << pNicName ;
                        {
                        if( pNicName )
                        ((tinNormalS&)tinBaseP).pEtScratch->newF( tinBaseP , LF , pNicName ) ; ___( pNicName ) ;
                        ZE( nicNameC* , pNicName ) ;
                    {
                    while( cNicName -- )
                    sIn1 >> cNicName ;
                    ZE( countT , cNicName ) ;
    
                    tblHostsP.newObjectF( tinBaseP , *pNicNameRegistrand     ) ;
                    tblHostsP.newObjectF( tinBaseP , psttOldCommentUsedByIFC   ) ; stDelete_strokeS_ptrP << psttOldCommentUsedByIFC   ;
                    tblHostsP.newObjectF( tinBaseP , psttOldCommentUsedByOwner ) ; stDelete_strokeS_ptrP << psttOldCommentUsedByOwner ;
                    tblHostsP.newObjectF( tinBaseP , psttNameUsedByInternet ) ; stDelete_strokeS_ptrP << psttNameUsedByInternet ;
                    tblHostsP.newObjectF( tinBaseP , psttNameUsedByIFC      ) ; stDelete_strokeS_ptrP << psttNameUsedByIFC      ;
                    tblHostsP.newObjectF( tinBaseP , psttNameUsedByOwner    ) ; stDelete_strokeS_ptrP << psttNameUsedByOwner    ;
                    tblHostsP.newObjectF( tinBaseP , psttEmailOwner         ) ; stDelete_strokeS_ptrP << psttEmailOwner         ;
                    tblHostsP.newObjectF( tinBaseP , idComputer             ) ;
                    tblHostsP.newEventF( tinBaseP ) ;
    
                    *pNicNameRegistrand << sIn1    ;
                    sIn1 >> psttOldCommentUsedByIFC   ; ___( psttOldCommentUsedByIFC   ) ;
                    sIn1 >> psttOldCommentUsedByOwner ; ___( psttOldCommentUsedByOwner ) ;
                    sIn1 >> psttNameUsedByInternet ; ___( psttNameUsedByInternet ) ;
                    sIn1 >> psttNameUsedByIFC      ; ___( psttNameUsedByIFC      ) ;
                    sIn1 >> psttNameUsedByOwner    ; ___( psttNameUsedByOwner    ) ;
                    sIn1 >> psttEmailOwner         ; ___( psttEmailOwner         ) ;
                    sIn1 >> idComputer             ;
    
                    ZE( strokeS* , psttOldCommentUsedByIFC   ) ;
                    ZE( strokeS* , psttOldCommentUsedByOwner ) ;
                    ZE( strokeS* , psttNameUsedByInternet ) ;
                    ZE( strokeS* , psttNameUsedByIFC      ) ;
                    ZE( strokeS* , psttNameUsedByOwner    ) ;
                    ZE( strokeS* , psttEmailOwner         ) ;
                    ZE( countT   , idComputer             ) ;
    
                    *pNicNameRegistrand = 0 ;
                    stDelete_stackC_ptrP << (countT)pStk_pNicName ;
                    stDelete_nicNameC_ptrP << pNicNameRegistrand ;
                {
                if( pNicNameRegistrand && pStk_pNicName )
    
                stackC* pStk_pNicName = new( 0 , tinBaseP , LF ) stackC( tinBaseP , *this , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_nicNameC ) ; ___( pStk_pNicName ) ;
                ((tinNormalS&)tinBaseP).pEtScratch->newF( tinBaseP , LF , pNicNameRegistrand ) ; ___( pNicNameRegistrand ) ;
                ZE( nicNameC* , pNicNameRegistrand ) ;
            {
            while( cHosts -- )
    
            sIn1 >> cHosts ;
            ZE( countT , cHosts ) ;
    
            __( idReply - ifcIDcMDsESSION_QUERYnICnAMErEPLY ) ;
            sIn1 >> idReply ;
            ZE( countT , idReply ) ;
    
            sChat2.readF( tinBaseP , sIn1 ) ;
            sChat2.writeF( tinBaseP , sOut1 ) ;
            soulC sOut1( tinBaseP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcIDcMDsESSION_QUERYnICnAME ) ;
            soulC sIn1( tinBaseP , TAG( TAGiDnULL ) ) ;
    
            sChat2.connectF( tinBaseP , idPort2 , idhIfc ) ;
            socketC sChat2( tinBaseP , *((tinNormalS&)tinBaseP).pEtScratch , TAG( TAGiDnULL ) ) ;
    
            }
                souli >> idPort2 ;
                __( idReply - ifcIDcMDsESSION_NEWsOCKETrEPLY ) ;
                souli >> idReply ;
                ZE( countT , idReply ) ;
                sChat.readF( tinBaseP , souli ) ;
                soulC souli( tinBaseP , TAG( TAGiDnULL ) ) ;
    
                sChat.writeF( tinBaseP , soulo ) ;
                soulC soulo( tinBaseP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcIDcMDsESSION_NEWsOCKET ) ;
    
                sChat.connectF( tinBaseP , ifcPORToLD2_CHAT , idhIfc ) ;
                socketC sChat( tinBaseP , *((tinNormalS&)tinBaseP).pEtScratch , TAG( TAGiDnULL ) ) ;
            {
            ZE( countT , idPort2 ) ;
            nicNameC idhIfc = socketC::nicNameIF( tinBaseP , *((tinNormalS&)tinBaseP).pEtScratch , T(WWWiDEAFARMcOM) ) ;
    
            ZE( boolT , bOk ) ;
        {
        do
        SCOOPS
    {
    IFsCRATCH
    boolT bFail = 1 ;
    boolT bNoQuit = cTriesP == - 1 ;
    etherC& etPrime = etPrimeIF( tinBaseP ) ;

    tblHostsP.newColF( tinBaseP , T("nicNameAll") ) ;
    tblHostsP.newColF( tinBaseP , T("nicNameRegistrand") ) ;
    tblHostsP.newColF( tinBaseP , T("commentUsedByIFC") ) ;
    tblHostsP.newColF( tinBaseP , T("commentUsedByOwner") ) ;
    tblHostsP.newColF( tinBaseP , T("nameUsedByInternet") ) ;
    tblHostsP.newColF( tinBaseP , T("nameUsedByIFC") ) ;
    tblHostsP.newColF( tinBaseP , T("nameUsedByOwner") ) ;
    tblHostsP.newColF( tinBaseP , T("emailOwner") ) ;
    tblHostsP.newColF( tinBaseP , T("idComputer") ) ;

    tblCellsP.newColF( tinBaseP , T("nicName") ) ;
    tblCellsP.newColF( tinBaseP , T("idAdam") ) ;

    _IO_

    }
        if( POOP ) return ;
        //U: VERIFY THAT IS IN INITIAL PHASE AND THAT NO COLS HAVE YET BEEN DEFINED
        __( tblHostsP.cRowsF( tinBaseP ) ) ;
        __( tblCellsP.cRowsF( tinBaseP ) ) ;
        __( stDelete_nicNameC_ptrP.idTypeF( tinBaseP ) - ifcSTACKtYPE_PTR_nicNameC ) ;
        __( stDelete_strokeS_ptrP.idTypeF( tinBaseP ) - ifcSTACKtYPE_PTR_strokeS ) ;
        __( swsIdAdamP.cFlavorsF( tinBaseP ) ) ;
        __( swsIdAdamP.idTypeF( tinBaseP ) - ifcSTACKtYPE_countT ) ;
        __( swsNicNameP.cFlavorsF( tinBaseP ) ) ;
        __( swsNicNameP.idTypeF( tinBaseP ) - ifcSTACKtYPE_PTR_nicNameC ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::ifcCellHostsF( tinBaseS& tinBaseP , switchStackC& swsNicNameP , countT& idaLeverP , batonC& b_idaLeverP , switchStackC& swsIdAdamP , nicNameC& idhLeverP , batonC& b_idhLeverP , tableC& tblCellsP , tableC& tblHostsP , stackC& stDelete_strokeS_ptrP , stackC& stDelete_nicNameC_ptrP , stackC& stDelete_stackC_ptrP , countT cTriesP )/*1*/

/**/
*/
  if > 0 then i will retry this many times and impotence will -not- occur if i cannot get the information
  if -1 then will retry forever even after asynch impotence occurs
  if 0 then will retry forever until asynch impotence occurs
  can be 0
 cTriesP
  must be explicitly purged by calling DEL( pStack ) for each value
 stDelete_stackC_ptrP
  need not be explicitly purged
  must not be destructed before tblHostsP
 stDelete_nicNameC_ptrP
  need not be explicitly purged
  must not be destructed before tblHostsP
 stDelete_strokeS_ptrP
  must be empty
  columns must not yet be defined
  recommended internal name: T("hosts")
 tblHostsP
  must be empty
  columns must not yet be defined
  recommended internal name: T("cells")
 tblCellsP
 b_idhLeverP
 idhLeverP
  must use an nicNameC lever
  must be of type ifcSTACKtYPE_countT
  must be empty
 swsIdAdamP
 b_idaLeverP
 idaLeverP
  must use a countT idAdam lever
  must be of type ifcSTACKtYPE_PTR_nicNameC
  must be empty
 swsNicNameP
 tinBaseP
  | 
  | }
  |     DEL( pStk ) ;
  |     stDelete_stackC_ptr >> pStk ;
  |     ZE( stackC* , pStk ) ;
  | {
  | while( stDelete_stackC_ptr )
  | 
  | !tblHosts ;
  | !tblCells ;
  | 
  | etThread.ifcCellHostsF( tinBaseP , swsNicName , idaLever , b_idaLever , swsIdAdam , idhLever , b_idhLever , tblCells , tblHosts , stDelete_strokeS_ptr , stDelete_nicNameC_ptr , stDelete_stackC_ptr ) ;
  | 
  | stackC stDelete_stackC_ptr(  tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
  | stackC stDelete_nicNameC_ptr( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_nicNameC ) ;
  | stackC stDelete_strokeS_ptr( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_strokeS ) ;
  | 
  | tableC tblHosts( tinBaseP , etThread , T("hosts") ) ;
  | tableC tblCells( tinBaseP , etThread , T("cells") ) ;
  | 
  | switchStackC swsIdAdam( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idhLever ) ;
  | batonC b_idhLever( tinBaseP , TAG( TAGiDnULL ) ) ;
  | nicNameC idhLever ;
  | 
  | switchStackC swsNicName( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idaLever , ifcSTACKtYPE_PTR_nicNameC ) ;
  | batonC b_idaLever( tinBaseP , TAG( TAGiDnULL ) ) ;
  | ZE( countT , idaLever ) ;
  | 
   the only part that is not required is the 2 "!tbl" lines, which log the contents of the tables
  most of this snippet is required
 cut and paste code snippet
arguments
\<A HREF=\"5.103017c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ifcCellHostsF.0.html\"\>instances\</A\>
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

