
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.strokeF( tin0P , T("ok\r\n") ) ;
onePackF( tin0P , etThread ) ;

TODO

}
    }
        etThread.delF( tin0P , pba ) ;
        }
            etThread.boxPutF( tin0P , T("///ideafarm/ephemeral/gen/lake/pack") , pba , cba ) ;
            etThread.strokeF( tin0P , T("\r\nwriting combined pack\r\n") ) ;

            }
                etThread.delF( tin0P , pc2p ) ;
                }
                    etThread.delF( tin0P , pbPack ) ;
                    off += cbPack - sizeof( countT ) ;
                    etThread.memCopyF( tin0P , pba + off , pbPack + sizeof( countT ) , cbPack - sizeof( countT ) ) ;
                    byteT* pbPack = (byteT*)pc2p->c2 ;
                    countT cbPack = pc2p->c1 ;
                {
                if( pc2p )
                stPacks >> pc2p ;
                ZE( count2S* , pc2p ) ;
                etThread.strokeF( tin0P , T("\rcopying pack ")+TF1(++idPack)+T(" of ")+TF1(cToDo)+T(" to combined image") ) ;
            {
            while( stPacks )
            countT off = sizeof( countT ) ;

            *(countT*)pba = ifcIDfILEtYPE_PACKED ;
        {
        if( pba )
        etThread.newF( tin0P , LF , pba , cba ) ; ___( pba ) ;
        ZE( byteT* , pba ) ;
        idPack = 0 ;

        while( handle ) ;
        }
            if( pc2p ) cba += pc2p->c1 - sizeof( countT ) ;
            count2S* pc2p = (count2S*)stPacks.downF( tin0P , handle ) ;
        {
        do
        handleC handle( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        countT cba = sizeof( countT ) ;
    {
    if( stPacks )

    }
        etThread.delF( tin0P , pstt1m ) ;
        etThread.strokeF( tin0P , T("\r\n") ) ;
        }
            }
                }
                    stPacks << pc2p ;
                    pc2p->c2 = (countT)pbPack ;
                    pc2p->c1 = cbPack ;
                {
                if( pc2p )
                etThread.newF( tin0P , LF , pc2p ) ; ___( pc2p ) ;
                ZE( count2S* , pc2p ) ;
            {
            if( !etThread )

            if( !etThread ) { __( *(countT*)pbPack - ifcIDfILEtYPE_PACKED ) ; }
            if( !etThread ) { __( cbPack < sizeof( countT )               ) ; }
            etThread.boxGetShadowF( tin0P , pbPack , cbPack , psttc1 ) ; ___( pbPack ) ;
            ZE( countT , cbPack ) ;
            ZE( byteT* , pbPack ) ;

            etThread.strokeF( tin0P , T("\rreading pack ")+TF1(++idPack)+T(" of ")+TF1(cToDo)+T(" from disk") ) ;
        {
        FORsTRINGSiN1( pstt1m )

        cToDo = etThread.boxMenuF( tin0P , soul1m , T("///ideafarm/ephemeral/gen/lake/packs/" "*") ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;
    {
    stackC stPacks( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_count2S ) ;
    ZE( countT , cToDo ) ;
    ZE( countT , idPack ) ;
{
voidT onePackF( tin0S& tin0P , etherC& etThread )
// THIS CODE IS DUPLICATED IN 9e30104 AND IN dd30104

/*1*/WAKEhIDE( "onePack" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

