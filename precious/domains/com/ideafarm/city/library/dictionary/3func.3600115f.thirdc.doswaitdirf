
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bChanged ;
    }
        #endif

            }
                if( bChanged ) break ;

                }
                    BOS( WHATgbo , BOSoK , FindNextChangeNotification( (HANDLE)handleP.osF( ifcIDtYPEhANDLE_FILEwAIT ) ) )
                    bChanged = 1 ;
                {
                if( ((tin1S&)tin0P).brcRaw == WAIT_OBJECT_0 )

                BOSpOOP
                BOS( WHATsfr , BOSwAITcODE , WaitForSingleObject( (HANDLE)handleP.osF( ifcIDtYPEhANDLE_FILEwAIT ) , msNow ) )

                if( msMaxP != - 1 ) msMaxP -= msNow ;
                countT msNow = msMaxP < 250 ? msMaxP : 250 ;
            {
            else while( !*this && !bQuitP && msMaxP )
            }
                }
                    INCoShANDLES
                {
                else
                }
                    __1
                    __( ((tin1S&)tin0P).brcLath ) ;
                    if( pEtherContainsMe ) pEtherContainsMe->traceF( tin0P , T("dosWaitDirF / error [brcLath,postDirP]:    ")+TF2(((tin1S&)tin0P).brcLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postDirP) ) ;
                {
                if( !handleP )
                handleP.osF( ifcIDtYPEhANDLE_FILEwAIT , ((tin1S&)tin0P).brcRaw ) ;
                BOS( WHATgbo , BOShANDLE , FindFirstChangeNotification( postDirP , bRecurse , osFlags ) )

                }
                    if( F(flagsP) & flWAITdIR_SECURITY  ) osFlags |= FILE_NOTIFY_CHANGE_SECURITY   ;
                    if( F(flagsP) & flWAITdIR_WRITE     ) osFlags |= FILE_NOTIFY_CHANGE_LAST_WRITE ;
                    if( F(flagsP) & flWAITdIR_SIZE      ) osFlags |= FILE_NOTIFY_CHANGE_SIZE       ;
                    if( F(flagsP) & flWAITdIR_ATTRIBUTE ) osFlags |= FILE_NOTIFY_CHANGE_ATTRIBUTES ;
                    if( F(flagsP) & flWAITdIR_DIRnAME   ) osFlags |= FILE_NOTIFY_CHANGE_DIR_NAME   ;
                    if( F(flagsP) & flWAITdIR_FILEnAME  ) osFlags |= FILE_NOTIFY_CHANGE_FILE_NAME  ;
                {
                else
                if( ( flagsP & ~( F(flWAITdIR_RECURSE) ) ) == flWAITdIR_null ) osFlags = FILE_NOTIFY_CHANGE_FILE_NAME | FILE_NOTIFY_CHANGE_DIR_NAME | FILE_NOTIFY_CHANGE_ATTRIBUTES | FILE_NOTIFY_CHANGE_SIZE | FILE_NOTIFY_CHANGE_LAST_WRITE | FILE_NOTIFY_CHANGE_SECURITY ;
                ZE( flagsT , osFlags ) ;

                boolT bRecurse = !!( F(flagsP) & flWAITdIR_RECURSE ) ;
            {
            if( bWoth )
            BOSnOvALUE( WHATsfr , SetLastError( 0 ) )

        #elif defined( __NT__ )
        #ifdef __OS2__

        boolT bWoth = !handleP ;
    {
    if( !POOP )
    ZE( boolT , bChanged ) ;
    _IO_

    }
        if( POOP ) return 0 ;
        FV( flWAITdIR , flagsP ) ;
        if( POOP ) return 0 ;
        __( !postDirP[ 2 ] ) ;
        if( POOP ) return 0 ;
        }
            __( postDirP[ 1 ] - ':' ) ;
        {
        if( postDirP[ 1 ] != '\\' )            //20190826@0902: ACCOMMODATE NETBIOS FILE NAMES OF THE FORM "\\netbiosname\disk\path\short"
        if( POOP ) return 0 ;
        __( !postDirP[ 0 ] ) ;
        if( POOP ) return 0 ;
        __Z( postDirP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/boolT thirdC::dosWaitDirF( tin0S& tin0P , handleC& handleP , const boolT& bQuitP , const osTextT* const postDirP , countT msMaxP , const flagsT flagsP )/*1*/

// TO BE SAFE, COMBINE THIS WITH POLLING
// CONJECTURE: NTFS DOES FORWARD CHANGE NOTIFICATIONS SO THIS WILL WORK IF THE PEER IS ALSO NTFS
// 20251017@0849: "Notifications may not be returned when calling FindFirstChangeNotification for a remote file system."  (https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstchangenotificationa)

/**/

*/
  if - 1 then i will not return until i have detected a change
  if not 0 then i will return when i have waited this long even if no change detected
  may be 0
 msMaxP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00102e1.flWAITdIR!||
 flagsP
 postDirP
   inspected after each (hardcoded) timeout interval
  if true then i will return almost immediately, after doing nothing
 bQuitP
  must be null on woth call
 handleP
 tin0P
arguments
  caller calls me again, which blocks
  caller sees that my return code is 0 but inspects the directory anyway, so caller sees file "A"
  i return immediately
  caller calls me for the woth time
  a file "A" is written to the directory
 correct code   
  caller calls me again, which blocks, since file "A" was written before i created the handle
  caller sees that my return code is 0 so does not inspect the directory
  i return immediately
  caller calls me for the woth time
  a file "A" is written to the directory
  caller inspects directory
 race scenario (incorrect code)
failure to do this creates a race condition
caller must inspect the watched directory after calling me for the woth time
if handleP is null then i set handleP and return immediately
if handleP is set (by a prior call to me) then i return when the directory that i am watching has changed or when bQuitP becomes true
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

