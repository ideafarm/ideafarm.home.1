
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    LOGrAW( tSay ) ;
    CONoUTrAW( tSay ) ;

    etThread.delF( tinBaseP , psttu ) ;
    TN( tSay , "" ) ; tSay = TF2(cUploadsRemaining,flFORMAT_NObIGITvALUES)+T("| uploed received: ")+T(psttu)+T("\r\n") ;

    etThread.diskMoveFileOrDirUniqueF( tinBaseP , psttu , tFileIn ) ; ___( psttu ) ;
    ZE( strokeS* , psttu ) ;

    }
        etThread.delF( tinBaseP , pbChunk ) ;
        }
            }
                DEL( pso ) ;
                else        POOPR ;
                if( !POOP ) pso->writeF( tinBaseP , "ok\r\n" ) ;
                }
                    cbFile -= cbChunk ;
                    if( !POOP ) etThread.fileWriteF( tinBaseP , hFile , pbChunk , cbChunk ) ;
                    pso->readF( tinBaseP , pbChunk , cbChunk ) ;
                    countT cbChunk = cbFile < CBcHUNK ? cbFile : CBcHUNK ;
                {
                while( !POOP && cbFile )
                pso->readF( tinBaseP , (byteT*)&cbFile , sizeof cbFile ) ;
                ZE( countT , cbFile ) ;
                
                CONoUTrAW( "client connection accepted\r\n" ) ;
                sIn.acceptF( tinBaseP , pso , countTC() , nicNameC() , countTC() ) ; ___( pso ) ;
                ZE( socketC* , pso ) ;
                sIn.listenF( tinBaseP ) ;
                etThread.strokeF( tinBaseP , T("listening on port ")+TF2(idPort,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
                countT idPort = sIn.bindF( tinBaseP , 81 ) ;
                socketC sIn( tinBaseP , *((tinFullS&)tinBaseP).pEtScratch , TAG( TAGiDnULL ) ) ;

                SCOOPS
            {
            IFsCRATCH
        {
        if( pbChunk )
        etThread.newF( tinBaseP , LF , pbChunk , CBcHUNK ) ; ___( pbChunk ) ;
        ZE( byteT* , pbChunk ) ;
        etThread.fileOpenF( tinBaseP , hFile , countTC() , tFileIn , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;
        handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
    {

    TN( tFileIn , "///d/tmp/blob.in" ) ;
{
else while( !ether && !etThread && cUploadsRemaining -- )
}
    etThread.delF( tinBaseP , pbChunk ) ;
    }
        sIn.writeF( tinBaseP , "ok\r\n" ) ;
        }
            cbFile -= cbChunk ;
            etThread.fileWriteF( tinBaseP , hFile , pbChunk , cbChunk ) ;
            sIn.readF( tinBaseP , pbChunk , cbChunk ) ;
            countT cbChunk = cbFile < CBcHUNK ? cbFile : CBcHUNK ;
        {
        while( cbFile )
        sIn.readF( tinBaseP , (byteT*)&cbFile , sizeof cbFile ) ;
        ZE( countT , cbFile ) ;
        
        CONoUTrAW( "connected\r\n" ) ;
        sIn.connectF( tinBaseP , 81 , socketC::nicNameIF( tinBaseP , etThread , T("72.167.92.180") ) ) ;
        CONoUTrAW( "connecting\r\n" ) ;
        sIn.bindF( tinBaseP ) ;
        socketC sIn( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    {
    if( pbChunk )
    etThread.newF( tinBaseP , LF , pbChunk , CBcHUNK ) ; ___( pbChunk ) ;
    ZE( byteT* , pbChunk ) ;
    etThread.fileOpenF( tinBaseP , hFile , countTC() , T("///d/tmp/blob.in") , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;
    handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
{
if( bLaptop )
countT cUploadsRemaining = 0x10 ; //DEFENDS AGAINST DOS ATTACK

const boolT bCenter = IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 == etThread.diskIdF( tinBaseP , T("///c") ) ;
const boolT bLaptop = IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0     == etThread.diskIdF( tinBaseP , T("///c") ) ;

TODO

#define CBcHUNK TOCK

/*1*/WAKEsHOWtEXT( "tool.blob.in" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

