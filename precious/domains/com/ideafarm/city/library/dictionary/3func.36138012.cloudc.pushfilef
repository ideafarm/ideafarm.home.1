
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            if( POOP ) POOPR

            }
                }
                    etPrime.osSleepF( tinBaseP , TOCK ) ;
                    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

                    etRock.traceF( tinBaseP , T("will retry after napping for a tock") ) ;

                    POOPR ;
                {
                else
                }
                    break ;
                    bOk = 1 ;
                {
                if( !POOP )

                }
                    __1
                    etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("[tSay]: ")+tSay ) ;
                    etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("exception: did not expect [tHear]: ")+tHear ) ;
                {
                if( !etScratch.strIdF( tinBaseP , tReplyCode201_Created , tHear ) )

                }
                    break ;
                    etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("authorization refused") ) ;
                {
                if( POOP )
                __NZ( 1 == etScratch.strIdF( tinBaseP , tReplyCode401_Unauthorized , tHear ) ) ;
            {
            if( !POOP )

            //etRock.traceF( tinBaseP , T(postHear) ) ;
            TN( tHear , postHear ) ;

            costHear = ss.readF( tinBaseP , postHear , sizeof postHear , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
            thirdC::c_memsetIF(  tinBaseP , postHear , sizeof postHear ) ;

            ss.writeF( tinBaseP , pbP , cbP ) ;
            ss.writeF( tinBaseP , (osTextT*)tSay , (countT)tSay.csF( tinBaseP ) ) ;
            ss.connectF( tinBaseP , 443 , socketC::nicNameIF( tinBaseP , etScratch , tHost ) ) ;
            socketC ss( tinBaseP , etScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;

            }
                etScratch.delF( tinBaseP , psttShortUrlEncoded ) ;
                }
                    bHandle.ungrabF( tinBaseP ) ;
                    tSay = T("PUT ")+tUrlCloudAgent+T("/")+T(psttCloudContainerP)+T("/")+T(psttShortUrlEncoded)+T(" HTTP/1.1\r\nHost: ")+tHost+T("\r\nX-Auth-Token: ")+cloudInfo.tRackspaceAccessToken+T("\r\nContent-Length: ")+TF4(cbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n") ;
                    cloudInfoS& cloudInfo = *(cloudInfoS*)hCloud.osF( ifcIDtYPEhANDLE_CLOUD ) ;
                    bHandle.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                {

                // 
                // [ ...object content... ]
                //  
                // Content-Length: 512000
                // X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
                // Host: storage.clouddrive.com
                // PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/archive/shortEncodedName HTTP/1.1
                // 
                // EXAMPLE

                etScratch.strToUrlF( tinBaseP , psttShortUrlEncoded , psttShortP ) ; ___( psttShortUrlEncoded ) ;
                ZE( strokeS* , psttShortUrlEncoded ) ;
            {
            if( !tSay.csF( tinBaseP ) )

            SCOOPS
        {
        while( cTries -- && !etPrime && !POOP )
        TN( tSay , "" ) ;
        countT cTries = TUCK >> 5 ;
        etherC& etScratch = *((tinFullS&)tinBaseP).pEtScratch ;
        etherC& etPrime   = etherC::etPrimeIF( tinBaseP ) ;
        ZE( boolT , bOk ) ;
        ZE( countT , costHear ) ;
        char postHear[ TOCK ] ; 
    {
    IFsCRATCH

    //etRock.traceF( tinBaseP , T("the PUT utterance has been appended to the log") ) ;
    //LOGrAW( tSay ) ;
    etherC& etRock = etherC::etherC::etRockIF( tinBaseP ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( cbP ) ;
        if( !cbP ) cbP = thirdC::c_strlenIF( tinBaseP , pbP ) ;    
        if( POOP ) return ;
        __Z( pbP ) ;
        __Z( psttCloudContainerP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/*1*/voidT cloudC::pushFileF( tinBaseS& tinBaseP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP , const byteT* const pbP , countT cbP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

