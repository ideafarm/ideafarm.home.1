
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

etThread.traceF( tin0P , T("ok") ) ;

}
    }
        DEL( ps ) ;
        }
            //++ s ; ether.osSleepF( tin0P , TOCK << 3 ) ;

            }
                }
                    }
                        __1
                        __( idTypeInfo ) ;
                    {
                    if( idTypeAnswer == ifcIDsECTIONdNSrEPLY_ANSWER )
                {
                default:
                }
                    break ;
    
                    if( idTypeAnswer == ifcIDsECTIONdNSrEPLY_ANSWER ) etThread.traceF( tin0P , tQueryName+T(": ")+T(nnSingularity) ) ;
    
                    soul >> nnSingularity ;
                    nicNameC nnSingularity ;
                {
                case ifcIDtYPEdNSqUERY_A :
            {
            switch( idTypeInfo )
    
            }
                soul >> (countT&)time2 ;
                soul >> time1 ;
                ZE( sCountT , time2 ) ;
                ZE( countT  , time1 ) ;
            {
    
            soul >> idClass ;
            ZE( countT , idClass ) ;
    
            soul >> idTypeInfo ;
            ZE( countT , idTypeInfo ) ;
    
            }
                etThread.delF( tin0P , psttw ) ;
                etThread.traceF( tin0P , T("[psttw]:    ")+T(psttw) ) ;
                soul >> psttw ;
                ZE( strokeS* , psttw ) ;
            {
    
            soul >> idTypeAnswer ;
            ZE( countT , idTypeAnswer ) ;
    
            soulC& soul = *ps ;
        {
        if( ps )
        stSoul >> ps ;
        ZE( soulC* , ps ) ;
    {
    else while( !etThread && stSoul )
    if( !stSoul ) etThread.traceF( tin0P , tQueryName+T(" is not registered") ) ;
    
    etThread.dnsQueryF( tin0P , stSoul , tQueryName , ifcIDtYPEdNSqUERY_A ) ;
    stackC stSoul( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_soulC ) ;
{

TN( tQueryName , "" ) ; tQueryName = tUniquifier+T(bEnd?".traceend":".tracebegin")+T(".hidden.ideafarm.com" ) ;

}
    }
        }
            tUniquifier = T(psttc1) ;
            bArmUnique = 0 ;
        {
        else if( bArmUnique )
        else if( 1 == etThread.strIdF( tin0P , tKeyEnd    , psttc1 , 1 ) ) bEnd       = 1 ;
             if( 1 == etThread.strIdF( tin0P , tKeyUnique , psttc1 , 1 ) ) bArmUnique = 1 ;

        etThread.traceF( tin0P , T("[parameter]:    ")+T(psttc1) ) ;
    {
    FORsTRINGSiN1( pstt1p )
    ZE( boolT , bArmUnique ) ;
    TN( tKeyEnd    , "!e" ) ;       // USE !end    IN BAT FILES AND OTHER CODE ; USE !e WHEN TYPING AT COMMAND LINE
    TN( tKeyUnique , "!u" ) ;       // USE !unique IN BAT FILES AND OTHER CODE ; USE !u WHEN TYPING AT COMMAND LINE
    strokeS*& pstt1p = etThread.ether_pstt1_processParametersI_F( tin0P ) ;
{
ZE( boolT , bEnd ) ;
TN( tUniquifier , "0" ) ;

TODO

/*1*/WAKEhIDE( "ifcIDaDAM_TOOLtRACEmARK" )/*1*/
/**/
*/
 use me to mark the trace log before and after making a test purchase, and then use tracemerge.bat on a server to view the merged trace logs
i throw a query to the IPDOS (tm) DNS server (see tmAskDnsF), which will put a mark into its trace log 
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

