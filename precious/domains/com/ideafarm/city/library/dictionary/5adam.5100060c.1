
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

THREADmODE1rESTORE
THREADmODE2rESTORE

CONoUTrAW( "after destroying master pool/-:\r\n" ) ;
}
    CONoUTrAW( "index/-:\r\n" ) ;
    listC::chatterIF( tin0P , pczRoot ) ;
    CONoUTrAW( "index/+:\r\n" ) ;

    puseC puseIndex( tin0P , ifcIDpOOL_HOMEtEMP ) ;
{

listC::chatterIF( tin0P , pczRoot ) ;
CONoUTrAW( "after destroying master pool/+:\r\n" ) ;

}
    etThread.traceF( tin0P , T("after creating record/ ----") ) ;
    }
        etThread.traceF( tin0P , T("after creating record / puseIndex (HOMEtEMP) / ----") ) ;
        listC::chatterIF( tin0P , pczRoot ) ;
        etThread.traceF( tin0P , T("after creating record / puseIndex (HOMEtEMP) / ++++") ) ;
    
        puseC puseIndex( tin0P , ifcIDpOOL_HOMEtEMP ) ;
        _IO_
    {
    
    etThread.traceF( tin0P , T("after creating record / puseMaster / ----") ) ;
    listC::chatterIF( tin0P , pczRoot ) ;
    etThread.traceF( tin0P , T("after creating record / puseMaster / ++++") ) ;
    etThread.traceF( tin0P , T("after creating record/ ++++") ) ;
    

    }
//        if( idTrial % 2 ) { BLAMMO ; }
        
        //entry << _fe_pushC( postMyNickName ) ;
        //entry << *pczfNickName ;
    
        //entry << _fe_pushC( timeN2 ) ;
        //entry << *pczfDate ;
    
        entry << _fe_pushC( timeN1 ) ;
        entry << *pczfTime ;
    
        recordC entry( tin0P , count5S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , PUSE.dispenseUniqueListNameF() ) ) ;
        _IO_
    {

    CONoUTrAW3( "[idTrial]: " , idTrial , idTrial % 2 ? " (i will blammo)\r\n" : "\r\n" ) ;
    }
        //while( !idTrial ) ;
        //do idTrial = 1 + incv02AM( *pcIdTrial ) ;

        etThread.traceF( tin0P , T("********        ********        ********        ********[*pcIdTrial]:    ")+TF2(*pcIdTrial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        *pcIdTrial += 0x11111111 ; //20240806@2227: DOODLE TO MAKE LOCATION OF DATA MORE OBVIOUS IN CHATTER TRACE
    
        THREADmODE3rESTORE
        countT*  pcIdTrial = vspIdTrialLath ;
        THREADmODE3oN( flTHREADmODE3_ALLOWwRITEABLEpOINTERgET )
        countVSP vspIdTrialLath = listC::countIF( tin0P , globals , count2S( *pczfIdTrial ) ) ;
    
        recordC globals( tin0P , count4S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , LISTnAMEsYS_GLOBALrECORD ) ) ;
        _IO_
    {
    ZE( countT , idTrial ) ;

    etThread.traceF( tin0P , T("after creating 2 definitions/ ----") ) ;
    }
        etThread.traceF( tin0P , T("after creating 2 definitions / puseIndex (HOMEtEMP) / ----") ) ;
        listC::chatterIF( tin0P , pczRoot ) ;
        etThread.traceF( tin0P , T("after creating 2 definitions / puseIndex (HOMEtEMP) / ++++") ) ;
    
        puseC puseIndex( tin0P , ifcIDpOOL_HOMEtEMP ) ;
        _IO_
    {
    
    etThread.traceF( tin0P , T("after creating 2 definitions / puseMaster / ----") ) ;
    listC::chatterIF( tin0P , pczRoot ) ;
    etThread.traceF( tin0P , T("after creating 2 definitions / puseMaster / ++++") ) ;
    etThread.traceF( tin0P , T("after creating 2 definitions/ ++++") ) ;
    
    //listC::dictionaryReplaceOsTextIF( tin0P , pczfNickName ) ;
    //listC::dictionaryReplaceOsTextIF( tin0P , pczfDate ) ;
    listC::dictionaryReplaceOsTextIF( tin0P , pczfTime ) ;
    listC::dictionaryReplaceOsTextIF( tin0P , pczfIdTrial ) ;
    //countT pczfNickName[] = { (countT)"nickname" , 0 } ;
    //countT pczfDate[] = { (countT)"date" , 0 } ;
    countT pczfTime[] = { (countT)"time" , 0 } ;
    countT pczfIdTrial[] = { (countT)"idTrial" , 0 } ;

    etThread.traceF( tin0P , T("before anything/ ----") ) ;
    }
        etThread.traceF( tin0P , T("before anything / puseIndex (HOMEtEMP) / ----") ) ;
        listC::chatterIF( tin0P , pczRoot ) ;
        etThread.traceF( tin0P , T("before anything / puseIndex (HOMEtEMP) / ++++") ) ;
    
        puseC puseIndex( tin0P , ifcIDpOOL_HOMEtEMP ) ;
        _IO_
    {
    
    etThread.traceF( tin0P , T("before anything / puseMaster / ----") ) ;
    listC::chatterIF( tin0P , pczRoot ) ;
    etThread.traceF( tin0P , T("before anything / puseMaster / ++++") ) ;
    etThread.traceF( tin0P , T("before anything/ ++++") ) ;
    
    puseC puseMaster( tin0P , "master" , flPOOLc_null , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ;
    _IO_
{
countT pczRoot[] = { LISTnAMEsYS_ROOT , 0 } ;
THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )   //20240806@2205: ADDED W/O ANALYSIS

//CONoUTrAW( "\"\r\n" ) ;
//CONoUTrAW( postMyNickName ) ;
//CONoUTrAW( "nickname: \"" ) ;

//osTextT* postMyNickName = ppostMyNickName[ timeN1 % ( sizeof ppostMyNickName / sizeof ppostMyNickName[ 0 ] ) ] ;
//osTextT* postMyNickName = ppostMyNickName[ 0 ] ;

//;
//}
//    "helen" ,
//    "gabriel" ,
//    "florence" ,
//    "edward" ,
//    "dawn" ,
//    "charles" ,
//    "betty" ,
//    "abraham" ,
//{
//osTextT* ppostMyNickName[] =

etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
ZE( sCountT , timeN2 ) ;
ZE( countT  , timeN1 ) ;

}
    sgnDone.waitF( tin0P ) ;
    ether.osThreadAdamF( tin0P , ifcIDaDAM_PREPARElISTS , 0 , flOStHREADaDAMf_null , &sgnDone ) ;
    signC sgnDone( tin0P , TAG( TAGiDnULL ) ) ;
    _IO_
{

TODO

// 2012.09.26: TESTED AOK (HIRE ME 2 TIMES).  DIRTY RECORD IS NOW DELETED.
// 2012.09.24: ADDED idUpdate.  REGRESSION DEBUGGED. NOW AOK.  TEST: DELETED ephemeral/backed.up.daily; HIRE ME 2 TIMES
// 2012.09.21: REGRESSION DEBUGGED. NOW AOK.  TEST: DELETED ephemeral/backed.up.daily; HIRE ME 4 TIMES
// 2011.12.31: 
// 
// MAINTENANCE HISTORY

/*1*/WAKEsHOWtEXT( "example.simplest.snip.0030193.recordC" )/*1*/
/**/
*/
then hire the example simplest adam for selectC
hire me several times
the entry contains a "nickname" field that is chosen randomly from an array
i log my birth
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

