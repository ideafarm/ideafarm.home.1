

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
}
    return idjSoilRootOrNewBranch ;

    }
        if( pcbWroteP ) *pcbWroteP = cbWroteSome + cWroteMore ;
        if( idjSoilRootOrNewBranchMore - idjSoilRootOrNewBranch ) { BLAMMOiD( idjSoilRootOrNewBranchMore - idjSoilRootOrNewBranch ) ; }
        countT idjSoilRootOrNewBranchMore = writeF( tin0P , pb1P , cb1P , pb2P , cb2P , idjSoilRootOrNewBranch , flagsP | flJOTfILEScwRITE_APPENDpART , &cWroteMore ) & ~NM_HIGH ;
        ZE( countT , cWroteMore ) ;

        }
            cb1P -= cbWroteSome ;
            pb1P += cbWroteSome ;
        {
        else
        }
            cb2P = 0              ;
            pb2P = 0              ;
            cb1P = cb2P - cbDone2 ;
            pb1P = pb2P + cbDone2 ;

            countT cbDone2 = cbWroteSome - cb1P ;
        {
        if( cbWroteSome >= cb1P )
    {
    else
    else if( cbWroteSome > cb1P + cb2P ) { BLAMMOiD( cbWroteSome ) ; }
    }
        if( pcbWroteP ) *pcbWroteP = cbWroteSome ;
    {
    if( cbWroteSome == cb1P + cb2P )

    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****                                                                      **************************************************************************************************************************************************
    //**** CALL MYSELF RECURSIVELY AS NEEDED TO COMPLETELY WRITE ALL INPUT DATA **************************************************************************************************************************************************
    //****                                                                      **************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************

    }
        }
            }
                }
                    if( getNegAM( part.finger ) == FINGERnEG_jotFilePartC ) part.idjBack = idjPartCursor ;
                    jotFilePartC& part = *(jotFilePartC*)(const byteT*)pagePart ;
                {
                if( pagePart == sizeof( jotFilePartC ) )
                pageC pagePart = jotCanChange.readF( tin0P , idjPartNew ) ;
            {

            }
                }
                    }
                        }
                            break ;
                            part.idjNext = idjPartNew ;
                        {
                        else
                        if( part.idjNext ) idjPartCursor = part.idjNext ;
                    {
                    else
                    if( getNegAM( part.finger ) != FINGERnEG_jotFilePartC ) break ;
                    jotFilePartC& part = *(jotFilePartC*)(const byteT*)pagePart ;
                {
                else
                if( pagePart != sizeof( jotFilePartC ) ) break ;
                pageC pagePart = jotCanChange.readF( tin0P , idjPartCursor ) ;
            {
            for(;;)                                                                                     // INSERT idjPartNew INTO THE LEAF PART
        {
        if( !POOP )

        __Z( idjPartCursor ) ;

        }
            }
                }
                    }
                        }
                            break ;
                            idjPartCursor  = branch.idjPart ;
                        {
                        else
                        if( branch.idjNext ) idjBranchCursor = branch.idjNext ;
                    {
                    else
                    if( getNegAM( branch.finger ) != FINGERnEG_jotFileBranchC ) break ;
                    jotFileBranchC& branch = *(jotFileBranchC*)(const byteT*)pageBranch ;
                {
                else
                if( pageBranch != sizeof( jotFileBranchC ) ) break ;
                pageC pageBranch = jotCanChange.readF( tin0P , idjBranchCursor ) ;
            {
            for(;;)                                                                                     // SET idjPartCursor TO POINT TO THE ROOT PART OF THE LEAF BRANCH
        {
        else
        }
            }
                if( getNegAM( branchOld.finger ) == FINGERnEG_jotFileBranchC ) idjPartCursor = branchOld.idjPart ;
                jotFileBranchC& branchOld = *(jotFileBranchC*)(const byteT*)pageBranchOld ;
            {
            if( pageBranchOld == sizeof( jotFileBranchC ) )
            pageC pageBranchOld = jotCanChange.readF( tin0P , idjSoilOrBranchP ) ;

            __NZ( F(flagsP) & flJOTfILEScwRITE_REPLACEfILE ) ;
        {                                                                                               // SET idjPartCursor TO POINT TO THE ROOT PART OF THE SPECIFIED BRANCH
        if( bIsBranch )                                                                                 
        ZE( countT , idjPartCursor ) ;

        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****                  ******************************************************************************************************************************************************************************************************
        //**** APPENDING A PART ******************************************************************************************************************************************************************************************************
        //****                  ******************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
    {
    else
    }
        }
            }
                }
                    }
                        if( getNegAM( branchNew3.finger ) == FINGERnEG_jotFileBranchC ) branchNew3.idjBack = idjBranchCursor ;
                        jotFileBranchC& branchNew3 = *(jotFileBranchC*)(const byteT*)pageBranchNew ;
                    {
                    if( pageBranchNew == sizeof( jotFileBranchC ) )
                    pageC pageBranchNew = jotCanChange.readF( tin0P , idjBranchNew ) ;
                {

                }
                    }
                        }
                            }
                                break ;
                                branchOld.idjNext = idjBranchNew ;
                            {
                            else
                            if( branchOld.idjNext ) idjBranchCursor = branchOld.idjNext ;
                        {
                        else
                        if( getNegAM( branchOld.finger ) != FINGERnEG_jotFileBranchC ) break ;
                        jotFileBranchC& branchOld = *(jotFileBranchC*)(const byteT*)pageBranch ;
                    {
                    else
                    if( pageBranch != sizeof( jotFileBranchC ) ) break ;
                    pageC pageBranch = jotCanChange.readF( tin0P , idjBranchCursor ) ;
                {
                for(;;)                                                                                     // INSERT idjBranchNew INTO THE LEAF BRANCH

                }
                    }
                        if( getNegAM( partNew.finger ) == FINGERnEG_jotFilePartC ) partNew.idjBack = idjBranchNew ;
                        jotFilePartC& partNew = *(jotFilePartC*)(const byteT*)pagePartNew ;
                    {
                    if( pagePartNew == sizeof( jotFilePartC ) )
                    pageC pagePartNew = jotCanChange.readF( tin0P , idjPartNew ) ;
                {                                                                                       // PATCH PART IDJBACK

                countT idjBranchNew = jotCanChange.writeF( tin0P , (byteT*)&branchNew , sizeof branchNew , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
                jotFileBranchC branchNew( tin0P , idjPartNew , time1P , time2P ) ;

                //****************************************************************************************************************************************************************************************************************************
                //****                                  **************************************************************************************************************************************************************************************
                //**** IDjOT IS SOIL SO APPEND A BRANCH **************************************************************************************************************************************************************************************
                //****                                  **************************************************************************************************************************************************************************************
                //****************************************************************************************************************************************************************************************************************************
            {
            else
            }
                }
                    }
                        if( getNegAM( soilNew.finger ) == FINGERnEG_jotFileSoilC ) soilNew.idjBack = idjSoilOrBranchP ;
                        jotFileSoilC& soilNew = *(jotFileSoilC*)(const byteT*)pageSoilNew ;
                    {
                    if( pageSoilNew == sizeof( jotFileSoilC ) )
                    pageC pageSoilNew = jotCanChange.readF( tin0P , idjSoilNew ) ;
                {                                                                                       // PATCH PART IDJBACK

                }
                    }
                        }
                            }
                                break ;
                                soil.idjNext = idjSoilNew ;
                            {
                            else
                            if( soil.idjNext ) idjSoilOrBranchP = soil.idjNext ;
                            if( !idjSoilRootOrNewBranch ) idjSoilRootOrNewBranch = idjSoilOrBranchP ;
                        {
                        else
                        if( getNegAM( soil.finger ) != FINGERnEG_jotFileSoilC ) break ;
                        jotFileSoilC& soil = *(jotFileSoilC*)(const byteT*)pageSoil ;
                    {
                    else
                    if( pageSoil != sizeof( jotFileSoilC ) ) break ;
                    pageC pageSoil = jotCanChange.readF( tin0P , idjSoilOrBranchP ) ;
                {
                for(;;)                                                                                         // SET idjBranchCursor TO POINT TO THE ROOT BRANCH OF THE LEAF SOIL

                }
                    }
                        if( getNegAM( branchNew.finger ) == FINGERnEG_jotFileBranchC ) branchNew.idjBack = idjSoilNew ;
                        jotFileBranchC& branchNew = *(jotFileBranchC*)(const byteT*)pageBranchNew ;
                    {
                    if( pageBranchNew == sizeof( jotFileBranchC ) )
                    pageC pageBranchNew = jotCanChange.readF( tin0P , idjBranchNew ) ;
                {                                                                                       // PATCH PART IDJBACK

                countT idjSoilNew = jotCanChange.writeF( tin0P , (byteT*)&soil , sizeof soil , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
                jotFileSoilC soil( tin0P , idjBranchNew , time1P , time2P ) ;

                }
                    }
                        if( getNegAM( partNew.finger ) == FINGERnEG_jotFilePartC ) partNew.idjBack = idjBranchNew ;
                        jotFilePartC& partNew = *(jotFilePartC*)(const byteT*)pagePartNew ;
                    {
                    if( pagePartNew == sizeof( jotFilePartC ) )
                    pageC pagePartNew = jotCanChange.readF( tin0P , idjPartNew ) ;
                {                                                                                       // PATCH PART IDJBACK

                countT idjBranchNew = jotCanChange.writeF( tin0P , (byteT*)&branch , sizeof branch , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
                jotFileBranchC branch( tin0P , idjPartNew , time1P , time2P ) ;

                //****************************************************************************************************************************************************************************************************************************
                //****                                 ***************************************************************************************************************************************************************************************
                //**** REPLACING FILE SO APPEND A SOIL ***************************************************************************************************************************************************************************************
                //****                                 ***************************************************************************************************************************************************************************************
                //****************************************************************************************************************************************************************************************************************************
            {
            if( F(flagsP) & flJOTfILEScwRITE_REPLACEfILE )
        {
        else
        }
            }
                }
                    }
                        if( getNegAM( branchNew3.finger ) == FINGERnEG_jotFileBranchC ) branchNew3.idjNext = idjNextOld ;
                        jotFileBranchC& branchNew3 = *(jotFileBranchC*)(const byteT*)pageBranchNew ;
                    {
                    if( pageBranchNew == sizeof( jotFileBranchC ) )
                    pageC pageBranchNew = jotCanChange.readF( tin0P , idjBranchNew ) ;
                {
                if( idjNextOld )                                                                        // PATCH NEW BRANCH

                }
                    }
                        }
                            else branchOld.idjNext = idjBranchNew ;
                            }
                                             branchOld.idjNext = idjBranchNew ;
                                idjNextOld = branchOld.idjNext ;
                            {
                            if( branchOld.idjNext )
                        {
                        if( getNegAM( branchOld.finger ) == FINGERnEG_jotFileBranchC )
                        jotFileBranchC& branchOld = *(jotFileBranchC*)(const byteT*)pageBranchOld ;
                    {
                    if( pageBranchOld == sizeof( jotFileBranchC ) )
                    pageC pageBranchOld = jotCanChange.readF( tin0P , idjSoilOrBranchP ) ;
                {
                ZE( countT , idjNextOld ) ;                                                             // PATCH OLD BRANCH

                }
                    }
                        if( getNegAM( partNew.finger ) == FINGERnEG_jotFilePartC ) partNew.idjBack = idjBranchNew ;
                        jotFilePartC& partNew = *(jotFilePartC*)(const byteT*)pagePartNew ;
                    {
                    if( pagePartNew == sizeof( jotFilePartC ) )
                    pageC pagePartNew = jotCanChange.readF( tin0P , idjPartNew ) ;
                {                                                                                       // PATCH PART IDJBACK

                }
                    idjSoilRootOrNewBranch = idjBranchNew = jotCanChange.writeF( tin0P , (byteT*)&branchNew2 , sizeof branchNew2 , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
                    branchNew2.idjBack = idjSoilOrBranchP ;
                    jotFileBranchC branchNew2( tin0P , idjPartNew , time1P , time2P ) ;
                {
                ZE( countT , idjBranchNew ) ;                                                           // WRITE BRANCH
            {
            if( !POOP )
            __NZ( F(flagsP) & flJOTfILEScwRITE_REPLACEfILE ) ;

            //****************************************************************************************************************************************************************************************************************************
            //****                                      **********************************************************************************************************************************************************************************
            //**** IDjOT IS A BRANCH SO INSERT A BRANCH **********************************************************************************************************************************************************************************
            //****                                      **********************************************************************************************************************************************************************************
            //****************************************************************************************************************************************************************************************************************************
        {
        else if( bIsBranch )
        }
            }
                }
                    if( getNegAM( branchNew.finger ) == FINGERnEG_jotFileBranchC ) branchNew.idjBack = idjSoilRootOrNewBranch ;
                    jotFileBranchC& branchNew = *(jotFileBranchC*)(const byteT*)pageBranchNew ;
                {
                if( pageBranchNew == sizeof( jotFileBranchC ) )
                pageC pageBranchNew = jotCanChange.readF( tin0P , idjBranchNew ) ;
            {

            idjSoilRootOrNewBranch = jotCanChange.writeF( tin0P , (byteT*)&soil , sizeof soil , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
            jotFileSoilC soil( tin0P , idjBranchNew , time1P , time2P ) ;

            }
                }
                    if( getNegAM( partNew.finger ) == FINGERnEG_jotFilePartC ) partNew.idjBack = idjBranchNew ;
                    jotFilePartC& partNew = *(jotFilePartC*)(const byteT*)pagePartNew ;
                {
                if( pagePartNew == sizeof( jotFilePartC ) )
                pageC pagePartNew = jotCanChange.readF( tin0P , idjPartNew ) ;
            {

            countT idjBranchNew = jotCanChange.writeF( tin0P , (byteT*)&branchNew1 , sizeof branchNew1 , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
            jotFileBranchC branchNew1( tin0P , idjPartNew , time1P , time2P ) ;

            //****************************************************************************************************************************************************************************************************************************
            //****                    ****************************************************************************************************************************************************************************************************
            //**** NO IDjOT SPECIFIED ****************************************************************************************************************************************************************************************************
            //****                    ****************************************************************************************************************************************************************************************************
            //****************************************************************************************************************************************************************************************************************************
        {
        if( !idjSoilOrBranchP )

        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****                      **************************************************************************************************************************************************************************************************
        //**** NOT APPENDING A PART **************************************************************************************************************************************************************************************************
        //****                      **************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
        //****************************************************************************************************************************************************************************************************************************
    {
    if( !( F(flagsP) & flJOTfILEScwRITE_APPENDpART ) )

    }
        }
            }
                }
                    }
                        }
                            ((tin123S&)tin0P).pEther->traceF( tin0P , T("jotFilesC::writeF / new mod [time?Modified]:    ")+TT(soilPatch.time1Modified,soilPatch.time2Modified) ) ;
                            ((tin123S&)tin0P).pEther->osTimeNowF( tin0P , soilPatch.time1Modified , soilPatch.time2Modified ) ;
                            soilPatch.time2Modified = soilPatch.time1Modified = 0 ;
                        {
                        if( ( !time1P || !time2P ) && ((tin123S&)tin0P).pEther )
                        soilPatch.time2Modified = time2P ;
                        soilPatch.time1Modified = time1P ;
                    {
                    if( getNegAM( soilPatch.finger ) == FINGERnEG_jotFileSoilC )
                    jotFileSoilC& soilPatch = *(jotFileSoilC*)(const byteT*)pageSoil ;
                {
                if( pageSoil == sizeof( jotFileSoilC ) )
                pageC pageSoil = jotCanChange.readF( tin0P , idjMySoil ) ;
            {
            if( idjMySoil )

            }
                }
                    }
                        }
                            break ;
                            idjMySoil = idjbc ;
                        {
                        else
                        if( branchOld.idjBack ) idjbc = branchOld.idjBack ;
                    {
                    if( getNegAM( branchOld.finger ) == FINGERnEG_jotFileBranchC )
                    jotFileBranchC& branchOld = *(jotFileBranchC*)(const byteT*)pageBranch ;
                {
                else
                if( pageBranch != sizeof( jotFileBranchC ) ) break ;
                pageC pageBranch = jotCanChange.readF( tin0P , idjbc ) ;
            {
            for(;;)
            ZE( countT , idjMySoil ) ;
            countT idjbc = idjSoilOrBranchP ;                                         // WALK BACK AND PATCH THE TIME IN THE SOIL
        {
        if( bIsBranch )

        __NZ( !bIsBranch && !idjBranchCursor ) ;

        }
            }
                }
                    break ;

                    }
                        ((tin123S&)tin0P).pEther->traceF( tin0P , T("jotFilesC::writeF / new mod [time?Modified]:    ")+TT(soilMaybe.time1Modified,soilMaybe.time2Modified) ) ;
                        ((tin123S&)tin0P).pEther->osTimeNowF( tin0P , soilMaybe.time1Modified , soilMaybe.time2Modified ) ;
                        soilMaybe.time2Modified = soilMaybe.time1Modified = 0 ;
                    {
                    if( ( !time1P || !time2P ) && ((tin123S&)tin0P).pEther )
                    soilMaybe.time2Modified = time2P ;
                    soilMaybe.time1Modified = time1P ;

                    idjBranchCursor = soilMaybe.idjBranch ;
                {
                else
                if( soilMaybe.idjNext ) idjSoilOrBranchP = soilMaybe.idjNext ;
                if( !idjSoilRootOrNewBranch ) idjSoilRootOrNewBranch = idjSoilOrBranchP ;
            {
            else
            else if( pageSoilOrBranch != sizeof( jotFileSoilC ) || getNegAM( soilMaybe.finger ) != FINGERnEG_jotFileSoilC ) break ;
            }
                break ;
                bIsBranch = 1 ;
            {
            if( pageSoilOrBranch == sizeof( jotFileBranchC ) && getNegAM( branchMaybe.finger ) == FINGERnEG_jotFileBranchC )
            jotFileBranchC& branchMaybe      = *(jotFileBranchC*)(const byteT*)pageSoilOrBranch ;
            jotFileSoilC&   soilMaybe        =   *(jotFileSoilC*)(const byteT*)pageSoilOrBranch ;
            pageC           pageSoilOrBranch =    jotCanChange.readF( tin0P , idjSoilOrBranchP ) ;
        {
        for(;;)                                                                                         // SET idjBranchCursor TO POINT TO THE ROOT BRANCH OF THE LEAF SOIL
    {
    if( idjSoilOrBranchP && !( F(flagsP) & flJOTfILEScwRITE_REPLACEfILE ) )
    ZE( countT , idjBranchCursor        ) ;
    ZE( countT , idjSoilRootOrNewBranch ) ;
    ZE( boolT  , bIsBranch              ) ;

    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****                                                                                                                 *******************************************************************************************************
    //**** INSPECT INPUT IDjOT AND, IF SOIL, MOVE IT TO LEAF AND UPDATE ITS TIME, ELSE (IS BRANCH) UPDATE TIME IN ITS SOIL *******************************************************************************************************
    //****                                                                                                                 *******************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************

    }
        idjPartNew = jotCanChange.writeF( tin0P , (byteT*)&part , sizeof part , 0 , 0 , flJOTcwRITE_null ) & ~NM_HIGH ;
        jotFilePartC part( idjDataNew ) ;

        }
            __Z( idjDataNew ) ;
            idjDataNew = jotTarget.writeF( tin0P , pb1P , cb1P , pb2P , cb2P , flagsWriteData , &cbWroteSome ) & ~NM_HIGH ;

            ;
                : flJOTcwRITE_null
                ? flJOTcwRITE_ALLoRsOME
            flagsT flagsWriteData = F(flagsP) & flJOTfILEScwRITE_ALLoRsOME
        {
        ZE( countT , idjDataNew ) ;
    {                                                                                                   // WRITE THE NEW PART
    ZE( countT , idjPartNew ) ;
    ZE( countT , cbWroteSome ) ;

    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****                     ***************************************************************************************************************************************************************************************************
    //**** WRITE DATA AND PART ***************************************************************************************************************************************************************************************************
    //****                     ***************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************
    //****************************************************************************************************************************************************************************************************************************

    jotC& jotTarget = F(flagsP) & flJOTfILEScwRITE_TOcANcHANGE ? jotCanChange : jotNeverChanges ;

    if( pb2P && !cb2P ) cb2P = 1 + thirdC::c_strlenIF( tin0P , pb2P ) ;
    if( pb1P && !cb1P ) cb1P = 1 + thirdC::c_strlenIF( tin0P , pb1P ) ;

    }
        if( POOP ) return 0 ;
        __NZ( !idjSoilOrBranchP && F(flagsP) & flJOTfILEScwRITE_APPENDpART ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
{
/*1*/countT jotFilesC::writeF( tin0S& tin0P , const byteT* pb1P , countT cb1P , const byteT* pb2P , countT cb2P , countT idjSoilOrBranchP , const flagsT flagsP , countT* pcbWroteP , countT time1P , sCountT time2P )/*1*/


/**/

*/
 pcbWroteP
  if flJOTfILEScwRITE_APPENDpART then i create a new part only
  if not flJOTfILEScwRITE_APPENDpART then i create a new branch
  if flJOTfILEScwRITE_REPLACEfILE then i create a new soil at the end of the soil linked list
 flagsP
 idjSoilOrBranchP
parameters
i either create a new branch at the end of the branch linked list or create a new part at the end of a part linked list or replace the file by creating a new soil at the end of the soil linked list
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
