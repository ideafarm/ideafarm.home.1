
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flrc ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        ((tin123S&)tin0P).tlsDelF( LF , *(byteT**)&pczName ) ;
        //{ puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ; PUSE( tin0P , *(byteT**)&pczName ) ; }
        }
            }
                break ;

                PUSE( tin0P , *(byteT**)&pczv ) ;

                if( pDatumSave ) pDatumP->pNext = pDatumSave ;

                                     pDatumP = new( 0 , tin0P , LF ) datumS( tin0P , pczv ) ; ___( pDatumP ) ;
                datumS* pDatumSave = pDatumP ;

                etherC::strSquishOldIF( tin0P , pczv , pczName + ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin , ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchEnd - ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin - 1 ) ;
                ZE( countT* , pczv ) ;

                puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ;
            {
            case LISTnAMEsYS_STRETCHbEGINcOUNTsTRZ :
            }
                break ;

                PUSE( tin0P , postv ) ;

                if( pDatumSave ) pDatumP->pNext = pDatumSave ;

                                     pDatumP = new( 0 , tin0P , LF ) datumS( tin0P , postv ) ; ___( pDatumP ) ;
                datumS* pDatumSave = pDatumP ;

                etherC::strSquishIF( tin0P , postv , pczName + ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin , ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchEnd - ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin - 1 ) ;
                ZE( osTextT* , postv ) ;

                puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ;
            {
            case LISTnAMEsYS_STRETCHbEGINoStEXTsTRZ :
            }
                break ;

                if( pDatumSave ) pDatumP->pNext = pDatumSave ;

                                     pDatumP = new( 0 , tin0P , LF ) datumS( tin0P , vv ) ; ___( pDatumP ) ;
                datumS* pDatumSave = pDatumP ;

                etherC::strSquishIF( tin0P , vv , pczName + ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin ) ;
                ZE( countT , vv ) ;
            {
            case LISTnAMEsYS_STRETCHbEGINcOUNT :
        {
        switch( pczName[ ((tin123S&)tin0P).ta.pushed.u.listWalk.walk.offStretchBegin ] )
        ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP->nameF( tin0P , pczName ) ; // ___( pczName ) ;
        ZE( countT* , pczName ) ;
    {
    if( pListingP )
    flagsT flrc = flLISTwALKcALLbACKrETURNcODE_null ;

    datumS*&  pDatumP    =   *(datumS**)&((tin123S&)tin0P).ta.pushed.u.listWalk.util.pcP[ 0 ] ;
    listingC* pListingP  =               ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = !((tin123S&)tin0P).pPoolUse ? 0 : PUSE.flagsPoolFormatF() ;

    if( tin0P.idTypeTin - ifcIDtYPEtIN_123 ) { BLAMMOiD( 0x12121212 ) ; }
{
/*1*/flagsT listWalkEnumerateCBF( tin0S& tin0P )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

