
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmPortAuthorityF )

}
    swc2.freeF( tin0P ) ;
    etThread.delF( tin0P , pc2cp ) ;
    count2S*& pc2cp = (count2S*&)(countT&)swc2 ;
    idProcessOldI = swc2.leverF( tin0P , idf ) ;
{
for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
countT cFlavors = swc2.cFlavorsF( tin0P ) ;
TELL( "cleaning up: final" )

}
    while( !etThread && ((tin1S&)tin0P).cKidThreads ) { ++ s ; etThread.osSleepF( tin0P , TOCK ) ; }
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
{
TELL( "cleaning up: sleeping while i have kid threads" )

}
    etThread = 0 ;

    }
        else                    { ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmServePortF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)pso , (countT)&c7p1 ) ; }
        if( ether || etThread ) { DEL( pso ) ; }
        __( bRefuse ) ;
        socket.acceptF( tin0P , pso , idPortPeer , nnPeer , bRefuse ) ; ___( pso ) ;
        ZE( boolT , bRefuse ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        TELL( "waiting for a client to connect" )
        ZE( socketC* , pso ) ;
    {
    while( !ether && !etThread )

    socket.listenF( tin0P ) ;
    countT idPort = socket.bindF( tin0P , ifcPORToLD1pORTaUTHORITY ) ;
    socketC socket( tin0P , etThread , TAG( TAGiDnULL ) ) ;
    TELL( "in outer loop: setting up" )
{
while( !ether && !etThread )

c7p1.c7 = (countT)&idMiscLast ;
c7p1.c6 = (countT)&b_idMiscLast ;
c7p1.c5 = (countT)&idProcessOldLast ;
c7p1.c4 = (countT)&b_idProcessOldLast ;
c7p1.c3 = (countT)&swc2 ;
c7p1.c2 = (countT)&idProcessOldI ;
c7p1.c1 = (countT)&b_idProcessOldI ;
count7S c7p1 ;

ZE( countT , idMiscLast ) ;
batonC b_idMiscLast( tin0P , TAG( TAGiDnULL ) ) ;
ZE( countT , idProcessOldLast ) ;
batonC b_idProcessOldLast( tin0P , TAG( TAGiDnULL ) ) ;
switchC swc2( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idProcessOldI ) ;
ZE( countT , idProcessOldI ) ;
batonC b_idProcessOldI( tin0P , TAG( TAGiDnULL ) ) ;

TELL( "setting up" )
/*1*/TASK( tmPortAuthorityF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

