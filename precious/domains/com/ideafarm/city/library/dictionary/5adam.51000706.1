
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    etherC::loafIF( tin0P ) ;
    etThread.traceF( tin0P , T("ok") ) ;

    }
        ++ s ; ether.osSleepF( tin0P , TICK ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        //etThread.traceF( tin0P , T("snapWords trace ended [cWords]:    ")+TF2(cWords,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        etThread.delF( tin0P , pcWords ) ;

        }
            }
                etThread.delF( tin0P , psttSuffix ) ;
                //etThread.traceF( tin0P , T("[suffix,offw,idCell,idThread,idFile,idLine]:    ")+TF2(pcWords[offw+1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(offw,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idCell,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF4(idLine,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T("    ")+T(psttSuffix) ) ;

                }
                    etThread.strFuseF( tin0P , psttSuffix , TF2(pcWords[++offw],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    if( ids != 1 ) etThread.strFuseF( tin0P , psttSuffix , tb ) ;
                {
                for( countT ids = 1 ; ids <= ccSuffix ; ids ++ )
                TN( tb , " " ) ;

                etThread.strMakeF( tin0P , LF , psttSuffix , 0 , ccSuffix * 9 ) ; ___( psttSuffix ) ;
                ZE( strokeS* , psttSuffix ) ;

                const osTextT* const postTitle = !idFile ? 0 : mapFileTitle( idFile ) + sizeof( countT ) ;

                countT ccSuffix = pcWords[ ++ offw ] ;
                countT idCell   = pcWords[    offw ] & 0x7    ;
                countT idThread = pcWords[    offw ] & 0x7    ;  pcWords[ offw ] >>= 3 ;
                countT idFile   = pcWords[    offw ] & 0x1fff ;  pcWords[ offw ] >>= 0xd ;
                countT idLine   = pcWords[    offw ] & 0x1fff ;  pcWords[ offw ] >>= 0xd ;
            {
            if( pcWords[ ++ offw ] )
        {
        for( countT offw = - 1 ; offw < cWords ; )

        mapCTC& mapFileTitle = processGlobal4S::_processGlobal4I_IF().mapFileTitle ;

        //etThread.traceF( tin0P , T("snapWords trace begun [cWords]:    ")+TF2(cWords,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        countT cWords = etThread.snapWordsF( tin0P , pcWords ) ; ___( pcWords ) ;
        ZE( countT* , pcWords ) ;
    {
    while( !ether && !POOP )

    ether.ifcHireF( tin0P , T("SNAPwORDS") , ifcIDaDAM_TIME , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO , nicNameC() ) ; // flHIRE_DISPLAYaUTO CAN BE COMMENTED OUT TO AVOID WDW FOR ROOT CLOUD INSTANCE WHICH IS USUALLY NOT INTERESTING

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_LAZIEST ) ;
    thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_LAZIEST ) ;
{
if( pTaskP )
TASK( tmWorkF )

/*1*/WAKEhIDE( "ifcIDaDAM_SNAPwORDS" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

