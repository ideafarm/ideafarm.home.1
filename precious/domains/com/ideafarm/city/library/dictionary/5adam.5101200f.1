
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

etThread.delF( tin0P , pbr ) ;
}
    }
        }
            DEL( ps ) ;
            }
                etRock.traceF( tin0P , T("      [class] :    ")+TF2(idClass,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                *ps >> idClass ;
                ZE( countT , idClass ) ;

                etRock.traceF( tin0P , T("      [type]  :    ")+TF2(idSection,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                *ps >> idSection ;
                ZE( countT , idSection ) ;

                etRock.traceF( tin0P , T("reply [domain]:    ")+tDomainGross ) ;
                TN( tDomainGross , psttw ) ;
                if( psttw ) ((tin1S&)tin0P).pEtScratch->strConvertToLowerCaseF( tin0P , psttw ) ; ___( psttw ) ;
                *ps >> psttw ;
                ZE( strokeS* , psttw ) ;
                _IO_
            {
            if( ps )
            stsReplies >> ps ;
            ZE( soulC* , ps ) ;
            _IO_
        {
        while( stsReplies )

        }
            DEL( ps ) ;
            }
                etRock.traceF( tin0P , T("      [class] :    ")+TF2(idClass,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                *ps >> idClass ;
                ZE( countT , idClass ) ;

                etRock.traceF( tin0P , T("      [type]  :    ")+TF2(idType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                *ps >> idType ;
                ZE( countT , idType ) ;

                etRock.traceF( tin0P , T("query [domain]:    ")+tDomainGross ) ;
                TN( tDomainGross , psttw ) ;
                if( psttw ) ((tin1S&)tin0P).pEtScratch->strConvertToLowerCaseF( tin0P , psttw ) ; ___( psttw ) ;
                *ps >> psttw ;
                ZE( strokeS* , psttw ) ;
                _IO_
            {
            if( ps )
            stsQueries >> ps ;
            ZE( soulC* , ps ) ;
            _IO_
        {
        while( stsQueries )
        _IO_
    {
    if( !bFail )

    }
        }
            etRock.traceF( tin0P , T("!exception / could not parse reply [rc]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            bFail = 1 ;
            POOPRqUIET
        {
        if( rc )

        }
            etThread.delF( tin0P , pbHeaderAndQueriesNU ) ;
            rc = POOP ;
            ((tin1S&)tin0P).pEtScratch->dnsParseF( tin0P , pbHeaderAndQueriesNU , countTC() , stsQueries , stsReplies , pbr , cbr ) ;
            ZE( byteT* , pbHeaderAndQueriesNU ) ;
        {
        ZE( countT , rc ) ;
        SCOOPS
        _IO_
    {
    IFsCRATCHoK
    ZE( boolT , bFail ) ;
    stackC stsQueries(   tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_soulC ) ;
    stackC stsReplies(   tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_soulC ) ;

    etThread.osEditF( tin0P , tFile ) ; // THIS WILL ONLY BE USEFUL IF IFC HAS BEEN CONFIGURED TO USE AN EDITOR THAT CAN DISPLAY HEX

    etThread.boxPutF( tin0P , tFile , pbr , cbr ) ;
    TN( tFile , "///d/tmp/" ) ; tFile += TF1(DDNAME) ;
{
if( !POOP )

//etThread.dnsQueryF( tin0P , pbr , cbr , tName , ifcIDtYPEdNSqUERY_CNAME ) ; ___( pbr ) ;
//etThread.dnsQueryF( tin0P , pbr , cbr , tName , ifcIDtYPEdNSqUERY_TXT ) ; ___( pbr ) ;
etThread.dnsQueryF( tin0P , pbr , cbr , tName , ifcIDtYPEdNSqUERY_A ) ; ___( pbr ) ;
ZE( countT , cbr ) ;
ZE( byteT* , pbr ) ;

//TN( tName , "ipdos.ideafarm.com" ) ;
//TN( tName , "testtxt.hidden.ideafarm.com" ) ;
//TN( tName , "testtxt.ideafarm.com" ) ;
TN( tName , "dns1.ideafarm.com" ) ;

etherC& etRock = etherC::etRockIF( tin0P ) ;

TODO

// FROM ADAM 467_

/*1*/WAKEhIDE( "from.dns.reply.image.dump" )/*1*/
/**/
*/
i dump the reply image to a dns request
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

