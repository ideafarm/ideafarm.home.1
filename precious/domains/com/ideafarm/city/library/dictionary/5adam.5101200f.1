
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    etThread.diskWalkF( tinP , cDirs , cFiles , T("///g/ideafarm.archives/wo.ideafarm/") , ether , flDISKwALK_null , walkCBF , pcArg , 0 , 0 ) ;
    ZE( countT , cFiles ) ;
    ZE( countT , cDirs  ) ;

    countT  pcArg[] = { (countT)&foSizes , (countT)&idFile , (countT)&c2CbUsedDay , (countT)&tDay , (countT)&tb4 , (countT)&tcr , (countT)&tAmp } ;

    fileC   foSizes( tinP , (strokeS*)T("///d/tmp/archive.file.sizes.ttt") , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR ) ;
    count2S c2CbUsedDay ;
    TN( tDay , "" ) ;
    ZE( countT , idFile ) ;
    TN( tAmp         , "@"    ) ;
    TN( tcr          , "\r\n" ) ;
    TN( tb4          , "    " ) ;
{

TODO

}
    return 0 ;

    }
        }
            DEL( pInfo ) ;
            }
                etThread.fileWriteF( tinP , foSizesP , tOut , tOut.csF( tinP ) ) ;
                if( !( ++ idFileP % TUCK ) ) etThread.traceF( tinP , TF3(idFileP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,0xc)+tLong ) ;

                TN( tOut , "" ) ; tOut = TTF(c2CbUsedDayP.c1,c2CbUsedDayP.c2)+tb4P+TTF(pInfo->cbUsed,pInfo->cbUsedHigh)+tb4P+tLong+tcrP ;

                if( c2CbUsedDayP.c1 < c2Was.c1 ) c2CbUsedDayP.c2 ++ ;
                c2CbUsedDayP.c1 += pInfo->cbUsed     ;
                c2CbUsedDayP.c2 += pInfo->cbUsedHigh ;
                count2S c2Was    = c2CbUsedDayP      ;
            {
            if( pInfo )
            etThread.diskFileQueryF( tinP , pInfo , fia ) ;
            fileC fia( tinP , (strokeS*)tLong , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO ) ;
            ZE( infoFileS* , pInfo ) ;

            }
                }
                    etThread.delF( tinP , psttDay ) ;
                    }
                        c2CbUsedDayP = count2S() ;
                        //etThread.traceF( tinP , tDayP ) ;
                        tDayP = T(psttDay) ;
                        bNewDay = 1 ;                                   //A:ASSUME: FILES ARE PRESENTED TO ME SORTED BY NAME ; NTFS DOES NOT ALWAYS DO THIS, SO MY OUTPUT WILL ONLY BE APPROXIMATELY CORRECT FOR THE DAY SIZES
                    {
                    if( etThread.strCompareF( tinP , tDayP , psttDay ) )
                    etThread.strSubstringF( tinP , psttDay , idf , idl , psttzLong , 0 ) ; ___( psttDay ) ;
                    ZE( strokeS* , psttDay ) ;

                    countT idl = idHit - 1 ;
                    countT idf = 1 ;
                {
                if( idHit )
                countT idHit = etThread.strIdF( tinP , tAmpP , psttzLong , 1 ) ;
            {
            ZE( boolT , bNewDay ) ;
        {
        if( !bDir )
        boolT bDir = psttzLong[ CSpREFIX - 1 + psttzLong->idAdam ].idAdam == '/' ;

        //etThread.traceF( tinP , tLong ) ;

        const strokeS* const psttzLong = tLong ;
        TN( tLong , iffn ) ;
        ifFileNameC iffn( tinP , etThread , postNameP ) ;

        textC&   tAmpP        =   *(textC*)pcArgP[ 6 ] ;
        textC&   tcrP         =   *(textC*)pcArgP[ 5 ] ;
        textC&   tb4P         =   *(textC*)pcArgP[ 4 ] ;
        textC&   tDayP        =   *(textC*)pcArgP[ 3 ] ;
        count2S& c2CbUsedDayP = *(count2S*)pcArgP[ 2 ] ;
        countT&  idFileP      =  *(countT*)pcArgP[ 1 ] ;
        fileC&   foSizesP     =   *(fileC*)pcArgP[ 0 ] ;
        etherC&  etThread     =   *tinP.pEther ;

        _IO_
    {
    if( postNameP && *postNameP && !bQuitP )

    _IO_
{
boolT walkCBF( tinS& tinP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.report.archive.file.sizes.to.readable.file" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
