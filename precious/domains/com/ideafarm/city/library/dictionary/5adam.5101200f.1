
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

}
    etThread.delF( tinP , postiShortAll ) ;

    }
        ++ s ; ether.osSleepF( tinP , TOCK ) ;
    {
    while( cWorkers )
    sleepC s( tinP , TAG( TAGiDnULL ) ) ;

    }
        etThread.osThreadF( TaRG1( tmWorkerF ) , (countT)&cWorkers , ++ idWorker , (countT)postiShortAll , costiShortAll ) ;
        inc02AM( cWorkers ) ;
    {
    while( cDo -- )
    ZE( countT , cWorkers ) ;
    ZE( countT , idWorker ) ;
    countT cDo = CwORKERS ;

    //etThread.boxGetShadowF( tinP , postiShortAll , costiShortAll , T("///d/tmp/lost.after.saved.ttt") ) ; ___( postiShortAll ) ;
      etThread.boxGetShadowF( tinP , postiShortAll , costiShortAll , T("///d/tmp/lost.before.saved.ttt") ) ; ___( postiShortAll ) ;
    ZE( countT   , costiShortAll ) ;
    ZE( osTextT* , postiShortAll ) ;
{

TODO

DONE( tmWorkerF )
}
    dec02AM( cWorkersP ) ;

    etThread.delF( tinP , posto ) ;
    //etThread.boxPutF( tinP , T("///d/tmp/lost4.after." )+TF3(idWorkerP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,2)+T(".ttt") , posto , postoc - posto ) ;
      etThread.boxPutF( tinP , T("///d/tmp/lost4.before.")+TF3(idWorkerP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,2)+T(".ttt") , posto , postoc - posto ) ;

    memcpy( postoc , postSeparator , costSeparator ) ; postoc += costSeparator ;

    }
        if( postic > postieMe ) break ;
        postic = postieWo + 2 ;

        }
            if( !( cWritten % TUCK ) ) etThread.traceF( tinP , TF2(cWritten,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            cWritten ++ ;
            postiLathWritten = postic ;

            memcpy( postoc , "\r\n" , 2      ) ; postoc += 2      ;
            memcpy( postoc , postic , costic ) ; postoc += costic ;
        {
        if( !bSkip )

        //boolT bSkip = postiLathWritten && !thirdC::c_strcmpIF( tinP , postic , postiLathWritten , 0 ) ;
          boolT bSkip = postiLathWritten && !memcmp( postic , postiLathWritten , costic ) ;

        }
            etThread.traceF( tinP , T("neither dot nor underscore: ")+T(postic) ) ;
        {
        else if( postic[ 0x2d ] != '.' )
        }
            etThread.traceF( tinP , T("smudged:  ")+T(postic) ) ;
            postic[ 0x2d ] =  '.' ;
            etThread.traceF( tinP , T("smudging: ")+T(postic) ) ;
        {
        if( postic[ 0x2d ] == '_' )

        countT costic = postieWo - postic ;
        *postieWo = 0 ;

        //osTextT* postieWo = thirdC::c_strstrIF( tinP , postic , "\r\n" ) ;
          osTextT* postieWo = strstr( postic , "\r\n" ) ;
    {
    while( !ether )
    ZE( countT , cWritten ) ;
    ZE( osTextT* , postiLathWritten ) ;

    osTextT* postoc = posto ;
    etThread.newF( tinP , LF , posto , costiMe + costSeparator ) ; ___( posto ) ;
    ZE( osTextT* , posto ) ;

    osTextT* postic = postiMe ;

    costiMe = postieMe - postiMe ;

        ++ postieMe ;
    while( postieMe < postieShortAll && *postieMe != '!' )

        ++ postiMe  ;
    while( postiMe  < postieShortAll && *postiMe  != '!' )

    osTextT* postieMe = postiMe + costiMe ;
    osTextT* postiMe  = postiShortAllP + ( idWorkerP - 1 ) * costiMe ;
    countT   costiMe  = costiShortAllP / CwORKERS ;

    osTextT* const postieShortAll = postiShortAllP + costiShortAllP ;

    const countT   costiShortAllP =           pTaskP->c4 ;
    osTextT* const postiShortAllP = (osTextT*)pTaskP->c3 ;
    const countT   idWorkerP      =           pTaskP->c2 ;
    countT&        cWorkersP      = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmWorkerF )

const countT  costSeparator   = sizeof postSeparator - 1 ;
const osTextT postSeparator[] = "--------------------------\r\n" ;

#define CwORKERS 8

//P:PERSONALITY: EACH THREAD ADJUSTS ITS WINDOW UPWARD TO BEGIN AND END AT AN '!'

//A:ASSUME: BOTH INPUT FILES ARE SORTED ; BOTH MAY CONTAIN DUPLICATE LINES

/*1*/WAKEsHOWtEXT( "doodle.remove.duplicate.lines.and.smudge.away.underscore.at.e2.multithreaded" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
