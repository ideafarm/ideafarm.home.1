
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
//etThread.traceF( tin0P , T("ok [idDisk]:    ")+TF3(idDisk,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8) ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    }
        }
            etThread.traceF( tin0P , T("socket is impotent") ) ;
            POOPRqUIET
        {
        if( POOP )

        //etThread.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;

        }
            DEL( pSwPathValue ) ;

            }
                }
                    etThread.delF( tin0P , psttValue ) ;

                    }
                        }
                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                            *pptValue[ offe ] = T(psttValue) ;
                        {
                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                    {
                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                    if( cPaths - cValues ) { BLAMMO ; }
                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                    etThread.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    etThread.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                    _IO_
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                _IO_
            {
            if( !POOP )

            //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

            ;
            }
                &tPathNonce     ,
                &tPathError     ,
                &tPathErrorCode ,
            {
            textC* pptPath[] =

            TN( tPathNonce     , "\"nonce\"/"   ) ;
            TN( tPathError     , "\"error\"/"   ) ;
            TN( tPathErrorCode , "\"errcode\"/" ) ;

            ;
            }
                &tValueNonce     ,
                &tValueError     ,
                &tValueErrorCode ,
            {
            textC* pptValue[] =

            TN( tValueError     , "" ) ;
            TN( tValueErrorCode , "" ) ;

            __Z( pSwPathValue ) ;
            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
            ZE( switchC* , pSwPathValue ) ;
            ZE( strokeS* , psttPath     ) ;
            _IO_
        {

        etThread.traceF( tin0P , T("json response [end]") ) ;
        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("json response [begin]:") ) ;

        }
            }
                else if( costj ) break ;
                     if( cNest ) costj ++ ;

                else if( postj[ costj ] == '}' ) cNest -- ;
                     if( postj[ costj ] == '{' ) cNest ++ ;

                putchar( postj[ costj ] ) ;

                if( !cbIn ) break ;
                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
            {
            for(;;)
            ZE( countT , cNest ) ;
            _IO_
        {
        ZE( countT , costj ) ;
        //thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;

        sockc.writeF( tin0P , (osTextT*)tSay ) ;
        sockc.connectF( tin0P , 443 , nnServer ) ;
        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;

        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
        countT timeAllowedConnected = TICK >> 2 ;

        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
        nicNameC nnServer ;

        etThread.traceF( tin0P , T("request [end]") ) ;
        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("request [begin]:") ) ;

        ;
            "Content-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody
            "Accept: application/json\r\n"
            "Content-Type: application/json\r\n"
            "Authorization: Basic ")+tApiCredentials64+T("\r\n"
            "Host: ")+tServer+T("\r\n"
            "POST /rest/v4/payments HTTP/1.1\r\n"
        TN( tSay , "" ) ; tSay = T(

        countT costBody = tBody.csF( tin0P ) ;

        ) ;

            "}\r\n"
            "    \"purpose\": \"GP0002\"\r\n"
            "    \"amount\": \"123.45\",\r\n"
            "    \"clientPaymentId\": \"")+tTime+T("\",\r\n"
            "    \"currency\": \"USD\",\r\n"
            "    \"destinationToken\": \"")+tValueUserToken+T("\",\r\n"
            "    \"programToken\": \"prg-6102d6cb-d905-487b-a667-77b60f3e58bd\",\r\n"
            "{\r\n"

        TN( tBody , "" ) ; tBody = T(
        TN( tServer , "uat-api.paylution.com" ) ;


        //       }'
        //          "purpose": "GP0002"
        //          "amount": "123.45",
        //          "clientPaymentId": "yourPaymentId",
        //          "currency": "USD",
        //          "destinationToken": "usr-1cfd0ea8-c760-4bcd-8d2a-576a7376a6bf",
        //          "programToken": "prg-6102d6cb-d905-487b-a667-77b60f3e58bd",
        //       -d '{ 
        //       -H "Accept: application/json"
        //       -H "Content-Type: application/json"
        //       -u restapiuser@244471371611:****
        //    curl -X "POST" "https://uat-api.paylution.com/rest/v4/payments"

        SCOOPS
        _IO_
    {
    IFsCRATCHoK
    TN( tValueNonce , "" ) ;
    _IO_
{

#endif

}
    }
        }
            etThread.traceF( tin0P , T("socket is impotent") ) ;
            POOPRqUIET
        {
        if( POOP )

        //etThread.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;

        }
            DEL( pSwPathValue ) ;

            }
                }
                    etThread.delF( tin0P , psttValue ) ;

                    }
                        }
                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                            *pptValue[ offe ] = T(psttValue) ;
                        {
                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                    {
                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                    if( cPaths - cValues ) { BLAMMO ; }
                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                    etThread.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    etThread.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                    _IO_
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                _IO_
            {
            if( !POOP )

            //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

            ;
            }
                &tPathNonce     ,
                &tPathError     ,
                &tPathErrorCode ,
            {
            textC* pptPath[] =

            TN( tPathNonce     , "\"nonce\"/"   ) ;
            TN( tPathError     , "\"error\"/"   ) ;
            TN( tPathErrorCode , "\"errcode\"/" ) ;

            ;
            }
                &tValueNonce     ,
                &tValueError     ,
                &tValueErrorCode ,
            {
            textC* pptValue[] =

            TN( tValueError     , "" ) ;
            TN( tValueErrorCode , "" ) ;

            __Z( pSwPathValue ) ;
            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
            ZE( switchC* , pSwPathValue ) ;
            ZE( strokeS* , psttPath     ) ;
            _IO_
        {

        etThread.traceF( tin0P , T("json response [end]") ) ;
        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("json response [begin]:") ) ;

        }
            }
                else if( costj ) break ;
                     if( cNest ) costj ++ ;

                else if( postj[ costj ] == '}' ) cNest -- ;
                     if( postj[ costj ] == '{' ) cNest ++ ;

                putchar( postj[ costj ] ) ;

                if( !cbIn ) break ;
                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
            {
            for(;;)
            ZE( countT , cNest ) ;
            _IO_
        {
        ZE( countT , costj ) ;
        //thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;

        sockc.writeF( tin0P , (osTextT*)tSay ) ;
        sockc.connectF( tin0P , 443 , nnServer ) ;
        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;

        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
        countT timeAllowedConnected = TICK >> 2 ;

        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
        nicNameC nnServer ;

        etThread.traceF( tin0P , T("request [end]") ) ;
        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("request [begin]:") ) ;

        ;
            "Content-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody
            "Accept: application/json\r\n"
            "Content-Type: application/json\r\n"
            "Authorization: Basic ")+tApiCredentials64+T("\r\n"
            "Host: ")+tServer+T("\r\n"
            "POST /rest/v4/users/")+tValueUserToken+T("/transfer-methods HTTP/1.1\r\n"
        TN( tSay , "" ) ; tSay = T(

        countT costBody = tBody.csF( tin0P ) ;

        ) ;

            "}\r\n"
            "    \"type\": \"OTHER\"\r\n"
            "    \"transferMethodCurrency\": \"USD\",\r\n"
            "    \"transferMethodCountry\": \"US\",\r\n"
            "{\r\n"

        TN( tBody , "" ) ; tBody = T(
        TN( tServer , "uat-api.paylution.com" ) ;


        //       }'
        //          "type": "OTHERS"
        //          "transferMethodCurrency": "USD",
        //          "transferMethodCountry": "US",
        //       -d '{ 
        //       -H "Accept: application/json"
        //       -H "Content-Type: application/json"
        //       -u restapiuser@244471371611:****
        //    curl -X "POST" "https://uat-api.paylution.com/rest/v4/users/usr-1cfd0ea8-c760-4bcd-8d2a-576a7376a6bf/transfer-methods"

        SCOOPS
        _IO_
    {
    IFsCRATCHoK
    TN( tValueNonce , "" ) ;
    _IO_
{

#if defined( NEVERdEFINED )

}
    }
        }
            etThread.traceF( tin0P , T("socket is impotent") ) ;
            POOPRqUIET
        {
        if( POOP )

        //etThread.traceF( tin0P , T("[nonce]:    ")+tValueUserToken ) ;

        }
            DEL( pSwPathValue ) ;

            }
                }
                    etThread.delF( tin0P , psttValue ) ;

                    }
                        }
                            etThread.traceF( tin0P , T("======================================================>    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                            *pptValue[ offe ] = T(psttValue) ;
                        {
                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                    {
                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                    if( cPaths - cValues ) { BLAMMO ; }
                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                    etThread.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    etThread.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                    _IO_
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                _IO_
            {
            if( !POOP )

            //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

            ;
            }
                &tPathUserToken ,
                &tPathError     ,
                &tPathErrorCode ,
            {
            textC* pptPath[] =

            TN( tPathUserToken     , "\"token\"/"   ) ;
            TN( tPathError     , "\"error\"/"   ) ;
            TN( tPathErrorCode , "\"errcode\"/" ) ;

            ;
            }
                &tValueUserToken     ,
                &tValueError     ,
                &tValueErrorCode ,
            {
            textC* pptValue[] =

            TN( tValueError     , "" ) ;
            TN( tValueErrorCode , "" ) ;

            __Z( pSwPathValue ) ;
            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
            ZE( switchC* , pSwPathValue ) ;
            ZE( strokeS* , psttPath     ) ;
            _IO_
        {

        etThread.traceF( tin0P , T("json response [end]") ) ;
        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("json response [begin]:") ) ;

        }
            }
                else if( costj ) break ;
                     if( cNest ) costj ++ ;

                else if( postj[ costj ] == '}' ) cNest -- ;
                     if( postj[ costj ] == '{' ) cNest ++ ;

                putchar( postj[ costj ] ) ;

                if( !cbIn ) break ;
                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
            {
            for(;;)
            ZE( countT , cNest ) ;
            _IO_
        {
        ZE( countT , costj ) ;
        //thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;

        sockc.writeF( tin0P , (osTextT*)tSay ) ;
        sockc.connectF( tin0P , 443 , nnServer ) ;
        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;

        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
        countT timeAllowedConnected = TICK >> 2 ;

        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
        nicNameC nnServer ;

        etThread.traceF( tin0P , T("request [end]") ) ;
        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tin0P , T("request [begin]:") ) ;

        ;
            "Content-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody
            "Accept: application/json\r\n"
            "Content-Type: application/json\r\n"
            "Authorization: Basic ")+tApiCredentials64+T("\r\n"
            "Host: ")+tServer+T("\r\n"
            "POST /rest/v4/users HTTP/1.1\r\n"
        TN( tSay , "" ) ; tSay = T(

        countT costBody = tBody.csF( tin0P ) ;

        ) ;

            "}\r\n"
            "    \"programToken\": \"prg-ec28af48-1e89-478a-9e1a-63d448f38cee\"\r\n"
            "    \"postalCode\": \"94105\",\r\n"
            "    \"stateProvince\": \"CA\",\r\n"
            "    \"country\": \"US\",\r\n"
            "    \"city\": \"San Francisco\",\r\n"
            "    \"addressLine1\": \"575 Market St\",\r\n"
            "    \"dateOfBirth\": \"1991-02-15\",\r\n"
            "    \"email\": \"test.h.")+tTime+T("@ideafarm.com\",\r\n"
            "    \"lastName\": \"Developer\",\r\n"
            "    \"firstName\": \"John\",\r\n"
            "    \"clientUserId\": \"")+tTime+T("\",\r\n"
            "    \"profileType\": \"INDIVIDUAL\",\r\n"
            "{\r\n"

        TN( tBody , "" ) ; tBody = T(
        TN( tServer , "uat-api.paylution.com" ) ;

        //       }'
        //          "programToken": "prg-ec28af48-1e89-478a-9e1a-63d448f38cee"
        //          "postalCode": "94105",
        //          "stateProvince": "CA",
        //          "country": "US",
        //          "city": "San Francisco",
        //          "addressLine1": "575 Market St",
        //          "dateOfBirth": "1991-02-15",
        //          "email": "t-1736287010670@email.com",
        //          "lastName": "Developer",
        //          "firstName": "John",
        //          "clientUserId": "t-1736287010670",
        //          "profileType": "INDIVIDUAL",
        //       -d '{ 
        //       -H "Accept: application/json"
        //       -H "Content-Type: application/json"
        //       -u restapiuser@244471371611:****
        //    curl -X "POST" "https://uat-api.paylution.com/rest/v4/users"

        SCOOPS
        _IO_
    {
    IFsCRATCHoK
    _IO_
{
TN( tValueUserToken , "" ) ;

}
    etThread.delF( tin0P , psttApiCredentials64 ) ;
    tApiCredentials64 = T(psttApiCredentials64) ;
    etThread.traceF( tin0P , T("[credentials]:    ")+T(psttApiCredentials64) ) ;
    if( psttApiCredentials64 && psttApiCredentials64->idAdam ) tApiCredentials64 = T(psttApiCredentials64) ;

    ZE( strokeS* , psttApiCredentials64 ) ; etThread.querySettingF( tin0P , psttApiCredentials64 , T("!ipdos.credentials64.hyperwallet.sandbox" ) ) ; ___( psttApiCredentials64 ) ;
{
TN( tApiCredentials64 , "" ) ;

TN( tTime , "" ) ; tTime = TTF(timeN1,timeN2) ;
etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
ZE( sCountT , timeN2 ) ;
ZE( countT  , timeN1 ) ;

TODO

osTextT postj[ TOCK << 0 ] ;

/*1*/WAKEsHOWtEXT( "scratch" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
