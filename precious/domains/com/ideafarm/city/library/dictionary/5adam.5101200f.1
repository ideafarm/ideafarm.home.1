
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

THREADmODE2rESTORE
THREADmODE3rESTORE
THREADmODE4rESTORE

#endif
}
    DEL( pFoo ) ;

    fooC* pFoo = new( 0 , tinP , LF ) fooC( tinP , etThread ) ;

    puseC puseHT( tinP , ifcIDpOOL_HOMEtEMP ) ;
{
#if defined( NEVERdEFINED )

}
    }
        etThread.traceF( tinP , T("[pFoo,idMe]:    ")+TfORsTRING((countT)pFoo)+T("    ")+TF2(*pFoo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        fooC* pFoo = &APT( fooC , aptFoo ) ;

        etThread.traceF( tinP , T("[*pcIdApt]:    ")+TF2(*pcIdApt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        }
            *pcIdApt = aptFoo ;
            aptFoo = aptC( tinP , (byteT*)pFoo ) ;
            fooC* pFoo = new( 0 , tinP , LF ) fooC( tinP , etThread ) ;
        {
        else
        if( *pcIdApt ) aptFoo = *(aptC*)pcIdApt ;
        aptC aptFoo ;
        etThread.traceF( tinP , T("[*pcIdApt]:    ")+TF2(*pcIdApt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        countT*   pcIdApt = vspIdApt ;
        countVSP vspIdApt = listC::countIF( tinP , myRecord , count2S( LISTnAME_RETURNiNFO1 ) ) ;
    {

    recordC myRecord( tinP , pcNameRecord ) ;
    countT pcNameRecord[] = { LISTnAME_ROOT , LISTnAME_ROOTaPPLICATION , LISTnAME_GLOBALrECORD , 0 } ;

    puseC puseHT( tinP , ifcIDpOOL_HOMEtEMP ) ;
    _IO_
{


THREADmODE4oN( flTHREADmODE4_ALLOWwRITEABLEpOINTERgET                                           )
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY       | flTHREADmODE3_ALLOWnEWdROPnOTiNaDAMtEMP )
THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING                                             )

TODO

}
    etherP.traceF( tinP , T("[idMe]:    ")+TF2(idMe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
{
idMe( ++ idMeLath )
fooC::fooC( tinS& tinP , etherC& etherP ) :

static countT idMeLath ;

NEWdELcLASS( 1 , fooC ) ;

;
}
    inline operator countT( voidT ) { return idMe ; }
    fooC( tinS& tinP , etherC& etherP ) ;
    NEWdELcLASSpROTOS

    public :

    countT idMe ;
{
class fooC

// DUT CLASS fooC THAT USES A MEMORY ADDRESS POINTER BUT WHOSE IMAGE IS SHARABLE BY MULTIPLE PROCESSES

/*1*/WAKEsHOWtEXT( "doodle.sharable.class.instance" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
