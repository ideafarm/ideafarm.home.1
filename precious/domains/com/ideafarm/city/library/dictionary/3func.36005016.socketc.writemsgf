
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
    
        tinP.pag3->_socketC_.grab.ungrabF( tinP ) ;
        pOdometer->cbWrite += tinP.odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += tinP.odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*tinP.pag3->_socketC_.pSwOdometer ;
        tinP.pag3->_socketC_.nnLever = nnPeer ;
        tinP.pag3->_socketC_.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        bWrite.ungrabF( tinP ) ;
    
        if( idleTimeAllowedWrite ) FRESHtIMEaTOMIC( *pEther , timeLathWrite.time1 , timeLathWrite.time2 )
    
        __( cbr - cbo ) ;
        THREADmODE2rESTORE

        }
            pEther->sockReadF( tinP , handle , (byteT*)&cbr , sizeof cbr ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_readF( tinP , (byteT*)&cbr , sizeof cbr , handle ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        ZE( countT , cbr ) ;
        __( idMsgOut - idMsgOutLast ) ;

        }
            pEther->sockReadF( tinP , handle , (byteT*)&idMsgOut , sizeof idMsgOut ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_readF( tinP , (byteT*)&idMsgOut , sizeof idMsgOut , handle ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        __( idType - 2 ) ;

        }
            pEther->sockReadF( tinP , handle , (byteT*)&idType , sizeof idType ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_readF( tinP , (byteT*)&idType , sizeof idType , handle ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        }
            pEther->sockWriteF( tinP , handle , pbP , cbo ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_writeF( tinP , handle , pbP , cbo ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        }
            pEther->sockWriteF( tinP , handle , (byteT*)&cbo , sizeof cbo ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_writeF( tinP , handle , (byteT*)&cbo , sizeof cbo ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        }
            pEther->sockWriteF( tinP , handle , (byteT*)&idMsgOut , sizeof idMsgOut ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_writeF( tinP , handle , (byteT*)&idMsgOut , sizeof idMsgOut ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        countT idMsgOut = ++ idMsgOutLast ;

        }
            pEther->sockWriteF( tinP , handle , (byteT*)&idType , sizeof idType ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->openSslTls_writeF( tinP , handle , (byteT*)&idType , sizeof idType ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) 

        THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
        countT idType = 1 ;
    
        bWrite.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        countT cbo = cbP ? cbP : pEther->strBodyLengthF( tinP , pbP ) ;
    
        const countT _odoSockCbWriteOpen = tinP.odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = tinP.odoSockCbRead  ;
    
        _IO_
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )

            __Z( pbP ) ;

            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL    
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/*1*/voidT socketC::writeMsgF( tinNormalS& tinP , const byteT* const pbP , const countT cbP )/*1*/

/**/
*/
  the terminating null (0) will -not- be written
  if 0 then pbP must be a null terminated string of bytes, which will be written
 cbP
  must not be 0
 pbP
arguments
 both ends of a connection should use writeMsgF, readMsgOkF, and readMsgNokF
this protocol is subject to change
  cbr must equal the cbP just sent
  idMsgOutr must equal the idMsgOut just sent
  2 indicates that this is an ack
 then reads 2, idMsgOutr, cbr
  idMsgOut is consecutive from 1 and is unique for each message going out from a socket
  1 indicates that this is a message (rather than an ack)
 writes 1, idMsgOut, cbP, pbP
writes specified bytes to the peer using the IFC message protocol
  \<A HREF=\"5.2930104.1.1.0.html\"\>2930104:  WAKEsHOW( "example.simplest.func.1070019.socketC.writeMsgF" )\</A\>
 simplest
examples
\<A HREF=\"5.1070019.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$writeMsgF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

