
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.ifcDrivenServerF( tin0P , i1 , i2 ) ;
serverInfo2S i2( 0x19 , flSOCKETc_null , TF2(thirdC::third_idAdamRootI_IF( tin0P ),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) , 0 , (countT)&c8p , 0 , - 1 , 1 , sizeof( stateS ) , translateStateF ) ;
serverInfo1S i1( &pbdVarying , b_pbdVarying , bHandedOff , sgnIdPortReplaced , tmcF , countTC() , ether ) ;

c8p.c2 = (countT)&b_pbdVarying ;
c8p.c1 = (countT)&pbdVarying ;
count8S c8p ;

ZE( boolT , bHandedOff ) ;
batonC b_pbdVarying( tin0P , TAG( TAGiDnULL ) ) ;
ZE( byteT* , pbdVarying ) ;
signC sgnIdPortReplaced( tin0P , TAG( TAGiDnULL ) ) ;

((thirdC&)etThread).logF( tin0P , T("port.91.smtp") ) ;

TODO

DONEdRIVENsERVER( tmcF )
}
    thirdC::logIF( tin0P , ostoFile , nicNamePeer , 4 , count5S( 1 , 2 , 3 , 4 ) , (countT)&stPhrases , 1 ) ;
    OStEXTAK( ostoFile , ".log.port.91" ) ;
    OStEXTC( ostoFile , etherC::ifc_idHomeI_IF() , 0 ) ;
    OStEXTAK( ostoFile , "\\ideafarm." ) ;
    OStEXT( ostoFile , 0x100 )

    etThread.delF( tin0P , psttw ) ;
    __( etThread.strCompareF( tin0P , psttw , tQuit ) ) ;
    etThread.delF( tin0P , psttl ) ;
    etThread.strConvertToLowerCaseF( tin0P , psttw , psttl ) ; ___( psttw ) ;
    pso->readWoLineF( tin0P , psttl , 0x400 ) ; ___( psttl ) ;
    // "quit"

    }
        etThread.delF( tin0P , postBody ) ;
        etThread.delF( tin0P , psttu ) ;
        etThread.boxPutUniqueF( tin0P , psttu , T("///ideafarm/ephemeral/domains/com/ideafarm/3240104/in") , postBody , costBody ) ;
        ZE( strokeS* , psttu ) ;
        etThread.delF( tin0P , psttBody ) ;
        countT costBody = etThread.strMakeF( tin0P , LF , postBody , psttBody ) ; ___( postBody ) ;
        ZE( osTextT* , postBody ) ;
        etThread.strConcatenateF( tin0P , psttBody , st_psttBody ) ; ___( psttBody ) ;
        ZE( strokeS* , psttBody ) ;

        pso->writeF( tin0P , "250 ok\r\n" ) ;
        }
            psttl = 0 ;
            st_psttBody << psttOldC( tin0P , etThread , T("\r\n") ) ;
            st_psttBody << psttl ;
            }
                }
                    etThread.strSubstringF( tin0P , psttl , idf , idl , psttw ) ; ___( psttl ) ;    etThread.delF( tin0P , psttw ) ;
                    ZE( countT , idl ) ;
                    countT idf = 2 ;
                    //sttq = ze ;
                    psttl = 0 ;
                    psttw = psttl ;
                {
                else
                }
                    break ;
                    etThread.delF( tin0P , psttl ) ;
                {
                if( psttl->idAdam == 1 )
            {
            if( psttl && psttl[ CSpREFIX ] == sttDot )
            pso->readWoLineF( tin0P , psttl , 0x400 ) ;                                 ___( psttl ) ;
        {
        while( !etThread )
        stackC st_psttBody( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    {
    // DATA LINES

                    pso->writeF( tin0P , "354 Start mail input; end with <CRLF>.<CRLF>\r\n" ) ;

    }
                    st_psttMailRcpt << psttl ;                                                                  psttl = 0 ;
                    pso->writeF( tin0P , "250 ok\r\n" ) ;
                    stPhrases << postOldC( tin0P , etThread , T("\r\nrcpt \"")+T(psttw)+T("\"") ) ;                 etThread.delF( tin0P , psttw ) ;
        /*sttq = ze ;*/  __( !bFromIfc && !etThread.strIdF( tin0P , idf , sttq , tAtIdeafarmDotCom , psttw ) ) ;
                    idf = 1 ;
                    etThread.strConvertToLowerCaseF( tin0P , psttw , psttw2 ) ;                  ___( psttw ) ;    etThread.delF( tin0P , psttw2 ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw2 , psttw , sttq , sttColon , 2 ) ;          ___( psttw2 ) ;   etThread.delF( tin0P , psttw ) ;
                    __( etThread.strCompareF( tin0P , psttw3 , tTo ) ) ;                              etThread.delF( tin0P , psttw3 ) ;
                    etThread.strConvertToLowerCaseF( tin0P , psttw3 , psttw2 ) ;                 ___( psttw3 ) ;   etThread.delF( tin0P , psttw2 ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw2 , psttw , sttq , sttColon , 1 ) ;          ___( psttw2 ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw , psttl , sttq , sttSpace , 2 ) ;           ___( psttw ) ;

                    }
                        break ;
                        st_psttMailRcpt << psttl ;                                                              psttl = 0 ;
                    {
                    if( bData )
                    __( !bRcpt && !bData ) ;
                    boolT bRcpt = !bData && !etThread.strCompareF( tin0P , psttw2 , tRcpt ) ;                    etThread.delF( tin0P , psttw2 ) ;
                    boolT bData =           !etThread.strCompareF( tin0P , psttw2 , tData ) ;
                    etThread.strConvertToLowerCaseF( tin0P , psttw2 , psttw ) ;                  ___( psttw2 ) ;   etThread.delF( tin0P , psttw ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw , psttl , sttq , sttSpace , 1 ) ;           ___( psttw ) ;
                    pso->readWoLineF( tin0P , psttl , 0x400 ) ;                                 ___( psttl ) ;
    {
    while( !etThread )
    // "rcpt to:who@i deafarm.com"

                    st_psttMailRcpt << psttl ;                                                                  psttl = 0 ;
                    pso->writeF( tin0P , "250 ok\r\n" ) ;
                    stPhrases << postOldC( tin0P , etThread , T("from \"")+T(psttw2)+T("\"") ) ;                    etThread.delF( tin0P , psttw2 ) ;
        /*sttq = ze ;*/  boolT bFromIfc = !!etThread.strIdF( tin0P , idf , sttq , tAtIdeafarmDotCom , psttw2 ) ;
                    countT idf = 1 ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw2 , psttw , sttq , sttColon , 2 ) ;          ___( psttw2 ) ;   etThread.delF( tin0P , psttw ) ;
                    __( etThread.strCompareF( tin0P , psttw3 , tFrom ) ) ;                            etThread.delF( tin0P , psttw3 ) ;
                    etThread.strConvertToLowerCaseF( tin0P , psttw3 , psttw2 ) ;                 ___( psttw3 ) ;   etThread.delF( tin0P , psttw2 ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw2 , psttw , sttq , sttColon , 1 ) ;          ___( psttw2 ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw , psttl , sttq , sttSpace , 2 ) ;           ___( psttw ) ;
                    __( etThread.strCompareF( tin0P , psttw2 , tMail ) ) ;                            etThread.delF( tin0P , psttw2 ) ;
                    etThread.strConvertToLowerCaseF( tin0P , psttw2 , psttw ) ;                  ___( psttw2 ) ;   etThread.delF( tin0P , psttw ) ;
        /*sttq = ze ;*/  etThread.strWordF( tin0P , psttw , psttl , sttq , sttSpace , 1 ) ;           ___( psttw ) ;
                    pso->readWoLineF( tin0P , psttl , 0x400 ) ;                                 ___( psttl ) ;
    // "mail from:who@i deafarm.com"

    stackC st_psttMailRcpt( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;

    pso->writeF( tin0P , "250 www.ideafarm.com\r\n" ) ;
    etThread.delF( tin0P , psttl ) ;
    /*__( etThread.strCompareF( tin0P , psttw2 , tHelo ) ) ;*/ etThread.delF( tin0P , psttw2 ) ; //THIS IS NOT DONE CAUSE NETSCAPE SENDS "EHLO" RATHER THAN "HELO"
    etThread.strConvertToLowerCaseF( tin0P , psttw2 , psttw ) ; ___( psttw2 ) ; etThread.delF( tin0P , psttw ) ;
    etThread.strWordF( tin0P , psttw , psttl , sttq , sttSpace , 1 ) ; ___( psttw ) ;
    pso->readWoLineF( tin0P , psttl , 0x400 ) ; ___( psttl ) ;
    ZE( strokeS* , psttl ) ;
    // "helo"

    TN( tData             , "data"             ) ;
    TN( tAtIdeafarmDotCom , ifcEMAIL_MXsUFFIX ""    ) ;
    TN( tTo               , "to"               ) ;
    TN( tRcpt             , "rcpt"             ) ;
    TN( tFrom             , "from"             ) ;
    TN( tQuit             , "quit"             ) ;
    TN( tMail             , "mail"             ) ;
    TN( tHelo             , "helo"             ) ;
    strokeS sttDot(   '.' ) ;
    strokeS sttColon( ':' ) ;
    strokeS sttSpace( ' ' ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    ZE( strokeS* , psttw3 ) ;
    ZE( strokeS* , psttw2 ) ;
    ZE( strokeS* , psttw ) ;

    pso->writeF( tin0P , "220 www.ideafarm.com smtp ready\r\n" ) ;

    b_pbdVarying.ungrabF( tin0P ) ;
    }
        TN( t_cHamburgers , "" ) ; t_cHamburgers = TF3(++state.cHamburgers,0,8) ;
        TN( t_idMe        , "" ) ; t_idMe        = TF3(state.idMe,0,8) ;
        stateS& state = *(stateS*)pbdVarying ;
    {
    if( pbdVarying )
    b_pbdVarying.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    nicNameC nicNamePeer ;
    stackC stPhrases( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;

    batonC&      b_pbdVarying  =      *(batonC*)c8p.c2 ;
    byteT*&      pbdVarying    =      *(byteT**)c8p.c1 ;
    count8S&     c8p           =     *(count8S*)cArg ;
{
if( cArg )
TASKdRIVENsERVER( tmcF )

TRANSLATEsTATEdRIVENsERVER_END
    state.idMe ++ ;
TRANSLATEsTATEdRIVENsERVER_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
    case 2 : { state.cHamburgers = stateOther.cHamburgers ; }
TRANSLATEsTATEdRIVENsERVER_BEGIN( stateS , 2 )

;
}
    countT cHamburgers ;
    countT idMe ;
    countT idVersion ;
{
struct stateS

/*1*/WAKEhIDE( "port.91.smtp" )/*1*/
/**/
*/
 not edited to use *((tin123S&)tin0P).zEtScratch rather than etThread
not maintained
obsoleted by b340104 or prior
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

