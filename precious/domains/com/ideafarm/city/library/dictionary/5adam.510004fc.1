
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        }
            sIn2.removeAllF( tinBaseP ) ;
            }
                }
                    }
                        etThread.delF( tinBaseP , pch ) ;
                        etThread.strokeF( tinBaseP , T("this poolOld contains ")+TF1(ph.cdUsed)+T(" drops in use\r\n") ) ;
                        poolOldHeaderS& ph = *(poolOldHeaderS*)pch ;
                    {
                    if( pch && cch == sizeof( poolOldHeaderS ) / sizeof( countT ) )
                    sIn2.shiftRightF( tinBaseP , pch , cch ) ; ___( pch ) ;
                    ZE( countT  , cch ) ;
                    ZE( countT* , pch ) ;
                {
                if( sIn2 )
            {
            if( idReply == ifcIDrEPLYmONITOR_POOLoLDhEADER )
            sIn2 >> idReply ;
            ZE( countT , idReply ) ;
            sock.readF( tinBaseP , sIn2 ) ;

            etThread.delF( tinBaseP , psttName ) ;
            sOut.removeAllF( tinBaseP ) ;
            sock.writeF( tinBaseP , sOut ) ;
            sOut << psttName ;
            sOut << idMemorySpace ;
            sOut << (countT)ifcIDcMDmONITOR_POOLoLDhEADER ;
            etThread.strokeF( tinBaseP , T("for memory space ")+TF1(idMemorySpace)+T(", received name: \"")+T(psttName)+T("\"\r\n") ) ;
            sIn >> psttName ; ___( psttName ) ;
            ZE( strokeS* , psttName ) ;
        {
        while( cNames -- )
        sIn >> cNames ;
        ZE( countT , cNames ) ;
        sIn >> idMemorySpace ;
        ZE( countT , idMemorySpace ) ;
    {
    while( cSpaces -- )
    sIn >> cSpaces ;
    ZE( countT , cSpaces ) ;
{
if( idReply == ifcIDrEPLYmONITOR_POOLoLDnAMES )
sIn >> idReply ;
ZE( countT , idReply ) ;

sock.readF( tinBaseP , sIn ) ;
soulC sIn2( tinBaseP , TAG( TAGiDnULL ) ) ;
soulC sIn( tinBaseP , TAG( TAGiDnULL ) ) ;
sOut.removeAllF( tinBaseP ) ;
sock.writeF( tinBaseP , sOut ) ;
soulC sOut( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDmONITOR_POOLoLDnAMES ) ;
sock.connectF( tinBaseP , ifcIDpORT_DOOR ) ;
socketC sock( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;

TODO

#include postADAMhEADER

/*1*/WAKEhIDE( "tool.monitor.query.1" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

