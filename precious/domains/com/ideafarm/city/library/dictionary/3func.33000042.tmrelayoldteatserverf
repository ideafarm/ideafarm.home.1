
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmRelayOldTeatServerF )
}
    }
        }
            etThread.delF( tin0P , pc4c ) ;
            etThread.delF( tin0P , *(countT**)&pc4c->c3 ) ;
            etThread.delF( tin0P , *(countT**)&pc4c->c1 ) ;
            stChannelExclude >> pc4c ;
            ZE( count4S* , pc4c ) ;
        {
        while( stChannelExclude )
    
        }
            etThread.delF( tin0P , pc4c ) ;
            etThread.delF( tin0P , *(countT**)&pc4c->c3 ) ;
            etThread.delF( tin0P , *(countT**)&pc4c->c1 ) ;
            stChannelInclude >> pc4c ;
            ZE( count4S* , pc4c ) ;
        {
        while( stChannelInclude )
    
        DEL( psoP ) ;
    
        swsWrapRefP.ungrabF( tin0P ) ;
        }
            THREADmODE1rESTORE
            swsWrapRefP.freeF( tin0P ) ;
            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
            cLeverPayloadP = ((tin1S&)tin0P).glass.idThread ;
        {
    
        }
            }
                etThread.delF( tin0P , pc2WrapRef ) ;
                etThread( tin0P , *(soulC**)&pc2WrapRef->c1 ) ;
            {
            if( 1 == decv02AM( pc2WrapRef->c2 ) )
    
            stWrapRef >> *(countT*)&pc2WrapRef ;
            ZE( count2S* , pc2WrapRef ) ;
        {
        while( stWrapRef )
    
        sgnDone_tmRelayOldServerWrapToAppF.waitF( tin0P ) ;
        }
            }
                stWrapRef << (countT)pc2WrapRef ;
                pc2WrapRef->c2 = 1 ;
                pc2WrapRef->c1 = 0 ;
            {
            if( pc2WrapRef )
            etThread.newF( tin0P , LF , pc2WrapRef ) ; ___( pc2WrapRef ) ; //U::LEAKS SOMETIMES
            ZE( count2S* , pc2WrapRef ) ;
        {
        bQuit = 1 ;
        swsWrapRefP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        if( etThread ) { ((const poopC&)etThread).chatterF( tin0P , LF ) ; LOGrAW( "tmRelayOldTeatServerF: etThread is impotent so BLAMMO\r\n" ) ; BLAMMO ; } //NEEDED TO PRECLUDE DEADLOCK GRABBING swsWrapRefP
    
        }
            }
                DEL( psWrap ) ; //MIGHT BE 0 IFF I CALLED relayOldC::doWrapLocallyIfIF
    
                }
                    }
                        }
                            break ;
                            DEL( psGift ) ;
                            DEL( psWrapo ) ;
                            }
                                }
                                    }
                                        bQuit = 1 ;
                                        POOPR
                                    {
                                    if( POOP )
                                    psoP->writeF( tin0P , *psWrapo ) ;
                                    SCOOPS
                                {
                                etThread.traceF( tin0P , T("writing *psWrapo ifcOLDiDtYPEwRAP_QUERYrELAYiDpORTtIMEcaLLhOMES") ) ;
        
                                *psWrapo << *psGift ;
                                *psWrapo << (countT)ifcOLDiDtYPEwRAP_REPLYrELAYiDpORTtIMEcaLLhOMES ;
                                *psWrapo << (countT)1 ; // idVersion
                                *psWrapo << (countT)ifcIDpROTOCOL_RELAYwRAP ;
                                *psWrapo << (strokeS*)tTM ;
                                TN( tTM , "IdeaFarm " "(tm)" ) ;
        
                                UNGRABrELAYlISTS
                                }
                                    while( !stIdptOpenP.third && ~hDown ) ;
                                    do *(portTimeC*)&stIdptOpenP.downF( tin0P , hDown ) >> *psGift ;
                                    handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                {
                                if( stIdptOpenP )
                                *psGift << (countT)stIdptOpenP ;
                                GRABrELAYlISTS
                            {
                            if( psGift && psWrapo )
                            soulC* psGift = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psGift ) ;
                            soulC* psWrapo = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psWrapo ) ;
                        {
                        case ifcOLDiDtYPEwRAP_QUERYrELAYiDpORTtIMEcaLLhOMES :
                        }
                            break ;
                            DEL( psGift ) ;
                            DEL( psWrapo ) ;
                            }
                                }
                                    }
                                        bQuit = 1 ;
                                        POOPR
                                    {
                                    if( POOP )
                                    psoP->writeF( tin0P , *psWrapo ) ;
                                    SCOOPS
                                {
                                etThread.traceF( tin0P , T("writing *psWrapo ifcOLDiDtYPEwRAP_QUERYrELAYiDpORTtIMEc") ) ;
        
                                *psWrapo << *psGift ;
                                *psWrapo << (countT)ifcOLDiDtYPEwRAP_REPLYrELAYiDpORTtIMEc ;
                                *psWrapo << (countT)1 ; // idVersion
                                *psWrapo << (countT)ifcIDpROTOCOL_RELAYwRAP ;
                                *psWrapo << (strokeS*)tTM ;
                                TN( tTM , "IdeaFarm " "(tm)" ) ;
        
                                idptP >> *psGift ;
                            {
                            if( psGift && psWrapo )
                            soulC* psGift = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psGift ) ;
                            soulC* psWrapo = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psWrapo ) ;
                        {
                        case ifcOLDiDtYPEwRAP_QUERYrELAYiDpORTtIMEc :
                        }
                            break ;
                            DEL( psGift ) ;
                            DEL( psWrapo ) ;
                            }
                                }
                                    }
                                        bQuit = 1 ;
                                        POOPR
                                    {
                                    if( POOP )
                                    psoP->writeF( tin0P , *psWrapo ) ;
                                    SCOOPS
                                {
                                etThread.traceF( tin0P , T("writing *psWrapo ifcOLDiDtYPEwRAP_QUERYrELAYrANK") ) ;
        
                                *psWrapo << *psGift ;
                                *psWrapo << (countT)ifcOLDiDtYPEwRAP_REPLYrELAYrANK ;
                                *psWrapo << (countT)1 ; // idVersion
                                *psWrapo << (countT)ifcIDpROTOCOL_RELAYwRAP ;
                                *psWrapo << (strokeS*)tTM ;
                                TN( tTM , "IdeaFarm " "(tm)" ) ;
        
                                *psGift << idRank ;
                                UNGRABrELAYlISTS
                                }
                                    while( !stIdptOpenP.third && ~hDown ) ;
                                    }
                                        THREADmODE1rESTORE
                                        //CONoUTrAW( TF1(++ids)+T(": ")+TT(time.time1,time.time2)+T(" ")+TF1((countT)idpt)+T(" ")+TF1((nicNameC&)idpt)+T("\r\n") ) ;
                                        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
                                        timeS time = idpt ;
                                        portTimeC& idpt = *(portTimeC*)&stIdptOpenP.downF( tin0P , hDown ) ;
                                    {
                                    do
                                    handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                    ZE( countT , ids ) ;
                                {
                                if( stIdptOpenP )
                                //CONoUTrAW( T("the requested idRank is ")+TF1(idRank)+T("\r\n") ) ;
                                countT idRank = stIdptOpenP( (byteT*)&idptP , subtractIdPortTimesOldF , (countT)&stIdptGossipP ) ;
                                GRABrELAYlISTS
                            {
                            if( psGift && psWrapo )
                            soulC* psGift = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psGift ) ;
                            soulC* psWrapo = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psWrapo ) ;
                        {
                        case ifcOLDiDtYPEwRAP_QUERYrELAYrANK :
                        }
                            break ;
                            }
                                DEL( psBag ) ;
                                if( bDontHoldBreath ) relayOldC::doWrapLocallyIfIF( tin0P , etThread , RELAYiNFOaRGS , *psWrap , idptP ) ;
            
                                relayOldC::popIF( tin0P , pStPop0P , pStPop1P , pStPop2P , pStPop3P , pStPop4P , *psBag , stIdptOpenP , stIdptGossipP , idptP ) ;
                                //((tin1S&)tin0P).pEther->traceF( tin0P , T("tmRelayOldTeatServerF: calling popIF [bRoot,bDontHoldBreath]:    ")+TF2(bRoot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(bDontHoldBreath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                                *psBag << *psWrap ;
                                relayOldC::hdrBagIF( tin0P , *psBag , idptP , idSerialLathHeaderP , bRoot ? flOLDrELAYpOP_UP : flOLDrELAYpOP_DOWN , ifcOLDiDtYPEbAG_WRAP ) ;
            
                                UNGRABrELAYlISTS
                                boolT bDontHoldBreath = bRoot /*&& stIdptOpenP < 4*/ ; //IF bDontHoldBreath THEN THE ROOT WILL NOT EVER GET ITS OWN POP
                                boolT bRoot = pnRoot && *pnRoot == idptP ;
                                portTimeC* pnRoot = stIdptOpenP ? (portTimeC*)&stIdptOpenP[ 1 ] : 0 ;
                                GRABrELAYlISTS
                            {
                            if( psBag )
                            soulC* psBag = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psBag ) ;
        
                            if( pczChannel && pczChannel[ 0 ] == ifcOLDiDcHANNEL1_BYfUNCTION && pczChannel[ 1 ] == ifcOLDiDcHANNELfUNCTION_MEDIATORrEGISTRATION ) { static countT idIn ; ((tin1S&)tin0P).pEther->traceF( tin0P , TF2(++idIn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" tmRelayOldTeatServerF: ifcOLDiDtYPEwRAP_GIFT (mediator registration channel)") ) ; }
        
                            }
                                THREADmODE1rESTORE
                                //((tin1S&)tin0P).pEther->traceF( tin0P , T("wrap from app for channel ")+T(pczChannel) ) ;
                                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
                            {
                            else
                            if( bDebug ) { CONoUTrAW3( "teat read a secret wrap that contains " , (countT)*psWrap , " members\r\n" ) ; }
        
                                bDebug = 1 ;
                            if( pczChannel && pczChannel[ 0 ] == ifcOLDiDcHANNEL1_BYfUNCTION && pczChannel[ 1 ] == ifcOLDiDcHANNELfUNCTION_MEDIATED && pczChannel[ 2 ] == ifcIDaDAM_SECRETsERVICE && pczChannel[ 3 ] == ifcIDaDAM_CONSOLE && pczChannel[ 4 ] == ifcOLDiDcHANNELfUNCTION_STROKEcONSOLE )
                            ZE( boolT , bDebug ) ;
        
                            countT* pczChannel = (countT*)psWrap->pbFieldF( tin0P , countTC() , countTC() , countTC() , ifcOLDiDfIELDwRAP_CHANNEL ) ;
                        {
                        case ifcOLDiDtYPEwRAP_GIFT :
                        }
                            break ;
                            bQuit = 1 ;
                        {
                        case ifcOLDiDtYPEwRAP_QUIT : //OPTIONAL: CLIENTS ARE ASSUMED TO BE RUDE
                        }
                            break ;
                        {
                        case ifcOLDiDtYPEwRAP_CHANNELiNCLUDEpOPaLL :
                        }
                            break ;
                        {
                        case ifcOLDiDtYPEwRAP_CHANNELiNCLUDEpOP :
                        }
                            break ;
                            }
                                stChannel << pc4c ;
                                stackC& stChannel = idType == ifcOLDiDtYPEwRAP_CHANNELiNCLUDEpUSH ? stChannelInclude : stChannelExclude ;
        
                                if( pcFilter ) etThread.memCopyF( tin0P , (byteT*)pcFilter , (byteT*)pcFilterFrom , ccFilter * sizeof( countT ) ) ;
                                etThread.newF( tin0P , LF , pcFilter , ccFilter ) ; ___( pcFilter ) ;
                                ccFilter  = psWrap->cFieldF( tin0P , ifcOLDiDfIELDwRAP_CCfILTER ) ;
                                countT* pcFilterFrom = (countT*)psWrap->pbFieldF( tin0P , countTC() , countTC() , countTC() , ifcOLDiDfIELDwRAP_FILTER ) ;
        
                                ccTestMax = psWrap->cFieldF( tin0P , ifcOLDiDfIELDwRAP_CCtESTmAX ) ;
        
                                if( pczTest ) etThread.memCopyF( tin0P , (byteT*)pczTest , (byteT*)pczChannel , cca * sizeof( countT ) ) ;
                                etThread.newF( tin0P , LF , pczTest , cca ) ; ___( pczTest ) ;
                                countT cca = 1 + etThread.strBodyLengthF( tin0P , pczChannel ) ;
        
                                countT&  ccFilter  =  *(countT*)&pc4c->c4 ;
                                countT*& pcFilter  = *(countT**)&pc4c->c3 ;
                                countT&  ccTestMax =  *(countT*)&pc4c->c2 ;
                                countT*& pczTest   = *(countT**)&pc4c->c1 ;    
                            {
                            if( pc4c )
                            etThread.newF( tin0P , LF , pc4c ) ; ___( pc4c ) ;
                            ZE( count4S* , pc4c ) ;
                            countT* pczChannel = (countT*)psWrap->pbFieldF( tin0P , countTC() , countTC() , countTC() , ifcOLDiDfIELDwRAP_CHANNEL ) ;
                        {
                        case ifcOLDiDtYPEwRAP_CHANNELeXCLUDEpUSH :
                        case ifcOLDiDtYPEwRAP_CHANNELiNCLUDEpUSH :
                    {
                    switch( idType )
                    //CONoUTrAW3( "tmRelayOldTeatServerF [idType]: " , idType , "\r\n" ) ;
                    countT idType = psWrap->cFieldF( tin0P , ifcOLDiDfIELDwRAP_IDtYPE ) ;
                {
                if( !bQuit )
    
                }
                    etThread.delF( tin0P , psttTM ) ;
                    }
                        }
                            bQuit = 1 ;
                            POOPRqUIET
                            ((tin1S&)tin0P).pEther->traceF( tin0P , T("tmRelayOldTeatServerF / wrapper contains garbage") ) ;
                        {
                        if( POOP )
                        __( psWrap->cFieldF( tin0P , ifcOLDiDfIELDwRAP_IDvERSION ) - 1 ) ; //idVersion
                        __( psWrap->cFieldF( tin0P , ifcOLDiDfIELDwRAP_IDpROTOCOL ) - ifcIDpROTOCOL_RELAYwRAP ) ;
                        __( ((tin1S&)tin0P).pEtScratch->strCompareF( tin0P , psttTM , T("IdeaFarm " "(tm)") ) ) ;
                        __( idTypeTM - ifcIDtYPEsOULiTEM_strokeSptr ) ;
                        __Z( psttTM ) ;
                        SCOOPS
                    {

                    }
                        //CONoUTrAW( ostoSay ) ;
                        //OStEXTA(  ostoSay , "\"\r\n" ) ;
                        //OStEXTA(  ostoSay , T(psttTM) ) ;
                        //OStEXTAK( ostoSay , "tmRelayOldTeatServerF [psttTM]: \"" ) ;
                        //OStEXT( ostoSay , TUCK << 2 ) ;

                        etThread.strReplaceF( tin0P , psttTM , 0 , ifcIDtYPEsTRrEPLACE_MAKEiMPORT , psttTM[ 2 ].idAdam ) ; ___( psttTM ) ;
                        etThread.strDecodeF( tin0P , psttTM , pbfTM ) ; ___( psttTM ) ;
                    {
                    if( pbfTM && cbfTM )
                    ZE( strokeS* , psttTM ) ;
        
                    byteT* pbfTM = psWrap->pbFieldF( tin0P , idTypeTM , flagsTM , cbfTM , ifcOLDiDfIELDwRAP_TRADEmARK ) ; //U::BUG: STRINGS OF STROKES ARE NOW ENCODED
                    ZE( countT , cbfTM ) ;
                    ZE( flagsT , flagsTM ) ;
                    ZE( countT , idTypeTM ) ;
                {
    
                }
                    if( POOP ) POOPR

                    }
                        break ;
                        DEL( psWrap ) ;
                        POOPR
                    {
                    if( POOP )
                    //CONoUTrAW3( "tmRelayOldTeatServerF: readF returned (" , idIn , ")\r\n" ) ;
                    countT idIn = 1 + incv02AM( idInLath ) ;
                    static countT idInLath ;
                    psoP->readF( tin0P , *psWrap ) ;
                    SCOOPS
                {
            {
            if( psWrap )
            soulC* psWrap = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psWrap ) ;
        {
        while( !ether && !bQuitP && !bQuit && !etThread )
        etThread.traceF( tin0P , T("tmRelayOldTeatServerF: client is ")+TF2(idAdamClient,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        etThread.osThreadF( tin0P , countTC() , tmRelayOldServerWrapToAppF , &sgnDone_tmRelayOldServerWrapToAppF , 0 , flTHREADlAUNCH_null , 0 , 0 , (countT)&bQuit , (countT)&psoP , (countT)&stWrapRef , (countT)&stChannelInclude , (countT)&stChannelExclude , idAdamClient ) ;
        signC sgnDone_tmRelayOldServerWrapToAppF( tin0P , TAG( TAGiDnULL ) ) ;

        }
            if( !idAdamClient ) bQuit = 1 ;
            DEL( psWrap ) ;
            }
                if( POOP ) POOPR

                else       *psWrap >> idAdamClient ;
                if( POOP ) POOPR
                psoP->readF( tin0P , *psWrap ) ;
                SCOOPS
            {
            if( psWrap )
            soulC* psWrap = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psWrap ) ;
        {
        ZE( countT , idAdamClient ) ;
        ZE( boolT , bQuit ) ;
    
        psoP->etherF( tin0P , *((tin1S&)tin0P).pEtScratch ) ;
    
        stackC stChannelExclude( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_count4S ) ;
        stackC stChannelInclude( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_count4S ) ;
    
        swsWrapRefP.ungrabF( tin0P ) ;
        THREADmODE1rESTORE
        stackC& stWrapRef = (stackC&)swsWrapRefP ;
        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
        cLeverPayloadP = ((tin1S&)tin0P).glass.idThread ;
        swsWrapRefP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
    {
    IFsCRATCHoK

    socketC* psoP = (socketC*)pTaskP->c4 ;
    RELAYiNFOtm
{
if( pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
/*1*/TASK( tmRelayOldTeatServerF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

