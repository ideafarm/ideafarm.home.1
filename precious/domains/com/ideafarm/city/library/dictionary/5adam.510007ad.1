
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;

etThread.osThreadF( TaRG1( tmSayF ) ) ;

etThread.osThreadF( TaRG1( tmHearF ) ) ;
etThread.osThreadF( TaRG1( tmHearF ) ) ;

TODO

DONE( tmHearF )

}
    }
        etThread.traceF( tin0P , T("yippee! [nnWo]:    ")+T(nnWo)+T(nnWo.isIPv4F()?"    IPv4":"    IPv6") ) ;
        soulNicNameIn >> nnWo ;
        nicNameC nnWo ;
    {
    while( soulNicNameIn )

    etThread.traceF( tin0P , T("called readF [nnHe,idpHe]:    ")+T(nnHe)+T("    ")+TF2(idpHe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    socki.readF( tin0P , soulNicNameIn , idpHe , nnHe , 0 , 0 ) ;
    soulC soulNicNameIn( tin0P , TAG( TAGiDnULL ) ) ;
    etThread.traceF( tin0P , T("calling readF") ) ;
    ZE( countT , idpHe ) ;
    nicNameC nnHe ;
{
while( !POOP && !ether )

countT idpMe = socki.bindF( tin0P , 12345 , nnAny , 1 , 0 ) ;
socketC socki( tin0P , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM , flSOCKETc_null , T(postADDRgROUP) , 0 , 0 , 0 , 0 , 0 ) ;

nicNameC nnAny = socketC::nicNameIF( tin0P , etThread , T("::") ) ;

TASK( tmHearF )

DONE( tmSayF )

socko.writeF( tin0P , 12345 , nicNameC() , soulNicName ) ;

socketC socko( tin0P , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM , flSOCKETc_null , T(postADDRgROUP) , 0 , 0 , 0 , 0 , 0 ) ;

}
    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
{

}
    etThread.delF( tin0P , pnnMe ) ;
    }
        else etThread.traceF( tin0P , T("NON-routable    :    ")+T(pnnMe[offi]) ) ;
        }
            soulNicName << pnnMe[ offi ] ;
            etThread.traceF( tin0P ,  T("routable unicast:    ")+T(pnnMe[offi]) ) ;
        {
        if( pnnMe[ offi ].isRoutableUnicastF() )
    {
    for( countT offi = 0 ; offi < cnnMe ; offi ++ )
    socketC::nicNameIF( tin0P , etThread , pnnMe , cnnMe , 0 ) ; ___( pnnMe ) ;
    ZE( countT    , cnnMe ) ;
    ZE( nicNameC* , pnnMe ) ;
{
soulC soulNicName( tin0P , TAG( TAGiDnULL ) ) ;

TASK( tmSayF )

#define postADDRgROUP "ff02::bb:aa"
//G:#define postADDRgROUP "ff02::bb:aa"
//B:#define postADDRgROUP "ff02::1"
//G:#define postADDRgROUP "ff02::5:6"

/*1*/WAKEsHOWtEXT( "doodle.advertise.my.nicNameC.values" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

