
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            }
                strSubstringF( tin0P , psttToP , idBegin , idEnd , psttFromP ) ; ___( psttToP ) ;
                idEnd -- ;
            {
            if( idBegin < idEnd )

            countT idEnd   = strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , tBoundary , psttFromP ) ;
            countT idBegin = idf ;
        {
        )
            idf
            &&
            strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , tcrcr , psttFromP )
            &&
            idf
            &&
            strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , tBoundary , psttFromP )
        (
        if
        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;

        delF( tin0P , psttBoundary ) ;
        TN( tBoundary , "--" ) ; tBoundary += T(psttBoundary) ;
    {
    else
    }
        if( idf ) { strSubstringF( tin0P , psttToP , idf , countTC() , psttFromP ) ; ___( psttToP ) ; }

        strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , tcrcr , psttFromP ) ;
        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
    {
    if( !psttBoundary )

    TN( tcrcr , "\r\n\r\n" ) ;

    }
        delF( tin0P , psttv ) ;
        }
            if( idf ) { strSubstringF( tin0P , psttBoundary , idf , countTC() , psttv ) ; ___( psttBoundary ) ; }

            strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , T("boundary=") , psttv ) ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;

            // INPUT EXAMPLE: "multipart/mixed; boundary=0016368e20f0e2dd310498cd0ae7"
        {
        if( psttv && psttv->idAdam )

        delF( tin0P , psttHead ) ;
        strSubstringMimeHeaderF( tin0P , psttv , psttHead , T("content-type") ) ; ___( psttv ) ;
        ZE( strokeS* , psttv ) ;

        strGetMimeHeaderF( tin0P , psttHead , psttFromP ) ; ___( psttHead ) ;
        ZE( strokeS* , psttHead ) ;
    {
    ZE( strokeS* , psttBoundary ) ;

    }
        if( POOP ) return ;
        __Z( psttFromP ) ;
        __NZ( psttToP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT etherC::strGetMimeBodyF( tin0S& tin0P , strokeS*& psttToP , const strokeS* const psttFromP )/*1*/

/**/

*/
  must not be 0
 psttFromP
  must be 0
 psttToP
 tin0P
parameters
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

