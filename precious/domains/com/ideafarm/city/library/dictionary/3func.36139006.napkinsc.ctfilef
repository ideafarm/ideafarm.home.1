
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    new( 0 , tin0P , pbDockFile + offDockP * sizeof( fileC ) , sizeof( fileC ) ) fileC( tin0P , ostoName , access , share , flagsDetails , how , flFILEaTTR1_null , flFILEaTTR2_null , flFILEc_null ) ;

    //etherC::etRockIF( tin0P ).traceF( tin0P , T(ostoName) ) ;

    flagsT flagsDetails = flOPENdETAILS_DOnOTvALIDATE | flOPENdETAILS_LOCrANsEQ | flOPENdETAILS_NOcACHE ;
    countT how          = ifcOPENhOW_nCeO  ;
    countT share        = ifcOPENsHARE_WR  ;
    countT access       = ifcOPENaCCESS_WR ; //CANNOT SPECIFY READ ONLY HERE BECAUSE napkinC MIGHT NEED TO FORMAT ITSELF EVEN IF I AM ONLY GOING TO READ THE DATA SECTION OF THE NAPKIN

    }
        OStEXTA( ostoName , osName ) ;

        ether.delF( tin0P , psttm ) ;
        osFileNameC osName( tin0P , ether , T(psttm) ) ;
        ether.diskMapFileNameF( tin0P , psttm , tName ) ; ___( psttm ) ;
        ZE( strokeS* , psttm ) ;
        etherC& ether = *((tin1S&)tin0P).pEther ;

        ctFileNameIF( tin0P , tName , postNameP ) ;
        TN( tName , "" ) ;
    {
    OStEXT( ostoName , TUCK << 2 )              //20200509@1034: INCREASED FROM TUCK TO TUCK << 2

    _IO_

    }
        if( POOP ) return ;
        __Z( postNameP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
{
/*1*/voidT napkinsC::ctFileF( tin0S& tin0P , const countT offDockP , const osTextT* const postNameP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

