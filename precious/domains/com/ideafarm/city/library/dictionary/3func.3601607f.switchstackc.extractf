
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( pBaton ) pBaton->ungrabF( tin0P ) ;
    if( !third ) pStack->extractF( tin0P , pbP , cbP , idP ) ;
    __Z( pStack ) ;
    stackC* pStack = (stackC*)( bTinHasLeverP ? swMe.forIfcThreadF( tin0P ) : (countT)swMe ) ;

    else if( osTidOwner != ((tin9S&)tin0P).osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = ((tin9S&)tin0P).osTid ;
    if( pBaton ) pBaton->grabF( tin0P , TAG( TAGiDnULL ) ) ;

    _IO_

    }
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT switchStackC::extractF( tin0S& tin0P , byteT*& pbP , countT& cbP , const countT idP , const boolT bTinHasLeverP )/*1*/
/**/
*/
  can be 0
 idP
arguments
like stackC::extractF but there a distinct stack for each thread is used
returns the idP'th item and removes it from the stack for the current thread
\<A HREF=\"5.1210082.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$extractF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

