
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    ((tin9S&)tin0P).pag5->frPaper.grab.ungrabF( tin0P ) ;

    etherP( tin0P , pStk_pSadam ) ;
    }
        //LOGrAWtID( "----END--------------------------------------------------------------------------------------" ) ; //U::
        ((tin9S&)tin0P).pag1->_pulpOldC_.flagsMode = saveModeI ;
        }
            }
                while( ~hWalk ) ;
                }
                    if( POOP ) POOPR
    
                    }
                        }
                            }
                                break ;
                                /*if( cpd && !( idCycleP % cpd ) )*/ sad.pStrike->sc.pPaper->moveGlyphF( tin0P , sad , 0 ) ;
                                countT cpd = features.fc.cyclesPerDragRedraw ;
                            {
                            case 3 :
                            }
                                break ;
                                }
                                    vb.flags &= ~( F(flVbODYs_NEWsPEC) ) ;
                                    if( features.fc.pSadamAnimateCBF ) sad.doF( tin0P , *((tin9S&)tin0P).pEtScratch , ifcIDtYPEsTROKEcALLbACK_VOLATILEtEXTcHANGED , idEvent , pcNotesP , 0 ) ;
                                    requestTabFreshIF( tin0P ) ; //VOLATILE TEXT MIGHT CONTAIN BUTTONS THAT PARTICIPATE IN TABBING; MOVE TO sadamC::doF SO IS DONE ONLY WHEN TAB PARTICIPANT IS CT/DT
                                    sad.pStrike->sc.pPaper->renderVolatilesF( tin0P , sad , 0 , flSTRIKEvOLATILE_LOADpOSITION | flSTRIKEvOLATILE_LOADsPEC , &vb ) ;
                                    sad.pStrike->rCacheVolatileSnap = sad.pStrike->sc.pPaper->x1.pPulp->rCache ;
                                    vb.flags &= ~( F(flVbODYs_STALEeRASED) ) ;
                                {
                                if( F(vb.flags) & flVbODYs_STALEeRASED )
                                vBodyS& vb = *(vBodyS*)&(countT&)*features.pswVolBody ; //THIS REFERENCE IS VOLATILE DUE TO SNAP/RESTORE DURING RENDERING
                            {
                            case 2 :
                            }
                                break ;

                                }
                                    vb.flags |= flVbODYs_STALEeRASED ;
                                    sad.pStrike->sc.pPaper->x1.pPulp->flagsMode = _saveMode ;
                                    sad.pStrike->sc.pPaper->renderVolatilesF( tin0P , sad , 0 , flSTRIKEvOLATILE_null , &vb ) ;
                                    const flagsT _saveMode = sad.pStrike->sc.pPaper->x1.pPulp->flagsMode ;
                                    if( vb.psttDone ) sad.pStrike->sc.pPaper->x1.pPulp->rCache = sad.pStrike->rCacheVolatileSnap ;
                                
                                    if( features.fc.pSadamAnimateCBF ) sad.doF( tin0P , *((tin9S&)tin0P).pEtScratch , ifcIDtYPEsTROKEcALLbACK_VOLATILEtEXTcHANGING , idEvent , pcNotesP , 0 ) ;
                                {
                                if( bStale )
                                if( F(vb.flags) & flVbODYs_STALEeRASED ) { BLAMMO ; }
                                
                                if( vb.zBaton_ppsttSpec ) vb.zBaton_ppsttSpec->ungrabF( tin0P ) ;
                                ;
                                )
                                    (  *vb.ppsttSpec && etherP.strCompareF( tin0P , *vb.ppsttSpec , vb.psttDone ) )
                                    ( !*vb.ppsttSpec &&  vb.psttDone ) ||
                                    (  *vb.ppsttSpec && !vb.psttDone ) ||
                                (
                                boolT bStale =
                                if( vb.zBaton_ppsttSpec ) vb.zBaton_ppsttSpec->grabF( tin0P , TAG( TAGiDnULL ) ) ;
                                vBodyS& vb = *(vBodyS*)&(countT&)*features.pswVolBody ;
                                
                                if( features.fc.pSadamAnimateCBF ) sad.doF( tin0P , *((tin9S&)tin0P).pEtScratch , ifcIDtYPEsTROKEcALLbACK_ANIMATE , idEvent , pcNotesP , 0 ) ;
                            {
                            case 1 :
                        {
                        switch( idPass )
                        //LOGrAWtID4( "pass " , idPass , " idvf " , idvf ) ;

                        features.cLeverVolBody = features.pswVolBody->leverF( tin0P , idvf ) ;
                    {
                    for( countT idvf = 1 ; idvf <= cvFlavors ; idvf ++ )
                    countT cvFlavors = features.pswVolBody->cFlavorsF( tin0P ) ;

                    //LOGrAWtID( TF1(features.fc.idTabClass)+T(".")+TF1(features.fc.idTab)+T(".")+TF1(features.fc.idAdam)+T(": \"")+T(features.fc.postOldComment)+T("\"") ) ; //U::

                    }
                        continue ;
                        pStk_pSadam->extractF( 0 , tin0P ) ;
                    {
                    if( !sad.bAwakePresentF( tin0P ) )

                    //U::NO EFFECT HERE

                    featuresS& features = *(featuresS*)&(const featuresS&)sad ;
                    sadamC& sad = *(sadamC*)pStk_pSadam->downF( tin0P , hWalk ) ;
                {
                do
                handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {
            if( *pStk_pSadam )

            //LOGrAWtID2( "pass " , idPass ) ; //U::
        {
        for( countT idPass = 1 ; idPass <= 3 ; idPass ++ )
        //LOGrAWtID( "----BEGIN------------------------------------------------------------------------------------" ) ; //U::
        ((tin9S&)tin0P).pag1->_pulpOldC_.flagsMode |= flPAPERmODEi_SUPPRESStABfRESH ;
        flagsT saveModeI = ((tin9S&)tin0P).pag1->_pulpOldC_.flagsMode ;
        const countT idEvent = 1 + incv02AM( ((tin9S&)tin0P).pag1->idEventSadamsLath ) ;
    {
    if( pStk_pSadam && *pStk_pSadam )
    sadamsC::pSadamsIF( tin0P )->getF( tin0P , pStk_pSadam , flGETsADAMsTATES_FIFO ) ;
    ZE( stackC* , pStk_pSadam ) ;

    ((tin9S&)tin0P).pag5->frPaper.grab.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    //if( etherC::ether_cUtility_IF( tin0P ) ) return ;
    //B eep( TUCK * ( 1 + etherC::ether_cUtility_IF( tin0P ) ) , TUCK ) ; //U::TO STUDY CPU LOADING BY THIS FUNCTION
{
/*1*/voidT paperOldC::freshVolatileTextIF( tin0S& tin0P , etherC& etherP , const countT* const pcNotesP , const countT idCycleP )/*1*/

//U::EITHER PREVENT APP CODE IN CALLBACKS FROM CALLING SNAP/RESTORE OR REFRESH vb REFERENCES OR EDIT snapF TO DO RESTORE IN PLACE
//U::O: RESTORE vb IN PLACE SO CAN OBTAIN THIS REFERENCE WO TIME AND REUSE IT

// FOR EXAMPLE, ERASURES, RENDERS, PAPERBACK ABSENCE CHANGES, AND SADAM SLEEP/WAKE CHANGES ONLY OCCUR BETWEEN CALLS TO ME, NEVER DURING CALLS TO ME
// THIS IS ENFORCED BY DOING A GLOBAL GRAB AND ASSUMING THAT OTHER THREADS THAT MODIFY SADAM STATE ALSO DO A GLOBAL GRAB
// THIS CODE ASSUMES THAT STATE VALUES THAT IT LOOKS AT DO NOT CHANGE DURING THE CALL
// ALL STALE VALUES MUST BE ERASED BEFORE ANY REPLACEMENT VALUES ARE RENDERED

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

