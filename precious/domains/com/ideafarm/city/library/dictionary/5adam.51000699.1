
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.diskWalkF( tin0P , cDirs , cFiles , T("///d/ideafarm.home.101/IdeaFarm (tm)/2.1. Drop Files Here To Archive Them/") , *(countT*)&(const countT&)ether , diskWalkValidateTimeStampsCBF , pcArg ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;

countT pcArg[] = { (countT)&sttq , (countT)&sttSlash , (countT)&tSpace , (countT)&tSssDateTime1 , (countT)&tSssDateTime3 } ;

;

    +S2(sa_SSSaNDeND,sc_ccSSS)

        +T("-")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012345")
        +S2(sa_SSSoR,sc_ccSSS)                  // ss

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012345")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012")
        +S2(sa_SSSoR,sc_ccSSS)                  // hh

        +T("-")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("0123")
        +S2(sa_SSSoR,sc_ccSSS)                  // dd

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("_20")                               // yyyy

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)                  // mm (IGNORE)

        +T("_")

        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T(".gmail.!.20")                    // yyyy (IGNORE)

    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime3 , "" ) ; tSssDateTime3 =
// ".gmail.!.2013_01_20130128-174843-"
//                   yyyymmdd hhmm

;

    +S2(sa_SSSaNDeND,sc_ccSSS)
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(2,sc_ccSSSrEPEAT,2)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("012")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("@")
        +S2(sa_SSSmARKnUMERIC9,sc_cSSSmARK)
        +S3(4,sc_ccSSSrEPEAT,4)
        +S2(sa_SSSoReND,sc_ccSSS)
            +T("01")
        +S2(sa_SSSoR,sc_ccSSS)
        +T("20")
    +S2(sa_SSSaND,sc_ccSSS)
    T("")

TN( tSssDateTime1 , "" ) ; tSssDateTime1 =
// "20130510@2359"
//  yyyymmdd hhmm

TN( tSpace , "    " ) ;
TN( t201 , "201" ) ;
strokeS sttSlash( '\\' ) ;
strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

TODO

}
    return 1 ;

    }
        ((tin123S&)tin0P).pEther->delF( tin0P , psttShort ) ;

        }
            ((tin123S&)tin0P).pEther->delF( tin0P , psttBody ) ;
            ((tin123S&)tin0P).pEther->delF( tin0P , psttStamp ) ;
            ((tin123S&)tin0P).pEther->delF( tin0P , psttFound ) ;

            }
                ((tin123S&)tin0P).pEther->delF( tin0P , psttFoundTime ) ;
                ((tin123S&)tin0P).pEther->delF( tin0P , psttFoundDate ) ;
                ((tin123S&)tin0P).pEther->delF( tin0P , psttStampTime ) ;
                ((tin123S&)tin0P).pEther->delF( tin0P , psttStampDate ) ;

                else                                                                                                                                       etherC::etRockIF( tin0P ).traceF( tin0P , T(psttStamp) ) ;
                if( ((tin123S&)tin0P).pEther->strCompareF( tin0P , psttStampDate , psttFoundDate ) || ((tin123S&)tin0P).pEther->strCompareF( tin0P , psttStampTime , psttFoundTime ) ) etherC::etRockIF( tin0P ).traceF( tin0P , T(psttStamp)+tSpaceP+T(psttFound) ) ;

                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttFoundTime  , idf , idl , psttFound ) ; ___( psttFoundTime ) ;
                idl = 0xd ;
                idf = 0xa ;
                ZE( strokeS* , psttFoundTime ) ;

                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttFoundDate  , idf , idl , psttFound ) ; ___( psttFoundDate ) ;
                idl = 0x8 ;
                idf = 0x1 ;
                ZE( strokeS* , psttFoundDate ) ;

                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttStampTime  , idf , idl , psttStamp ) ; ___( psttStampTime ) ;
                idl = 0xd ;
                idf = 0xa ;
                ZE( strokeS* , psttStampTime ) ;

                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttStampDate  , idf , idl , psttStamp ) ; ___( psttStampDate ) ;
                idl = 0x8 ;
                idf = 0x1 ;
                ZE( strokeS* , psttStampDate ) ;
            {
            if( psttFound )

            }
                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttFound , idf , idl , psttBody ) ; ___( psttFound ) ;

                idl = idf    + 0xc ;
                idf = idSss3 + 0x11 ;
            {
            else if( idSss3 )
            }
                ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttFound , idf , idl , psttBody ) ; ___( psttFound ) ;

                idl = idSss1 + 0xc ;
                idf = idSss1 ;
            {
            if( idSss1 )
            ZE( strokeS* , psttFound ) ;

            countT idSss3 = ((tin123S&)tin0P).pEther->strIdF( tin0P , tSssDateTime3P , psttBody ) ;
            countT idSss1 = ((tin123S&)tin0P).pEther->strIdF( tin0P , tSssDateTime1P , psttBody ) ;

            ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttBody , idf , idl , psttShort ) ; ___( psttBody ) ;
            idl = 0x00 ;
            idf = 0x24 ;
            ZE( strokeS* , psttBody ) ;

            ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttStamp  , idf , idl , psttShort ) ; ___( psttStamp ) ;
            idl = 0x19 ;
            idf = 0x0d ;
            ZE( strokeS* , psttStamp ) ;

            // !ideafarm.4.20080721@2013.000b358b.
            // !ideafarm.4.20010101@0256.000b2575.74c3b2a1.ab10f1c3.
            //             |-----------|
            // 123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0
            // 0              1               2               3               4
        {
        if( psttShort )

        ((tin123S&)tin0P).pEther->strSubstringF( tin0P , psttShort , idf , idl , tName ) ; ___( psttShort ) ;
        ZE( countT , idl ) ;
        countT idf = idShort + 1 ;
        ZE( strokeS* , psttShort ) ;
    {
    if( idShort )
    countT idShort = ((tin123S&)tin0P).pEther->strIdF( tin0P , sttSlashP , tName , - 1 ) ;

    TN( tName , postNameP ) ;

    textC&   tSssDateTime3P =   *(textC*)pcArgP[ 4 ] ;
    textC&   tSssDateTime1P =   *(textC*)pcArgP[ 3 ] ;
    textC&   tSpaceP        =   *(textC*)pcArgP[ 2 ] ;
    strokeS& sttSlashP      = *(strokeS*)pcArgP[ 1 ] ;
    strokeS& sttqP          = *(strokeS*)pcArgP[ 0 ] ;
{
boolT diskWalkValidateTimeStampsCBF( tin0S& tin0P , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.validate.archive.timestamps" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

