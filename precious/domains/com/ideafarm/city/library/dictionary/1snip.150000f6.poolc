
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    friend TASKpROTO( tmPoolFlushF ) ;                                                                                                                                                                                                                             \
    friend class datum_listingVSP_C ;
    friend class listing_listingVSP_C ;
    friend class datum_countT_C ;

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e201d.poolC.expCbDropBigEnoughF!||
    countT expCbDropBigEnoughF( countT cbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e201c.poolC.refresh_ppSlots_F!||
    voidT refresh_ppSlots_F( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e201b.poolc.testDropHeadersF!||
    voidT testDropHeadersF( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.350e201b.poolC.deleteEmptiesIfIF!||
    static voidT deleteEmptiesIfIF( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e201a.poolC.deleteEmptiesIfF!||
    voidT deleteEmptiesIfF( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.350e2019.poolC.glassIF!||
    static voidT glassIF( tin0S& tin0P , strokeS*& pstt1P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e2018.poolC.glassF!||
    voidT glassF( tin0S& tin0P , strokeS*& psttP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/!||
    static voidT reportIF( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.35015.poolC.reportIF!||
    static voidT reportIF( tin0S& tin0P , const countT*& pczLeverP , switchC& swTallyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.poolC.flushF!||
    voidT flushF( tin0S& tin0P ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.360e2016.poolC.reportF!||
    voidT reportF( tin0S& tin0P , etherC& etherP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36014.poolC.reportF!||
    voidT reportF( tin0S& tin0P , etherC& etherP , const countT*& pczLeverP , switchC& swTallyP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.poolC.reportF!||
    voidT reportF( tin0S& tin0P , etherC& etherP , soulC& soulP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.poolC.walkF!||
    voidT walkF( tin0S& tin0P , slotsWalkCBFT pSlotsWalkCBFP , countT& cArgP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.poolC.postNameF!||
    const osTextT* postNameF( tin0S& tin0P ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.poolC.operator_element!||
    byteT* operator []( const countT idAptP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.poolC.operator_element!||
    countT operator []( const byteT* pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.poolC.pDropNoteIF!||
    static dropNoteS* pDropNoteIF( tin0S& tin0P , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.poolC.pPoolFromNameIF!||
    static poolC* pPoolFromNameIF( tin0S& tin0P , const osTextT* const postP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.poolC.pPoolIF!||
    static poolC* pPoolIF( tin0S& tin0P , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.poolC.pDropNoteF!||
    dropNoteS* pDropNoteF( tin0S& tin0P , const byteT* const pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.poolC.operator_not!||
    boolT operator !( voidT ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.poolC.operator_call!||
    voidT operator ()( tin0S& tin0P , byteT*& pbP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.poolC.newF!||
    voidT newF( tin0S& tin0P , const countT idLineP , const countT idiFileP , byteT*& pbP , const countT cbP , const flagsT flagsP = flPOOLcnEW_null ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.poolC.poolC!||
    poolC( tin0S& tin0P , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP , const countT cbDropSeparatorP = CBsEXdROPsEPARATOR , const flagsT flagsP = flPOOLc_null , const countT idStateSpaceP = 0 , const countT expCbDropMinP = - 1 , const countT expCbDropMaxP = - 1 , const countT* pczHintPreallocationP = 0 , countT idMemorySpaceP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.poolC.dt_poolC!||
    ~poolC( voidT ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.poolC.NEWdELcLASSb!||
    NEWdELcLASSpROTOS

    inline flagsT flagsPoolFormatF( voidT ) const { return face.flagsPoolFormat ; }
    inline countT idMemorySpaceF(   voidT ) const { return guts.idMemorySpace   ; }
    inline countT idStateSpaceF(    voidT ) const { return guts.idStateSpace    ; }

    }
        return cba ;
        while( exp -- ) cba <<= 1 ;
        countT cba = 1 ;
        countT exp = idP >> 0x18 & 0xf ;
    {
    static inline countT cbAllocatedF( countT idP )

    inline countT dispenseUniqueListNameF( voidT ) { return ( - 1 + decv02AM( ((face_poolC_S*)(byteT*)napFace)->idListNameLath ) ) ; } //USES THE TOP OF THE countT RANGE ; DISPENSES DOWNWARD SO THAT MOST RECENT WILL BE ENCOUNTERED WOTH WHEN WALKING A LISTc

    inline aptC& aptListRootF( voidT ) { return ((face_poolC_S*)(byteT*)napFace)->aptListRoot ; } const // IT IS ILLEGAL FOR CODE OTHER THAN listC TO REFER TO aptListRootF

    public :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.poolC.ctFilesF!||
    voidT ctFilesF( tin0S& tin0P , const osTextT* const postNameP , const countT idStateSpaceP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.poolC.ctFaceF!||
    voidT ctFaceF( tin0S& tin0P , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsPoolFormatP , const countT cbDropSeparatorP , const countT idStateSpaceP ) ;

    private :

    sexC*           pSexLifoConstructed                              ;                                   // USED TO DESTROY sexC IN REVERSE ORDER OF CONSTRUCTION

    public :

    face_poolC_S&   face                                             ;
    guts_poolC_S&   guts                                             ;
    napkinC         napGuts                                          ;
    flagsT          flagsInstance                                    ;
    poolC*          pNext                                            ;
    napkinC         napFace                                          ;
    batonC          batPoolCt                                        ; //MUST BE CT EARLIEST AND DT LATH
    byteT           pbFileFace[ SIZEOF_fileC ]                       ;
    byteT           pb_batPoolCt[ CBzOMBIEbATONc ]                   ;

    ;
    }
        face_poolC_S( tin0S& tin0P , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const flagsT flagsPoolFormatP , const countT cbDropSeparatorP , const countT cbDropHeaderP ) ;
        ~face_poolC_S( voidT ) ;
        NEWdELcLASSpROTOS

        const countT    cbDropHeader                                 ;
        const countT    cbDropSeparator                              ;
        countT          pcCbDropAdjust[ CsLOTsIZESmAX ]              ;
        countT          idListNameLath                               ;
        aptC            aptListRoot                                  ;
        countT          cRef                                         ;
        const flagsT    flagsPoolFormat                              ;
        const countT    idFormat                                     ;
        const countT    finger                                       ;
    {
    struct _export face_poolC_S

    ;
    }
        guts_poolC_S( tin0S& tin0P , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const osTextT* const postNameP , const flagsT flagsP , const countT idStateSpaceP , const countT expCbDropMinP , const countT expCbDropMaxP , countT idMemorySpaceP ) ;
        ~guts_poolC_S( voidT ) ;
        NEWdELcLASSpROTOS

        const countT    cBitsExpCbDrop ;
        const countT    expCbDropMax ;
        const countT    expCbDropMin ;
        grabC* const    pGrabNewElt ;
        byteT           pbzaGrab[ CsLOTsIZESmAX * sizeof( grabC )  ] ;
        slotsC*         ppSlots[  CsLOTsIZESmAX                    ] ;
        byteT           pbza[     CsLOTsIZESmAX * sizeof( slotsC ) ] ;
        osTextT         postName[ COSTpOOLnAMEmAX ] ;         // THIS VALUE MUST BE SHORTER THAN COSTpOOLnAMEmAX TO ALLOW FOR slotsC AND sexC APPENDAGES
        const countT    idMemorySpace ;
        const countT    idStateSpace ;    
        const flagsT    flagsCt ;
    {
    struct _export guts_poolC_S
{
/*1*/class _export poolC/*1*/

/**/

*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

