
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            if( POOP ) POOPR ;
            //etScratch.boxPutF( tinBaseP , T("///d/tmp/x/query.reply.")+TF2(idIn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(".ttt") , postHear , costHear ) ;
            //countT idIn = ++ idInLath ;
            //static countT idInLath ;

            }
                ether.strMakeFromOsTextF( tinBaseP , psttHashP , postc2 ) ; ___( psttHashP ) ;
                *poste = 0 ;
                while( *poste && *poste != '\r' && *poste != '\n' ) poste ++ ;
                osTextT* poste = postc2 ;

                while( *postc2 == ' ' ) postc2 ++ ;
                postc2 += sizeof postTagHash - 1 ;
            {
            if( postc2 )

            }
                cbHiP = 0 ; //U::SUPPORT LARGE FILES
                cbLoP = ether.strDigitsToSCountF( tinBaseP , T(postc1) , 0xa , 1 ) ;

                *poste = 0 ;
                while( *poste && *poste != '\r' && *poste != '\n' ) poste ++ ;
                osTextT* poste = postc1 ;

                while( *postc1 == ' ' ) postc1 ++ ;
                postc1 += sizeof postTagLength - 1 ;
            {
            if( postc1 )

            osTextT* postc2 = thirdC::c_strstrIF( tinBaseP , postHear , postTagHash ) ;
            osTextT* postc1 = thirdC::c_strstrIF( tinBaseP , postHear , postTagLength ) ;

            osTextT postTagHash[] = "\nEtag:" ;
            osTextT postTagLength[] = "\nContent-Length:" ;
        {
        if( bOk )

        }
            }
                }
                    POOPR
                {
                if( POOP )

                }
                    }
                        etPrime.osSleepF( tinBaseP , TOCK ) ;
                        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

                        ether.traceF( tinBaseP , T("will retry after napping for a tock") ) ;

                        POOPR ;
                    {
                    else
                    }
                        break ;
                        bOk = 1 ;
                    {
                    if( !POOP )

                    __( !ether.strIdF( tinBaseP , tReplyCode200_OK , tHear ) ) ;

                    }
                        break ;
                        etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("authorization refused") ) ;
                    {
                    if( POOP )
                    __NZ( 1 == ether.strIdF( tinBaseP , tReplyCode401_Unauthorized , tHear ) ) ;
                {
                if( !POOP )

                ether.traceF( tinBaseP , T(postHear) ) ;
                TN( tHear , postHear ) ;

                costHear = ss.readF( tinBaseP , postHear , sizeof postHear , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
                thirdC::c_memsetIF(  tinBaseP , postHear , sizeof postHear ) ;

                ss.writeF( tinBaseP , (osTextT*)tSay , (countT)tSay.csF( tinBaseP ) ) ;
                ss.connectF( tinBaseP , 443 , socketC::nicNameIF( tinBaseP , etScratch , tHost ) ) ;
                socketC ss( tinBaseP , etScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;

                //}
                //    __1 ;
                //    bWoth = 0 ;
                //{
                //if( bWoth ) //U:: TO FIND A BUG

                SCOOPS
            {
        {
        while( cTries -- && !etPrime && !POOP )
        countT cTries = TUCK >> 5 ;
        //boolT bWoth = 1 ; //U::TO FIND A BUG
        etherC& etScratch = *((tin9S&)tinBaseP).pEtScratch ;
        etherC& etPrime   = etherC::etPrimeIF( tinBaseP ) ;
        ZE( boolT , bOk ) ;
        ZE( countT , costHear ) ;
        char postHear[ TOCK ] ; 
    {
    IFsCRATCH

    //ether.traceF( tinBaseP , T("the HEAD utterance has been appended to the log") ) ;
    //LOGrAW( tSay ) ;

    }
        ether.delF( tinBaseP , psttShortUrlEncoded ) ;
        }
            bHandle.ungrabF( tinBaseP ) ;
            tSay = T("HEAD ")+tUrlCloudAgent+T("/")+T(psttCloudContainerP)+T("/")+T(psttShortUrlEncoded)+T(" HTTP/1.1\r\nHost: ")+tHost+T("\r\nX-Auth-Token: ")+cloudInfo.tRackspaceAccessToken+T("\r\n\r\n") ;
            cloudInfoS& cloudInfo = *(cloudInfoS*)hCloud.osF( ifcIDtYPEhANDLE_CLOUD ) ;
            bHandle.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        {

        //  
        // X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
        // Host: storage.clouddrive.com
        // HEAD /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/archive/shortEncodedName HTTP/1.1
        // 
        // EXAMPLE

        ether.strToUrlF( tinBaseP , psttShortUrlEncoded , psttShortP ) ; ___( psttShortUrlEncoded ) ;
        ZE( strokeS* , psttShortUrlEncoded ) ;
    {
    TN( tSay , "" ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( psttShortP ) ;
        __Z( psttCloudContainerP ) ;
        __NZ( psttHashP ) ;
        __NZ( cbHiP ) ;
        __NZ( cbLoP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/*1*/voidT cloudC::queryRemoteFileF( tin0S& tinBaseP , countT& cbLoP , countT& cbHiP , strokeS*& psttHashP , const strokeS* const psttCloudContainerP , const strokeS* const psttShortP )/*1*/

/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

