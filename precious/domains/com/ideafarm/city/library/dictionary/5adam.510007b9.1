
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    pGrabHandleAll = 0 ;
    pIdptHandleAll = 0 ;

    }
        while( cRelays ) { ++ s ; etThread.osSleepF( tin0P , TUCK * 0x40 ) ; }

        /*if( etherC::ifc_idHomeIdisk_IF() == 1 )*/ etThread.osThreadF( TaRG1( tmTestF ) ) ;

        }
            ++ s ; etThread.osSleepF( tin0P , TOCK ) ;
            cRelays ++ ; etThread.osThreadF( TaRG1( tmNodeOldF ) , (countT)&cRelays ) ;
        {
        while( cDo -- )
        countT cDo = 1 ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    {
    ZE( countT , cRelays ) ;

    }
        host.idpTeat = portC() ;
        homeS& host = homeS::homeIF() ;
    {

    pIdptHandleAll = &idptHandleAll ;
    portTimeC idptHandleAll ;

    pGrabHandleAll = &grabHandleAll ;
    grabC grabHandleAll( tin0P , TAG( TAGiDnULL ) ) ;
{

TODO

DONE( tmNodeOldF )
}
    cRelaysP -- ;
    nodeOldC relay( tin0P , etThread , bReady ) ;
    ZE( boolT , bReady ) ;
    countT& cRelaysP = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TELL( "setting up" )
TASK( tmNodeOldF )

DONE( tmTestF )

}
    ++ s ; ether.osSleepF( tin0P , TOCK >> 2 ) ;

    etThread.cioPutF( tin0P , bQuit , c8c , sGift , &sTo , &sToMediator ) ;
    etThread.traceF( tin0P , T("test [msg]:    ")+tMsg ) ;

    sGift << (strokeS*)tMsg ;
    TN( tMsg , "" ) ; tMsg = T("115 tmTestF bang [nnMe,idHome,idMsg]:    ")+T(nnMe)+T("    ")+TF2(processGlobal2S::_processGlobal2I_IF().idHome,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+tIdMsg ;
    soulC sGift( tin0P , TAG( TAGiDnULL ) ) ;

    TN( tIdMsg , "" ) ; tIdMsg = TF2(++idMsg,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
{
while( !ether )
ZE( countT , idMsg ) ;
sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

count8S c8c( 1 , 2 , 3 , 4 ) ;
ZE( boolT , bQuit ) ;

soulC sToMediator( tin0P , TAG( TAGiDnULL ) ) ;
soulC sTo( tin0P , TAG( TAGiDnULL ) ) ;

nicNameC nnMe = socketC::nicNameIF( tin0P , etThread , 0 ) ;

etThread.cioSetGetF( tin0P , cioGetF ) ;

etThread.traceF( tin0P , T("napped") ) ;
}
    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
{
etThread.traceF( tin0P , T("napping") ) ;

TASK( tmTestF )

}
    }
        DEL( psPayloadP ) ; //OPTIONAL
        etherP.delF( tin0P , pczChannelP ) ; //OPTIONAL
        etherP.delF( tin0P , psttMsg ) ;

        etherP.traceF( tin0P , T("115 cioGetF [channel,message]: ")+TF2(pczChannelP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" \"")+T(psttMsg)+T("\"") , flTRACE_null , ifcIDtRACEdIVERT_f ) ;

        *psPayloadP >> psttMsg ; ___( psttMsg ) ;
        ZE( strokeS* , psttMsg ) ;
    {
    if( idPayloadTypeP == ifcOLDiDtYPEgIFT_APPLICATION )

    //etherP.traceF( tin0P , T("cioGetF [idPayloadTypeP]: ")+TF2(idPayloadTypeP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
{
voidT cioGetF( tin0S& tin0P , etherC& etherP , const boolT& bQuitP , const countT idPayloadTypeP , soulC*& psPayloadP , countT*& pczChannelP , countT& cArgP , const portTimeC& idptOriginP )

#include postADAMhEADER

portTimeC* pIdptHandleAll ;
grabC* pGrabHandleAll ;


/*1*/WAKEhIDE( "doodle.pseudocopy.of.ifcIDaDAM_3BANG" )/*1*/
/**/
*/
 the etherC::cioGetF cioPutF support is not duplicated ; adam a exercizes that code, presumably using its own nodeOldC class rather than base's relayOldC class
 all of the code for the relayOldC class is duplicated within adam a, including the tmRelayOld*F thread functions
this adam contains baseline code to duplicate the function of adam 115 (3bang) so that the relayC class and related code can be rewritten for clarity
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

