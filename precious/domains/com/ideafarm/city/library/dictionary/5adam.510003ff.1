
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    etThread.delF( tin0P , psttLevel ) ;
    }
        }
            }
                //U:sgnDone_tmRiverAndPour.waitF( tin0P ) ;

                }
                    if( pMainF ) (*pMainF)( &main ) ;
                    mainS main( tin0P , ether , etThread , T("cid ")+tCid+T(" level ")+T(psttLevel) ) ;
                    etThread.dllEntryF( tin0P , pMainF , hDll , T("mainF") ) ;
                    ZE( mainFT , pMainF ) ;
                    etThread.dllOpenF( tin0P , hDll , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/20401040.ipdos-wd") ) ;
                    ZE( countT , hDll ) ;
                    hoverC hoverLevel( tin0P , etThread , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/") ) ;
                {

                ((tin1S&)tin0P).flagsThreadMode1 &= ~( F(flTHREADmODE1_SHOWpROGRESS) ) ;

                //U:{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmRiverAndPourF , &sgnDone_tmRiverAndPour ) ; }
                //U:signC sgnDone_tmRiverAndPour( tin0P , TAG( TAGiDnULL ) ) ;

                etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step 31 of 31") ) ;
            {
            else
            if( etThread ) ifcGATEeRROR( 21 )
        {
        //else
        //}
        //    etThread.delF( tin0P , psttnu ) ;
        //    etThread.faceHearF( tin0P , psttnu ) ;
        //    ZE( strokeS* , psttnu ) ;
        //    etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("press the enter key\r\nthen reopen the gate to use the new reliability setting")+S2(0,scOld_SYSmARK) ) ;
        //{
        //if( bRestartNeeded )
        //boolT bRestartNeeded = updateReliabilityLevelF( tin0P , etThread , psttLevel , tCid ) ; ___( psttLevel ) ;
        //U: SUPPORT RELIABILITY LEVELS OTHER THAN 7use

        etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step 21 of 31") ) ;
    {
    else
    if( etThread ) ifcGATEeRROR( 11 )

    updateTimeAdjustmentF( tin0P , etThread , tCid ) ;

    etThread.delF( tin0P , psttOldCid ) ;
    TN( tCid , psttOldCid ) ;
    etThread.strWordF( tin0P , psttLevel , pmp->psttDirectives , sttQuote , S1C(' ') , 4 ) ;
    etThread.delF( tin0P , psttLevel ) ;
    __( !!etThread.strCompareF( tin0P , psttLevel , T("level") ) ) ;
    etThread.strWordF( tin0P , psttLevel , pmp->psttDirectives , sttQuote , S1C(' ') , 3 ) ;

    etThread.strWordF( tin0P , psttOldCid , pmp->psttDirectives , sttQuote , S1C(' ') , 2 ) ;
    etThread.delF( tin0P , psttOldCid ) ;
    __( !!etThread.strCompareF( tin0P , psttOldCid , T("cid") ) ) ;
    etThread.strWordF( tin0P , psttOldCid , pmp->psttDirectives , sttQuote , S1C(' ') , 1 ) ;

    strokeS sttQuote ;
    ZE( strokeS* , psttLevel ) ;
    ZE( strokeS* , psttOldCid ) ;

    etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step 11 of 31") ) ;
{
else
if( etThread ) ifcGATEeRROR( 01 )
__Z( pmp ) ;
etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step 01 of 31") ) ;

TODO

DONE( tmRiverAndPourF )
}
    DEL( pRiver ) ;

    }
        }
            etThread = 0 ;
            cFound = etThread.boxPourF( tin0P , T("city.center.ideafarm.com") , T("///ideafarm/ephemeral/domains/com/ideafarm/city/data/new/") , T("///ideafarm/ephemeral/domains/com/ideafarm/city/data/out/") , 0x100000 , CbOXpOURmAX ) ;
        {
        if( !ether )
        if( !cFound ) etThread.osSleepF( tin0P , TOCK * 0x10 ) ;
    {
    while( !ether && !etThread )
    ZE( countT , cFound ) ;

    else                                                   { /* etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("attaching to the river that flows to city center\r\n")+S2(0,scOld_SYSmARK) ) ; */ pRiver = new( 0 , tin0P , LF ) riverC( tin0P , etThread , socketC::nicNameIF( tin0P , etThread , T("city.center.ideafarm.com") ) , ifcPORToLD1rIVERrESERVED ) ; }
    else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0              ) { /* etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("attaching to the river that flows to 0x01010102\r\n" )+S2(0,scOld_SYSmARK) ) ; */ pRiver = new( 0 , tin0P , LF ) riverC( tin0P , etThread , 0x01010102                                                           , ifcPORToLD1rIVERrESERVED ) ; }
         if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 || bSolo )   /* etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("not attaching to the river\r\n"                      )+S2(0,scOld_SYSmARK) )   */ ;
    ZE( riverC* , pRiver ) ;

    }
        etThread.delF( tin0P , psttv ) ;
        if( psttv ) bSolo = !etThread.strCompareF( tin0P , psttv , T("me") ) ;
        etThread.osEnvironmentVariableF( tin0P , psttv , T("ifcNicNameCityCenter") ) ; ___( psttv ) ;
        ZE( strokeS* , psttv ) ;
    {
    if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
    ZE( boolT , bSolo ) ;
    countT idComputer = etThread.diskIdF( tin0P , T("///c") ) ;
{
if( pTaskP )
TASK( tmRiverAndPourF )

}
    return bChanged ;

    }
        etThread.delF( tin0P , postLevel ) ;
        etThread.boxPutF( tin0P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/settings/")+T(psttOldCidP)+T("/reliability") , postLevel ) ;
        etThread.strMakeF( tin0P , LF , postLevel , psttLevelP ) ; ___( postLevel ) ;
        ZE( osTextT* , postLevel ) ;
    {
    if( psttLevelP && psttLevelP->idAdam )

    }
        etThread.delF( tin0P , psttLevelNew ) ;
        }
            etThread.strMakeF( tin0P , LF , psttLevelP , psttLevelNew ) ; ___( psttLevelP ) ;
            etThread.delF( tin0P , psttLevelP ) ;
            bChanged = 1 ;
        {
        if( psttLevelP && psttLevelNew && psttLevelNew->idAdam && etThread.strCompareF( tin0P , psttLevelP , psttLevelNew ) )
        etThread.faceHearF( tin0P , psttLevelNew ) ; ___( psttLevelNew ) ;
        ZE( strokeS* , psttLevelNew ) ;
        etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("reliability=")+T(psttLevelP)+T("\r\nreliability?") ) ;
    {
    ZE( boolT , bChanged ) ;
{
boolT updateReliabilityLevelF( tin0S& tin0P , etherC& etThread , strokeS*& psttLevelP , const strokeS* const psttOldCidP )

}
    }
        //etThread.delF( tin0P , psttw ) ;
        //etThread.strokeF( tin0P , T(psttw)+T("\r\n")+S2(0,scOld_SYSmARK) ) ;
        //if( timeError.time2 >= 0 ) etThread.strokeF( tin0P , T("+") ) ;
        //etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("local time contains an error of        ") ) ;
        //etThread.strFromTimeF( tin0P , psttw , timeError.time1 , timeError.time2 ) ;

        //etThread.boxPutF( tin0P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/settings/")+T(psttOldCidP)+T("/time.error") , (byteT*)&timeError , sizeof timeError ) ;
        }
            poolOld Side.timeError2 = timeError.time2 ;
            poolOld Side.timeError1 = timeError.time1 ;
            poolOld SideS& poolOld Side = (poolOld SideS&)>>>>(pool C&)et<<>>OBSOLETEDcODE:INTENTIONALcOMPILEeRROR<<<<Thread ;
        {
        etThread.osTimeSubtractF( tin0P , timeError.time1 , timeError.time2 , timeR1 , timeR2 ) ;
        etThread.osTimeAddF     ( tin0P , timeError.time1 , timeError.time2 , time1  , time2  ) ;
        timeS timeError ;

        //etThread.delF( tin0P , psttw ) ;
        //etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("the uncorrected time at this gate is  ")+T(psttw)+T("\r\n")+S2(0,scOld_SYSmARK) ) ;
        //etThread.strFromTimeF( tin0P , psttw , time1 , time2 ) ;
        etThread.osTimeNowF( tin0P , time1 , time2 , 1 ) ;
        ZE( sCountT , time2 ) ;
        ZE( countT , time1 ) ;

        //etThread.delF( tin0P , psttw ) ;
        //etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+T("IdeaFarm " "(tm) City reference time is    ")+T(psttw)+T("\r\n")+S2(0,scOld_SYSmARK) ) ;
        //etThread.strFromTimeF( tin0P , psttw , timeR1 , timeR2 ) ;
        //ZE( strokeS* , psttw ) ;
    {
    if( !etThread )

    SEE THE COMMENTS IN osTimeNowF
    THIS DEF WILL NOT BUILD BECAUSE timeError* MEMBERS OF poolOld SideS WERE ELIMINATE DURING ELIMINATION OF poolOld SideS
    NOTE:

    }
        etThread.delF( tin0P , pbtr ) ;
        __Z( timeR2 ) ;
        }
            timeR2 = *(countT*)( pbtr + sizeof( sCountT ) ) ;
            timeR1 = *(sCountT*)pbtr ;
        {
        if( !etThread && pbtr && cbtr == sizeof( countT ) + sizeof( sCountT ) )
        etThread.boxGetShadowF( tin0P , pbtr , cbtr , T("city.center.ideafarm.com//time") ) ;
        ZE( countT , cbtr ) ;
        ZE( byteT* , pbtr ) ; // "tr" = TIME REFERENCE
    {
    ZE( sCountT , timeR2 ) ;
    ZE( countT , timeR1 ) ;

    __Z( psttOldCidP ) ;
{
voidT updateTimeAdjustmentF( tin0S& tin0P , etherC& etThread , const strokeS* const psttOldCidP )

/*1*/WAKEhIDE( "city.gate.3" )/*1*/
/**/
*/
 boxPourF
this can fail due to hardcoded capacity limit
periodically pours data from the local home to city.center.ideafarm.com
gate
it is illegal to refer to this symbol in the definition of an adam
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

