
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    TELL( "dllOpenF / -------- (really)" ) ; //U:: TO FIND A BUG: 20180525@0729
    }
        TELL( "dllOpenF / --" ) ; //U:: TO FIND A BUG: 20180525@0729
        traceF( tinP , T("dllOpenF / ----") ) ; //U::
        }
            third.delF( tinP , postAnticipatedError ) ;
            }
                __1
                if( !( F(flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) etherPutLogF( tinP , T(postAnticipatedError) ) ;
                strokeF( tinP , T("\r\nSometimes that doesn''t work.  Please try again after pressing Enter.") ) ;
            {
            if( !POOP && postAnticipatedError )
            third.delF( tinP , post ) ;

            // tinP.pag1->_etherC_.pSwDllReferences->ungrabF( tinP ) ;
            // }
            //     ++ ( (countT&)*tinP.pag1->_etherC_.pSwDllReferences ) ;
            //     tinP.pag1->_etherC_.oshDllLever = hDllP.osF( ifcIDtYPEhANDLE_DLL ) ;
            // {
            // if( ~hDllP )
            // tinP.pag1->_etherC_.pSwDllReferences->grabF( tinP , TAG( TAGiDnULL ) ) ;
            //CONJ: NO LONGER NEEDED
            //U::NEEDS REWRITE NOW THAT handleC IS USED; MY CALLER WILL DT hDllP, WHICH WILL CLOSE THE OS HANDLE

            TELL( "dllOpenF / 0" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729

            }
                traceF( tinP , T("dllOpenF / 0") ) ; //U::
                batUpdate.ungrabF( tinP ) ;
                traceF( tinP , T("dllOpenF / 1") ) ; //U::

                }
                    traceF( tinP , T("dllOpenF / 2") ) ; //U::
                    TELL( "dllOpenF / 1" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729

                    THREADmODE2rESTORE
                    TELL( "dllOpenF / 2" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
                    }
                        traceF( tinP , T("dllOpenF / 3") ) ; //U::
                        third.dosLoadModuleF( tinP , hDllP , postAnticipatedError , osFileNameC( tinP , third , post ) , this ) ; ___( postAnticipatedError ) ;
                        traceF( tinP , T("dllOpenF / 4") ) ; //U::
                        _IO_
                    {
                    TELL( "dllOpenF / 3" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
                    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
                    traceF( tinP , T("dllOpenF / 5") ) ; //U::
                    delF( tinP , psttMapped ) ;
                    strMakeF( tinP , LF , post , psttMapped ) ; ___( post ) ;
                    traceF( tinP , T("dllOpenF / 6") ) ; //U::
                {
                if( !POOP )
                traceF( tinP , T("dllOpenF / 7") ) ; //U::

                TELL( "dllOpenF / 4" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
                __Z( psttMapped ) ;
                }
                    traceF( tinP , T("dllOpenF / 8") ) ; //U::
                    delF( tinP , psttm ) ;
                    THREADmODE2rESTORE
                    diskMapFileNameHoverF( tinP , psttMapped , psttm , cTriesP ) ; ___( psttMapped ) ;
                    diskMapFileNameF( tinP , psttm , psttP ) ; ___( psttm ) ;
                    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
                    ZE( strokeS* , psttm ) ;
                    traceF( tinP , T("dllOpenF / 9") ) ; //U::
                {
                ZE( strokeS* , psttMapped ) ;

                TELL( "dllOpenF / 5" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
                traceF( tinP , T("dllOpenF / a") ) ; //U::
                batUpdate.grabF( tinP , TAG( TAGiDnULL ) ) ;
                traceF( tinP , T("dllOpenF / b") ) ; //U::
            {
            ZE( osTextT* , postAnticipatedError ) ;
            ZE( osTextT* , post ) ;
            batonC batUpdate( tinP , TAG( TAGiDnULL ) , T("ifc.update") , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ;
            TELL( "dllOpenF / 6" ) ; thirdC::dosPriorityIF( tinP ) ; //U:: TO FIND A BUG: 20180525@0729
        {
        traceF( tinP , T("dllOpenF / ++++") ) ; //U::

        _IO_

        }
            if( POOP ) return ;
            __( !tinP.pag1->_etherC_.pSwDllReferences ) ;
            __( !tinP.pag1->_etherC_.pEtPrime ) ;
            if( POOP ) return ;
        {
        IFbEcAREFUL
        SCOOP
    {
{
/**//*1*/voidT etherC::dllOpenF( tinS& tinP , handleC& hDllP , const strokeS* psttP , const countT cTriesP )/*1*/

*/
 psttP
arguments
it is illegal for any ifc code to modify the master or the hover directory without grabbing: batonC batUpdate( tinP , TAG( TAGiDnULL ) , T("ifc.update") ) ;
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.103002b.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dllOpenF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

