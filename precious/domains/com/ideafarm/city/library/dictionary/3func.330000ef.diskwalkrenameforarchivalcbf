
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bDoIt ;

    }
        }
            }
                }
                    }
                        }
                            }
                                }
                                    }
                                        etThread.traceF( tinBaseP , T("!exception: could not set file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+tLongZip ) ;
                                        const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                        POOPRqUIET
                                        countT rc = POOP ;
                                    {
                                    if( POOP )

                                    ((thirdC&)etThread).setFileTimeF( tinBaseP , fiw , &timeWritten , &timeWritten , &timeWritten ) ;

                                    }
                                        etThread.traceF( tinBaseP , T("!exception: could not open file to set its file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+tLongZip ) ;
                                        const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                        POOPRqUIET
                                        countT rc = POOP ;
                                    {
                                    if( POOP )

                                    fileC fiw( tinBaseP , (strokeS*)tLongZip , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;

                                    //etThread.traceF( tinBaseP , tLongZip ) ;

                                    TN( tLongZip , "" ) ; tLongZip = tToPath+tNewFileZip ;
                                {
                                if( timeWritten )            

                                third.diskZipF( tinBaseP , tToShort , tFrom , 0 , 0 , "-max -move" , "-9m" , 0 ) ;

                                  etThread.traceF( tinBaseP , tFrom    ) ;
                                //etThread.traceF( tinBaseP , tFrom5   ) ;
                                //etThread.traceF( tinBaseP , tFrom4   ) ;
                                //etThread.traceF( tinBaseP , tFrom3   ) ;
                                //etThread.traceF( tinBaseP , tFrom2   ) ;
                                  etThread.traceF( tinBaseP , tToShort ) ;

                                TN( tFrom , "" ) ; tFrom = tq + tFrom1 + tqbq + tFrom2 + tqbq + tFrom3 + tqbq + tFrom4 + tqbq + tFrom5 + tq ;

                                TN( tFrom5   , osFileNameC( tinBaseP , third , tNewFileMetaPathLeaf    ) ) ;
                                TN( tFrom4   , osFileNameC( tinBaseP , third , tNewFileMetaPathRoot    ) ) ;
                                TN( tFrom3   , osFileNameC( tinBaseP , third , tNewFileMetaCurrentName ) ) ;
                                TN( tFrom2   , osFileNameC( tinBaseP , third , tNewFileMetaHashedName  ) ) ;
                                TN( tFrom1   , osFileNameC( tinBaseP , third , tNewFileData            ) ) ;
                                TN( tToShort , osFileNameC( tinBaseP , third , tNewFileZip             ) ) ;
                                TN( tq     , "\"" ) ;
                                TN( tqbq     , "\" \"" ) ;
                                thirdC& third = etThread ;

                                //countT rc = thirdC::c_systemIF( tinBaseP , "dir" ) ;
                                hoverC hover( tinBaseP , etThread , tToPath ) ;
                                //etThread.traceF( tinBaseP , tToPath ) ;

                                }
                                    }
                                        etThread.traceF( tinBaseP , T("             [timeAccessedLook]:    ")+TT(timeAccessedLook.time1,timeAccessedLook.time2) ) ;
                                        etThread.traceF( tinBaseP , T("              [timeCreatedLook]:    ")+TT(timeCreatedLook.time1,timeCreatedLook.time2) ) ;
                                        etThread.traceF( tinBaseP , T("              [timeWrittenLook]:    ")+TT(timeWrittenLook.time1,timeWrittenLook.time2) ) ;
                                        etThread.traceF( tinBaseP , T("original file     [timeWritten]:    ")+TT(timeWritten.time1,timeWritten.time2) ) ;
                                        }
                                            }
                                                }
                                                    etThread.traceF( tinBaseP , T("!exception: could not get file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+tOld ) ;
                                                    const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                                    POOPRqUIET
                                                    countT rc = POOP ;
                                                {
                                                if( POOP )

                                                thirdC::getFileTimeIF( tinBaseP , fir , &timeWrittenLook , &timeCreatedLook , &timeAccessedLook ) ;

                                                SCOOPS
                                                _IO_
                                            {
                                            IFsCRATCH

                                            fileC fir( tinBaseP , (strokeS*)*pptLong[ offt ] , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;
                                        {
                                        timeS timeAccessedLook = timeS() ;
                                        timeS timeCreatedLook  = timeS() ;
                                        timeS timeWrittenLook  = timeS() ;

                                        }
                                            }
                                                etThread.traceF( tinBaseP , T("!exception: could not set file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+*pptLong[ offt ] ) ;
                                                const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                                POOPRqUIET
                                                countT rc = POOP ;
                                            {
                                            if( POOP )

                                            ((thirdC&)etThread).setFileTimeF( tinBaseP , fiw , &timeWritten , &timeWritten , &timeWritten ) ;

                                            }
                                                etThread.traceF( tinBaseP , T("!exception: could not open file to set its file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+*pptLong[ offt ] ) ;
                                                const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                                POOPRqUIET
                                                countT rc = POOP ;
                                            {
                                            if( POOP )

                                            fileC fiw( tinBaseP , (strokeS*)*pptLong[ offt ] , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;
                                        {
                                    {
                                    for( countT offt = 0 ; offt < sizeof pptLong / sizeof pptLong[ 0 ] ; offt ++ )

                                    textC* pptLong[] = { &tLong0 , &tLong1 , &tLong2 , &tLong3 , &tLong4 } ;
                                    TN( tLong4 , "" ) ; tLong4 = tToPath+tNewFileMetaPathLeaf    ;
                                    TN( tLong3 , "" ) ; tLong3 = tToPath+tNewFileMetaPathRoot    ;
                                    TN( tLong2 , "" ) ; tLong2 = tToPath+tNewFileMetaCurrentName ;
                                    TN( tLong1 , "" ) ; tLong1 = tToPath+tNewFileMetaHashedName  ;
                                    TN( tLong0 , "" ) ; tLong0 = tToPath+tNewFileData            ;
                                {
                                if( timeWritten )            

                                etThread.boxPutF(            tinBaseP , tToPath+tNewFileMetaPathLeaf    , tPathLeaf , tPathLeaf.csF( tinBaseP ) ) ;
                                etThread.boxPutF(            tinBaseP , tToPath+tNewFileMetaPathRoot    , tPathRoot , tPathRoot.csF( tinBaseP ) ) ;
                                etThread.boxPutF(            tinBaseP , tToPath+tNewFileMetaCurrentName , tShort    , tShort.csF(    tinBaseP ) ) ;
                                etThread.boxPutF(            tinBaseP , tToPath+tNewFileMetaHashedName  , tShort    , tShort.csF(    tinBaseP ) ) ;
                                etThread.diskMoveFileOrDirF( tinBaseP , tToPath+tNewFileData            , tOld ) ;

                                //etThread.traceF( tinBaseP , tNewFileMetaCurrentName ) ;
                                //etThread.traceF( tinBaseP , tNewFileMetaHashedName ) ;

                                //etThread.traceF( tinBaseP , tNewFileData+T("    ")+tOld , flTRACE_null , ifcIDtRACEdIVERT_8 ) ;

                                }
                                    ) ;
                                        || etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileMetaPathLeaf    )
                                        || etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileMetaPathRoot    )
                                        || etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileMetaCurrentName )
                                        || etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileMetaHashedName  )
                                        || etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileData            )
                                           etThread.diskFileExistsF( tinBaseP , tToPath+tNewFileZip             )
                                    (
                                    while
                                    }
                                        tNewFileMetaPathLeaf    = tPart1+tDotTypeMetaDotPathLeaf    ;
                                        tNewFileMetaPathRoot    = tPart1+tDotTypeMetaDotPathRoot    ;
                                        tNewFileMetaCurrentName = tPart1+tDotTypeMetaDotCurrentName ;
                                        tNewFileMetaHashedName  = tPart1+tDotTypeMetaDotHashedName  ;
                                        tNewFileData            = tPart1+tDotTypeData+tDotExt       ;
                                        tNewFileZip             = tPart1+tDotFsetDotZip                    ;

                                        TN( tPart1 , "" ) ; tPart1 = tNewPrefix+tTimePair+tDot+tHash+tDot+TF3(++idSeq,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,3) ;

                                        //20200410@1946: MIGRATE FROM FORMAT 8 TO FORMAT 9 BY EDITING THE FOLLOWING CODE

                                        //U:: DECISION: FOR THE NEXT FORMAT REVISION, ELIMINATE tSequenceNumber AND SHORTEN THE RENDERING OF idSeq TO 3 OR 4
                                        //U:: LOOK: WHAT IS THE ORIGIN OF THE tSequenceNumber VALUE?: IT IS FROM A FORMAT 6 NAME
                                        //U:: 20200405@1155: CONJ: CAN ELIMINATE THE tSequenceNumber SEQUENCE NUMBER AND ALSO SHORTEN THE idSeq RENDERING TO 3 BIGITS: CONJ: THERE IS NO NEED TO PRESERVE tSequenceNumber; ITS ONLY PURPOSE IS TO ENSURE THAT THERE ARE NO FILE COLLISIONS
                                    {
                                    do
                                    ZE( countT , idSeq ) ;

                                    }
                                        etThread.delF( tinBaseP , psttHash ) ;
                                        tHash = T(psttHash) ;
                                        hasher.queryStringF( tinBaseP , psttHash ) ; ___( psttHash ) ;
                                        ZE( strokeS* , psttHash ) ;

                                        hasher.eatF( tinBaseP , tShort , tShort.csF( tinBaseP ) ) ;
                                        hasherC hasher( tinBaseP , etThread ) ;
                                    {
                                    TN( tHash , "" ) ;
                                {
                                TN( tNewFileMetaPathLeaf , "" ) ;
                                TN( tNewFileMetaPathRoot , "" ) ;
                                TN( tNewFileMetaCurrentName , "" ) ;
                                TN( tNewFileMetaHashedName , "" ) ;
                                TN( tNewFileData , "" ) ;
                                TN( tNewFileZip  , "" ) ;
                                TN( tDotFsetDotZip , ".fset.zip" ) ;                                                                                            // 20240807@1800: NOW THE LEAF VALUE WILL SPECIFY THE NAME OF THE ARCHIVE TO PLACE THE FILESET INTO
                                                                                                                                                                // ORIGINALLY, THE LEAF VALUE DESCRIBED THE SOURCE OF THE FILE
                                TN( tToPath , ifFileNameC( tinBaseP , etThread , postzToP ) ) ; tToPath += tPathLeaf+T("/") ;                                       // DESTINATION FOLDER

                                }
                                    }
                                        etThread.delF( tinBaseP , psttSansDots ) ;
                                        tTimePair = T(psttSansDots) ;
                                        etThread.strSubstringF( tinBaseP , psttSansDots , idf , idl , tTimePair ) ; ___( psttSansDots ) ;
                                        countT idl = tTimePair.csF( tinBaseP) - 1 ;
                                        countT idf = 2 ;
                                        ZE( strokeS* , psttSansDots ) ;
                                    {
                                    if( tTimePair.csF( tinBaseP ) > 2 )

                                    }
                                        }
                                            }
                                                }
                                                    tTimePair = tDot+tTimeFromPrefix+tDot+tDateAtTimeFromFileMeta+tDot ;
                                                {
                                                else                    // THERE IS NO TIME AFTER HEY
                                                }
                                                    etThread.delF( tinBaseP , psttSingleTime ) ;
                                                    tTimePair = T(psttSingleTime)+tDateAtTimeFromFileMeta+tDot ;
                                                    etThread.strSubstringF( tinBaseP , psttSingleTime , idf , idl , tShort ) ; ___( psttSingleTime ) ;
                                                    countT idf = idHit2 ;
                                                    countT idl = idf - 1 ;
                                                    ZE( strokeS* , psttSingleTime ) ;
                                                {
                                                if( idHit2 )            // I HAVE A SINGLE TIME AFTER HEY                                                  
                                                idHit2 = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDotDateAtTimeDot , tShort ) ;
                                                idf = idfSave ;
                                            {
                                            else
                                            }
                                                etThread.delF( tinBaseP , psttDoubleTime ) ;
                                                tTimePair = T(psttDoubleTime) ;
                                                etThread.strSubstringF( tinBaseP , psttDoubleTime , idf , idl , tShort ) ; ___( psttDoubleTime ) ;
                                                countT idf = idHit2 ;
                                                countT idl = idf - 1 ;
                                                ZE( strokeS* , psttDoubleTime ) ;
                                            {
                                            if( idHit2 )            // I HAVE A DOUBLE TIME AFTER HEY                                                  
                                            countT idHit2 = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDotDateAtTimeDotDateAtTimeDot , tShort ) ;
                                            countT idfSave = -- idf ;                             
                                        {
                                        else                        // I HAVE A DOT HEY DOT
                                        }
                                            tTimePair = tDot+tTimeFromPrefix+tDot+tDateAtTimeFromFileMeta+tDot ;
                                        {
                                        if( !idHit )
                                        idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tDotHeyDot , tShort ) ;

                                        tSequenceNumber = tSequenceNumberFromPrefix ;
                                        }
                                            etThread.delF( tinBaseP , psttSequenceNumberFromPrefix ) ;
                                            tSequenceNumberFromPrefix = T(psttSequenceNumberFromPrefix) ;
                                            etThread.strSubstringF( tinBaseP , psttSequenceNumberFromPrefix , idf , idl , tShort ) ; ___( psttSequenceNumberFromPrefix ) ;
                                            countT idl = ++ idf + 2 ;
                                            ZE( strokeS* , psttSequenceNumberFromPrefix ) ;
                                        {
                                        TN( tSequenceNumberFromPrefix , "" ) ;

                                        }
                                            etThread.delF( tinBaseP , psttTimeFromPrefix ) ;
                                            tTimeFromPrefix = T(psttTimeFromPrefix) ;
                                            etThread.strSubstringF( tinBaseP , psttTimeFromPrefix , idf , idl , tShort ) ; ___( psttTimeFromPrefix ) ;
                                            countT idl = idf + 0xc ;
                                            ZE( strokeS* , psttTimeFromPrefix ) ;
                                        {
                                        TN( tTimeFromPrefix , "" ) ;
                                    {
                                    else                            // I HAVE A PREFIX
                                    }
                                        }
                                            }
                                                }
                                                    }
                                                        }
                                                            tTimePair = tDot+tDateAtTimeFromFileMeta+tDot+tDateAtTimeFromFileMeta+tDot ;
                                                        {
                                                        else
                                                        }
                                                            etThread.delF( tinBaseP , psttMMDDYYHHMM ) ;
                                                            tTimePair = tDot+T(psttSingle)+tDot+tDateAtTimeFromFileMeta+tDot ;

                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x09 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x08 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x07 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x06 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , tAt                               ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x03 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x02 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x01 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x00 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x05 ] ) ;
                                                            etThread.strFuseF( tinBaseP , psttSingle , psttMMDDYYHHMM[ CSpREFIX + 0x04 ] ) ;
                                                            etThread.strMakeF( tinBaseP , LF , psttSingle , t20                               , TUCK ) ; ___( psttSingle ) ; // TUCK IS WAY MORE THAN NEEDED
                                                            ZE( strokeS* , psttSingle ) ;

                                                            etThread.strSubstringF( tinBaseP , psttMMDDYYHHMM , idf , idl , tShort ) ; ___( psttMMDDYYHHMM ) ;
                                                            countT idf = idHit ;
                                                            countT idl = idf - 1 ;
                                                            ZE( strokeS* , psttMMDDYYHHMM ) ;
                                                        {
                                                        if( idHit == 1 )
                                                        idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssMMDDYYHHMM , tShort ) ;
                                                        idf = 1 ;
                                                    {
                                                    else
                                                    }
                                                        etThread.delF( tinBaseP , psttSingleTime ) ;
                                                        tTimePair = tDot+T(psttSingleTime)+tDateAtTimeFromFileMeta+tDot ;
                                                        etThread.strSubstringF( tinBaseP , psttSingleTime , idf , idl , tShort ) ; ___( psttSingleTime ) ;
                                                        countT idf = idHit ;
                                                        countT idl = idf - 1 ;
                                                        ZE( strokeS* , psttSingleTime ) ;
                                                    {
                                                    if( idHit == 1 )
                                                    idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDateAtTimeDot , tShort ) ;
                                                    idf = 1 ;
                                                {
                                                else
                                                }
                                                    etThread.delF( tinBaseP , psttSingleTime ) ;
                                                    tTimePair = T(psttSingleTime)+tDateAtTimeFromFileMeta+tDot ;
                                                    etThread.strSubstringF( tinBaseP , psttSingleTime , idf , idl , tShort ) ; ___( psttSingleTime ) ;
                                                    countT idf = idHit ;
                                                    countT idl = idf - 1 ;
                                                    ZE( strokeS* , psttSingleTime ) ;
                                                {
                                                if( idHit )
                                                idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDotDateAtTimeDot , tShort ) ;
                                                idf = 1 ;
                                            {
                                            else
                                            }
                                                etThread.delF( tinBaseP , psttDoubleTime ) ;
                                                tTimePair = tDot+T(psttDoubleTime) ;
                                                etThread.strSubstringF( tinBaseP , psttDoubleTime , idf , idl , tShort ) ; ___( psttDoubleTime ) ;
                                                //etThread.traceF( tinBaseP , T("[idf,idl]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idl,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                countT idf = idHit ;
                                                countT idl = idf - 1 ;
                                                ZE( strokeS* , psttDoubleTime ) ;
                                            {
                                            if( idHit == 1 )
                                            idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDateAtTimeDotDateAtTimeDot , tShort ) ;
                                            idf = 1 ;
                                        {
                                        else
                                        }
                                            etThread.delF( tinBaseP , psttDoubleTime ) ;
                                            tTimePair = T(psttDoubleTime) ;
                                            etThread.strSubstringF( tinBaseP , psttDoubleTime , idf , idl , tShort ) ; ___( psttDoubleTime ) ;
                                            countT idf = idHit ;
                                            countT idl = idf - 1 ;
                                            ZE( strokeS* , psttDoubleTime ) ;
                                        {
                                        if( idHit )
                                        idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tSssDotDateAtTimeDotDateAtTimeDot , tShort ) ;
                                        idf = 1 ;

                                        //etThread.traceF( tinBaseP , T("[tPatt2]: ")+tSssDotDateAtTimeDotDateAtTimeDot ) ;                             
                                        //etThread.traceF( tinBaseP , T("[tShort]: ")+tShort ) ;                             
                                    {
                                    if( idHit != 1 )

                                    countT idHit = etThread.strIdF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tPrefix6 , tShort ) ;

                                    TN( tPrefix6   , "!ideafarm.6." ) ;
                                    TN( tDotHeyDot , ".!." ) ;
                                    TN( tDot , "." ) ;
                                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                                    countT idf = 1 ;
                                {
                                TN( tSequenceNumber , "001" ) ;
                                TN( tTimePair , "" ) ;
                            {
                            if( 1 != etThread.strIdF( tinBaseP , tNewPrefix , tShort ) )
                        {
                        if( tShort.csF( tinBaseP ) )

                        }
                            etThread.delF( tinBaseP , psttDotExt ) ;
                            etThread.delF( tinBaseP , psttnu ) ;
                            tDotExt = T(psttDotExt) ;
                            etThread.strBisectF( tinBaseP , psttnu , psttDotExt , tShort , tDot , - 1 , flSTRbISECT_PREPENDdELIMITER ) ; ___( psttnu ) ; ___( psttDotExt ) ;
                            ZE( strokeS* , psttDotExt ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tDotExt , "" ) ;

                        }
                            ;
    
                                +TF4(mm,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                +TF4(hh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                +S1C('@')
                                +TF4(1+da,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                +TF4(1+mo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,2,0xa)
                                 TF4(1+ye,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN|flFORMAT_NObASE,4,0xa)
    
                            tDateAtTimeFromFileMeta =
    
                            etThread.osTimeToOldTimeF( tinBaseP , ms , ss , mm , hh , da , mo , ye , dow , pInfo->timeWritten1 , pInfo->timeWritten2 ) ;
                            ZE( countT , dow ) ;
                            ZE( sCountT , ye ) ;
                            ZE( countT , mo ) ;
                            ZE( countT , da ) ;
                            ZE( countT , hh ) ;
                            ZE( countT , mm ) ;
                            ZE( countT , ss ) ;
                            ZE( countT , ms ) ;
                        {
                        TN( tDateAtTimeFromFileMeta , "" ) ;

                        }
                            etThread.delF( tinBaseP , psttPathRoot ) ;
                            etThread.delF( tinBaseP , psttPathLeaf ) ;
                            tPathLeaf  = T(psttPathLeaf) ;
                            tPathRoot  = T(psttPathRoot) ;
                            etThread.strBisectF( tinBaseP , psttPathRoot , psttPathLeaf , tPath , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttPathLeaf ) ; ___( psttPathRoot ) ;
                            ZE( strokeS* , psttPathLeaf ) ;
                            ZE( strokeS* , psttPathRoot ) ;
                        {
                        TN( tPathLeaf , "" ) ;
                        TN( tPathRoot , "" ) ;

                        }
                            etThread.delF( tinBaseP , psttShort ) ;
                            etThread.delF( tinBaseP , psttPath ) ;
                            tShort = T(psttShort) ;
                            tPath  = T(psttPath) ;
                            etThread.strBisectF( tinBaseP , psttPath , psttShort , tOld , tSlash , - 1 , flSTRbISECT_null ) ; ___( psttPath ) ; ___( psttShort ) ;
                            ZE( strokeS* , psttShort ) ;
                            ZE( strokeS* , psttPath ) ;
                        {
                        TN( tShort , "" ) ;
                        TN( tPath , "" ) ;
                    {

                    etThread.traceF( tinBaseP , T("original file     [timeWritten]:    ")+TT(timeWritten.time1,timeWritten.time2) ) ;
                    }
                        }
                            }
                                etThread.traceF( tinBaseP , T("!exception: could not get file time [rc,postRc,name]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc)+T("    ")+tOld ) ;
                                const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                                POOPRqUIET
                                countT rc = POOP ;
                            {
                            if( POOP )

                            thirdC::getFileTimeIF( tinBaseP , hFile , &timeWritten , 0 , 0 ) ;

                            SCOOPS
                            _IO_
                        {
                        IFsCRATCH

                        etThread.diskFileQueryF( tinBaseP , pInfo , hFile ) ; ___( pInfo ) ;
                        etThread.fileOpenF( tinBaseP , hFile , countTC() , tOld , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_NOcACHE | flOPENdETAILS_DOnOTvALIDATE | flOPENdETAILS_DOnOTrEGISTER | flOPENdETAILS_LOCnONE , ifcOPENhOW_nFeO ) ;
                        handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                    {
                    timeS timeWritten = timeS() ;
                    ZE( infoFileS* , pInfo ) ;
                {
                if( postzToP )

                textC& t20                               = *pptSpecP[ 0x12 ] ;
                textC& tAt                               = *pptSpecP[ 0x11 ] ;
                textC& tDotTypeMetaDotPathLeaf           = *pptSpecP[ 0x10 ] ;
                textC& tDotTypeMetaDotPathRoot           = *pptSpecP[ 0x0f ] ;
                textC& tDotTypeMetaDotCurrentName        = *pptSpecP[ 0x0e ] ;
                textC& tDotTypeMetaDotHashedName         = *pptSpecP[ 0x0d ] ;
                textC& tDotTypeData                      = *pptSpecP[ 0x0c ] ;
                textC& tNewPrefix                        = *pptSpecP[ 0x0b ] ;
                textC& tSDDS                             = *pptSpecP[ 0x0a ] ;
                textC& tSDS                              = *pptSpecP[ 0x09 ] ;
                textC& tDot                              = *pptSpecP[ 0x08 ] ;
                textC& tSssMMDDYYHHMM                    = *pptSpecP[ 0x07 ] ;
                textC& tSssDateAtTimeDot                 = *pptSpecP[ 0x06 ] ;
                textC& tSssDateAtTimeDotDateAtTimeDot    = *pptSpecP[ 0x05 ] ;
                textC& tSssDotDateAtTimeDot              = *pptSpecP[ 0x04 ] ;
                textC& tSssDotDateAtTimeDotDateAtTimeDot = *pptSpecP[ 0x03 ] ;
                if( cSpecP < 0xe ) { BLAMMO ; }

                countT&  idSequenceLathP  = *(countT*)infoP.pcArgApp[ 4 ] ;
                textC&   tDateAtTimeLathP =  *(textC*)infoP.pcArgApp[ 3 ] ;
                countT   cSpecP           =           infoP.pcArgApp[ 2 ] ;
                textC**  pptSpecP         =  (textC**)infoP.pcArgApp[ 1 ] ;
                osTextT* postzToP         = (osTextT*)infoP.pcArgApp[ 0 ] ;
            {
            )
                !etThread.strIdF( tinBaseP , tSlash+tIdeaFarmDot9Dot , tOld )
                &&
                !etThread.strIdF( tinBaseP , tSlash+tIdeaFarmDotADot , tOld )
            (
            if
            TN( tSlash , "/" ) ;
            TN( tOld , ifFileNameC( tinBaseP , etThread , postNameP ) ) ;                                       // OLD IFC FILE NAME
            TN( tIdeaFarmDotADot , "!ideafarm.a.2.00000000.00000001." ) ;                                   //20231122@1235: STORE THE FILESET AS A SINGLE ZIP FILE
            TN( tIdeaFarmDot9Dot , "!ideafarm.9.2.00000000.00000001." ) ;                                   //U:: idOwner IS HARDCODED HERE TO ".2.00000000.00000001." (FOREIGN ORDERING)
            etherC& etThread = *((tinFullS&)tinBaseP).pEther ;
        {
        if( bDoIt )

        //U::EDIT TO MAP EACH OCCURANCE OF "!" TO "!!"

        ;
            : 1
            ? (*infoP.pCbf)( tinBaseP , cDirsP , cFilesP , bQuitP , postNameP , pcArgP )
        bDoIt = infoP.pCbf

        diskWalkCopyInfoS& infoP = *(diskWalkCopyInfoS*)pcArgP ;

        //((tinFullS&)tinBaseP).pEther->traceF( tinBaseP , T("diskWalkRenameForArchivalCBF [postNameP]:    ")+T(postNameP) ) ;
    {
    else if( ((tinFullS&)tinBaseP).pEther )
    else if( postNameP[ thirdC::c_strlenIF( tinBaseP , postNameP ) - 1 ] == '\\' ) bDoIt = 1 ; // IF A DIRECTORY
    if( !postNameP ) ;
    ZE( boolT , bDoIt ) ;
    _IO_
{
/*1*/boolT diskWalkRenameForArchivalCBF( tinBaseS& tinBaseP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloFilesP , const countT* const pModuloDirsP )/*1*/

/**/
*/
    if no override filetime is found in the name then the file time, converted to foreign datetime format, is used
    it is removed from [shortfilename] and placed into early position so that it controls sorting
   [overridetime]: is a time specified in [shortfilename]
   !ideafarm.4.[overridetime].[filetime].[cid].[leafdir].!.[shortfilename]
  example of format 4: !ideafarm.4.20130423@1824.000b3577.bb88e99f.3c1f01ba.leafdir.!.blabla.test
   !ideafarm. 3.[time].[cid].[leafdir].!.[shortfilename]
  example of format 3: !ideafarm. 3.000b3577.bb88e99f.3c1f01ba.leafdir.!.blabla.test
    it has nothing to do with the 8.3 encoded name in some file systems
    this is the name of the file with the path removed
   "!s": "short file name"
   all occurances of "!" in the old name are changed to "!!"
  example of format 2: !ideafarm.2.000b3577.bb88e99f.leafdir.!s.blabla.test
  example of format 1: !ideafarm.1.000b3577.bb88e99f.blabla.test
 ideafarm file name format specification
i rename each file with a nonconforming name so that its name conforms to the ideafarm file name specification format 3
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

