
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;

else etThread.traceF( tinP , T("i won't do THAT again!") ) ;
}
    BLAMMO ;
    etThread.traceF( tinP , T("about to blammo!") ) ;
{
if( !_restart ) // REGISTER EIP IN context POINTS HERE (TO THE INSTRUCTION THAT FOLLOWS THE CALL TO getRegsAM)

RESTARTiFqUERY( bAcceptEventF , 0 )

TODO

}
    return 1 ;

    etherC::etRockIF( tinP ).traceF( tinP , tSay ) ;

    }
        tSay += tb4+TF2(infoP.pcInfo[offi],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
    {
    for( countT offi = 0 ; offi < infoP.ccInfo ; offi ++ )

    ;

        +tb4+TF2(infoP.ccInfo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
        +tb4+tException
        T("exception [exception,ccInfo,pcInfo[]]:")

    TN( tSay , "" ) ; tSay =
    TN( tb4 , "    " ) ;

    ;
        : TF2(infoP.idException,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
        ? T(postException)
    TN( tException , "" ) ; tException = postException

    const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapExceptionType( infoP.idException ) ;
{
boolT bAcceptEventF( tinNormalS& tinP , tellInfoSysExceptionS& infoP , countT* pcArgP )

/*1*/WAKEhIDE( "example.other.snip.001027a.RESTARTiFqUERY" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

