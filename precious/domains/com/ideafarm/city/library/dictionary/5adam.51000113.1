
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

doF( tinBaseP , ether ) ;

TODO

}
    etThread.delF( tinBaseP , psttnu ) ;
    etThread.faceHearF( tinBaseP , psttnu ) ;
    etThread.strokeF( tinBaseP , T("\r\nnote that the nonze""ro value of etThread is -not- seen by both threads\r\neach thread has its own etThread object\r\n\r\nwhen you are doing something that should not fail, use ether\r\nwhen you are doing something that might fail, use etThread\r\nwhen you want failures to immediately be visible on all threads, use ether\r\n\r\npress the enter key") ) ;

    etThread.strokeF( tinBaseP , T("on main after  tm3F, ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
    sDone.waitF( tinBaseP ) ;
    }
        etThread.strokeF( tinBaseP , T("on main during tm3F, ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
        etThread.osSleepF( tinBaseP , TOCK ) ;
    {
    while( cTries -- )
    cTries = 5 ;
    { ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tm3F , &sDone ) ; }
    etThread.strokeF( tinBaseP , T("\r\non main before tm3F, ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;

    etThread.delF( tinBaseP , psttnu ) ;
    etThread.faceHearF( tinBaseP , psttnu ) ;
    ZE( strokeS* , psttnu ) ; ___( psttnu ) ;
    etThread.strokeF( tinBaseP , T("\r\nether is shared by all threads\r\npress the enter key") ) ;
    etThread = 0 ;
    -- sDone ;
    etThread.strokeF( tinBaseP , T("on main after tm2F,  ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
    sDone.waitF( tinBaseP ) ;
    }
        etThread.strokeF( tinBaseP , T("on main during tm2F, ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
        etThread.osSleepF( tinBaseP , TOCK ) ;
    {
    while( cTries -- )
    countT cTries = 5 ;
    { ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tm2F , &sDone ) ; }
    etThread.strokeF( tinBaseP , T("on main before tm2F, ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
    signC sDone(  tinBaseP , TAG( TAGiDnULL ) ) ;

    etherC& etThread = etThread.etThreadIF( tinBaseP ) ;
{
voidT doF( tinBaseS& tinBaseP , etherC& ether )

DONE( tm3F )

etThread = 0 ;
etThread.strokeF( tinBaseP , T("on tm3F (afterB),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
etThread.osSleepF( tinBaseP , TOCK * 4 ) ;
etThread.strokeF( tinBaseP , T("on tm3F (afterA),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
__1
etThread.strokeF( tinBaseP , T("on tm3F (before),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;

TASK( tm3F )

DONE( tm2F )

etThread.strokeF( tinBaseP , T("on tm2F (afterB),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
etThread.osSleepF( tinBaseP , TOCK * 4 ) ;
etThread.strokeF( tinBaseP , T("on tm2F (afterA),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;
etThread.strokeF( tinBaseP , T("on tm2F (before),    ether,etThread = ")+TF3(ether,0,8)+T(" , ")+TF3(etThread,0,8)+T("\r\n") ) ;

TASK( tm2F )

/*1*/WAKEhIDE( "example.simplest.func.10300d4.etherC.etThreadIF" )/*1*/
/**/
*/
\<A HREF=\"5.3110104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

