
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("loafing") ) ;

while( ~hFind && !ether ) ;
}
    DEL( pInfo ) ;
    }
        etThread.delF( tin0P , psttShort ) ;
        etThread.delF( tin0P , psttDadFile ) ;

        }
            }
                etThread.delF( tin0P , pbBufferDad ) ;
                etThread.delF( tin0P , pbBufferMe  ) ;

                }
                    else         etThread.diskFileOrDirDeleteF( tin0P , pInfo->psttIfoName ) ;
                    if( !bSame ) etThread.traceF( tin0P , tDistinct ) ;

                    }
                        }
                            }
                                break ;
                                bSame = 0 ;
                            {
                            if( etThread.memCompareF( tin0P , pbBufferMe , pbBufferDad , cbBite ) )

                            __( cbActual != cbBite ) ;
                            etThread.fileReadF( tin0P , pbBufferDad , cbActual , hDad ) ;
                            cbActual = cbBite ;

                            __( cbActual != cbBite ) ;
                            etThread.fileReadF( tin0P , pbBufferMe  , cbActual , hMe ) ;
                            countT cbActual = cbBite ;

                            etThread.traceF( tin0P , TF2(cbBite,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbDo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tc+TF2(cbDoHigh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tInspecting ) ;

                            if( was < cbDo ) cbDoHigh -- ;
                            cbDo -= cbBite ;
                            countT was = cbDo ;

                            ;
                                    : cbBuffer
                                    ? cbDo
                                : cbDo < cbBuffer
                                ? cbBuffer
                            countT cbBite = cbDoHigh
                        {
                        while( cbDo || cbDoHigh )
                        countT cbDoHigh = pInfo->cbUsedHigh ;
                        countT cbDo     = pInfo->cbUsed     ;

                        etThread.fileOpenF( tin0P , hMe , countTC() , pInfo->psttIfoName ) ;
                        handleC hMe( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                    {
                    boolT bSame = 1 ;
                {
                if( pbBufferMe && pbBufferDad )

                etThread.newF( tin0P , LF , pbBufferDad , cbBuffer ) ; ___( pbBufferDad ) ;
                etThread.newF( tin0P , LF , pbBufferMe  , cbBuffer ) ; ___( pbBufferMe  ) ;
                const countT cbBuffer = pInfo->cbUsed < TICK << 2 ? pInfo->cbUsed : TICK << 2 ;
                ZE( byteT* , pbBufferDad ) ;
                ZE( byteT* , pbBufferMe  ) ;
            {
            if( pInfoDad && pInfoDad->cbUsed == pInfo->cbUsed && pInfoDad->cbUsedHigh == pInfo->cbUsedHigh )
            etThread.diskFileQueryF( tin0P , pInfoDad , hDad ) ;
            ZE( infoFileS* , pInfoDad ) ;

            etThread.fileOpenF( tin0P , hDad , countTC() , psttDadFile ) ;
            handleC hDad( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;

            etThread.traceF( tin0P , tInspecting ) ;
        {
        else
        if( !etThread.diskFileExistsF( tin0P , psttDadFile ) ) etThread.diskMoveFileOrDirF( tin0P , psttDadFile , pInfo->psttIfoName ) ;

        }
            etThread.delF( tin0P , psttMeFile ) ;
            etThread.delF( tin0P , psttPathDad ) ;

            }
                etThread.delF( tin0P , psttMe ) ;

                etThread.strFuseF( tin0P , psttDadFile , psttShort ) ;
                etThread.strMakeF( tin0P , LF , psttDadFile , psttPathDad , psttShort->idAdam ) ; ___( psttDadFile ) ;

                etThread.traceF( tin0P , TF2(pInfo->cbUsed,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tc+TF2(pInfo->cbUsedHigh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+T(psttShort) ) ;

                ___( psttShort  ) ;
                ___( psttMe ) ;
                etThread.strBisectF( tin0P , psttMe , psttShort , psttMeFile , tSlash , -1 ) ;
                ZE( strokeS* , psttMe ) ;
            {

            ___( psttMeFile  ) ;
            ___( psttPathDad ) ;
            etThread.strBisectF( tin0P , psttPathDad , psttMeFile , pInfo->psttIfoName , tSlash , -2 , flSTRbISECT_APPENDdELIMITER ) ;
            ZE( strokeS* , psttMeFile ) ;
            ZE( strokeS* , psttPathDad ) ;
        {
        ZE( strokeS* , psttShort ) ;
        ZE( strokeS* , psttDadFile ) ;
    {
    )
        !etThread.strIdF( tin0P , tSlashDotDotSlash , pInfo->psttIfoName )
        &&
        !etThread.strIdF( tin0P , tSlashDotSlash , pInfo->psttIfoName )
        &&
        pInfo
    (
    if
    etThread.diskFindFileOrDirOldF( tin0P , pInfo , hFind , tLike ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;
{
do
handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
TN( tc                , ":" ) ;
TN( tb4               , "    " ) ;
TN( tDistinct         , "distinct" ) ;
TN( tInspecting       , "inspecting " ) ;
TN( tSlash            , "/" ) ;
TN( tSlashDotSlash    , "/./" ) ;
TN( tSlashDotDotSlash , "/../" ) ;
TN( tLike , "///d/tmp/x.merge.archive/merged/from.drive.a/eat/*" ) ;

TODO

/*1*/WAKEsHOWtEXT( "tool.merge.dad.kid.directory" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

