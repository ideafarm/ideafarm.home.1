
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

    
}
    }
        sgnCtDone.giveF( tin0P ) ;
        ct4F( tin0P ) ;
        ct3F( tin0P ) ;
        ct2F( tin0P ) ;
        ct1F( tin0P ) ;

        //ether.traceF( tin0P , T("httpServerC [tNetBiosMe,idPort]:    \"")+tNetBiosMe+T("\"    ")+TF2(idPort,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        }
            ether.delF( tin0P , psttHost ) ;
            else            tNetBiosMe = T(psttHost) ;
            if( !psttHost ) ether.traceF( tin0P , T("!exception / reverse DNS lookup on myself failed") ) ;
            ether.sockPsttHostF( tin0P , psttHost ) ; ___( psttHost ) ;
            ZE( strokeS* , psttHost ) ;
        {

        tListFactory += T("////factory6/") ;
        tListFactory += T("////factory4/") ;
        //tListFactory += T("////factory2/") ;
        //THESE ARE THE FACTORIES THAT I WILL USE FOR REDUNDANT FILE STORAGE
    {
    if( !POOP )
    _IO_

    ___( pThrServe ) ;
    __Z( pThrServe ) ;
    ___( *(strokeS**)&c8tp2.c1 ) ;
{
swNicNameByBadge( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , cLeverBadge , 0 , sizeof( nicNameC ) )
cLeverBadge( 0 ) ,
ru( tin0P ) ,
tListFactory( tin0P , TAG( TAGiDnULL ) , flTEXTc_LIST ) ,
pzCache( pCacheP ) ,
sessions( tin0P , ether , TAG( TAGiDnULL ) ) ,
pThrServe( new( 0 , tin0P , LF ) threadC( tin0P , arg1P.ether , arg1P.idLineCt , arg1P.idiFileCt , arg1P.pbBitsCt , tm_httpServerC_F , cArgThread , flTHREADlAUNCH_SHOWpONY , CBsTACKmIN << 2 ) ) ,
sgnCtDone( tin0P , TAG( TAGiDnULL ) ) ,
swSnipByName( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , psttLeverNameSnip , 0 , sizeof( pbRefC ) ) ,
psttLeverNameSnip( 0 ) ,
swSnipById( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , cLeverIdSnip , 0 , sizeof( pbRefC ) ) ,
cLeverIdSnip( 0 ) ,
swReplyWildAnywhere( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , psttLeverUrlReply , 0 , sizeof( httpReplyRefC ) ) ,
swReplyWildPrefix(   tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , psttLeverUrlReply , 0 , sizeof( httpReplyRefC ) ) ,
swReplyExact(             tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , psttLeverUrlReply , 0 , sizeof( httpReplyRefC ) ) ,
swMapUrl( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , psttLeverUrlMap ) ,
psttLeverUrlReply( 0 ) ,
psttLeverUrlMap( 0 ) ,
cArgThread( (countT)&c8tp ) ,
pRefReplyAlert( 0 ) ,
c8tp( (countT)&c8tp1 , (countT)&c8tp2 ) ,
c8tp2( (countT)arg2P.pHttpRawCommandServerCBF , (countT)(strokeS*)psttOldC( tin0P , arg1P.ether , arg1P.psttName ) , (countT)arg2P.pnnAllowedStripe ) ,
c8tp1( (countT)this , arg1P.flagsSocket , arg1P.idPort , (countT)&arg1P.cArgApp , (countT)arg2P.pHttpLoadContentStaticF , (countT)arg2P.pHttpLoadContentDynamicF , (countT)arg2P.pHttpEatKeyValuePairsCBF , (countT)arg2P.pHttpFreshenCacheCBF ) ,
idPort( arg1P.idPort ) ,
tNetBiosMe( tin0P , TAG( TAGiDnULL ) , flTEXTc_null , "" ) ,
ether( arg1P.ether ) ,
/*1*/httpServerC::httpServerC( tin0S& tin0P , httpServerC_arg1S& arg1P , httpServerC_arg2S& arg2P , cacheC* pCacheP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

