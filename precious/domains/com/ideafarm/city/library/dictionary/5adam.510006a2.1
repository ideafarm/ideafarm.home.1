
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

//etherC::loafIF( tin0P ) ;

countT foo = 2 ;

}
    etThread.delF( tin0P , psttOutI ) ;

    etThread.boxPutF( tin0P , T("///d/tmp/out.i.ttt") , postOutI , costOutI ) ;
    countT costOutI = etThread.strMakeF( tin0P , LF , postOutI , psttOutI ) ; ___( postOutI ) ;
    ZE( osTextT* , postOutI ) ;

    }
        etThread.delF( tin0P , psttLine ) ;
        etThread.strFuseF( tin0P , psttOutI , tcr ) ;
        etThread.strFuseF( tin0P , psttOutI , psttLine ) ;
        st_pstt_driveI >> psttLine ;
        ZE( strokeS* , psttLine ) ;
    {
    while( st_pstt_driveI )

    TN( tcr , "\r\n" ) ;

    etThread.strMakeF( tin0P , LF , psttOutI , 0 , st_pstt_driveI * TUCK ) ; ___( psttOutI ) ;
    ZE( strokeS* , psttOutI ) ;
{

}
    etThread.delF( tin0P , psttOutA ) ;

    etThread.boxPutF( tin0P , T("///d/tmp/out.a.ttt") , postOutA , costOutA ) ;
    countT costOutA = etThread.strMakeF( tin0P , LF , postOutA , psttOutA ) ; ___( postOutA ) ;
    ZE( osTextT* , postOutA ) ;

    }
        etThread.delF( tin0P , psttLine ) ;
        etThread.strFuseF( tin0P , psttOutA , tcr ) ;
        etThread.strFuseF( tin0P , psttOutA , psttLine ) ;
        st_pstt_driveA >> psttLine ;
        ZE( strokeS* , psttLine ) ;
    {
    while( st_pstt_driveA )

    TN( tcr , "\r\n" ) ;

    etThread.strMakeF( tin0P , LF , psttOutA , 0 , st_pstt_driveA * TUCK ) ; ___( psttOutA ) ;
    ZE( strokeS* , psttOutA ) ;
{

etThread.delF( tin0P , pstti ) ;
}
    }
        etThread.delF( tin0P , psttIt ) ;
        etThread.delF( tin0P , psttAt ) ;
        }
            }
                st_pstt_driveI >> psttd ; etThread.delF( tin0P , psttd ) ;
                st_pstt_driveA >> psttd ; etThread.delF( tin0P , psttd ) ;
                ZE( strokeS* , psttd ) ;
            {
            if( !sgnAI )

            sCountT sgnAI = etThread.strCompareF( tin0P , psttAt , psttIt ) ;
        {
        if( psttAt && psttIt )

        }
            etThread.strSubstringF( tin0P , psttIt , idf2 , sttq , psttzDriveI , psttI , 1 ) ; ___( psttIt ) ;
            idf2 = 1 ;
        {
        if( psttI )
        }
            etThread.strSubstringF( tin0P , psttAt , idf2 , sttq , psttzDriveA , psttA , 1 ) ; ___( psttAt ) ;
            idf2 = 1 ;
        {
        if( psttA )
        ZE( countT , idf2 ) ;
        ZE( strokeS* , psttIt ) ;
        ZE( strokeS* , psttAt ) ;

        strokeS* psttI = !st_pstt_driveI ? 0 : (strokeS*)st_pstt_driveI[ 1 ] ;
        strokeS* psttA = !st_pstt_driveA ? 0 : (strokeS*)st_pstt_driveA[ 1 ] ;
    {

    stUse << psttLine ;
    stackC& stUse = !bDriveI ? st_pstt_driveA : st_pstt_driveI ;

    boolT bDriveI = etThread.strIdF( tin0P , countTC( 1 ) , psttzDriveI , psttLine , 1 ) ;

    //etThread.traceF( tin0P , psttLine ) ;
    etThread.strSubstringF( tin0P , psttLine , idf , sttq , psttzCRLF , pstti , 1 ) ; ___( psttLine ) ;
    ZE( strokeS* , psttLine ) ;

    CONoUTrAW3( "\r" , idf , "" ) ;
{
while( idf )
ZE( countT , idl ) ;
countT idf = 1 ;
strokeS sttq( 0 , sc_IGNOREqUOTES ) ;

stackC st_pstt_driveI( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
stackC st_pstt_driveA( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;

const strokeS* psttzDriveI = tDriveI ;
TN( tDriveI , "[drive I]" ) ;

const strokeS* psttzDriveA = tDriveA ;
TN( tDriveA , "[drive A]" ) ;

const strokeS* psttzCRLF = tCRLF ;
TN( tCRLF , "\r\n" ) ;

CONoUTrAW3( "\r\n" , pstti->idAdam , "\r\n" ) ;

etThread.delF( tin0P , posti ) ;
etThread.strMakeFromOsTextF( tin0P , pstti , posti ) ; ___( pstti ) ;
ZE( strokeS* , pstti ) ;

etThread.boxGetShadowF( tin0P, posti , costi , T("///d/tmp/sor") ) ; ___( posti ) ;
ZE( countT   , costi ) ;
ZE( osTextT* , posti ) ;

TODO

*/
  report the sorted stack
  pour both stacks into a single stack sorted by name
    if equal then pop both
   compare top plates
   push onto either A stack or I stack
   parse
  for each line
 wish (this recipe is wrong and is obsolete)
/*

//2014-04-06  16:25                 0 !ideafarm.6.00000000@0000.000.!.note.ttt    [drive A]
//2014-04-06  16:25                 0 !ideafarm.6.00000000@0000.000.!.note.ttt    [drive I]
//2008-01-23  17:49                 0 !ideafarm.6.20080123@1649.001.000b2f88.08e2cc0a.ab10f1c3.archiveold.gather.to.!.000b2f88.08e2cc0a.play1.gif    [drive A]
//2008-01-23  17:49                 0 !ideafarm.6.20080123@1649.001.000b2f88.08e2cc0a.ab10f1c3.archiveold.gather.to.!.000b2f88.08e2cc0a.play1.gif    [drive I]
//2012-04-11  12:17                 0 !ideafarm.6.20120411@1217.002.000b358b.cdc3518a.ab10f1c3.gmail.!.labels.txt    [drive A]
//2012-04-11  12:17                 0 !ideafarm.6.20120411@1217.002.000b358b.cdc3518a.ab10f1c3.gmail.!.labels.txt    [drive I]
//2013-10-19  15:02                 0 !ideafarm.6.20131019@1502.002.000b37b7.eb203cae.f2fe6f6e.internet.!.labels.txt    [drive A]
//2013-10-19  15:02                 0 !ideafarm.6.20131019@1502.002.000b37b7.eb203cae.f2fe6f6e.internet.!.labels.txt    [drive I]
//2013-11-04  08:52                 0 !ideafarm.6.20131104@0752.002.000b37c7.a94e81b4.f2fe6f6e.internet.!.labels.txt    [drive A]
//2013-11-04  08:52                 0 !ideafarm.6.20131104@0752.002.000b37c7.a94e81b4.f2fe6f6e.internet.!.labels.txt    [drive I]
//2013-11-07  14:24                 0 !ideafarm.6.20131107@1324.002.000b37ca.e452adb3.f2fe6f6e.internet.!.labels.txt    [drive A]
//2013-11-07  14:24                 0 !ideafarm.6.20131107@1324.002.000b37ca.e452adb3.f2fe6f6e.internet.!.labels.txt    [drive I]
//2014-01-02  13:01                 0 !ideafarm.6.20140102@1201.002.000b3802.d5851eb8.fa5b8bcb.internet.!.labels.txt    [drive A]
//2014-01-02  13:01                 0 !ideafarm.6.20140102@1201.002.000b3802.d5851eb8.fa5b8bcb.internet.!.labels.txt    [drive I]
//2014-01-03  09:12                 0 !ideafarm.6.20140103@0812.002.000b3803.acf0734b.fa5b8bcb.internet.!.labels.txt    [drive A]
//2014-01-03  09:12                 0 !ideafarm.6.20140103@0812.002.000b3803.acf0734b.fa5b8bcb.internet.!.labels.txt    [drive I]
//2012-05-28  16:16                 1 !ideafarm.6.20120410@2047.001.000b358b.287d27d2.ab10f1c3.gmail.!.1970_12_19701231-160000-none-none-1.eml    [drive A]
//2012-05-28  16:16                 1 !ideafarm.6.20120410@2047.001.000b358b.287d27d2.ab10f1c3.gmail.!.1970_12_19701231-160000-none-none-1.eml    [drive I]
//2012-05-28  16:16                 1 !ideafarm.6.20120411@1007.001.000b358b.b6a55b66.ab10f1c3.gmail.!.1970_12_19701231-160000-none-none-2.eml    [drive A]
//2012-05-28  16:16                 1 !ideafarm.6.20120411@1007.001.000b358b.b6a55b66.ab10f1c3.gmail.!.1970_12_19701231-160000-none-none-2.eml    [drive I]

/*1*/WAKEsHOWtEXT( "tool.archive.directory.compare" )/*1*/
/**/
*/
 before using me, manually create an input file for each drive
 i was written to verify that no files were lost during extensive file renaming
use me to compare the archive directory with its counterpart on the backup drive
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

