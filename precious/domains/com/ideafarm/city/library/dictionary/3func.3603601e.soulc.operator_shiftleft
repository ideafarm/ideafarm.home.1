
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return *this ;

    ether.delF( tinBaseP , pbEncoded ) ;
    shiftLeftF( tinBaseP , ifcIDtYPEsOULiTEM_strokeSptr , pbEncoded , !pbEncoded ? 0 : 2 * sizeof( countT ) + ((countT*)pbEncoded)[ 1 ] ) ;
    }
        ether.delF( tinBaseP , psttExp ) ;
        ether.strEncodeF( tinBaseP , pbEncoded , psttExp ) ; ___( pbEncoded ) ;
        countT cAdams = ether.strReplaceF( tinBaseP , psttExp , psttP , ifcIDtYPEsTRrEPLACE_MAKEeXPORT , psttP[ 2 ].idAdam ) ; ___( psttExp ) ;
        ZE( strokeS* , psttExp ) ;
    {
    if( psttP )
    ZE( byteT* , pbEncoded ) ;

    //I MUST NOT ASSUME THAT CLAIMED EXTRA STROKES ARE REALLY PRESENT

    _IO_

    }
    {
    IFbEcAREFUL

    SCOOP
    TINSL
{
/*1*/soulC& soulC::operator <<( const strokeS* const psttP )/*1*/
/**/
*/
   i do not access the claimed extra strokes at the end of the psttP stroke string
   the caller can patch a false value into psttP[ 2 ].idAdam in order to cause extra strokes to be allocated by shiftRightF when the item is popped from me
  psttP[ 2 ].idAdam may be a lie
  must either be 0 or point to a prefixed string of strokeS objects
 psttP
arg
\<A HREF=\"5.14e001f.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

