
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

THREADmODE2rESTORE
THREADmODE3rESTORE
THREADmODE4rESTORE

}
    }
        etThread.traceF( tin0P , T("********        ********        ********        ********        [*pcReturnCode]:    ")+TF2(*pcReturnCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        *pcReturnCode += 0x11111111 ;
    
        countT*  pcReturnCode = vspReturnCodeLath ;
        countVSP vspReturnCodeLath = listC::countIF( tin0P , myRecord , count2S( LISTnAMEsYS_PROCESSrEPORTfIELD10 ) ) ;
    {

    recordC myRecord( tin0P , pcNameRecord ) ;




    //countT pcNameRecord[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , LISTnAMEsYS_GLOBALrECORD , LISTnAMEsYS_PROCESSrEPORT , ((tin9S&)tin0P).pag1->idAdam | BM_HIGH , [random secret lo] | BM_HIGH , [random secret middle] | BM_HIGH , [random secret hi] | BM_HIGH , 0 } ; // THIS RECORD IS VISIBLE TO ANY ADAM THAT CAN SPECIFY THE 3 SECRET VALUES
    //countT pcNameRecord[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , LISTnAMEsYS_GLOBALrECORD , LISTnAMEsYS_PROCESSrEPORT , ((tin9S&)tin0P).pag1->idAdam | BM_HIGH ,                                     ((tin9S&)tin0P).pag1->idCell | BM_HIGH                                , 0 } ; // THIS RECORD IS VISIBLE TO ANY ADAM THAT CAN SPECIFY THE idAdam AND idCell VALUES
      countT pcNameRecord[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , LISTnAMEsYS_GLOBALrECORD , LISTnAMEsYS_PROCESSrEPORT , ((tin9S&)tin0P).pag1->idAdam | BM_HIGH                                                                                                  , 0 } ; // THIS RECORD IS VISIBLE TO ALL CELLS OF THIS ADAM AND TO ANY OTHER ADAM THAT CAN SPECIFY THE idAdam VALUE
    //countT pcNameRecord[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , LISTnAMEsYS_GLOBALrECORD , LISTnAMEsYS_PROCESSrEPORT                                                                                                                                , 0 } ; // THIS RECORD IS VISIBLE TO ALL ADAMS IN THE HOME
                                                                                                                                                                                                                                                                             // "VISIBILITY" HERE MEANS ONLY THAT THE RECORD CAN BE INSPECTED WITHOUT WALKING THE LISTS
                                                                                                                                                                                                                                                                             // IN ALL OF THESE EXAMPLES, THE RECORD IS VISIBLE TO ALL ADAMS IN THE HOME, BECAUSE IT RESIDES IN THE HOMEtEMP poolC INSTANCE



    puseC puseHT( tin0P , ifcIDpOOL_HOMEtEMP ) ;
    _IO_
{

THREADmODE4oN( flTHREADmODE4_ALLOWwRITEABLEpOINTERgET )
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY       )
THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING   )

etThread.traceF( tin0P , T("[idCellLath]:  ")+TF2(home.idCellLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
homeS& home = homeS::homeIF() ;

TODO

/*1*/WAKEsHOWtEXT( "example.simplest.ipc.interprocess.communication" )/*1*/
/**/
*/
 communication is duplex and coherent and can involve complexity ranging from communicating a single volatile countT value to communicating and cooperatively modifying an entire database
 i demonstrate how a built in poolC instance that is visible to all adams of a home can be used to communicate a countT value between processes
 the listC class provides database functionality that uses a poolC instance
 heaps provided by poolC use shared memory that can optionally be backed by memory mapped disk files
 there is also a heapC class that provides a simpler, less powerful heap functionality
 in IPDOS (tm), heap functionality is provided mainly by poolC
i demonstrate a simple and powerful mechanism for ipc (interprocess communication)
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

