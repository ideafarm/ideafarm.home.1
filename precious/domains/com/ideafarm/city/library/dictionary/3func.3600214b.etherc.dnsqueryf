
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        delF( tin0P , pbQuery ) ;
        if( time1P || time2P ) sgnDone_tmTimeout.waitF( tin0P ) ;
        sgnDone_tmAsk.waitF( tin0P ) ;

        }
            }
                cbP = 0 ;
                delF( tin0P , pbP ) ;
            {
            else
            if( pbP && cbP >= cbQuery ) bGoItIt = *(count01T*)pbP == *(count01T*)pbQuery ; // TEST FOR EQUALITY OF THE idQuery VALUES
            sockd.readF( tin0P , pbP , cbP , idPort , nicName ) ; ___( pbP ) ;
            nicNameC nicName ;
            ZE( countT , idPort ) ;
        {
        while( !POOP && !bGoItIt && !etPrime && !bTimeout )
        etherC& etPrime = etPrimeIF( tin0P ) ;

        if( time1P || time2P ) osThreadF( tin0P , countTC() , tmTimeoutF , &sgnDone_tmTimeout , 0 , flTHREADlAUNCH_null , 0 , 0 , (countT)&sockd , (countT)&bGoItIt , (countT)&bTimeout , time1P , time2P , idPortMe ) ;
        osThreadF( tin0P , countTC() , tmAskDnsF , &sgnDone_tmAsk , 0 , flTHREADlAUNCH_null , 0 , 0 , (countT)&sockd , (countT)&bGoItIt , (countT)&bTimeout , (countT)pbQuery , cbQuery ) ;
        signC sgnDone_tmTimeout( tin0P , TAG( TAGiDnULL ) ) ;
        signC sgnDone_tmAsk( tin0P , TAG( TAGiDnULL ) ) ;
        ZE( boolT , bTimeout ) ;
        ZE( boolT , bGoItIt ) ;
        dnsFormatQueryF( tin0P , pbQuery , cbQuery , psttDomainP , idTypeP ) ; ___( pbQuery ) ;
        ZE( countT , cbQuery ) ;
        ZE( byteT* , pbQuery ) ;

        countT idPortMe = sockd.bindF( tin0P ) ;
        socketC sockd( tin0P , *this , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;
    {

    _IO_

    }
        __Z( idTypeP ) ;
        __Z( psttDomainP ) ;
        __( cbP ) ;
        __NZ( pbP ) ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::dnsQueryF( tin0S& tin0P , byteT*& pbP , countT& cbP , const strokeS* const psttDomainP , const countT idTypeP , const countT time1P , const sCountT time2P )/*1*/

/**/
*/
  can be 0
 time2P
  can be 0
 time1P
 idTypeP
 psttDomainP
 cbP
 pbP
 tin0P
arguments
the caller must test whether pbP is 0 to determine whether a reply was received
impotence will -not- occur if i do not receive a valid reply
else i will return if the specified time elapses without obtaining the information
if {time1P,time2P} is ze then i will block until i receive a recognized reply or until asynch impotence occurs
\<A HREF=\"5.103018f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dnsQueryF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

