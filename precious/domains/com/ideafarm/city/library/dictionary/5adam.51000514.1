
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    sgnDone_tmServerF.waitF( tinBaseP ) ;
    sock.writeF( tinBaseP , soulOut , c8Name ) ;
    count8S c8Name( 1 , 2 , 3 , 4 , 5 ) ;
    
    soulOut << (countT)0x87654321 ;
    soulC soulOut( tinBaseP , TAG( TAGiDnULL ) ) ;
    
    sock.connectF( tinBaseP , idPort ) ;
    socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;
{

sgnReady.waitF( tinBaseP ) ;
etThread.osThreadF( tinBaseP , countTC() , tmServerF , &sgnDone_tmServerF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&idPort , (countT)&sgnReady ) ;
ZE( countT , idPort ) ;
signC sgnDone_tmServerF(  tinBaseP , TAG( TAGiDnULL ) ) ;
signC sgnReady(  tinBaseP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmServerF )
}
    DEL( pso ) ;
    }
        etThread.strokeF( tinBaseP , T("value received over secure socket: ")+TF1(value)+T("\r\n") ) ;
        soulIn >> value ;
        ZE( countT , value ) ;

        pso->readF( tinBaseP , soulIn ) ;
        soulC soulIn( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( pso )

    sock.acceptF( tinBaseP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ZE( socketC* , pso ) ;

    sgnReadyP.giveF( tinBaseP ) ;
    sock.listenF( tinBaseP ) ;
    idPortP = sock.bindF( tinBaseP ) ;
    socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;

    signC&  sgnReadyP =  *(signC*)pTaskP->c2 ;
    countT& idPortP   = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmServerF )

/*1*/WAKEhIDE( "example.other.func.1070028.socketC.writeF" )/*1*/
/**/
*/
in a production application, the sending operator would ship the security pill by courier to the receiving operator
thread tmServerF retrieves that pill in order to read in soulIn over the socket connection
the main thread writes a security pill to the desktop security depository
i demonstrate highly secure socket communication using pills
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

