
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.strokeF( tinBaseP , T("ok\r\n") ) ;

}
    THREADmODE3rESTORE
    }
        //++ s ; ether.osSleepF( tinBaseP , TICK >> 2 ) ; //PRODUCTION
        ++ s ; ether.osSleepF( tinBaseP , TOCK << 5 ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

        CONoUTrAW3( "\rcycle " , idCycle , " -\r\n" ) ;
        }
            }
                thirdC::dosSleepWinkIF( tinBaseP ) ;
                //CONoUTrAW3( "\r        \r" , cAlive , "\r" ) ;
            {
            while( cAlive )
    
            }
                etThread.osThreadF( TaRG1( tmGorillaF ) , (countT)&cAlive , (countT)&grabx , (countT)&incMe , (countT)&cDone ) ;
                inc02AM( cAlive ) ;
            {    
            while( !ether && cToDo -- )
            countT cToDo = TUCK >> 1 ; //PRODUCTION: DOES NOT WORK AS EXPECTED ON IFC8
            //countT cToDo = TUCK >> 3 ;
            //countT cToDo = 2 ; //DUT
            //countT cToDo = 2 ; //DUT
            etThread.strokeF( tinBaseP , T("launching gorilla attack\r\n") ) ;
        
            ZE( countT , cDone ) ;

            ZE( countT , incMe ) ;
            //grabitC grabx( tinBaseP , TAG( TAGiDnULL ) ) ;        
            grabC grabx( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        CONoUTrAW3( "cycle " , ++ idCycle , " +\r\n" ) ;

        ZE( countT , cAlive ) ;
    {
    THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )
{
while( !ether && !POOP )
ZE( countT , idCycle ) ;

TODO

DONE( tmGorillaF )
}
    dec02AM( cAliveP ) ;
    THREADmODE3rESTORE

    }
        else if( !( ( ++ idCycle ) % TUCK ) ) thirdC::dosSleepWinkIF( tinBaseP ) ;
             //if( cDoneCopy >= ( TOCK >> 5 ) ) break ; //PRODUCDTION
             if( cDoneCopy >= ( TICK >> 0xa ) ) break ; //grabC
             //if( cDoneCopy >= ( TICK >> 3 ) ) break ; //grabitC

        if( !( cDoneCopy % TUCK ) ) CONoUTrAW3( "\r        \r" , cDoneCopy , "\r" ) ;
        countT cDoneCopy = 1 + incv02AM( cDoneP ) ;

        grabxP.ungrabF( tinBaseP ) ;
        if( !( incMeP ++ % 2 ) ) { BLAMMO ; }
        if(    incMeP ++ % 2   ) { BLAMMO ; }
        grabxP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    while( !ether && !POOP )
    ZE( countT , idCycle ) ;

    THREADmODE3oN( flTHREADmODE3_MONITORdOnOTrEPORToNmE )

    //}
    //    thirdC::dosPriorityIF( tinBaseP , save ) ;
    //    thirdC::osThreadYieldIF( tinBaseP , TAG( TAGiDnULL ) ) ;
    //    thirdC::dosPriorityIF( tinBaseP , ifcTHREADpRIORITY_RUSH ) ;
    //    countT save = thirdC::dosPriorityIF( tinBaseP ) ;
    //{
    //thirdC::osSelectProcessorsIF( tinBaseP , 2 ) ;

    countT&  cDoneP   =  *(countT*)pTaskP->c4 ;
    countT&  incMeP   =  *(countT*)pTaskP->c3 ;
    //grabitC& grabxP = *(grabitC*)pTaskP->c2 ;
    grabC&   grabxP   =   *(grabC*)pTaskP->c2 ;
    countT&  cAliveP  =  *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmGorillaF )

/*1*/WAKEsHOWtEXT( "gorilla.grabC.grabitC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

