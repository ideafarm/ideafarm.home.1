
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    #endif

        if( POOP ) valueP = 0 ;
        }
            while( !*this && valueP == STILL_ACTIVE ) ;
            }
                BOSpOOP
                BOS( WHATgbo , BOSoK , GetExitCodeProcess( (HANDLE)hProcess.osF( ifcIDtYPEhANDLE_PROCESS ) , (DWORD*)&valueP ) )
                BOSnOvALUE( WHATgbo , SetLastError( 0 ) )
                ++ s ; dosSleepIF( tin0P , 16 * 256 ) ;
            {
            do
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
        {

        }
            ((tin1S&)tin0P).pag4->_thirdC_grab_lOsPid.ungrabF( tin0P ) ;
            ((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle->freeF( tin0P ) ;                                       //A:ASSUME: ONLY I AM WAITING FOR THIS PROCESS.  IT IS ILLEGAL FOR MULTIPLE THREADS TO WAIT FOR A SINGLE PROCESS TO END.
            hProcess.osF( ifcIDtYPEhANDLE_PROCESS , *((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle ) ;
            ((tin1S&)tin0P).pag1->_thirdC_.lOsPid = osPidP ;
            if( !((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle->idSlotOfLeverF( tin0P , osPidP ) ) { BLAMMO ; }     //THIS LINE WILL DETECT MULTIPLE THREADS WAITING FOR A SINGLE PROCESS TO END
            ((tin1S&)tin0P).pag4->_thirdC_grab_lOsPid.grabF( tin0P , TAG( TAGiDnULL ) ) ;

            ((tin1S&)tin0P).pag4->_thirdC_grab_lOsTid.ungrabF( tin0P ) ;
            ((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle->freeF( tin0P ) ;                                       //A:ASSUME: ONLY I AM WAITING FOR THIS PROCESS.  IT IS ILLEGAL FOR MULTIPLE THREADS TO WAIT FOR A SINGLE PROCESS TO END.
            hThread.osF( ifcIDtYPEhANDLE_THREAD , *((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle ) ;
            ((tin1S&)tin0P).pag1->_thirdC_.lOsTid = osTidP ;
            if( !((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle->idSlotOfLeverF( tin0P , osTidP ) ) { BLAMMO ; }     //THIS LINE WILL DETECT MULTIPLE THREADS WAITING FOR A SINGLE PROCESS TO END
            ((tin1S&)tin0P).pag4->_thirdC_grab_lOsTid.grabF( tin0P , TAG( TAGiDnULL ) ) ;

            handleC hThread(  tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_THREAD  ) ;
        {
        handleC hProcess( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_PROCESS ) ;

        BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

        //DOES NOT WORK FOR zip.exe ON 2000: osOpenProcessIF( tin0P , hProcess , osPidP ) ;              20240623@1626: CONJ: 04 BIT PROCESS

    #elif defined( __NT__ )

        valueP = info.codeResult ;
        else                                            __( info.codeTerminate ) ;
        else if( info.codeTerminate == TC_HARDERROR   ) idDeathTypeP = ifcPROCESSdEATH_HARDWAREfAILURE ;
        else if( info.codeTerminate == TC_EXCEPTION   ) idDeathTypeP = ifcPROCESSdEATH_SOFTWAREfAILURE ;
        else if( info.codeTerminate == TC_KILLPROCESS ) idDeathTypeP = ifcPROCESSdEATH_MURDERED        ;
             if( info.codeTerminate == TC_EXIT        ) idDeathTypeP = ifcPROCESSdEATH_NORMAL          ;
        if( !POOP ) osPidP = pid ;
        __( osPidP && pid - osPidP ) ;
        BOSpOOP
        BOS( WHATso , BOSfAIL , DosWaitChild( DCWA_PROCESS , DCWW_WAIT , &info , &pid , osPidP ) )
        ZE( ULONG , pid ) ;
        RESULTCODES  info ;

    #if defined( __OS2__ )
    _IO_

    }
        if( POOP ) return ;
        __Z( ((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle->idSlotOfLeverF( tin0P , osPidP ) ) ;
        __Z( ((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle->idSlotOfLeverF( tin0P , osTidP ) ) ;
        __( valueP ) ;
        __( idDeathTypeP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT thirdC::dosWaitChildF( tin0S& tin0P , countT& valueP , countT& idDeathTypeP , countT& osTidP , countT& osPidP )/*1*/

/**/
*/
 pidP
 valueP
 idDeathTypeP
arguments
on windows, idDeathTypeP is not set
on windows, an extra delay is added due to polling
blocks until the specified process ends
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1020079.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosWaitChildF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

