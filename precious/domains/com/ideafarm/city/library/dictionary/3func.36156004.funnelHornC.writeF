
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    return ++ offo ;

    inc02AM( cWriteEnd ) ;
    }
        ++ *(countT*)pbo ;
        //((tinFullS&)tinBaseP).pEther->traceF( tinBaseP , T("writeF / setting \"not yet read\" flag") ) ;
        thirdC::c_memcpyIF( pbo + sizeof( countT ) , pbP , cbItemNet ) ;
    {
    else
    if( bQuit ) offo = - 1 ;

    }
        ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ;
        if( !( ++ idWink % TUCK ) ) ((tinFullS&)tinBaseP).pEther->traceF( tinBaseP , T("writeF / slot has not yet been read, so napping for a wink [idWink]:    ")+TF2(idWink,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    while( *(countT*)pbo && !bQuit )                                                    // NAP UNTIL THE SLOT'S "NOT YET READ" FLAG HAS BEEN RESET
    ZE( countT , idWink ) ;
    sleepC  s( tinBaseP , TAG( TAGiDnULL ) ) ;

    byteT* pbo = pbBuffer + offo * cbItemGross ;
    countT offo = incv02AM( cWriteBegin ) % cCapacity ;
{
/*1*/countT funnelHornC::writeF( tinBaseS& tinBaseP , const byteT* pbP )/*1*/

/**/
*/
i return the idSLot written to
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
