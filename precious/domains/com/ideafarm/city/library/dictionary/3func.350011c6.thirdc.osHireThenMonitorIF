
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    return myValue ;

    etherP.traceF( tinP , T("event capture ended [cEnded,cBegun,cIgnored1,cIgnored2]:    ")+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cIgnored1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cIgnored2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    }
        }
            if( !myValue ) myValue = processExitCode ;

            }
                etherP.traceF( tinP , T("ContinueDebugEvent failed [rc]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                rc = GetLastError() ;
            {
            if( !bOk )

            etherP.traceF( tinP , T("called  ContinueDebugEvent()") ) ;
            bOk = ContinueDebugEvent( info3.dwProcessId , info3.dwThreadId , DBG_EXCEPTION_NOT_HANDLED ) ;
            etherP.traceF( tinP , T("calling ContinueDebugEvent()") ) ;

            }
                }
                    break ;

                    //BOSpOOP
                    //BOS( WHATgbo , BOSoK , CloseHandle( info3.u.CreateProcessInfo.hFile ) ) ; info3.u.CreateProcessInfo.hFile = 0 ;

                    etherP.traceF( tinP , T(bHuh?"!exception:  unexpected process exit code [exitCode]:    ":"process [exitCode]:    ")+tExitCode ) ;

                    }
                        default                                                    : { bHuh = 1 ; tExitCode = TF2(processExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED ) ; break ; }
                        case ifcEXITcODE_EXITpROCESStOOhIGH                        : {            tExitCode = T("EXITpROCESStOOhIGH"                                       ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOeLDER       : {            tExitCode = T("EXITpROCESSdTtINSnOTpOINTINGtOeLDER"                      ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSpOURfAILED               : {            tExitCode = T("EXITpROCESSdTtINSpOURfAILED"                              ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSuNEXPECTEDrECYCLEtYPE    : {            tExitCode = T("EXITpROCESSdTtINSuNEXPECTEDrECYCLEtYPE"                   ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSsOMETHINGgRABBED         : {            tExitCode = T("EXITpROCESSdTtINSsOMETHINGgRABBED"                        ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOmE          : {            tExitCode = T("EXITpROCESSdTtINSnOTpOINTINGtOmE"                         ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSdTtINSkIDSeXISTdURINGclEANUP   : {            tExitCode = T("EXITpROCESSdTtINSkIDSeXISTdURINGclEANUP"                  ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSeXCEPTION                      : {            tExitCode = T("EXITpROCESSeXCEPTION"                                     ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSsIGNAL                         : {            tExitCode = T("EXITpROCESSsIGNAL"                                        ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSiMPOTENT                       : {            tExitCode = T("EXITpROCESSiMPOTENT"                                      ) ; break ; }
                        case ifcEXITcODE_EXITpROCESSaOK                            : {            tExitCode = T("EXITpROCESSaOK"                                           ) ; break ; }
                        case ifcEXITcODE_EXITpROCESStOOlOW                         : {            tExitCode = T("EXITpROCESStOOlOW"                                        ) ; break ; }
                        //CS:CODEsYNC: 510004FB 112000EF
                    {
                    switch( processExitCode )
                    ZE( boolT , bHuh ) ;
                    TN( tExitCode , "" ) ;
                {
                case EXIT_PROCESS_DEBUG_EVENT :
                }
                    break ;

                    BOSpOOP
                    BOS( WHATgbo , BOSoK , CloseHandle( info3.u.LoadDll.hFile ) ) ; info3.u.LoadDll.hFile = 0 ;
                {
                case LOAD_DLL_DEBUG_EVENT :
            {
            switch( info3.dwDebugEventCode )

            else etherP.traceF( tinP , T("event (debug) [cBegun,cEnded,osPid,osTid,chance,event]:    ")+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF4((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+tb4+TF4((countT)info3.dwThreadId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(info3.u.Exception.dwFirstChance?"    WOTH        ":"        OOTH    ")+tEvent ) ;
                 etherP.traceF( tinP , T("event         [cBegun,cEnded,osPid,osTid,chance,event]:    ")+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF4((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+tb4+TF4((countT)info3.dwThreadId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(info3.u.Exception.dwFirstChance?"    WOTH        ":"        OOTH    ")+tEvent ) ;
            )
                )
                    !info3.u.Exception.dwFirstChance                    //P:PERSONALITY: I AM SILENT FOR WOTH CHANCE EXCEPTION EVENTS BECAUSE THESE MIGHT BE WAD WAC ("WORKING AS DESIGNED WORKING AS CODED").  I AM ONLY INTERESTED IN EXCEPTIONS THAT THE MONITORED PROCESS DOES NOT HANDLE
                    &&
                    info3.dwDebugEventCode == EXCEPTION_DEBUG_EVENT
                (
                ||
                info3.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT
                ||
                info3.dwDebugEventCode == RIP_EVENT
            (
            if

            }
                }
                    break ;

                    }
                        }
                            }
                                break ;
                                }
                                    tEvent += tb4+tException ;

                                    ;
                                        : TF2(idException,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
                                        ? T(postException)
                                    TN( tException , "" ) ; tException = postException

                                    const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapBosCodeWindows( idException ) ;
                                    countT idException = (countT)info3.u.Exception.ExceptionRecord.ExceptionInformation[ ii ] ;
                                {
                                if( ii == info3.u.Exception.ExceptionRecord.NumberParameters - 1 )
                            {
                            case EXCEPTION_IN_PAGE_ERROR :
                        {
                        switch( info3.u.Exception.ExceptionRecord.ExceptionCode )

                        }
                            default : { tEvent += tb4+TF2(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                        ; break ; }
                            case 8  : { tEvent += tb4+TF4(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) ; break ; }
                            case 7  :
                            case 5  : { tEvent += tb4+T(processGlobal4S::_processGlobal4I_IF().mapTinName(vv))                ; break ; }
                        {
                        else switch( ii )
                        if( ifcUnexpectedExceptionCode != ifcIDeVENTeXCEPTIONmONITORED_BLAMMO ) tEvent += tb4+TF2(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

                        countT vv = (countT)info3.u.Exception.ExceptionRecord.ExceptionInformation[ ii ] ;

                        }
                            }
                                case EXCEPTION_IN_PAGE_ERROR    : { tEvent += T("    [bWrite1OrDataExecution8,at,osStatusCode]:") ; break ; }
                                case EXCEPTION_ACCESS_VIOLATION : { tEvent += T("    [bWrite1OrDataExecution8,at]:"             ) ; break ; }
                            {
                            else switch( info3.u.Exception.ExceptionRecord.ExceptionCode )
                            }
                                default                                  : { tEvent += T("    notes:"                                                                                                          ) ; break ; }
                                case ifcIDeVENTeXCEPTIONmONITORED_BLAMMO : { tEvent += T("    [idLine,idiFile,idLineCt,idiFileCt,idBlammo,tinP.idTinNamed,tinName,tinP.monitor.idThread,tinP.osTid,osTidIF()]:") ; break ; }
                                case ifcIDeVENTeXCEPTIONmONITORED_GRUNT  : { tEvent += T("    [idLine,idiFile,idSubType,idType]:"                                                                              ) ; break ; }
                            {
                            if( ifcUnexpectedExceptionCode ) switch( ifcUnexpectedExceptionCode )
                        {
                        if( !ii )
                    {
                    for( countT ii = 0 ; ii < info3.u.Exception.ExceptionRecord.NumberParameters ; ii ++ )
                    tEvent += tb4+T("[flags,at,cNotes]:    ")+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionFlags,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionAddress,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2((countT)info3.u.Exception.ExceptionRecord.NumberParameters,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

                    }
                        }
                            break ;             

                            ;
                                : T("(unexpected exception code) [code]:    ")+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
                                ? T(postException)
                            tEvent += postException
                            const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapExceptionType( ifcUnexpectedExceptionCode ) ;

                            ifcUnexpectedExceptionCode = info3.u.Exception.ExceptionRecord.ExceptionCode & ~( 0xf0000000 ) | 0xd0000000 ;       //A:ASSUME: 02 BITS
                        {
                        default                                   :
                        case STATUS_SXS_INVALID_DEACTIVATION     /* 0xC0150010L */ : { tEvent += T("STATUS_SXS_INVALID_DEACTIVATION     ") ; break ; }
                        case STATUS_SXS_EARLY_DEACTIVATION       /* 0xC015000FL */ : { tEvent += T("STATUS_SXS_EARLY_DEACTIVATION       ") ; break ; }
                        case STATUS_ASSERTION_FAILURE            /* 0xC0000420L */ : { tEvent += T("STATUS_ASSERTION_FAILURE            ") ; break ; }
                        case STATUS_INVALID_CRUNTIME_PARAMETER   /* 0xC0000417L */ : { tEvent += T("STATUS_INVALID_CRUNTIME_PARAMETER   ") ; break ; }
                        case STATUS_STACK_BUFFER_OVERRUN         /* 0xC0000409L */ : { tEvent += T("STATUS_STACK_BUFFER_OVERRUN         ") ; break ; }
                        case STATUS_REG_NAT_CONSUMPTION          /* 0xC00002C9L */ : { tEvent += T("STATUS_REG_NAT_CONSUMPTION          ") ; break ; }
                        case STATUS_FLOAT_MULTIPLE_TRAPS         /* 0xC00002B5L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_TRAPS         ") ; break ; }
                        case STATUS_FLOAT_MULTIPLE_FAULTS        /* 0xC00002B4L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_FAULTS        ") ; break ; }
                        case STATUS_DLL_INIT_FAILED              /* 0xC0000142L */ : { tEvent += T("STATUS_DLL_INIT_FAILED              ") ; break ; }
                        case STATUS_CONTROL_C_EXIT               /* 0xC000013AL */ : { tEvent += T("STATUS_CONTROL_C_EXIT               ") ; break ; }
                        case STATUS_ENTRYPOINT_NOT_FOUND         /* 0xC0000139L */ : { tEvent += T("STATUS_ENTRYPOINT_NOT_FOUND         ") ; break ; }
                        case STATUS_ORDINAL_NOT_FOUND            /* 0xC0000138L */ : { tEvent += T("STATUS_ORDINAL_NOT_FOUND            ") ; break ; }
                        case STATUS_DLL_NOT_FOUND                /* 0xC0000135L */ : { tEvent += T("STATUS_DLL_NOT_FOUND                ") ; break ; }
                        case EXCEPTION_STACK_OVERFLOW            /* 0xC00000FDL */ : { tEvent += T("EXCEPTION_STACK_OVERFLOW            ") ; break ; }
                        case EXCEPTION_PRIV_INSTRUCTION          /* 0xC0000096L */ : { tEvent += T("EXCEPTION_PRIV_INSTRUCTION          ") ; break ; }
                        case EXCEPTION_INT_OVERFLOW              /* 0xC0000095L */ : { tEvent += T("EXCEPTION_INT_OVERFLOW              ") ; break ; }
                        case EXCEPTION_INT_DIVIDE_BY_ZERO        /* 0xC0000094L */ : { tEvent += T("EXCEPTION_INT_DIVIDE_BY_ZERO        ") ; break ; }
                        case EXCEPTION_FLT_UNDERFLOW             /* 0xC0000093L */ : { tEvent += T("EXCEPTION_FLT_UNDERFLOW             ") ; break ; }
                        case EXCEPTION_FLT_STACK_CHECK           /* 0xC0000092L */ : { tEvent += T("EXCEPTION_FLT_STACK_CHECK           ") ; break ; }
                        case EXCEPTION_FLT_OVERFLOW              /* 0xC0000091L */ : { tEvent += T("EXCEPTION_FLT_OVERFLOW              ") ; break ; }
                        case EXCEPTION_FLT_INVALID_OPERATION     /* 0xC0000090L */ : { tEvent += T("EXCEPTION_FLT_INVALID_OPERATION     ") ; break ; }
                        case EXCEPTION_FLT_INEXACT_RESULT        /* 0xC000008FL */ : { tEvent += T("EXCEPTION_FLT_INEXACT_RESULT        ") ; break ; }
                        case EXCEPTION_FLT_DIVIDE_BY_ZERO        /* 0xC000008EL */ : { tEvent += T("EXCEPTION_FLT_DIVIDE_BY_ZERO        ") ; break ; }
                        case EXCEPTION_FLT_DENORMAL_OPERAND      /* 0xC000008DL */ : { tEvent += T("EXCEPTION_FLT_DENORMAL_OPERAND      ") ; break ; }
                        case EXCEPTION_ARRAY_BOUNDS_EXCEEDED     /* 0xC000008CL */ : { tEvent += T("EXCEPTION_ARRAY_BOUNDS_EXCEEDED     ") ; break ; }
                        case EXCEPTION_INVALID_DISPOSITION       /* 0xC0000026L */ : { tEvent += T("EXCEPTION_INVALID_DISPOSITION       ") ; break ; }
                        case EXCEPTION_NONCONTINUABLE_EXCEPTION  /* 0xC0000025L */ : { tEvent += T("EXCEPTION_NONCONTINUABLE_EXCEPTION  ") ; break ; }
                        case EXCEPTION_ILLEGAL_INSTRUCTION       /* 0xC000001DL */ : { tEvent += T("EXCEPTION_ILLEGAL_INSTRUCTION       ") ; break ; }
                        case STATUS_NO_MEMORY                    /* 0xC0000017L */ : { tEvent += T("STATUS_NO_MEMORY                    ") ; break ; }
                        case STATUS_INVALID_PARAMETER            /* 0xC000000DL */ : { tEvent += T("STATUS_INVALID_PARAMETER            ") ; break ; }
                        case EXCEPTION_INVALID_HANDLE            /* 0xC0000008L */ : { tEvent += T("EXCEPTION_INVALID_HANDLE            ") ; break ; }
                        case EXCEPTION_IN_PAGE_ERROR             /* 0xC0000006L */ : { tEvent += T("EXCEPTION_IN_PAGE_ERROR             ") ; break ; }
                        case EXCEPTION_ACCESS_VIOLATION          /* 0xC0000005L */ : { tEvent += T("EXCEPTION_ACCESS_VIOLATION          ") ; break ; }
                        case DBG_EXCEPTION_NOT_HANDLED           /* 0x80010001L */ : { tEvent += T("DBG_EXCEPTION_NOT_HANDLED           ") ; break ; }
                        case STATUS_UNWIND_CONSOLIDATE           /* 0x80000029L */ : { tEvent += T("STATUS_UNWIND_CONSOLIDATE           ") ; break ; }
                        case STATUS_LONGJMP                      /* 0x80000026L */ : { tEvent += T("STATUS_LONGJMP                      ") ; break ; }
                        case EXCEPTION_SINGLE_STEP               /* 0x80000004L */ : { tEvent += T("EXCEPTION_SINGLE_STEP               ") ; break ; }
                        case EXCEPTION_BREAKPOINT                /* 0x80000003L */ : { tEvent += T("EXCEPTION_BREAKPOINT                ") ; break ; }
                        case EXCEPTION_DATATYPE_MISALIGNMENT     /* 0x80000002L */ : { tEvent += T("EXCEPTION_DATATYPE_MISALIGNMENT     ") ; break ; }
                        case EXCEPTION_GUARD_PAGE                /* 0x80000001L */ : { tEvent += T("EXCEPTION_GUARD_PAGE                ") ; break ; }
                        case DBG_COMMAND_EXCEPTION               /* 0x40010009L */ : { tEvent += T("DBG_COMMAND_EXCEPTION               ") ; break ; }
                        case DBG_CONTROL_BREAK                   /* 0x40010008L */ : { tEvent += T("DBG_CONTROL_BREAK                   ") ; break ; }
                        case DBG_RIPEXCEPTION                    /* 0x40010007L */ : { tEvent += T("DBG_RIPEXCEPTION                    ") ; break ; }
                        case DBG_PRINTEXCEPTION_C                /* 0x40010006L */ : { tEvent += T("DBG_PRINTEXCEPTION_C                ") ; break ; }
                        case DBG_CONTROL_C                       /* 0x40010005L */ : { tEvent += T("DBG_CONTROL_C                       ") ; break ; }
                        case DBG_TERMINATE_PROCESS               /* 0x40010004L */ : { tEvent += T("DBG_TERMINATE_PROCESS               ") ; break ; }
                        case DBG_TERMINATE_THREAD                /* 0x40010003L */ : { tEvent += T("DBG_TERMINATE_THREAD                ") ; break ; }
                        case STATUS_SEGMENT_NOTIFICATION         /* 0x40000005L */ : { tEvent += T("STATUS_SEGMENT_NOTIFICATION         ") ; break ; }
                        case DBG_CONTINUE                        /* 0x00010002L */ : { tEvent += T("DBG_CONTINUE                        ") ; break ; }
                        case DBG_EXCEPTION_HANDLED               /* 0x00010001L */ : { tEvent += T("DBG_EXCEPTION_HANDLED               ") ; break ; }
                        case STATUS_PENDING                      /* 0x00000103L */ : { tEvent += T("STATUS_PENDING                      ") ; break ; }
                        case STATUS_TIMEOUT                      /* 0x00000102L */ : { tEvent += T("STATUS_TIMEOUT                      ") ; break ; }
                        case STATUS_USER_APC                     /* 0x000000C0L */ : { tEvent += T("STATUS_USER_APC                     ") ; break ; }
                        case STATUS_ABANDONED_WAIT_0             /* 0x00000080L */ : { tEvent += T("STATUS_ABANDONED_WAIT_0             ") ; break ; }
                        case STATUS_WAIT_0                       /* 0x00000000L */ : { tEvent += T("STATUS_WAIT_0                       ") ; break ; }
                    {
                    switch( info3.u.Exception.ExceptionRecord.ExceptionCode )
                    ZE( countT , ifcUnexpectedExceptionCode ) ;                               //CALCULATED FROM OS EXCEPTION CODE
                {
                case EXCEPTION_DEBUG_EVENT :
            {
            switch( info3.dwDebugEventCode )

            }
                default                          : {                                                                tEvent = T("<unknown (coding error)>   [eventCode]:")+TF2((countT)info3.dwDebugEventCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ; break ; }
                case RIP_EVENT                   : {                                                                tEvent = T("RIP_EVENT                  ")                                                                                          ; break ; }
                case OUTPUT_DEBUG_STRING_EVENT   : {                                                                tEvent = T("OUTPUT_DEBUG_STRING_EVENT  ")                                                                                          ; break ; }
                case UNLOAD_DLL_DEBUG_EVENT      : {                                                                tEvent = T("UNLOAD_DLL_DEBUG_EVENT     ")                                                                                          ; break ; }
                case LOAD_DLL_DEBUG_EVENT        : {                                                                tEvent = T("LOAD_DLL_DEBUG_EVENT       ")                                                                                          ; break ; }
                case EXIT_PROCESS_DEBUG_EVENT    : { cEnded ++ ; processExitCode = info3.u.ExitProcess.dwExitCode ; tEvent = T("EXIT_PROCESS_DEBUG_EVENT   [exitCode]: ")+TF2(processExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                ; break ; }
                case EXIT_THREAD_DEBUG_EVENT     : {             threadExitCode  = info3.u.ExitThread.dwExitCode  ; tEvent = T("EXIT_THREAD_DEBUG_EVENT    [exitCode]: ")+TF2(threadExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                 ; break ; }
                case CREATE_PROCESS_DEBUG_EVENT  : { cBegun ++ ;                                                    tEvent = T("CREATE_PROCESS_DEBUG_EVENT ")                                                                                          ; break ; }
                case CREATE_THREAD_DEBUG_EVENT   : {                                                                tEvent = T("CREATE_THREAD_DEBUG_EVENT  ")                                                                                          ; break ; }
                case EXCEPTION_DEBUG_EVENT       : {                                                                tEvent = T("EXCEPTION_DEBUG_EVENT      ")                                                                                          ; break ; }
            {
            switch( info3.dwDebugEventCode )

            ZE( countT , threadExitCode ) ;
            ZE( countT , processExitCode ) ;
            TN( tEvent , "" ) ;
        {
        else
        }
            else                             { cIgnored2 ++ ; etherP.traceF( tinP , T("called WaitForDebugEvent (failed) [rc]:    "           )+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
            if( rc == ERROR_INVALID_HANDLE ) { cIgnored1 ++ ; etherP.traceF( tinP , T("called WaitForDebugEvent (failed) ERROR_INVALID_HANDLE")                                                  ) ; }  // THESE EVENTS SEEM TO BE GENERATED WHEN THE ADAM BEING DEBUGGED IS A WINDOWED PROCESS
            rc = GetLastError() ;
        {
        if( !bOk )

        etherP.traceF( tinP , T("called  WaitForDebugEvent()") ) ;
        bOk = WaitForDebugEvent( &info3 , INFINITE ) ;
        etherP.traceF( tinP , T("calling WaitForDebugEvent()") ) ;
    {
    while( !cBegun || cEnded < cBegun )
    ZE( countT , myValue ) ;
    ZE( countT , cIgnored2 ) ;
    ZE( countT , cIgnored1 ) ;
    TN( tb4 , "    " ) ;
    ZE( countT , cEnded ) ;
    ZE( countT , cBegun ) ;
    memset( (char*)&info3 , 0 , sizeof info3 ) ;
    DEBUG_EVENT info3 ;
    ZE( countT , rc ) ;
    ZE( boolT , bOk ) ;

    etherP.ifcHireF( tinP , psttCommentP , idAdamP , psttArgsP , flHIRE_DISPLAYaUTO | flHIRE_MONITORtHIS , 0 , 0 , 1 , nicNameC() ) ;

    etherC& etherP = *tinP.pEther ;

    }
        if( POOP ) return 0 ;
        __Z( tinP.pEther ) ;
        if( POOP ) return 0 ;
    {
{
/*1*/countT thirdC::osHireThenMonitorIF( tinS& tinP , countT idAdamP , const strokeS* const psttCommentP , const strokeS* const psttArgsP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
