
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
 FRIENDS_socketC

 inline countT idiFileCtF( voidT ) const { return idiFileCt ; }
 inline countT idLineCtF(  voidT ) const { return  idLineCt ; }

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402b.socketC.nameF!||
 voidT nameF( tin0S& tin0P , const strokeS* const psttP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402a.socketC.cancelIfTimedOutF!||
 voidT cancelIfTimedOutF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34029.socketC.handleF!||
 const handleC& handleF( tin0S& tin0P ) ;
/* commands: other */

 inline operator const strokeS*( voidT ) const { return psttName ; }
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401a.socketC.operator_countT!||
 operator countT( voidT ) ;
/* operators */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402c.socketC.verifyReplyF!||
 voidT verifyReplyF( tin0S& tin0P , const countT rcP , countT csttEstimateP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34019.socketC.readMsgNokF!||
 voidT readMsgNokF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34018.socketC.readMsgOkF!||
 voidT readMsgOkF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34017.socketC.readMsgF!||
 countT readMsgF( tin0S& tin0P , byteT*& pbP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.socketC.readWoReplyF!||
 countT readWoReplyF( tin0S& tin0P , strokeS*& psttP , countT csttEstimateP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.socketC.readToNullLineF!||
 voidT readToNullLineF( tin0S& tin0P , osTextT*& postP , countT csttEstimateP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34014.socketC.readToNullLineF!||
 voidT readToNullLineF( tin0S& tin0P , strokeS*& psttP , countT csttEstimateP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.socketC.readWoMultilineF!||
 voidT readWoMultilineF( tin0S& tin0P , strokeS*& psttP , const strokeS* const psttDelimiterP = 0 , countT csttEstimateP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3402d.socketC.readWoLineF!||
 osTextT readWoLineF( tin0S& tin0P , countT& offP , osTextT* const postP , const countT costaP , const osTextT* const postEscapeP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.socketC.readWoLineF!||
 osTextT readWoLineF( tin0S& tin0P , strokeS*& psttP , const countT csttEstimateP , const osTextT* const postEscapeP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36005031.socketc.readf!||
 voidT readF( tin0S& tin0P , const boolT& bQuitP , byteT* const pbP , const countT cbP , countT& cProcessedP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34026.socketC.readF!||
 voidT readF( tin0S& tin0P , countT& idTypeP , const flagsT flagsP = flSOCKETcrEAD_null , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34023.socketC.readF!||
 voidT readF( tin0S& tin0P , soulC& soulP , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401e.socketC.readF!||
 voidT readF( tin0S& tin0P , countT& idTypeP , countT& idPortP , nicNameC& nicNameP , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36005030.socketc.readf!||
 voidT readF( tin0S& tin0P , soulC& soulP , countT& idPortP , nicNameC& nicNameP , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401c.socketC.readF!||
 voidT readF( tin0S& tin0P , byteT*& pbP , countT& cbP , countT& idPortP , nicNameC& nicNameP , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.socketC.readF!||
 countT readF( tin0S& tin0P , byteT* const pbP , const countT cbP , const flagsT flagsP = flSOCKETcrEAD_null , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.socketC.peekF!||
 countT peekF( tin0S& tin0P , byteT* const pbP , const countT cbP , const flagsT flagsP = flSOCKETcrEAD_null , const countT time1P = 0 , const sCountT time2P = 0 ) ;
/* commands: listening */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34027.socketC.writeF!||
 voidT writeF( tin0S& tin0P , countT cP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34025.socketC.writeF!||
 voidT writeF( tin0S& tin0P , soulC& soulP , const countT* const pczPillNameP = 0 , const boolT bPinP = 0 , countT idCmdTopSecretP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34024.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const countT idPortP , const nicNameC nicNameP , soulC& soulP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34021.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const countT idPortP , const nicNameC nicNameP , const countT* const pcP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401d.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const countT idPortP , const nicNameC nicNameP , const countT idTypeP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401b.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const countT idPortP , const nicNameC nicNameP , const byteT* const pbP , const countT cbP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.socketC.writeMsgF!||
 voidT writeMsgF( tin0S& tin0P , const byteT* const pbP , const countT cbP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const strokeS* const psttP , const boolT bNoPrefixP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.socketC.writeF!||
 voidT writeF( tin0S& tin0P , const byteT* const pbP , const countT cbP = 0 ) ;
/* commands: speaking */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.socketC.stopWaitingF!||
 voidT stopWaitingF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.socketC.peerNameF!||
 voidT peerNameF( tin0S& tin0P , countT& idPortP , nicNameC& nicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.socketC.myNameF!||
 voidT myNameF( tin0S& tin0P , countT& idPortP , nicNameC& nicNameP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.socketC.listenF!||
 voidT listenF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34020.socketC.nicNameIF!||
 static voidT nicNameIF( tin0S& tin0P , etherC& ether , nicNameC*& pNicNameP , countT& cNicNameP , const strokeS* const psttP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.socketC.nicNameIF!||
 static nicNameC nicNameIF( tin0S& tin0P , etherC& etherP , const strokeS* const psttP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3600502f.socketc.shakeHandsasserverF!||
 voidT shakeHandsAsServerF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3600502e.socketc.shakeHandsAsClientF!||
 voidT shakeHandsAsClientF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.socketC.connectF!||
 voidT connectF( tin0S& tin0P , countT idPortP = 0 , const nicNameC nicNameP = nicNameC() , countT cTriesP = 0 , const countT time1P = 0 , const sCountT time2P = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.socketC.bindF!||
 countT bindF( tin0S& tin0P , const countT idPortP = 0 , const nicNameC nicNameP = nicNameC() , const countT cTriesP = 0 , const boolT bInUseOkP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401f.socketC.acceptF!||
 voidT acceptF( tin0S& tin0P , socketC*& pSocketP , countT& idPortP , nicNameC& nicNameP , boolT& bRefuseP , s_acceptF_parametersS* pParamsP = 0 ) ;
/* commands: connecting */

 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34028.socketC.etherF!||
 etherC& etherF( tin0S& tin0P ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.socketC.etherF!||
 voidT etherF( tin0S& tin0P , etherC& etherP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.socketC.dt_socketC!||
 ~socketC( voidT ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.socketC.socketC!||
 socketC( etherC& etherP , tin0S& tin0P , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , handleC& handleP , const boolT idTypeP , const flagsT flagsP , const strokeS* const psttAddrMulticastP , const countT* const pIdleTimeAllowedReadP , const countT* const pIdleTimeAllowedWriteP , const countT* const pTimeAllowedConnectedP , nicNameC& nnPeerP , const strokeS* const psttPemCertificatesP , const strokeS* const psttPemPrivateKeyP ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.socketC.socketC!||
 socketC( tin0S& tin0P , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const boolT idTypeP = 0 , const flagsT flagsP = flSOCKETc_null , const strokeS* const psttAddrMulticastP = 0 , const countT* const pIdleTimeAllowedReadP = 0 , const countT* const pIdleTimeAllowedWriteP = 0 , const countT* const pTimeAllowedConnectedP = 0 , const strokeS* const psttPemCertificatesP = 0 , const strokeS* const psttPemPrivateKeyP = 0 ) ;
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.socketC.NEWdELcLASSpeTHER!||
 NEWdELcLASSpROTOS
/* birth , death */

/**/

    public :

    handleC                 hSslContext ;

    ipMapPortS*             pMapPortBind ;

    timeS                   timeLathWrite ;
    timeS                   timeLathRead ;
    timeS                   timeConnected ;
    const countT&           idleTimeAllowedWrite ;
    const countT&           idleTimeAllowedRead ;
    const countT&           timeAllowedConnected ;

    timeS                   timeLathTopSecretPinSend ;
    timeS                   timeWothTopSecretPinRequestReceived ;
    portTimeC               idptRelayTopSecretPeer ;
    countT*                 pczKeyTopSecretPeer ;
    countT*                 pczKeyTopSecret ;
    countT                  idPhaseTopSecret ;

    strokeS*                psttPemPrivateKey ;
    strokeS*                psttPemCertificates ;
    strokeS*                psttName ;
    dadC                    dad ;
    momC                    mom ;
    handleC                 hnu ;
    countT                  idType ;
    countT                  idPortMe ;
    boolT                   bCatcher ;
    boolT                   bAcceptor ;
    countT                  cbMsgInLast ;
    countT                  idMsgInLast ;
    countT                  idMsgOutLast ;
    batonC                  bRead ;
    batonC                  bWrite ; //S: WHEN BOTH bWrite bRead ARE GRABBED, bWrite IS GRABBED WOTH AND UNGRABBED LATH
    flagsT                  flagsOpenSslFails ;
    flagsT                  flagsMode ;
    const flagsT            flags ;
    handleC                 handle ;
    boolT                   fListening ;
    const poopC*            pPoop ;
    etherC*                 pEther ; // ALLOWS SPECIFICATION OF THE ETHER TO BE CHANGED
    boolT                   bAcceptedByLF ;
    sockOdometerS*          pOdometer ;
    nicNameC                nnMulticast ;
    nicNameC                nnPeer ;
    countT                  cFunctionsPending ;
    const byteT             pbBitsCt[ CBbITScT ] ;
    const countT            idiFileCt ;
    const countT            idLineCt ;
{
/*1*/class _export socketC/*1*/

/**/
*/
  \<A HREF=\"5.2420104.1.1.0.html\"\>2420104:  WAKEsHOW( "example.simplest.snip.1500000d.socketC" )\</A\>
 simplest
examples
\<A HREF=\"5.1500000d.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

