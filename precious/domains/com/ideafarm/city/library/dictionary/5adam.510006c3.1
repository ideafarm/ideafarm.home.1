
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

etThread.traceF( tinBaseP , T("cloud [cFiles]: ")+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

while( !ether && !etThread && raxQueryFileListF( tinBaseP , etThread , resultAuth , tMarker , cFiles ) ) ;
ZE( countT , cFiles ) ;
TN( tMarker , "" ) ;

//raxQueryAccountDetailsF( tinBaseP , etThread , resultAuth ) ;

//etThread.traceF( tinBaseP , resultAuth.tTenantId ) ;
//etThread.traceF( tinBaseP , resultAuth.tPublicUrl ) ;
//etThread.traceF( tinBaseP , resultAuth.tAccessToken ) ;

raxGetAuthF( tinBaseP , etThread , resultAuth , tUser , tKey ) ;
resultAuthS resultAuth( tinBaseP ) ;

TN( tKey  , "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" ) ;
TN( tUser , "ideafarm" ) ;

TODO

}
    return costBody ;

    }
        etherP.delF( tinBaseP , psttHost ) ;
        }
            }
                ++ s ; etPrime.osSleepF( tinBaseP , TOCK ) ;
                sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

                etherP.traceF( tinBaseP , T("will retry after napping for a tock") ) ;
                POOPR
            {
            else
            if( !POOP ) break ;

            }
                etherP.traceF( tinBaseP , tMarkerP ) ;
                tMarkerP = T(postFile) ;

                ;
                    : postBody
                    ? postLath
                osTextT* postFile = postLath

                }
                    }
                        else         postLath = postc = postc + 1 ;
                        if( !postc ) break ;
                        postc = thirdC::c_strstrIF( tinBaseP , postc , "\n" ) ; // RAX (rackspace.com) SERVER USES UNIX CONVENTION OF USING ONLY '\n' TO DELIMIT LINES
                    {
                    while( *postc )
                    osTextT* postc = postBody ;
                {
                ZE( osTextT* , postLath ) ;
                //SET tMarker TO THE LATH - 1 FILE LISTED (THE LATH LINE IS GENERALLY TRUNCATED, SO I DO NOT USE IT)

                if( costBody ) etScratch.boxPutF( tinBaseP , T("///d/tmp/x/files.archive.")+TF3(idIn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,3)+T(".ttt") , postBody , costBody ) ;

                }
                    }
                        }
                            }
                                break ;
                                }
                                    cFilesP ++ ;
                                    bBOL = 0 ;
                                {
                                if( bBOL )
                            {
                            default :
                            case '\n' : { bBOL = 1 ; break ; }
                        {
                        switch( *postc )
                    {
                    for( osTextT* postc = postBody ; *postc ; postc ++ ) //COUNT THE FILES
                    boolT bBOL = 1 ;
                {

                while( costBody && postBody[ costBody - 1 ] == '\n' ) postBody[ -- costBody ] = 0 ; // NIX THE TRAILING '\n'

                }
                    while( costBody && postBody[ costBody - 1 ] != '\n' ) postBody[ -- costBody ] = 0 ; // NIX THE LATH LINE, WHICH IS TRUNCATED
                {
                if( costBody && postBody[ costBody - 1 ] != '\n' )

                costBody = thirdC::c_strlenIF( tinBaseP , postBody ) ;
                postBody += 4 ;
            {
            if( postBody )
            osTextT* postBody = thirdC::c_strstrIF( tinBaseP , postHear , "\r\n\r\n" ) ;

            //etherP.traceF( tinBaseP , T(postHear) ) ;
            else                             { BLAMMO ; }
            if( costHear < sizeof postHear ) postHear[ costHear ] = 0 ;
            countT costHear = ss.readF( tinBaseP , postHear , sizeof postHear ) ;
            char postHear[ TOCK ] ; 

            ss.writeF( tinBaseP , (osTextT*)tSay , (countT)tSay.csF( tinBaseP ) ) ;
            ss.connectF( tinBaseP , 443 , socketC::nicNameIF( tinBaseP , etScratch , T(psttHost) ) ) ;
            socketC ss( tinBaseP , etScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;
        {
        while( !etPrime && !etherP && !POOP )
        const countT idIn = ++ idInLath ;
        static countT idInLath ;

        etherC& etPrime   = etherC::etPrimeIF( tinBaseP ) ;
        etherC& etScratch = *((tinFullS&)tinBaseP).pEtScratch ;
        SCOOPS
    {
    IFsCRATCH

    //etherP.traceF( tinBaseP , tSay ) ;

    etherP.delF( tinBaseP , psttShort ) ;

    tSay += T(" HTTP/1.1\r\nHost: ")+T(psttHost)+T("\r\nX-Auth-Token: ")+rAuthP.tAccessToken+T("\r\n\r\n") ;
    if( psttMarkerEncoded ) tSay += T("?marker=")+T(psttMarkerEncoded) ;
    TN( tSay , "" ) ; tSay = T("GET ")+T(psttShort)+T("/archive") ;

    // X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
    // Host: storage.clouddrive.com
    // GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/test HTTP/1.1
    // EXAMPLE OF QUERY (NO BODY IS SENT)

    }
        }
            etherP.strSubstringF( tinBaseP , psttShort , idfShort , idlShort , rAuthP.tPublicUrl ) ; ___( psttShort ) ;
            etherP.strSubstringF( tinBaseP , psttHost  , idfHost  , idlHost  , rAuthP.tPublicUrl ) ; ___( psttHost  ) ;
            ZE( countT , idlShort ) ;
            countT idlHost = idfShort - 1 ;
            idfHost ++ ;
        {
        if( idfHost && idfShort )
        countT idfShort = etherP.strIdF( tinBaseP , strokeS( '/' ) , rAuthP.tPublicUrl , 3 ) ;
        countT idfHost  = etherP.strIdF( tinBaseP , strokeS( '/' ) , rAuthP.tPublicUrl , 2 ) ;
    {
    ZE( strokeS* , psttShort ) ;
    ZE( strokeS* , psttHost  ) ;

    ZE( countT , costBody ) ;

    if( tMarkerP.csF( tinBaseP ) ) { etherP.strToUrlF( tinBaseP , psttMarkerEncoded , tMarkerP ) ; ___( psttMarkerEncoded ) ; }
    ZE( strokeS* , psttMarkerEncoded ) ;
{
countT raxQueryFileListF( tinBaseS& tinBaseP , etherC& etherP /*, resultAccountDetailsS& rP*/ , resultAuthS& rAuthP , textC& tMarkerP , countT& cFilesP )

}
    //etherP.traceF( tinBaseP , tIn ) ;

    etherP.boxPutF( tinBaseP , T("///d/tmp/x/goo.ttt") , tIn , tIn.csF( tinBaseP ) ) ;
    }
        }
            }
                tIn = T(postJson) ;

                }
                    }
                        case '}' : { if( !( -- idLevel ) ) bNix = 1 ; break ; }
                        case ']' :

                        case '{' : {        ++ idLevel              ; break ; }
                        case '[' :
                    {
                    switch( *postc )

                    }
                        break ;
                        *postc = 0 ;
                    {
                    if( bNix )
                {
                for( osTextT* postc = postJson ; *postc ; postc ++ )
                ZE( boolT  , bNix ) ;
                ZE( countT , idLevel ) ;
            {
            if( postJson )

            if( postJsonSq && postJsonSq < postJson ) postJson = postJsonSq ;
            osTextT* postJson   = thirdC::c_strstrIF( tinBaseP , postBody , "{" ) ;
            osTextT* postJsonSq = thirdC::c_strstrIF( tinBaseP , postBody , "[" ) ;
        {
        if( postBody )
        osTextT* postBody = thirdC::c_strstrIF( tinBaseP , postHear , "\r\n\r\n" ) ;
    {
    TN( tIn , "" ) ; // WILL CONTAIN A SINGLE, TRIMMED JSON WORD

    etherP.boxPutF( tinBaseP , T("///d/tmp/x/foo.ttt") , postHear , costHear ) ;
    //etherP.traceF( tinBaseP , T(postHear) ) ;
    countT costHear = ss.readF( tinBaseP , postHear , sizeof postHear ) ;
    memset( postHear , 0 , sizeof postHear ) ;
    char postHear[ TOCK ] ; 

    ss.writeF( tinBaseP , (osTextT*)tSay , (countT)tSay.csF( tinBaseP ) ) ;
    etherP.delF( tinBaseP , psttHost ) ;
    ss.connectF( tinBaseP , 443 , socketC::nicNameIF( tinBaseP , etherP , T(psttHost) ) ) ;
    socketC ss( tinBaseP , etherP , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;

    //etherP.traceF( tinBaseP , tSay ) ;

    etherP.delF( tinBaseP , psttShort ) ;
    TN( tSay , "" ) ; tSay = T("GET ")+T(psttShort)+T("?format=json HTTP/1.1\r\nHost: ")+T(psttHost)+T("\r\nX-Auth-Token: ")+rAuthP.tAccessToken+T("\r\n\r\n") ;

    // X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
    // Host: storage.clouddrive.com
    // GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123?format=json HTTP/1.1
    // EXAMPLE OF QUERY (NO BODY IS SENT)

    }
        }
            etherP.strSubstringF( tinBaseP , psttShort , idfShort , idlShort , rAuthP.tPublicUrl ) ; ___( psttShort ) ;
            etherP.strSubstringF( tinBaseP , psttHost  , idfHost  , idlHost  , rAuthP.tPublicUrl ) ; ___( psttHost  ) ;
            ZE( countT , idlShort ) ;
            countT idlHost = idfShort - 1 ;
            idfHost ++ ;
        {
        if( idfHost && idfShort )
        countT idfShort = etherP.strIdF( tinBaseP , strokeS( '/' ) , rAuthP.tPublicUrl , 3 ) ;
        countT idfHost  = etherP.strIdF( tinBaseP , strokeS( '/' ) , rAuthP.tPublicUrl , 2 ) ;
    {
    ZE( strokeS* , psttShort ) ;
    ZE( strokeS* , psttHost  ) ;
{
voidT raxQueryAccountDetailsF( tinBaseS& tinBaseP , etherC& etherP /*, resultAccountDetailsS& rP*/ , resultAuthS& rAuthP )

}
    wordF( tinBaseP , etherP , rP , scratchAuth , stPath , tIn ) ;
    stackC stPath( tinBaseP , etherP , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
    scratchAuthS scratchAuth( tinBaseP ) ;

    }
        }
            }
                tIn = T(postJson) ;

                }
                    }
                        case '}' : { if( !( -- idLevel ) ) bNix = 1 ; break ; }
                        case ']' :

                        case '{' : {        ++ idLevel              ; break ; }
                        case '[' :
                    {
                    switch( *postc )

                    }
                        break ;
                        *postc = 0 ;
                    {
                    if( bNix )
                {
                for( osTextT* postc = postJson ; *postc ; postc ++ )
                ZE( boolT  , bNix ) ;
                ZE( countT , idLevel ) ;
            {
            if( postJson )

            if( postJsonSq && postJsonSq < postJson ) postJson = postJsonSq ;
            osTextT* postJson   = thirdC::c_strstrIF( tinBaseP , postBody , "{" ) ;
            osTextT* postJsonSq = thirdC::c_strstrIF( tinBaseP , postBody , "[" ) ;
        {
        if( postBody )
        osTextT* postBody = thirdC::c_strstrIF( tinBaseP , postHear , "\r\n\r\n" ) ;
    {
    TN( tIn , "" ) ; // WILL CONTAIN A SINGLE, TRIMMED JSON WORD

    countT cbIn = ss.readF( tinBaseP , postHear , sizeof postHear ) ;
    memset( postHear , 0 , sizeof postHear ) ;
    char postHear[ TOCK ] ; 

    ss.writeF( tinBaseP , (osTextT*)tSay , (countT)tSay.csF( tinBaseP ) ) ;
    ss.connectF( tinBaseP , 443 , socketC::nicNameIF( tinBaseP , etherP , T("identity.api.rackspacecloud.com") ) ) ;
    socketC ss( tinBaseP , etherP , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;

    tSay += TF4(tSayBody.csF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tSayBody ;
    ) ;

        "Content-Length: "
        "Content-Type: application/json\r\n"
        "Accept: application/json\r\n"
        "Host: identity.api.rackspacecloud.com\r\n"
        "User-Agent: IPDOS (tm)\r\n"
        "POST /v2.0/tokens HTTP/1.1\r\n"

    TN( tSay , 

    ) ;

        "}\r\n"
        "   }\r\n"
        "      }\r\n"
        "\"\r\n"

    tSayBody += T(

    tSayBody += T(psttKeyP) ;

    ) ;

        "         \"apiKey\": \""
        "\",\r\n"

    tSayBody += T(

    tSayBody += T(psttUserP) ;

    ) ;

        "         \"username\": \""
        "      {\r\n"
        "      \"RAX-KSKEY:apiKeyCredentials\":\r\n"
        "   {\r\n"
        "   \"auth\":\r\n"
        "{\r\n"

    TN( tSayBody ,
{
voidT raxGetAuthF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , const strokeS* const psttUserP , const strokeS* const psttKeyP )

}
    }
        }
            //}
            //    etherP.traceF( tinBaseP , T("[ids,idLevel]: ")+TF2(ids,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idLevel,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            //{
            //if( idLevelLag != idLevel )

            }
                }
                    }
                        ;
                            : 0
                            ? ids + 1
                        idPairWoth = ids + 1 < idWordLath

                        etherP.delF( tinBaseP , psttPair ) ;
                        pairF( tinBaseP , etherP , rP , sP , stPathP , psttPair ) ;
                        etherP.strTrimF( tinBaseP , psttPair ) ; ___( psttPair ) ;
                        etherP.strSubstringF( tinBaseP , psttPair , idPairWoth , idPairLath , psttP ) ; ___( psttPair ) ;
                        ZE( strokeS* , psttPair ) ;

                        countT idPairLath = ids - 1 ;
                    {
                    if( !idLevel || ( idLevel == 1 && ostc == ',' ) )
                {
                case ',' :

                case '}' : { -- idLevel ; } // INTENTIONAL FALLTHROUGH

                case '{' : { ++ idLevel ; break ; }

                case ']' : { -- idLevel ; break ; }

                case '[' : { ++ idLevel ; break ; }
            {
            switch( ostc )

            if( bIgnore ) continue ;

            }
                //}
                //    etherP.delF( tinBaseP , psttIgnored ) ;
                //    etherP.traceF( tinBaseP , T("ignored: ")+T(psttIgnored) ) ;
                //    etherP.strSubstringF( tinBaseP , psttIgnored , idf , idl , psttP ) ; ___( psttIgnored ) ;
                //    ZE( strokeS* , psttIgnored ) ;
                //
                //    countT idl = ids ;
                //    countT idf = idsIgnoreWoth ;
                //{
                //else
                //if( bIgnore ) idsIgnoreWoth = ids ;

                bIgnore = !bIgnore ;
            {
            if( ostc == '"' )

            countT ostc = psttP[ CSpREFIX - 1 + ids ].idAdam ;
            idLevelLag = idLevel ;
        {
        for( countT ids = idWordWoth ; ids <= idWordLath ; ids ++ )
        ZE( countT , idsIgnoreWoth ) ;
        ZE( boolT , bIgnore ) ;
        countT idPairWoth = idWordWoth + 1 ;
        ZE( countT , idLevelLag ) ;
        ZE( countT , idLevel ) ;

        const countT idWordLath = psttP->idAdam ;
        const countT idWordWoth = 1 ;
    {
    if( psttP->idAdam > 2 )

    if( psttP[ CSpREFIX ].idAdam != '{' || psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam != '}' ) { BLAMMO ; }
    //VERIFY THAT psttP BEGINS WITH '{' AND ENDS WITH '}'

    //
    // value := [ word , word , ... ]
    //
    // value := word
    // 
    // pair := key : value
    //
    // word := { pair , pair , ... }
    //
    // INPUT IS EXACTLY WO word
    // INPUT FORMAT SPECIFICATION
    // 
    // RECIPE
{
voidT wordF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    }
        }
            idValueWoth = 0 ;
            etherP.delF( tinBaseP , psttValue ) ;
            valueF( tinBaseP , etherP , rP , sP , stPathP , psttValue ) ;
            etherP.strTrimF( tinBaseP , psttValue ) ; ___( psttValue ) ;
            etherP.strSubstringF( tinBaseP , psttValue , idValueWoth , idValueLath , psttP ) ; ___( psttValue ) ;
            ZE( countT , idValueLath ) ;
            ZE( strokeS* , psttValue ) ;
        {
        if( !idLevel && idValueWoth )

        }
            }
                }
                    break ;

                    }
                        ;
                            : 0
                            ? ids + 1
                        idValueWoth = ids + 1 <= idPairLath

                        idKeyWoth = 0 ;
                        etherP.delF( tinBaseP , psttKey ) ;
                        keyF( tinBaseP , etherP , rP , sP , stPathP , psttKey ) ;
                        etherP.strTrimF( tinBaseP , psttKey ) ; ___( psttKey ) ;
                        etherP.strSubstringF( tinBaseP , psttKey , idKeyWoth , idKeyLath , psttP ) ; ___( psttKey ) ;
                        ZE( strokeS* , psttKey ) ;

                        countT idKeyLath = ids - 1 ;
                    {
                    if( !idLevel && idKeyWoth )
                {
                case ':' :

                case '}' : { -- idLevel ; break ; }
                case ']' :

                case '{' : { ++ idLevel ; break ; }
                case '[' :
            {
            switch( ostc )

            if( bIgnore ) continue ;
            if( ostc == '"' ) bIgnore = !bIgnore ;

            countT ostc = psttP[ CSpREFIX - 1 + ids ].idAdam ;
        {
        for( countT ids = idPairWoth ; ids <= idPairLath ; ids ++ )
        ZE( countT , idsIgnoreWoth ) ;
        ZE( boolT  , bIgnore ) ;
        ZE( countT , idValueWoth ) ;
        countT idKeyWoth = idPairWoth ;
        ZE( countT , idLevel ) ;

        const countT idPairLath = psttP->idAdam ;
        const countT idPairWoth = 1 ;
    {
    if( psttP->idAdam > 2 )

    //
    // value := [ word , word , ... ]
    //
    // value := word
    // 
    // pair := key : value
    //
    // INPUT IS EXACTLY WO word
    // INPUT FORMAT SPECIFICATION
    // 
    // RECIPE

    //etherP.traceF( tinBaseP , T("[pair]: ")+T(psttP) ) ;
{
voidT pairF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    }
        etherP.delF( tinBaseP , psttKey ) ;
        stPathP >> psttKey ;
        ZE( strokeS* , psttKey ) ;
    {
    if( stPathP )

    }
        }
            break ;
            wordF( tinBaseP , etherP , rP , sP , stPathP , psttP ) ;
            if( psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam != '}' ) { BLAMMO ; }
        {
        case '{' :
        }
            break ;
            etherP.delF( tinBaseP , psttList ) ;
            listF( tinBaseP , etherP , rP , sP , stPathP , psttList ) ;
            etherP.strSubstringF( tinBaseP , psttList , idf , idl , psttP ) ; ___( psttList ) ;
            countT idl = psttP->idAdam - 1 ;
            countT idf = 2 ;
            ZE( strokeS* , psttList ) ;

            if( psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam != ']' ) { BLAMMO ; }
        {
        case '[' :
    {
    if( psttP->idAdam ) switch( psttP[ CSpREFIX ].idAdam )

    }
        }
            }
                etherP.delF( tinBaseP , psttw ) ;
                rP.tTenantId = T(psttw) ;
                strFromJsonF( tinBaseP , etherP , psttw , sP.tMaybeTenantId ) ; ___( psttw ) ;

                etherP.delF( tinBaseP , psttw ) ;
                rP.tPublicUrl = T(psttw) ;
                strFromJsonF( tinBaseP , etherP , psttw , sP.tMaybePublicUrl ) ; ___( psttw ) ;
                ZE( strokeS* , psttw ) ;
            {
            if( !etherP.strCompareF( tinBaseP , psttP , T("\"object-store\"") ) )
        {
        else if( !etherP.strCompareF( tinBaseP , tPath , tWantObjectStore ) )
        }
            }
                sP.tMaybeTenantId = T(psttP) ;
            {
            if( F(sP.flags) & flME_MYrEGION )
        {
        else if( !etherP.strCompareF( tinBaseP , tPath , tWantTenantId ) )
        }
            }
                sP.tMaybePublicUrl = T(psttP) ;
            {
            if( F(sP.flags) & flME_MYrEGION )
        {
        else if( !etherP.strCompareF( tinBaseP , tPath , tWantPublicURL ) )
        }
            else                                                        sP.flags &= ~( flME_MYrEGION ) ;
            if( !etherP.strCompareF( tinBaseP , T(psttP) , T("\"IAD\"") ) ) sP.flags |=    flME_MYrEGION   ;
        {
        else if( !etherP.strCompareF( tinBaseP , tPath , tWantRegion ) )
        }
            etherP.delF( tinBaseP , psttw ) ;
            rP.tAccessToken = T(psttw) ;
            strFromJsonF( tinBaseP , etherP , psttw , psttP ) ; ___( psttw ) ;
            ZE( strokeS* , psttw ) ;
        {
        if( !etherP.strCompareF( tinBaseP , tPath , tWantToken ) )

        //etherP.traceF( tinBaseP , tPath ) ;

        TN( tWantObjectStore , "\"access\"/\"serviceCatalog\"/\"type\"/" ) ;
        TN( tWantPublicURL   , "\"access\"/\"serviceCatalog\"/\"endpoints\"/\"publicURL\"/" ) ;
        TN( tWantTenantId    , "\"access\"/\"serviceCatalog\"/\"endpoints\"/\"tenantId\"/"  ) ;
        TN( tWantRegion      , "\"access\"/\"serviceCatalog\"/\"endpoints\"/\"region\"/"    ) ;
        TN( tWantToken       , "\"access\"/\"token\"/\"id\"/"                               ) ;
    {

    // "access"/"token"/"id"/    --------    "995e991606cc43dbaddfaaed82b8aa4f"
    //
    //
    // THESE ARE THE VALUES THAT I WANT (PATH    --------    SAMPLEVALUE

    }
        while( ~hWalk ) ;
        do tPath += T((strokeS*)stPathP.upF(tinBaseP,hWalk))+T("/") ;
    {
    if( stPathP )
    TN( tPath , "" ) ;
    handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
{
voidT valueF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    stPathP << psttw ;
    etherP.strMakeF( tinBaseP , LF , psttw , psttP ) ; ___( psttw ) ;
    ZE( strokeS* , psttw ) ;

    //etherP.traceF( tinBaseP , T("[key]: ")+T(psttP) ) ;
{
voidT keyF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    }
        }
            etherP.delF( tinBaseP , psttItem ) ;
            itemF( tinBaseP , etherP , rP , sP , stPathP , psttItem ) ;
            etherP.strTrimF( tinBaseP , psttItem ) ; ___( psttItem ) ;
            etherP.strSubstringF( tinBaseP , psttItem , idItemWoth , idItemLath , psttP ) ; ___( psttItem ) ;
            ZE( countT , idItemLath ) ;
            ZE( strokeS* , psttItem ) ;
        {
        if( idItemWoth )

        }
            }
                }
                    break ;

                    }
                        ;
                            : 0
                            ? ids + 1
                        idItemWoth = ids + 1 <= idListLath

                        etherP.delF( tinBaseP , psttItem ) ;
                        itemF( tinBaseP , etherP , rP , sP , stPathP , psttItem ) ;
                        etherP.strTrimF( tinBaseP , psttItem ) ; ___( psttItem ) ;
                        etherP.strSubstringF( tinBaseP , psttItem , idItemWoth , idItemLath , psttP ) ; ___( psttItem ) ;
                        ZE( strokeS* , psttItem ) ;

                        countT idItemLath = ids - 1 ;
                    {
                    if( !idLevel )
                {
                case ',' :

                case '}' : { -- idLevel ; break ; }
                case ']' :

                case '{' : { ++ idLevel ; break ; }
                case '[' :
            {
            switch( ostc )

            if( bIgnore ) continue ;
            if( ostc == '"' ) bIgnore = !bIgnore ;

            countT ostc = psttP[ CSpREFIX - 1 + ids ].idAdam ;
        {
        for( countT ids = idListWoth ; ids <= idListLath ; ids ++ )
        ZE( countT , idsIgnoreWoth ) ;
        ZE( boolT  , bIgnore ) ;
        countT idItemWoth = idListWoth ;
        ZE( countT , idLevel ) ;

        const countT idListLath = psttP->idAdam ;
        const countT idListWoth = 1 ;
    {
    if( psttP->idAdam > 2 )

    //etherP.traceF( tinBaseP , T("[list]: ")+T(psttP) ) ;
{
voidT listF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    }
        }
            }
                break ;
                wordF( tinBaseP , etherP , rP , sP , stPathP , psttP ) ;
                if( psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam != '}' ) { BLAMMO ; }
            {
            case '{' :
            }
                break ;
                etherP.delF( tinBaseP , psttList ) ;
                listF( tinBaseP , etherP , rP , sP , stPathP , psttList ) ;
                etherP.strSubstringF( tinBaseP , psttList , idf , idl , psttP ) ; ___( psttList ) ;
                countT idl = psttP->idAdam - 1 ;
                countT idf = 2 ;
                ZE( strokeS* , psttList ) ;

                if( psttP[ CSpREFIX - 1 + psttP->idAdam ].idAdam != ']' ) { BLAMMO ; }
            {
            case '[' :
        {
        switch( psttP[ CSpREFIX ].idAdam )
    {
    if( psttP->idAdam )

    //etherP.traceF( tinBaseP , T("[item]: ")+T(psttP) ) ;
{
voidT itemF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP )

}
    etherP.strReplaceF( tinBaseP , psttP , 0 , T("\\/") , T("/") ) ; ___( psttP ) ;
    etherP.strTrimF(    tinBaseP , psttP , psttFromP , 0 , T("\"") ) ; ___( psttP ) ;
{
voidT strFromJsonF( tinBaseS& tinBaseP , etherC& etherP , strokeS*& psttP , const strokeS* const psttFromP )

voidT wordF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP ) ;
voidT listF( tinBaseS& tinBaseP , etherC& etherP , resultAuthS& rP , scratchAuthS& sP , stackC& stPathP , const strokeS* const psttP ) ;

}
{
tTenantId( tinBaseP , TAG( TAGiDnULL ) )
tPublicUrl( tinBaseP , TAG( TAGiDnULL ) ) ,
tAccessToken( tinBaseP , TAG( TAGiDnULL ) ) ,
resultAuthS::resultAuthS( tinBaseS& tinBaseP ) :

}
{
tMaybeTenantId( tinBaseP , TAG( TAGiDnULL ) )
tMaybePublicUrl( tinBaseP , TAG( TAGiDnULL ) ) ,
flags( flME_null ) ,
scratchAuthS::scratchAuthS( tinBaseS& tinBaseP ) :

;
}
    resultAuthS( tinBaseS& tinBaseP ) ;

    textC   tTenantId ;
    textC   tPublicUrl ;
    textC   tAccessToken ;
{
struct resultAuthS

;
}
    scratchAuthS( tinBaseS& tinBaseP ) ;

    textC   tMaybeTenantId ;
    textC   tMaybePublicUrl ;
    flagsT  flags ;
{
struct scratchAuthS

#define flME_MYrEGION    0xe00001ff
#define flME_null        0xe00000ff

/*1*/WAKEsHOWtEXT( "tool.cloud.query.service.catalog.query.file.list" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

