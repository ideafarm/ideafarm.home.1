
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tin0P ) ;

sayF( tin0P , etThread , stw , T("after") ) ;

stw << souw ;
stw.purgeF( tin0P ) ;
stw >> souw ;
soulC souw( tin0P , etThread , TAG( TAGiDnULL ) ) ;

sayF( tin0P , etThread , stw , T("before") ) ;

stw << psttOldC( tin0P , etThread , T("d") ) ;
stw << psttOldC( tin0P , etThread , T("c") ) ;
stw << psttOldC( tin0P , etThread , T("b") ) ;
stw << psttOldC( tin0P , etThread , T("a") ) ;
stackC stw( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;

etThread.delF( tin0P , psttd ) ;
etThread.strMakeF( tin0P , LF , psttd , pstt4 ) ; ___( psttd ) ;
ZE( strokeS* , psttd ) ;

pstt4[ CSpREFIX ] = 'a' ;
SETpREFIX( pstt4 , 1 , 0 )
strokeS pstt4[ CSpREFIX + 1 ] ;

TODO

}
    }
        while( !etThread && ~hDown ) ;
        }
            if( psttw ) etThread.strokeF( tin0P , tL+T(psttw)+tR ) ;
            strokeS* psttw = (strokeS*)stP.downF( tin0P , hDown ) ;
        {
        do
        handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stP )
    TN( tR , "\"\r\n" ) ;
    TN( tL , "" ) ; tL = T(psttP)+T(": \"") ;
{
voidT sayF( tin0S& tin0P , etherC& etThread , stackC& stP , const strokeS* const psttP )

/*1*/WAKEhIDE( "example.simplest.func.115005a.stackC.operator_shiftLeft" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

