
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    }
#endif
        }
            }
                break ;

                etThread.delF( tin0P , psttFileName ) ;
                etThread.delF( tin0P , pbFile ) ;

                CONoUT( "quitting\r\n" ) ;
                pso->readF( tin0P , sIn ) ;
                CONoUT( "waiting for client to go away\r\n" ) ;

                pso->writeF( tin0P , sOut ) ;

                if( cbFile ) sOut.shiftLeftF( tin0P , ifcIDtYPEsOULiTEM_byteTptr , pbFile , cbFile ) ;
                sOut << cbFile ;
                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
                CONoUT( T("putting file \"")+T(psttFileName)+T("\"\r\n") ) ;

                etThread.boxGetShadowF( tin0P , pbFile , cbFile , psttFileName ) ; ___( pbFile ) ;
                ZE( countT , cbFile ) ;
                ZE( byteT* , pbFile ) ;
                CONoUT( T("retrieving file \"")+T(psttFileName)+T("\"\r\n") ) ;

                sIn >> psttFileName ; ___( psttFileName ) ;
                ZE( strokeS* , psttFileName ) ;
            {
            case 1 :
        {
        switch( idCmd )

        sIn >> idCmd ;
        ZE( countT , idCmd ) ;

        pso->readF( tin0P , sIn ) ;
        soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
        CONoUT( "reading command\r\n" ) ;
#if defined( NEVERdEFINED )

        pso->writeF( tin0P , pbFile , cbFile ) ;
        pso->writeF( tin0P , (byteT*)&cbFile , sizeof cbFile ) ;

        etThread.boxGetShadowF( tin0P , pbFile , cbFile , T("///d/txt.zip") ) ; ___( pbFile ) ;
        ZE( countT , cbFile ) ;
        ZE( byteT* , pbFile ) ;

        //U::TO FIND A BUG
    {
    if( pso )
    sock.acceptF( tin0P , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ZE( socketC* , pso ) ;
{
//while( !ether )

sock.listenF( tin0P ) ;
countT idPort = sock.bindF( tin0P , 0x8324 ) ;
socketC sock( tin0P , ether , TAG( TAGiDnULL ) , 0 , flSOCKETc_NOsECRECY ) ;

TODO

/*1*/WAKEhIDE( "tool.simple.secure.ftp.server" )/*1*/
/**/
*/
simple secure ftp server
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

