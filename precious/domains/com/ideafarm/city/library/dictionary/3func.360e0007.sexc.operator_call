
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //}
    //    }
    //        pEtRock->traceF( tin0P , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
    //        OStEXTA(  ostoSay , pzMetaHead->postName ) ;
    //        OStEXTAK( ostoSay , "    " ) ;
    //        OStEXTC(  ostoSay , pbDataEnd , '0' ) ;
    //        OStEXTAK( ostoSay , "    " ) ;
    //        OStEXTC(  ostoSay , pbSlot , 0 ) ;
    //        OStEXTAK( ostoSay , "    " ) ;
    //        OStEXTC(  ostoSay , pbData , 0 ) ;
    //        OStEXTAK( ostoSay , "    " ) ;
    //        OStEXTC(  ostoSay , pzMetaHead->expSlots , 0 ) ;
    //        OStEXTAK( ostoSay , "    " ) ;
    //        OStEXTC(  ostoSay , pzMetaHead->expCbDrop , 0 ) ;
    //        OStEXTAK( ostoSay , "sexC::operator (): out of range [expCbDrop,expSlots,pbData,pbSlot,pbDataEnd]:    " ) ;
    //        OStEXT(   ostoSay , TUCK << 2 ) ;
    //    {
    //    if( pEtRock && pzMetaHead )
    //    etherC* pEtRock = &etherC::etRockIF( tin0P ) ;
    //
    //    _IO_
    //{
    //else
    }
        //}
        //    }
        //        pEtRock->traceF( tin0P , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
        //        OStEXTA(  ostoSay , pzMetaHead->postName ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , pbDataEnd , '0' ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , pbSlot , 0 ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , pbData , 0 ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , pzMetaHead->expSlots , 0 ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , pzMetaHead->expCbDrop , 0 ) ;
        //        OStEXTAK( ostoSay , "sexC::operator (): success! [expCbDrop,expSlots,pbData,pbSlot,pbDataEnd]:    " ) ;
        //        OStEXT(   ostoSay , TUCK << 2 ) ;
        //    {
        //    if( pEtRock && pzMetaHead )
        //    etherC* pEtRock = &etherC::etRockIF( tin0P ) ;
        //
        //    _IO_
        //{
        //if( F(((tin1S&)tin0P).flagsThreadMode4) & flTHREADmODE4_POOLdELtRYhARDERaNDtRACE )

        idLathNewDel = ifcIDsEXclATHnEWdEL_DEL ; // INTENTIONAL RACE

        ((tin1S&)tin0P).cPoolDropDt ++ ;

        if( !btrAM( pbzMetaBitsOwned , offSlot ) ) { BLAMMO ; } //BLAMMO IS USED RATHER THAN __() TO AVOID NEEDING TO CALL TINSL, FOR MAX SPEED ; 20210111@2031: THIS COMMENT IS OBSOLETE SINCE I NOW HAVE tin0PPPPPPPPPPPPPPPPPPPPPPPPP

        if( F(pzMetaHead->flagsCt) & fliSEXc_MAPPEDtOdISK ) thirdC::c_memsetIF( pbSlot , 1 << pzMetaHead->expCbDrop , 0 ) ; //TO SHRINK SIZE OF COMPRESSED DISK IMAGE; SANS tin0P USED FOR MAX SPEED

        if( offSlot < pzMetaHead->cSlotsAvoidLo ) { BLAMMO ; }

        }
            putNegAM( pDoomed->finger , FINGERnEG_dropNoteDeleted ) ;

            //thirdC::c_memsetIF( (byteT*)pDoomed , sizeof( dropNoteS ) , 0xdd ) ; //U:: TO FIND A BUG

            if( tin0P.idTypeTin == ifcIDtYPEtIN_123 ) pDoomed->idThreadDel = ((tin123S&)tin0P).monitor.idThread ;
            //thirdC::c_memsetIF( (byteT*)pDoomed , sizeof( dropNoteS ) , 0 ) ; //SANS tin0P USED FOR MAX SPEED; INTENTIONALLY COMMENTED OUT SO THAT SLOTS WHICH ARE NOT CONTINUALLY REUSED CAN BE VISIBLE (SUCH CODE IS CANDIDATE FOR MIGRATION FROM poolC TO jotC)

            inc02AM( pDoomed->idDelLath ) ;

            if( !pDoomed->idLineTagged || !pDoomed->idiFileTagged ) { BLAMMO ; }
            idiFileTaggedCopy = pDoomed->idiFileTagged ;
            idLineTaggedCopy = pDoomed->idLineTagged ;

            pDoomed->dropHeaderCopy = 0 ; // THIS IS TO PREVENT dropHeaderCopy FROM EVER CONTAINING A VALID dropHeader VALUE LEFT OVER FROM A PRIOR USE OF THE SLOT

            dropNoteS* pDoomed = pzMetaNote + offSlot ;
        {
        if( pzMetaNote )
        ZE( countT , idiFileTaggedCopy ) ;
        ZE( countT , idLineTaggedCopy ) ;

        pbDropP = 0 ;
        setSlotFingersAndDropHeaderF( tin0P , pbSlot , offSlot , cbGross , 0 ) ;

        //}
        //    }
        //        pEtRock->traceF( tin0P , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
        //        }
        //            OStEXTC(  ostoSay , pDropNote->idNewForTagLine , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idThreadDel , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idThreadNew , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->flagsMonitor , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idiFileTagged2 , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idLineTagged2 , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idiFileTagged , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idLineTagged , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idAdam , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->cbUsedReally , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->cbRequested , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idType , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idDelLath , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->idNewLath , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->dropHeaderCopy , '0' ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //            OStEXTC(  ostoSay , pDropNote->finger , 0 ) ;
        //            OStEXTAK( ostoSay , "    " ) ;
        //        {
        //        if( pDropNote )
        //        OStEXTC(  ostoSay , dropHeader , '0' ) ;
        //        OStEXTAK( ostoSay , "    " ) ;
        //        OStEXTC(  ostoSay , offSlot , '0' ) ;
        //        OStEXTA(  ostoSay , pDropNote ?  "sexC::operator (): trying harder is in effect and i will delete this drop [offSlot,dropHeader,dropNote]:    " : "sexC::operator (): trying harder is in effect and i will delete this drop [offSlot,dropHeader]:    " ) ;
        //        OStEXT( ostoSay , TUCK << 2 ) ;
        //        countT& dropHeader = *(countT*)pbSlot ;
        //
        //        if( pzMetaNote ) pDropNote = pzMetaNote + offSlot ;
        //        ZE( dropNoteS* , pDropNote ) ;
        //    {
        //    if( pEtRock )
        //    etherC* pEtRock = &etherC::etRockIF( tin0P ) ;
        //{
        //if( F(((tin1S&)tin0P).flagsThreadMode4) & flTHREADmODE4_POOLdELtRYhARDERaNDtRACE )

        }
            }
                BLAMMOiD( 0xaabbccdd ) ;
                //((tin1S&)tin0P).pc Utility[ 0xf ] = pbSlot - pbv ;
            {
            if( pbSlot != pbv )
            byteT* pbv = pbData + offSlot * cbGross ;
        {
        countT offSlot = ( pbSlot - pbData ) / cbGross ;
        countT cbGross = ( pzMetaHead->cbDropSeparator + pzMetaHead->cbDropHeader + pzMetaHead->cbDropAdjust ) + ( 1 << pzMetaHead->expCbDrop ) ;

        _IO_
    {
    if( pbData <= pbSlot && pbSlot < pbDataEnd )
    if( F(pzMetaHead->flagsCt) & fliSEXc_READoNLY ) { BLAMMO ; }

    byteT* pbSlot = !pbDropP ? 0 : pbDropP - ( pzMetaHead->cbDropSeparator + pzMetaHead->cbDropHeader ) ;

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
    _IO_
    SCOOP
{
/*1*/voidT sexC::operator ()( tin0S& tin0P , byteT*& pbDropP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

