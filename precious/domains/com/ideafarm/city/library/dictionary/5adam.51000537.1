
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.cioSetGetF( tin0P ) ;

sgnDone_tmWorkF.waitF( tin0P ) ;
stGotten << (byteT*)&info ;
cioGottenS info( tin0P ) ;
__Z( ether ) ;

}
    ++ s ; ether.osSleepF( tin0P , TOCK * 0x10 ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    CONoUTrAW( "1\r\n" ) ;

    //etThread.strokeF( tin0P , tRpt ) ;
    //LOGrAW( tRpt ) ;
    //scLeakageLag = scLeakage ;
    //tRpt += T("total extant drop leakage for this process: ")+TF1(scLeakage)+T(" delta: ")+TF1(scLeakage-scLeakageLag)+T("\r\n") ;
    //sCountT scLeakage = scDropNet-scDropNetWoth ;
    //if( !scDropNetWoth ) scDropNetWoth = scDropNet ;
    //sCountT scDropNet = etherC::ifc_cPoolDropNewG_IF( tin0P ) - etherC::ifc_cPoolDropDelG_IF( tin0P ) ;
    //static sCountT scLeakageLag ;
    //static sCountT scDropNetWoth ;

    //}
    //    if( scDelta > 0x1000 ) tRpt += TF1(processGlobal8I.source.idFileImmutableF(tin0P,off))+tb+TF1(pscPoolDropNewG[off])+tb+TF1(pscPoolDropDelG[off])+tb+TF1(pscPoolDropNewG[off]-pscPoolDropDelG[off])+tcr ;
    //    if( scDelta < 0 ) scDelta = - scDelta ;
    //    sCountT scDelta = pscPoolDropNewG[ off ] - pscPoolDropDelG[ off ] ;
    //{
    //for( countT off = 0 ; off <= cSourceFiles ; off ++ )  
    //tRpt += TF1(++idCycle)+tcr ;
    //TN( tRpt , "\r\n" USCORE79 "\r\n \r\n" ) ;
    //U::

    }
        }
            etThread( tin0P , psGift ) ;
            }
                CONoUTrAW( "2\r\n" ) ;
                etThread.cioPutF( tin0P , ether , c8ChannelReg , *psGift ) ;
                CONoUTrAW( "3\r\n" ) ;
                //etThread.strokeF( tin0P , T("dropping \"am ")+T(bMediator?"alive":"dead")+T("\" msg ")+TF1(++idCycle)+T("\r\n") ) ;
                *psGift << (countT)DDNUMB ;
                *psGift << (countT)( bMediator ? ifcOLDiDcMDrEGISTERmEDIATOR_AMaLIVE : ifcOLDiDcMDrEGISTERmEDIATOR_AMdEAD ) ;
            {
            if( psGift )
            etThread( tin0P , psGift , TAG( TAGiDnULL ) ) ;
            ZE( soulC* , psGift ) ;
        {
        if( bMediator || bMediatorLag )
        CONoUTrAW( "4\r\n" ) ;

        bMediator = cPinFiles > 2 ;
        bMediatorLag = bMediator ;
    
        }
            etThread( tin0P , psGift ) ;
            CONoUTrAW( "5\r\n" ) ;
            etThread.cioPutF( tin0P , ether , c8ChannelMenu , *psGift ) ;
            CONoUTrAW( "6\r\n" ) ;
            //etThread.strokeF( tin0P , T("dropping \"pin menu\" msg ")+TF1(++idCycle)+T(" listing  ")+TF1(cPinFiles)+T("\r\n") ) ;
            }
                CONoUTrAW( "7\r\n" ) ;
                etThread.delF( tin0P , pstt1m ) ;
                }
                    etThread.delF( tin0P , pczName ) ;
                    *psGift << pczName ;
                    }
                        etThread.delF( tin0P , pstt1w ) ;
                        }
                            pczName[ off ++ ] = 0 ;
                            FORsTRINGSiN3( pstt1w ) pczName[ off ++ ] = etThread.strDigitsToSCountF( tin0P , psttc3 , 0 , 1 ) ;
                            ZE( countT , off ) ;
                        {
                        if( pczName )
                        etThread.newF( tin0P , LF , pczName , 1 + cWords ) ; ___( pczName ) ;
            
                        FORsTRINGSiN2( pstt1w ) ++ cWords ;
                        ZE( countT , cWords ) ;
            
                        etThread.delF( tin0P , psttw ) ;
                        etThread.strWordsOldF( tin0P , pstt1w , psttw , sttq , td ) ; ___( pstt1w ) ;
                        ZE( strokeS* , pstt1w ) ;
                        etThread.strWordF( tin0P , psttw , psttc1 , sttq , sttd , - 1 ) ; ___( psttw ) ;
                        ZE( strokeS* , psttw ) ;
                    {
                    ZE( countT* , pczName ) ;
                {
                FORsTRINGSiN1( pstt1m )
                TN( td , "." ) ;
                strokeS sttd = S1C( '/' ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                CONoUTrAW( "8\r\n" ) ;
            
                cPinFiles = etThread.boxMenuF( tin0P , soul , tLike , 0 , 0x100 ) ; ___( pstt1m ) ;
                CONoUTrAW( "9\r\n" ) ;
                //U::WILL NOT WORK FOR LARGE NUMBER OF HOMES BECAUSE CAPACITY LIMIT IS HARDCODED HERE
            
                etThread.diskMakeDirIfNeededF( tin0P , tLike ) ;
            
                ZE( strokeS* , pstt1m ) ;
                TN( tLike , "///desk/" POSTfOLDERsECURITYkEYdEPOSITORY ) ; tLike += (idHomeDisk==1?T(""):T(" (Home ")+TF1(idHomeDisk)+T(")"))+T("/????????.????????.")+TF3(idbKEYtYPE_PIN,flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8)+tDot+TF3(idbKEYpINtYPE_SECRETsERVICE,flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8)+T(".*") ;
                TN( tDot , "." ) ;
                CONoUTrAW( "a\r\n" ) ;
            {
            if( psGift )
            etThread( tin0P , psGift , TAG( TAGiDnULL ) ) ;
            ZE( soulC* , psGift ) ;
            CONoUTrAW( "b\r\n" ) ;
        {
        if( !ether )
        ZE( countT , cPinFiles ) ;
        CONoUTrAW( "c\r\n" ) ;
    {
{
while( ( bMediatorLag || !ether ) && !etThread )
ZE( boolT , bMediator ) ;
ZE( boolT , bMediatorLag ) ;

//const countT        cSourceFiles = processGlobal8I.source.cFilesF( tin0P ) ;
//const sCountT* const pscPoolDropDelG = etherC::ifc_pscPoolDropDelG_IF( tin0P ) ;
//const sCountT* const pscPoolDropNewG = etherC::ifc_pscPoolDropNewG_IF( tin0P ) ;
//TN( tb , " " ) ;  
//TN( tcr , "\r\n" ) ;  
//U::

countT idHomeDisk = etThread.ifc_idHomeIdisk_IF() ;
//U::ENABLE IN PRODUCTION: etThread.ifcHireF( tin0P , T("ifcIDaDAM_SECRETsERVICE") , ifcIDaDAM_NULL , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO , nicNameC() ) ;
ZE( countT , idCycle ) ;
count8S c8ChannelMenu( ifcOLDiDcHANNEL1_BYfUNCTION , ifcOLDiDcHANNELfUNCTION_MEDIATORpINmENU , DDNUMB ) ;
count8S c8ChannelReg( ifcOLDiDcHANNEL1_BYfUNCTION , ifcOLDiDcHANNELfUNCTION_MEDIATORrEGISTRATION ) ;
etThread.cioSetGetF( tin0P , cioGetF ) ;
etThread.cioSetArgF( tin0P , cArg ) ;
etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_LAZIEST ) ;
homeS& home = homeS::homeIF() ;

etThread.osThreadF( tin0P , countTC() , tmWorkF , &sgnDone_tmWorkF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&stGotten , (countT)&idpLever , (countT)&swsPin ) ;
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

countT cArg = (countT)&stGotten ;

stackC stGotten( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO|flSTACKc_BLOB|flSTACKc_GIVEsIGNnEWpLATE , sizeof( cioGottenS ) ) ;
switchStackC swsPin( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , (byteT*)&idpLever , sizeof idpLever , flSTACKc_null , ifcSTACKtYPE_PTR_countT ) ;
portC idpLever ;

TODO

DONE( tmWorkF )
}
    }
        }
            //THREADmODE1rESTORE
            DEL( info.psGift ) ;
            etThread.delF( tin0P , info.pczChannel ) ;
            
            }
                }
                    }
                        swsPinP.ungrabF( tin0P ) ;
                        }
                            swsPinP.sinkF( tin0P , countTC() , pczName , flSTACKsINK_UNIQUE ) ;
                            //etThread.strokeF( tin0P , T("| ")+T(pczName)+T("\r\n") ) ;
                            *info.psGift >> pczName ;
                            ZE( countT* , pczName ) ;
                        {
                        while( (countT)*info.psGift )
                        swsPinP.purgeF( tin0P ) ;
                        idpLeverP = info.idptOrigin ;
                        swsPinP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                
                        //etThread.strokeF( tin0P , TF1(cIn)+T(": rec'd pin menu from ")+T(info.idptOrigin)+T("\r\n") ) ;
                        ++ cIn ;
                    {
                    if( info.pczChannel && info.pczChannel[ 0 ] == ifcOLDiDcHANNEL1_BYfUNCTION && info.pczChannel[ 1 ] == ifcOLDiDcHANNELfUNCTION_MEDIATORpINmENU && info.pczChannel[ 2 ] == DDNUMB )
                {
                else if( info.idGiftType == ifcOLDiDtYPEgIFT_APPLICATION )
                }
                    }
                        etThread( tin0P , psSecret ) ;
                        }
                            etThread( tin0P , psTo ) ;
                            }
                                }
                                    swsPinP.ungrabF( tin0P ) ;
                                    }
                                        while( !etThread && !swsPinP.third && ~hUp ) ;
                                        }
                                            idpLeverP = idptTo ;
                                            }
                                                break ;
                                                etThread( tin0P , psTo1 ) ;
                                                }
                                                    THREADmODE1rESTORE
                                                    etThread.cioPutSecretF( tin0P , ether , *psSecret , *psTo1 , info.pczChannel + 3 , pczName ) ;
                                                    THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
                                                    idptTo >> *psTo1 ;
                                                {
                                                if( psTo1 )
                                                etThread( tin0P , psTo1 , TAG( TAGiDnULL ) ) ;
                                                ZE( soulC* , psTo1 ) ;
                    
                                                THREADmODE1rESTORE
                                                etThread.strokeF( tin0P , TF1(idOut)+T(" t: ")+T(idptTo)+T(" ")+T(info.pczChannel+3)+T("\r\n") ) ;
                                                THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
                                                countT idOut = 1 + incv02AM( idOutLath ) ;
                                                static countT idOutLath ;
                                            {
                                            if( swsPinP( pczName ) )
                                            idpLeverP = idptMe ;
                                            countT*& pczName = *(countT**)&swsPinP.upF( tin0P , hUp ) ;
                                        {
                                        do
                                        handleC hUp( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                    {
                                    if( swsPinP )
                                    idpLeverP = idptTo ;
                                    swsPinP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                                    idptTo << *psTo ;
                                    portTimeC idptTo ;
                                {
                                while( (countT)*psTo )
                                psTo->shiftLeftF( tin0P , ifcIDtYPEsOULiTEM_soulC , pbsTo , 0 , flSOULiTEM_null , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
                            {
                            if( psTo )
                            etThread( tin0P , psTo , TAG( TAGiDnULL ) ) ;
                            ZE( soulC* , psTo ) ;
                    
                            byteT* pbsTo = info.psGift->pbFieldF( tin0P , idTypesTo , flagssTo , cbsTo , 6 ) ;
                            ZE( countT , cbsTo ) ;
                            ZE( flagsT , flagssTo ) ;
                            ZE( countT , idTypesTo ) ;
                            portTimeC& idptMe = homeS::homeIF().idptRelay ;
                        {
                        if( psSecret )
                
                        }
                            etThread.delF( tin0P , pbsSecret ) ;
                            else            etThread( tin0P , psSecret ) ;
                            if( pbsSecret ) psSecret->shiftLeftF( tin0P , ifcIDtYPEsOULiTEM_soulC , pbsSecret , 0 , flSOULiTEM_null , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
                            }
                                //else { CONoUTrAW( "could not decode the secret\r\n" ) ; }
                                //}
                                //    etThread.strokeF( tin0P , T("\fGOT THE SECRET:\r\n \"")+T(psttMsg)+T("\"\r\n") ) ;
                                //    strokeS* psttMsg = (strokeS*)soulC::pbFieldIF( tin0P , idTypeMsg , flagsMsg , cbMsg , 1 , pbsSecret) ;
                                //    ZE( countT , cbMsg ) ;
                                //    ZE( flagsT , flagsMsg ) ;
                                //    ZE( countT , idTypeMsg ) ;
                                //    CONoUTrAW( "decoded the secret\r\n" ) ;
                                //{
                                //if( pbsSecret )
                                //REMOVE THIS IN PRODUCTION
                    
                                }
                                    dad( tin0P , pbsSecret , cbsSecret , pc01Codes , cc01Codes , 1 ) ; ___( pbsSecret ) ;
                                    dadC dad( tin0P , etThread , TAG( TAGiDnULL ) ) ;
                                {
                    
                                cc01Codes /= sizeof( count01T ) ;
                                count01T* pc01Codes = (count01T*)soulC::pbFieldIF( tin0P , idTypeCodes , flagsCodes , cc01Codes , 1 , pbsPay ) ;
                                ZE( countT , cc01Codes ) ;
                                ZE( flagsT , flagsCodes ) ;
                                ZE( countT , idTypeCodes ) ;
                            {
                            ZE( countT , cbsSecret ) ;
                            ZE( byteT* , pbsSecret ) ;
                        {
                        if( pbsPay && psSecret )
                        etThread( tin0P , psSecret , TAG( TAGiDnULL ) ) ;
                        ZE( soulC* , psSecret ) ;
                
                        byteT* pbsPay = info.psGift->pbFieldF( tin0P , idTypesPay , flagssPay , cbsPay , 9 ) ;
                        ZE( countT , cbsPay ) ;
                        ZE( flagsT , flagssPay ) ;
                        ZE( countT , idTypesPay ) ;

                        //CONoUTrAW( T("GOT SOMETHING ON MEDIATION CHANNEL\r\n")+T(info.pczChannel)+T("\r\n") ) ;
                    {
                    if( info.pczChannel && info.pczChannel[ 0 ] == ifcOLDiDcHANNEL1_BYfUNCTION && info.pczChannel[ 1 ] == ifcOLDiDcHANNELfUNCTION_MEDIATED && info.pczChannel[ 2 ] == DDNUMB )
                {
                if( info.idGiftType == ifcOLDiDtYPEgIFT_MEDIATE )
                //THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING ) //U::SQUEEZE TO FIND WHERE I NEED THIS
                //U::MIGHT NOT BE NEEDED
            {
            if( !ether )

            stGottenP >> pbInfo ;
            byteT* pbInfo = (byteT*)&info ;
            cioGottenS info( tin0P ) ;
        {
        while( stGottenP )
        stGottenP.waitF( tin0P ) ;
    {
    while( !ether && !etThread )

    switchStackC& swsPinP   = *(switchStackC*)pTaskP->c3 ;
    portC&      idpLeverP =      *(portC*)pTaskP->c2 ;
    stackC&       stGottenP =       *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmWorkF )

}
    if( etherP && bQuitP && idGiftTypeP && pczChannelP && psGiftP && idptOriginP ) ;
    }
        }
            stGottenP << (byteT*)&info ;
            cioGottenS info( tin0P , idGiftTypeP , psGiftP , pczChannelP , idptOriginP ) ;
        {
        else
        if( stGottenP > 0x10 ) { CONoUTrAW( "OVERLOADED: new channel input ignored\r\n" ) ; }
    {
    if( !bQuitP )
    _IO_

    stackC& stGottenP = *(stackC*)cArgP ;
{
voidT cioGetF( tin0S& tin0P , etherC& etherP , const boolT& bQuitP , const countT idGiftTypeP , soulC*& psGiftP , countT*& pczChannelP , countT& cArgP , const portTimeC& idptOriginP )

}
    pczChannelP = 0 ;
    psGiftP = 0 ;
{
idptOrigin( idptOriginP )
pczChannel( pczChannelP ) ,
psGift( psGiftP ) ,
idGiftType( idGiftTypeP ) ,
cioGottenS::cioGottenS( tin0S& tin0P , const countT idGiftTypeP , soulC*& psGiftP , countT*& pczChannelP , const portTimeC& idptOriginP ) :

}
    thirdC::c_memsetIF( tin0P , (byteT*)this , sizeof *this ) ;
{
cioGottenS::cioGottenS( tin0S& tin0P )

;
}
    cioGottenS( tin0S& tin0P , const countT idGiftTypeP , soulC*& psGiftP , countT*& pczChannelP , const portTimeC& idptOriginP ) ;
    cioGottenS( tin0S& tin0P ) ;

    portTimeC idptOrigin ;
    countT*     pczChannel ;
    soulC*      psGift ;
    countT      idGiftType ;
{
struct cioGottenS

countT cIn ;

/*1*/WAKEhIDE( "ifcIDaDAM_SECRETsERVICE" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

