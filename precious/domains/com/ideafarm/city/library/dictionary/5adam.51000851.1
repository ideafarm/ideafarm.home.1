
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

THREADmODE2rESTORE
THREADmODE3rESTORE
THREADmODE4rESTORE

}
    etThread.traceF( tinP , T("after adjusting / -----------------------------------------------------------------------------") ) ;
    listC::chatterIF( tinP , pczRoot ) ;
    etThread.traceF( tinP , T("after adjusting / +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++") ) ;
    
    }
        }
            etThread.traceF( tinP , T("********        ********        ********        ********        [*pcIdTrial]:    ")+TF2(*pcIdTrial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

            idTrialv2 = *pcIdTrial += 0x11111111 ; //20240806@2227: DOODLE TO MAKE LOCATION OF DATA MORE OBVIOUS IN CHATTER TRACE
        
            countT*  pcIdTrial = vspIdTrialLath ;
            countVSP vspIdTrialLath = listC::countIF( tinP , globals , count2S( *pczfIdTrial ) ) ;
        {
        //if( home.idCellLath > 1 )
    
        recordC globals( tinP , count4S( LISTnAME_ROOT , LISTnAME_APPLICATION , LISTnAME_HOMErECORD ) ) ;
        _IO_
    {
    ZE( countT , idTrialv2 ) ;

    etThread.traceF( tinP , T("after adjusting / -----------------------------------------------------------------------------") ) ;
    listC::chatterIF( tinP , pczRoot ) ;
    etThread.traceF( tinP , T("after adjusting / +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++") ) ;
    
    }
        }
            etThread.traceF( tinP , T("********        ********        ********        ********        [*pcIdTrial]:    ")+TF2(*pcIdTrial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

            idTrialv1 = *pcIdTrial += 0x11111111 ; //20240806@2227: DOODLE TO MAKE LOCATION OF DATA MORE OBVIOUS IN CHATTER TRACE
        
            //tinP.pc Utility[ 0 ] -- ;
            countT*  pcIdTrial = vspIdTrialLath ;
            //tinP.pc Utility[ 0 ] ++ ;
            countVSP vspIdTrialLath = listC::countIF( tinP , globals , count2S( *pczfIdTrial ) ) ;
        {
        //if( home.idCellLath > 1 )
    
        recordC globals( tinP , count4S( LISTnAME_ROOT , LISTnAME_APPLICATION , LISTnAME_HOMErECORD ) ) ;
        _IO_
    {
    ZE( countT , idTrialv1 ) ;

    etThread.traceF( tinP , T("after defining  / -----------------------------------------------------------------------------") ) ;
    listC::chatterIF( tinP , pczRoot ) ;
    etThread.traceF( tinP , T("after defining  / +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++") ) ;
    
    listC::dictionaryReplaceOsTextIF( tinP , pczfIdTrial ) ;
    countT pczfIdTrial[] = { (countT)"idTrial" , 0 } ;

    etThread.traceF( tinP , T("before anything / -----------------------------------------------------------------------------") ) ;
    listC::chatterIF( tinP , pczRoot ) ;
    etThread.traceF( tinP , T("before anything / +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++") ) ;
    
    puseC puseIndex( tinP , ifcIDpOOL_HOMEtEMP ) ;
{
countT pczRoot[] = { LISTnAME_ROOT , 0 } ;

THREADmODE4oN( flTHREADmODE4_ALLOWwRITEABLEpOINTERgET )
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY       )
THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING   )   //20240806@2205: ADDED W/O ANALYSIS

//}
//    sgnDone.waitF( tinP ) ;
//    ether.osThreadAdamF( tinP , ifcIDaDAM_PREPARElISTS , 0 , flOStHREADaDAMf_null , &sgnDone ) ;
//    signC sgnDone( tinP , TAG( TAGiDnULL ) ) ;
//    _IO_
//{

etThread.traceF( tinP , T("[idCellLath]:  ")+TF2(home.idCellLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
homeS& home = homeS::homeIF() ;

TODO

/*1*/WAKEsHOWtEXT( "doodle.ipc" )/*1*/
/**/
*/
then hire the example simplest adam for selectC
hire me several times
the entry contains a "nickname" field that is chosen randomly from an array
i log my birth
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

