
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( psttOldCopyrightP ) ;
    ether.delF( tinBaseP , psttLikeShort ) ;
    ether.delF( tinBaseP , psttLikeLocal ) ;

    }
        ether.delF( tinBaseP , pba ) ;
        ether.boxPutF( tinBaseP , psttLikeLocal , pba , cba , cOpenTriesP ) ;

        }
            }
                ether.delF( tinBaseP , pc3b ) ;
                }
                    ether.delF( tinBaseP , postFinal ) ;
                    }
                        off += costFinal ;
                        ether.memCopyF( tinBaseP , pba + off , postFinal , costFinal ) ;
                    {
                    if( costFinal )

                    off += sizeof( countT ) ;
                    ether.memCopyF( tinBaseP , pba + off , (byteT*)&costFinal , sizeof costFinal ) ;

                    ether.delF( tinBaseP , psttName ) ;
                    off += cbn ;
                    ether.memCopyF( tinBaseP , pba + off , (byteT*)psttName , cbn ) ;
                    countT cbn = sizeof( strokeS ) * ( CSpREFIX + psttName->idAdam ) ;

                    osTextT* postFinal  = (osTextT*)pc3b->c3 ;
                    countT   costFinal  =           pc3b->c2 ;
                    strokeS* psttName   = (strokeS*)pc3b->c1 ;
                {
                if( pc3b && pc3b->c1 && pc3b->c3 )
                stOneFile >> pc3b ;
                ZE( count3S* , pc3b ) ;
            {
            while( stOneFile )
            countT off = sizeof( countT ) ;
            *(countT*)pba = ifcIDfILEtYPE_PACKED ;
        {
        if( pba )

        ether.newF( tinBaseP , LF , pba , cba ) ; ___( pba ) ;
        ZE( byteT* , pba ) ;

        }
            while( ~handle ) ;
            }
                else                               __1
                if( pc3b && pc3b->c1 && pc3b->c3 ) cba += sizeof( strokeS ) * ( CSpREFIX + ((strokeS*)pc3b->c1)->idAdam ) + sizeof( countT ) + pc3b->c2 ;
                count3S* pc3b = (count3S*)stOneFile.downF( tinBaseP , handle ) ;
            {
            do
            handleC handle( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        {
        countT cba = sizeof( countT ) ;
    {
    if( bOneFileP && stOneFile )

    __( STOP ) ;
    }
        }
            else                                          { pHtmlDownFrom = pHtml ; pHtml = pHtml->pD ; }
            else if( pHtml->pL )                          { pHtmlDownFrom = pHtml ; pHtml = pHtml->pL ; }
            if( pHtml->pR && pHtml->pR != pHtmlDownFrom ) { fDown = 0 ;             pHtml = pHtml->pR ; }    
        {
        else
        }
            }
                else            pHtml = pHtml->pD ;
                if( pHtml->pL ) pHtml = pHtml->pL ;
                pHtmlDownFrom = pHtml ;
                fDown = 1 ;
            {
            else
            else if( pHtml->pR ) pHtml = pHtml->pR ;
                 if( pHtml->pU ) pHtml = pHtml->pU ;
        {
        if( !fDown )

        }
            }
                }
                    }
                        stOneFile << pc3b ;
                        pc3b->c3 = (countT)pbFinal ;
                        pc3b->c2 = cbaFinal ;
                        pc3b->c1 = (countT)psttName ;
                        ether.strMakeF( tinBaseP , LF , psttName , tFile ) ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                    {
                    if( pc3b )
                    ether.newF( tinBaseP , LF , pc3b ) ; ___( pc3b ) ;
                    ZE( count3S* , pc3b ) ;
                {
                else
                }
                    ether.delF( tinBaseP , pbFinal ) ;
                    ether.boxPutF( tinBaseP , tFile , pbFinal , cbaFinal , cOpenTriesP ) ;
                {
                if( !bOneFileP )
                textC tFile = T(psttLikeLocal) + ( pHtml->psttName->idAdam ? T(".")+T(pHtml->psttName) : T("") ) + ( bOneFileP ? T("") : T(".0.html") ) ;

                }
                    __( offo - cbaFinal ) ;
                    *(countT*)( pbFinal + offo ) =  tBody.csF( tinBaseP ) ; offo += sizeof( countT ) ; ether.memCopyF( tinBaseP , pbFinal + offo , tBody  ,  tBody.csF( tinBaseP ) ) ; offo +=  tBody.csF( tinBaseP ) ; pbFinal[ offo ++ ] = 0 ;
                    *(countT*)( pbFinal + offo ) = tTitle.csF( tinBaseP ) ; offo += sizeof( countT ) ; ether.memCopyF( tinBaseP , pbFinal + offo , tTitle , tTitle.csF( tinBaseP ) ) ; offo += tTitle.csF( tinBaseP ) ; pbFinal[ offo ++ ] = 0 ;
                    *(countT*)( pbFinal + offo ) =   tDad.csF( tinBaseP ) ; offo += sizeof( countT ) ; ether.memCopyF( tinBaseP , pbFinal + offo , tDad   ,   tDad.csF( tinBaseP ) ) ; offo +=   tDad.csF( tinBaseP ) ; pbFinal[ offo ++ ] = 0 ;
                    ZE( countT , offo ) ;
                {
                if( pbFinal )
                ether.newF( tinBaseP , LF , pbFinal , cbaFinal ) ; ___( pbFinal ) ;
                countT cbaFinal = 3 * ( sizeof( countT ) + 1 ) + tDad.csF( tinBaseP ) + tTitle.csF( tinBaseP ) + tBody.csF( tinBaseP ) ;
                ZE( byteT* , pbFinal ) ;

                // postBody
                // costBody
                // postTitle
                // costTitle
                // postDad
                // costDad
                //IMAGE LAYOUT

                ether.delF( tinBaseP , psttDad ) ;
                ether.delF( tinBaseP , psttStack ) ;
                TN( tBody , "" ) ; tBody = T(psttStack) ;
                TN( tTitle , pHtml->postIdea ) ;
                TN( tDad  , "" ) ; tDad = T(psttDad) ;

                //OLD: ether.delF( tinBaseP , psttFinal ) ;
                //OLD: countT costFinal = ether.strMakeF( tinBaseP , LF , postFinal , psttFinal ) ; ___( postFinal ) ;
                //OLD: ZE( osTextT* , postFinal ) ;

                //OLD: }
                //OLD:     ether.delF( tinBaseP , psttd ) ;
                //OLD:     ether.strSubstringF( tinBaseP , psttFinal , idf , idl , psttd ) ; ___( psttFinal ) ;
                //OLD:     ZE( countT , idl ) ;
                //OLD:     countT idf = ether.strIdF( tinBaseP , T("<!--") , psttd ) ;
                //OLD:     strokeS* psttd = psttFinal ; psttFinal = 0 ;
                //OLD:     strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                //OLD: {
                //OLD: if( !bOneFileP )

                //OLD: }
                //OLD:     ether.strMakeF( tinBaseP , LF , psttFinal , TEXThTTPhEADER(tHtml.csF(tinBaseP)) + tHtml ) ; ___( psttFinal ) ;
                //OLD:     TN( tHtml , "" ) ; tHtml = TEXThTMLhEADER( tTitle ) + TEXThTMLbODYpREFIX + tBody + TEXThTMLbODYsUFFIX ;
                //OLD: 
                //OLD:     TN( tTitle , pHtml->postIdea ) ;
                //OLD:     TN( tBody , "" ) ; tBody = T(psttStack) ;
                //OLD: {
                //OLD: ZE( strokeS* , psttFinal ) ;

                ether.strReverseF( tinBaseP , psttStack , 0 , T("\r\n") ) ; ___( psttStack ) ;
                if( !pHtml->psttName->idAdam ) { ether.strMakeF( tinBaseP , LF , pHtml->postIdea , psttTitleP ) ; ___( pHtml->postIdea ) ; }

                }
                    }
                        ether.strSubstringF( tinBaseP , psttDad , idf , idd , pHtml->psttName ) ; ___( psttDad ) ;
                        countT idf = 1 ;
                        idd -- ;
                        __( idd == 1 ) ;
                    {
                    if( idd )
                    countT idd = ether.strIdF( tinBaseP , countTC( 1 ) , sttq , S1C('.') , pHtml->psttName , 0 , - 1 ) ;

                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                {
                if( pHtml->psttName && pHtml->psttName->idAdam )
                ZE( strokeS* , psttDad ) ;

                }
                    pHtmlKid = pHtmlKid->pR ;
                    }
                        else                     { ether.strFuseF( tinBaseP , psttStack ,                                                                                       T(pHtmlKid->postIdea)           ) ; ___( psttStack ) ; }
                        if( pHtmlKid->psttName ) { ether.strFuseF( tinBaseP , psttStack , T("<A HREF=\"")+T(psttLikeShort)+T(".")+T(pHtmlKid->psttName)+T(/*".html"*/ ".0.html" "\">")+T(pHtmlKid->postIdea)+T("</A>") ) ; ___( psttStack ) ; }
                        //if( pHtmlKid->psttName ) { ether.strFuseF( tinBaseP , psttStack , T("<A HREF=\"http://")+T(psttLikeShort)+T(".")+T(pHtmlKid->psttName)+T(/*".html"*/ ".0" "\">")+T(pHtmlKid->postIdea)+T("</A>") ) ; ___( psttStack ) ; }
                        else              ether.strFuseF( tinBaseP , psttStack , T("\r\n") ) ; ___( psttStack ) ;
                        if( !fPrevious2 ) fPrevious2 = 1 ;
                    {
                    if( pHtmlKid->postIdea )
                {
                while( !ether && pHtmlKid )
                __Z( pHtmlKid ) ;
                pHtmlKid = pHtml->pU ;
                ZE( htmlS* , pHtmlKid ) ;
                ether.strMakeF( tinBaseP , LF , psttStack , T("") , cSonsP * 0x1000 ) ;
                ZE( strokeS* , psttStack ) ;
                ZE( boolT , fPrevious2 ) ;
                ZE( countT , idSon ) ;
                //etherC::ifcSayIF( T("writeHtmlFilesF/file/\"")+T(pHtml->psttName)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;
            {
            if( pHtml->psttName )
        {
        if( !fDown )
    {
    while( !STOP && pHtml )
    stackC stOneFile( tinBaseP , ether , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_count3S  ) ;
    pHtml = pHtmlRootP ;
    ZE( boolT , fDown ) ;
    ZE( htmlS* , pHtmlDownFrom ) ;
    ZE( htmlS* , pHtml ) ;
    ZE( countT , idLathI ) ;
    //etherC::ifcSayIF( T("writeHtmlFilesF/about to write each html file") , flSAY_APPEND | flSAY_LOG ) ;
    TN( tLog , "///d/ideafarm.log.html" ) ;

    ether.strReplaceF( tinBaseP , psttLikeShort , psttLikeP , T("www.ideafarm.com///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/") , T("") ) ;
    //ether.strReplaceF( tinBaseP , psttLikeShort , psttLikeP , T("www.ideafarm.com///ideafarm/ephemeral/domains/com/ideafarm/gen/lake/") , T("www.ideafarm.com/") ) ;
    ZE( strokeS* , psttLikeShort ) ;

    }
        ether.strSubstringF( tinBaseP , psttLikeLocal , ids , idl , psttLikeP ) ; ___( psttLikeLocal ) ;
        ZE( countT , idl ) ;
        __( ids == psttLikeP->idAdam ) ;
        __Z( ids ) ;
        countT ids = ether.strIdF( tinBaseP , S1C('/') , psttLikeP ) ;
    {
    else
    if( psttLikeLocalP ) { ether.strMakeF( tinBaseP , LF , psttLikeLocal , psttLikeLocalP ) ; ___( psttLikeLocal ) ; }
    ZE( strokeS* , psttLikeLocal ) ;

    if( ether ) return ;
    __Z( pHtmlRootP ) ;
    __Z( psttTitleP ) ;
    __Z( psttLikeP ) ;
    if( ether ) return ;
{
/*1*/voidT writeHtmlFilesF( tinBaseS& tinBaseP , etherC& ether , const boolT bOneFileP , const strokeS* const psttLikeLocalP , const strokeS* const psttLikeP , const strokeS* const psttTitleP , const strokeS* const psttOldCopyrightP , htmlS*& pHtmlRootP , const countT cSonsP , countT cOpenTriesP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

