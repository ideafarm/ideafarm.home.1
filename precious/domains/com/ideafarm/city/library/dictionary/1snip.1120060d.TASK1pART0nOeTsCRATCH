
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


                    _IO_                                                                                                                                                                                                                                                                        \
                    if( ((tin1S&  )tin0P).idPhase1 < ifcIDpHASEtHREAD_WORKING ) ((tin1S&  )tin0P).idPhase1 = ifcIDpHASEtHREAD_WORKING ;                                                                                                                                                         \
                    /*(countT&)_tlsBlobStackTop = espAM() ;                      */                                                                                                                                                                                                             \
                    /*tlsBlobC _tlsBlobStackTop( tin0P , "appStackTop" , "tin" ) ;*/                                                                                                                                                                                                            \
                    TELL( "TASK1pART0:   entering application code" )                                                                                                                                                                                                                           \
                                                                                                                                                                                                                                                                                                \
                    }                                                                                                                                                                                                                                                                           \
                        etThread.boxPutF( tin0P , psttThreadFile , "T" ) ;                                                                                                                                                                                                                      \
                                                                                                                                                                                                                                                                                                \
                        TN( tDot , "." ) ;                                                                                                                                                                                                                                                      \
                    {                                                                                                                                                                                                                                                                           \
                    if( F(thirdC::third_flagsModeAdam1I_IF(tin0P)) & flADAMmODE1_SEEtHREADSaSfILES )                                                                                                                                                                                            \
                    etThread.osTimeNowF( tin0P , ((tin1S&)tin0P).time1 , ((tin1S&  )tin0P).time2 ) ;                                                                                                                                                                                            \
                                                                                                                                                                                                                                                                                                \
                {                                                                                                                                                                                                                                                                               \
                                                                                                                                                                                                                                                                                                \
                /*tin0P.pSgnUtility = &_sgnUtility ;*/                                                                                                                                                                                                                                          \
                /*signC _sgnUtility( tin0P , TAG( TAGiDnULL ) ) ;*/                                                                                                                                                                                                                             \
                                                                                                                                                                                                                                                                                                \
                  ((tin1S&  )tin0P).pEther = &etThread ;                                                                                                                                                                                                                                        \
                TELL( "TASK1pART0: final setup" )                                                                                                                                                                                                                                               \
                                                                                                                                                                                                                                                                                                \
                                                                                                                                                                                                                                                                                                \
                                                                                                                                                                                                                                                                                                \
                  ((tin1S&  )tin0P).pScoopEtThread = new( 0 , tin0P , pbScoop , sizeof pbScoop ) scoopC( tin0P , LF , etThread ) ; ___( ((tin1S&  )tin0P).pScoopEtThread  ) ;                                                                                                                   \
                  byteT pbScoop[ sizeof( scoopC ) ] ;                                                                                                                                                                                                                                           \
                  etherC& etThread  = *pEtThread ;                                                                                                                                                                                                                                              \
            {                                                                                                                                                                                                                                                                                   \
              if( pEtThread /*&& ((tin1S&  )tin0P).pEtScratch*/ )                                                                                                                                                                                                                               \
            ZE( strokeS* , psttThreadFile ) ;                                                                                                                                                                                                                                                   \
            TELL( "TASK1pART0:   after newing etThread" )                                                                                                                                                                                                                                       \
            /*TESTsCRATCH ;*/                                                                                                                                                                                                                                                                   \
            /*((tin1S&  )tin0P).pEtScratch   = new( 0 , tin0P , pbEther2 , sizeof pbEther2 ) etherC( tin0P , TAG( TAGiDnULL ) , flTHIRDmODE_IMPOTENCEeXPECTED ) ;*/                                                                                                                             \
              etherC* pEtThread = new( 0 , tin0P , pbEther1 , sizeof pbEther1 ) etherC( tin0P , TAG( TAGiDnULL ) , flTHIRDmODE_TINoWNER | flagsThirdModeP ) ;                                                                                                                                   \
            /*byteT pbEther2[ sizeof( etherC ) ] ;*/                                                                                                                                                                                                                                            \
              byteT pbEther1[ sizeof( etherC ) ] ;                                                                                                                                                                                                                                              \
            TELL( "TASK1pART0:   newing etThread" )                                                                                                                                                                                                                                             \
                                                                                                                                                                                                                                                                                                \
                                                                                                                                                                                                                                                                                                \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_SUPPRESStELLmONITOR     )         ((tin1S&  )tin0P).flagsThreadMode2 |= flTHREADmODE2_SUPPRESStELLmONITOR     ;                                                                                                      \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_YELL                    )         ((tin1S&  )tin0P).flagsThreadMode2 |= flTHREADmODE2_YELL                    ;                                                                                                      \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_WATCHfORaSYNCHiMPOTENCE )         ((tin1S&  )tin0P).flagsThreadMode2 |= flTHREADmODE2_WATCHfORaSYNCHiMPOTENCE ;                                                                                                      \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_QUIETiMPOTENCE          )         ((tin1S&  )tin0P).flagsThreadMode2 |= flTHREADmODE2_QUIETiMPOTENCE          ;                                                                                                      \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_SHOWpROGRESS            )         ((tin1S&  )tin0P).flagsThreadMode2 |= flTHREADmODE2_SHOWpROGRESS            ;                                                                                                      \
            TELL( "TASK1pART0:   setting flagsThreadMode2" )                                                                                                                                                                                                                                    \
            /*CODEsYNC: 00100df 0010055*/                                                                                                                                                                                                                                                       \
                                                                                                                                                                                                                                                                                                \
            /*etRock.traceF( tin0P , T("TASK1pART0 [osTid]: ")+TF4(((tin1S&  )tin0P).osTid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) , flTRACE_FORCEnOsILENCE ) ;*/                                                                                                      \
                                                                                                                                                                                                                                                                                                \
            ((tin1S&  )tin0P).pcQuit = &(const countT&)ether ;                                                                                                                                                                                                                                  \
                                                                                                                                                                                                                                                                                                \
            ((tin1S&  )tin0P).idlTask  = ifcLINE ;                                                                                                                                                                                                                                              \
            ((tin1S&  )tin0P).idiTask  = DDNUMB ;                                                                                                                                                                                                                                               \
            TELL( "TASK1pART0:   setting miscellaneous fields in tin0P" )                                                                                                                                                                                                                       \
            etherC& etRock = etherC::etRockIF( tin0P ) ;                                                                                                                                                                                                                                        \
            etherC& ether = etherC::etPrimeIF( tin0P ) ;                                                                                                                                                                                                                                        \
            thirdC::osTraceWrongNodeIF( tin0P , (byteT*)taskFP##_workF , #taskFP , "_workF" ) ;                                                                                                                                                                                                 \
            TINSL                                                                                                                                                                                                                                                                               \
        {                                                                                                                                                                                                                                                                                       \
        if( bTinOk )                                                                                                                                                                                                                                                                            \
        TELL( "TASK1pART0:   after newing either a tin1S   in the working poolOld" )                                                                                                                                                                                                            \
        /* AFTER THIS LINE, DO NOT CONSTRUCT ANY OBJECTS THAT HAVE DESTRUCTORS (BECAUSE DECREMENTING cAllKidThreadsI cAllOrphanThreadsI MUST BE THE VERY LAST THING THAT THIS THREAD DOES) */                                                                                                   \
                                                                                                                                                                                                                                                                                                \
        }                                                                                                                                                                                                                                                                                       \
            }                                                                                                                                                                                                                                                                                   \
                ___( pTin ) ;                                                                                                                                                                                                                                                                   \
                TINSL                                                                                                                                                                                                                                                                           \
                /*pTinF() = pTin ;*/                                                                                                                                                                                                                                                            \
                bTinOk = 1 ;                                                                                                                                                                                                                                                                    \
            {                                                                                                                                                                                                                                                                                   \
            if( pTin )                                                                                                                                                                                                                                                                          \
            tin0S* pTin = new( 0 , tin0P , LF ) tin1S(   tin0P , TAG( TAGiDnULL ) , ebpAM() , pTaskP->idThread , pTin0Dad           , F(pTaskP->flags) & flTHREADlAUNCH_INHERITjOTrEGISTRATIONS ? flTINs_INHERITjOTrEGISTRATIONS : flTINs_null , ifcIDtINnAMED_tinInPool ) ;                    \
            TELL( "TASK1pART0:   newing a tin1S   in the working poolOld" )                                                                                                                                                                                                                     \
            tin0S* const pTin0Dad = F(pTaskP->flags) & flTHREADlAUNCH_ORPHAN ? 0 : pTaskP->pTin0Dad ;                                                                                                                                                                                           \
        {                                                                                                                                                                                                                                                                                       \
        else                                                                                                                                                                                                                                                                                    \
        }                                                                                                                                                                                                                                                                                       \
            THREADmODE5oN( flTHREADmODE5_TINiSnOTiNpOOL ) ;                                                                                                                                                                                                                                     \
            bTinOk = 1 ;                                                                                                                                                                                                                                                                        \
        {                                                                                                                                                                                                                                                                                       \
        if( F(pTaskP->flags) & flTHREADlAUNCH_NOtINiNpOOL )                     /*20240919@1534: I DON'T REMEMBER WHAT THE BENEFIT IS OF CT'ING tin1S   IN POOL*/                                                                                                                               \
        ZE( boolT , bTinOk ) ;                                                                                                                                                                                                                                                                  \
                                                                                                                                                                                                                                                                                                \
        }                                                                                                                                                                                                                                                                                       \
            }                                                                                                                                                                                                                                                                                   \
                ++ s ; thirdC::dosSleepIF( tin0P , TOCK >> 3 ) ;                                                                                                                                                                                                                                \
            {                                                                                                                                                                                                                                                                                   \
            while( *pTaskP->pcAlive )                                                                                                                                                                                                                                                           \
            inc02AM( *pTaskP->pcAlive ) ;                                                                                                                                                                                                                                                       \
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;                                                                                                                                                                                                                                              \
        {                                                                                                                                                                                                                                                                                       \
        if( pTaskP->pcAlive )   /* ALLOWS THE LAUNCHING THREAD TO LAUNCH MANY THREADS, WAIT FOR ALL THREAD STACKS TO BE ALLOCATED, AND THEN SAY "GO" TO HAVE THEM ALL PROCEED, IN ORDER TO REDUCE FRAGMENTATION OF ADDRESS SPACE */                                                             \
                                                                                                                                                                                                                                                                                                \
        thirdC::osTraceWrongNodeIF( tin0P , (byteT*)&pTaskP , #taskFP , "_workF: pTaskP" ) ;                                                                                                                                                                                                    \
        thirdC::osTraceWrongNodeIF( tin0P , (byteT*)argP , #taskFP , "_workF: argP"      ) ;                                                                                                                                                                                                    \
        taskS* pTaskP = (taskS*)argP ;                                                                                                                                                                                                                                                          \
        TELL( "TASK1pART0:   workF+" )                                                                                                                                                                                                                                                          \
                                                                                                                                                                                                                                                                                                \
        /*OStEXTcLEAR( _ostoTmp )                                                                                                               */                                                                                                                                              \
        /*osTextC _ostRangerTag( _ostoTmp.costF() + 1 , _ostoTmp , _tlsBlobStatRangerTag , _tlsBlobStatRangerTag.cbF() ) ;                      */                                                                                                                                              \
        /*tlsBlobC _tlsBlobStatRangerTag( tin0P , "rangerTag" , "sys" , 2 * sizeof( countT ) + _ostoTmp.costF() + 1 , ifcIDtYPEtLSbLOBc_FOOT ) ;*/                                                                                                                                              \
        /*tlsAllocStackExp_8_C tlsForMe( tin0P ) ;                                                                                              */                                                                                                                                              \
                                                                                                                                                                                                                                                                                                \
        /*OStEXTAK( _ostoTmp , "." )                                                                                                            */                                                                                                                                              \
                                                                                                                                                                                                                                                                                                \
        /*OStEXTAK( _ostoTmp , "RangerTag:threadStack." )                                                                                       */                                                                                                                                              \
        /*OStEXTAK( _ostoTmp , "!ifc" )                                                                                                         */                                                                                                                                              \
        /*OStEXT(   _ostoTmp , 0x80 )                                                                                                           */                                                                                                                                              \
                                                                                                                                                                                                                                                                                                \
        _IO_ TELLsYSlIFInAME( #taskFP )                                                                                                                                                                                                                                                         \
                                                                                                                                                                                                                                                                                                \
        TINSL                                                                                                                                                                                                                                                                                   \
    {                                                                                                                                                                                                                                                                                           \
    countT taskFP##_workF( countT argP )                                                                                                                                                                                                                                                        \
                                                                                                                                                                                                                                                                                                \
#define TASK1pART0nOeTsCRATCH(taskFP,flagsThirdModeP)                                                                                                                                                                                                                                           \

//CODEsYNC: 0010055 0010056

/*1*//*TASK1pART0(taskFP,flagsThirdModeP)*//*1*/
/**/
*/
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.11000023.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
