
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
        FRIENDS_tin9S
    private :
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.tin9S.pbF!||
        byteT* pbF( countT idP = 1 ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36024016.tins.tlsTraceF!||
        voidT tlsTraceF( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36024015.tins.tlsCheckF!||
        voidT tlsCheckF( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.tin9S.tlsDelF!||
        voidT tlsDelF( const countT idLineP , const countT idiFileP , byteT*& pbMeP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.tin9S.tlsNewF!||
        byteT* tlsNewF( const countT idLineP , const countT idiFileP , const countT cbP , const osTextT* const postNameP = 0 , const osTextT* const postGroupP = 0 ) ;
        /*tls*/

        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.36024014.tins.flushPendingInOutFrameTelemetryIfF!||
        voidT flushPendingInOutFrameTelemetryIfF( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.tin9S.tell_tmWatchF_toIgnoreMeF!||
        voidT tell_tmWatchF_toIgnoreMeF( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.tin9S.deregisterIfF!||
        voidT deregisterIfF( tin0S& tin0P ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.tin9S.walkF!||
        voidT walkF( tin0S& tinBaseRootP , tinWalkerFT tinWalkerFP , countT& cArgP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.tin9S.rootF!||
        tin9S& rootF( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.tin9S.get_pIdProgressNest_F!||
        voidT get_pIdProgressNest_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.tin9S.get_pEIPInNest_F!||
        voidT get_pEIPInNest_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.tin9S.get_pIdInNest_F!||
        voidT get_pIdInNest_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.tin9S.get_pFlagsThreadLevelMode_F!||
        voidT get_pFlagsThreadLevelMode_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.tin9S.get_pLFstep_F!||
        voidT get_pLFstep_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.tin9S.get_pLFnest_F!||
        voidT get_pLFnest_F( tin0S& tin0P , countT* const pcP , const countT ccP ) ;
        inline flagsT flagsF( voidT ) { return flags ; }
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.tin9S.levelModeF!||
        voidT levelModeF( const flagsT flagsModeP = flTHREADlEVELmODE_null , sCountT cLevelsP = 0 , const sCountT offRelLevelP = 0 ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.tin9S.zePointerFieldsF!||
        voidT zePointerFieldsF( tin0S& tin0P ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.tin9S.strFuseF!||
        voidT strFuseF( tin0S& tin0P , etherC& etherP , strokeS*& psttP , const countT csttExtraP = 0 , const flagsT flagsInclude1P = flTINrPT1_null , const flagsT flagsInclude2P = flTINrPT2_null , const flagsT flagsExclude1P = flTINrPT1_null , const flagsT flagsExclude2P = flTINrPT2_null , countT idFormatP = 0 , const countT cIndentP = 0 ) ;
        /* commands */

        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.tin9S.tin9S!||
        tin9S( tin0S& tinBaseNormalSelfOrElderP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT ebpP , const countT idThreadP , tin0S* const pTinBaseDadP = 0 , const osTextT* const postThreadNameP = 0 , const flagsT flagsP = flTINs_null , const countT idTinNamedP = 0 , byteT* const pbTlsP = 0 , const countT cbTlsP = 0 ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.tin9S.dt_tin9S!||
        ~tin9S( voidT ) ;
        //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.tin9S.NEWdELcLASSppOOLoLD!||
        NEWdELcLASSpROTOS
        /* birth , death */


        tinArgS                 ta ;
        ranUniC                 ranUni ;
        bookMarkS               pBookMark[        CbOOKmARK               ] ;                // USED BY pageC TO REGISTER A PENDING SMART POINTER ; INCREASE THE NUMBER
        countT                  pcGrabitRecurse[  CmAXgRABITrECURSEiNtINs ] ;
        countT                  pcGrabitOsTid[    CmAXgRABITrECURSEiNtINs ] ;
        const byteT*            ppbGrabitRecurse[ CmAXgRABITrECURSEiNtINs ] ;
        osTextT                 postThreadName[   COSTmAXtHREADnAME   + 1 ] ;
        osTextT                 postTellIf[       COSTmAXtELL         + 1 ] ;
        osTextT                 postTellWait[     COSTmAXtELL         + 1 ] ;
        osTextT                 postTell[         COSTmAXtELL         + 1 ] ;

        countT                  pPanLifiRecurseGrabbedLevel[ ( 1 + OFFgRABBEDmAX     ) * 5  ] ; // [pandle,idLineGrab,idiFileGrab,cRecurse,idGrabLevel]  (A PANDLE IS A POINTER THAT IS BEING USED AS A HANDLE)
        countT                  pIdProgressNest[               1 + OFFsLOTtINnESTmAX        ] ;
        countT                  pEIPInNest[                    1 + OFFsLOTtINnESTmAX        ] ;
        countT                  pIdInNest[                     1 + OFFsLOTtINnESTmAX        ] ;
        countT                  pLFstep[                     ( 1 + OFFsLOTtINsTEPmAX ) << 1 ] ;
        flagsT                  pFlagsThreadLevelMode[         1 + OFFsLOTtINnESTmAX        ] ;                                 //CS:CODEsYNC: 003004f 003002a
        count04T                pcUtility04[ 4 ] ;
        countT                  pcUtility[ CCuTILITY ] ;
        jotC*                   ppJot[ CsLOTSjOTrEGISTRY ] ;        /*J*/      // THIS IS HERE SO THAT flTHREADlAUNCH_INHERITjOTrEGISTRATIONS CAN BE SUPPORTED

// =================================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// ======== 3 ======================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// =================================================================================================================================================================================================================================================================================================

        zapC                    zap_pPanLifiRecurseGrabbedLevel_ ;
        strokeModeS             strokeMode ;
        tinTallyS               tally ;
        count4S                 c4Tell ;
        monitorS                monitor ;          // flagsThreadMode1 IS IN HERE

        timeS                   timeTraceLath ;
        timeS                   timeTraceWoth ;
        measure04T              brcm04Raw ;
        count04T                cTime2Or5Lath ;
        count04T                cCpuCycles2Or5Lath ;
        count04T                cTimeWriteInOutTelemetry ;
        count04T                cCpuCyclesWriteInOutTelemetry ;

// =================================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// ======== 2 ======================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// =================================================================================================================================================================================================================================================================================================

        tlsHeaderS*             pTlsHeader ;                            //U:: REMOVE IN PRODUCTION ; THIS IS TO FIND A BUG
        countT                  cOsHandles ;                            // TALLY OF BASE O.S. HANDLES OPENED AND CLOSED BY THIS THREAD, ACCORDING TO THE handleC MEMBER FUNCTIONS
        countT                  cSpins4 ;
        countT                  cSpins3 ;
        countT                  cSpins2 ;
        countT                  cSpins1 ;
        boolT                   bSuppressInOutTrace ;                   // INCREMENTED WHEN CALL trace WITHIN inOutFrameC::*inOutFrameC
        byteT*                  pbRecursiveParameters ;                 // PROTOCOL: (1) CODE MUST VERIFY THAT THIS IS NULL BEFORE SETTING IT.  (2) THE CODE THAT SETS THIS MUST ALSO RESET IT SO THAT OTHER CODE CAN USE IT.  USE THIS TO PASS PARAMETERS RECURSIVELY TO AVOID USING THE THREAD STACK
        sexC*                   pSexLifoConstructing ;                  // USED BY sexC TO DETECT RECURSIVE CYCLING DURING CT
        barryC*                 pBarryUtility ;                         // NOT REFERENCED BY tin9S OR BY IPDOS SYSTEM CODE ; AVAILABLE FOR USE BY APPLICATION CODE
        countT                  cPoolDropDt ;
        countT                  cPoolDropCt ;
        countT                  valueExpectedByInOut ;
        countT*                 pcWatchedByInOut ;
        flagsT                  flagsTrace_soulC ; //FLAGS MUST INCLUDE flTRACEsOULc_ON AND MUST NOT SPECIFY flTRACEsOULc_PURGE
        countT                  cArmTrace_soulC ; //APP CODE CAN SET THIS: 0:DISARMED; -1:traceF WILL BE CALLED FOR ALL SUBSEQUENT soulC NEW'D OR RETRIEVED FROM RECYCLING; N:COUNTDOWN TO THE NEW/RETRIEVED INSTANCE TO CALL traceF FOR
        countT                  ccExitsWhere ; //EXISTS SO CODE IN ADAM DEF CAN SEE THIS GLOBALS ARRAY
        count04T*               pcExitsWhere ; //EXISTS SO CODE IN ADAM DEF CAN SEE THIS GLOBALS ARRAY
        cleanC*                 pClean ;
        book0C*                 pBk0TraceScratch ;
        book0C*                 pBk0TelemetryAppScratch ;
        book0C*                 pBk0TelemetrySysScratch ;
        adamC*                  pAdam ;
        poolC*                  pPoolUse ;
        countT                  odoSockCbWrite ;
        countT                  odoSockCbRead  ;
        switchStackC*           pSwsRecycle ;
        const countT*           pczl_pSwsRecycle ;
        tellInfoSysExceptionS*  pzTieLath ;
        countT                  idiFileMileDad ;
        countT                  idLineMileDad ;
        countT                  idiFileMile ;
        countT                  idLineMile ;
        countT                  cYield ;
        restartC*               pRestart ;
        etherC*                 pEtScratch ;
        etherC*                 pEtText ;       // USED IF !0
        countT                  cGrabitC_unregistered ;
        countT                  cGrabitC_registered ;
        countT                  cGrabitC_reset ;
        countT                  cGrabitC_set ;
        countT                  msSleepWhenGrabbing ;
        const countT*           pcQuit ;
        countT                  idPhase3 ; //THIS IS ADJACENT TO pLFnest SO THAT MONITOR CAN GET BOTH WITH A SINGLE MEMORY READ
        countT                  idPhase2 ; //THIS IS ADJACENT TO pLFnest SO THAT MONITOR CAN GET BOTH WITH A SINGLE MEMORY READ
        countT                  idPhase1 ; //THIS IS ADJACENT TO pLFnest SO THAT MONITOR CAN GET BOTH WITH A SINGLE MEMORY READ
        countT                  cManna ;
        countT                  cRain ;                                                                                 //CODEsYNC: 2e40104 003002a
        countT                  cKidThreads ;
        flagsT                  flagsThreadMode5 ;
        flagsT                  flagsThreadMode4 ;
        flagsT                  flagsThreadMode3 ;
        flagsT                  flagsThreadMode2 ;
        countT                  idBlammo ;
        countT                  idiFile_brcLath ;
        countT                  idLine_brcLath ;
        countT                  brcLath ;  // LATH NONZE RETURN CODE FROM A BOS (BASE OPERATING SYSTEM, E.G. WIN32) CALL ON THIS THREAD
        countT                  brcQuery ; // LATH RETURN VALUE QUERIED BECAUSE bosFail WAS SET ON THIS THREAD
        boolT                   bosFail ;  // PASS/FAIL RESULT OF LATH BOS CALL
        countT                  brcRaw ;
        countT                  idlTask ;
        countT                  idiTask ;
        sCountT                 time2 ;
        countT                  time1 ;
        adamGlobal6S*           pag6 ;
        adamGlobal5S*           pag5 ;
        adamGlobal4S*           pag4 ;
        adamGlobal3S*           pag3 ;
        adamGlobal2S*           pag2 ;
        adamGlobal1S*           pag1 ;
        countT        /*o 41*/  osPid ;                             // MUST BE AFTER pEther. OFFSET IS HARDCODED IN 0d0000c.grabSleepF
        countT        /*o 01*/  osTid ;                             // MUST BE AFTER pEther.  
        etherC*       /*o  8*/  pEther ;                            // USED IF !0.              FOR USE BY STATIC thirdC FUNCTIONS, GLOBAL FUNCTIONS, AND OBJECTS SUCH AS strokeS THAT DO NOT CARRY THEIR OWN REFERENCES.  ADDED LATE.
        byteT*                  pbPendingInOutFramePackets ;
        inOutFrameC*            pInOutFrame ;                       //THIS AND POSSIBLY ITS ACCOMPANYING MEMBERS MUST BE EARLY SINCE _IO_ IS USED DURING CT OF tin9S
        countT                  cTellsWriteInOutTelemetry ;
    public :
        countT                  idDesireSetBySelfProcess ;
        countT                  idDesireSetBySelf ;                 //MUST BE EARLY BECAUSE dosPriorityIF CAN BE (WHEN DEBUGGING) CALLED IN inOutFrameC CT/DT, AND BEFORE ANY SUCH CALLS idDesireSetBySelf MUST BE INITIALIZED
        const countT            cbTls ;                             //MUST BE BEFORE grabC OBJECTS AND OTHERS WHOSE CONSTRUCTORS CALL TAG OR TAGoR MACROS
        byteT* const            pbTls ;                             //MUST BE BEFORE grabC OBJECTS AND OTHERS WHOSE CONSTRUCTORS CALL TAG OR TAGoR MACROS; THIS STORAGE IS NOT INITIALIZED
        countT                  cTls ;
    private :
        const byteT*            pbThreadStackLowest ;
        const byteT* const      pbThreadStackEnd    ;
        const byteT* const      pbThreadStackStart  ;

        scoopC*                 pScoops ;
        scoopC*                 pScoopEtThread ;

// =================================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// ======== 1 ======================================================================================================================================================================================================================================================================================
// ========   ======================================================================================================================================================================================================================================================================================
// =================================================================================================================================================================================================================================================================================================

    //ASSUME: FIELDS AFTER HERE CAN BE COPIED AND RESET (SEE THE CT/DT OF processGlobal5I.tinNormalVeryEarlyLateMain AND THE MAIN THREAD'S tin9S, IN POOLoLD)

    //CODEsYNCHeND: DO NOT CHANGE THIS CODE WITHOUT ALSO CHANGING THE SYNC CODE ; 20240925@1736: HUH?
{
/*1*/struct _export tin9S : public tin0S/*1*/

//TRY TO AVOID POINTER FIELDS, BECAUSE THIS IS A PITA TO SUPPORT IN ctF SINCE tin9S, OBJECTS ARE ACCESSED BY MULTIPLE PROCESSES
//THE DEF OF voidT zePointerFieldsF( tin0S& tin0P ) MUST ALSO BE UPDATED
//WHEN ADDING FIELDS: ADD CODE TO tin9S::ctF TO CORRECTLY DIGEST POINTER VALUES

//ASSUME: 0d00002 and 003*.tin9S, ARE KEPT IN SYNC

/**/
*/
it is illegal to modify any member other than pc Utility in the definition of an adam
  \<A HREF=\"5.0600104.1.1.0.html\"\>0600104:  WAKEsHOW( "example.simplest.snip.15000026.tin9S" )\</A\>
 simplest
examples
\<A HREF=\"5.15000026.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

