
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinBaseP , T("press the enter key\r\n") ) ;

sDone_tmCancel.waitF( tinBaseP ) ;
etThread.strokeF( tinBaseP , T("primary thread is waiting for tmCancelF to end\r\n") ) ;

sDone_tmClient.waitF( tinBaseP ) ;
etThread.strokeF( tinBaseP , T("primary thread is waiting for tmClientF to end\r\n") ) ;

etThread.socksShutdownF( tinBaseP ) ;
etThread.strokeF( tinBaseP , T("primary thread is shutting down its sockets access\r\n") ) ;
etThread.strokeF( tinBaseP , T("primary thread is closing handleServer\r\n") ) ;
etThread.strokeF( tinBaseP , T("primary thread is closing handleJob\r\n") ) ;

etThread = 0 ;
else          etThread.strokeF( tinBaseP , T("primary thread could not receive a value on port ")+TF1(idPort)+T("\r\n") ) ;
if( !etThread ) etThread.strokeF( tinBaseP , T("primary thread received the value ")+TF1(value)+T(" on port ")+TF1(idPort)+T("\r\n") ) ;
etThread.sockReadF( tinBaseP , handleJob , (byteT*)&value , sizeof value ) ;
etThread.strokeF( tinBaseP , T("primary thread is attempting to read a value on port ")+TF1(idPort)+T("\r\n") ) ;
ZE( countT , value ) ;

{ ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tmCancelF , &sDone_tmCancel , flTHREADlAUNCH_null , 0 , 0 , (countT)&handleJob ) ; } ;
signC sDone_tmCancel( tinBaseP , TAG( TAGiDnULL ) ) ;
etThread.sockAcceptF( tinBaseP , handleJob , idPortPeer , nnPeer , handleServer , countTC() ) ;
ZE( countT , idPortPeer ) ;
nicNameC nnPeer ;
handleC handleJob( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
etThread.sockListenF( tinBaseP , handleServer ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tmClientF , &sDone_tmClient , flTHREADlAUNCH_null , 0 , 0 , idPort ) ; } ;
signC sDone_tmClient( tinBaseP , TAG( TAGiDnULL ) ) ;
countT idPort = etThread.sockBindF( tinBaseP , handleServer ) ;
etThread.sockF( tinBaseP , handleServer ) ;
handleC handleServer( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;
etThread.socksSetupF( tinBaseP ) ;

TODO

DONE( tmClientF )
}
    etThread.strokeF( tinBaseP , T("thread tmClientF could not write the value ")+TF1(value)+T(" to port ")+TF1(idPort)+T("\r\n") ) ;
    etThread = 0 ;
{
else
if( !etThread ) etThread.strokeF( tinBaseP , T("thread tmClientF wrote the value ")+TF1(value)+T(" to port ")+TF1(idPort)+T("\r\n") ) ;
etThread.sockWriteF( tinBaseP , handleClient , (byteT*)&value , sizeof value ) ;
countT value = 0x54321 ;

etThread.osSleepF( tinBaseP , TOCK * 0x10 ) ;
etThread.strokeF( tinBaseP , T("secondary thread tmClientF is connected but will sleep for 10 tocks before writing\r\n") ) ;

etThread.sockConnectF( tinBaseP , handleClient , idPort ) ;
etThread.sockF( tinBaseP , handleClient ) ;
handleC handleClient( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ;

const countT idPort = pTaskP ? pTaskP->c1 : 0 ;
TASK( tmClientF )

DONE( tmCancelF )

}
    etThread = 0 ;
    else         etThread.strokeF( tinBaseP , T("thread tmCancelF canceled the job socket\r\n") ) ;
    if( etThread ) etThread.strokeF( tinBaseP , T("thread tmCancelF could not cancel the job socket\r\n") ) ;
    etThread.sockCancelF( tinBaseP , handleJob ) ;
    etThread.strokeF( tinBaseP , T("secondary thread tmCancelF is canceling the job socket\r\n") ) ;
    etThread.osSleepF( tinBaseP , TOCK * 2 ) ;
    etThread.strokeF( tinBaseP , T("secondary thread tmCancelF is sleeping now, for two tocks\r\n") ) ;
    countT& handleJob = *(countT*)pTaskP->c1 ;
{
if( !ether )

__( pTaskP && !pTaskP->c1 ) ;
__Z( pTaskP ) ;

TASK( tmCancelF )

/*1*/WAKEhIDE( "example.simplest.func.1030047.etherC.sockCancelF" )/*1*/
/**/
*/
\<A HREF=\"5.5710104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

