
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.loafIF( tinBaseP ) ;

}
    //etThread.strokeF( tinBaseP , T("unread: ")+TF2(stPending,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
    readF( tinBaseP , etThread , stPending , rRead ) ;
{
while( !ether )

while( cToDo -- ) etThread.osThreadF( TaRG1( tmHelpF ) , (countT)&stPending , (countT)&rWrite ) ;
countT cToDo = 8 ;

stackC stPending( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_ALLOWzE ) ;

rRead.pOffPendingPeerF(  tinBaseP , rWrite ) ;
rWrite.pOffPendingPeerF( tinBaseP , rRead ) ;

rangeC rRead(  tinBaseP , &cOnPlate , flRANGEc_CONSUMER ) ;
rangeC rWrite( tinBaseP , &cOnPlate ) ;

TODO

DONE( tmHelpF )
}
    }
        writeF( tinBaseP , etThread , stPendingP , rWriteP ) ;
    {
    while( !ether )

    rangeC& rWriteP    = *(rangeC*)pTaskP->c2 ;
    stackC& stPendingP = *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmHelpF )

}
    rWriteP.closeF( tinBaseP , offGot , CsLOTSmINUSwO ) ;
    etThread.strokeF( tinBaseP , T("wrote value ")+TF2(pcv[offv%4],flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
    pcv[ offv % 4 ] = 1 + incv02AM( vvLath ) ;

    countT offv = offGot >> 0x1e ;

    stPendingP.sinkF( tinBaseP , countTC() , offGot ) ;
    countT offGot = rWriteP.openF( tinBaseP , CsLOTSmINUSwO ) ;
{
voidT writeF( tinBaseS& tinBaseP , etherC& etThread , stackC& stPendingP , rangeC& rWriteP )

}
    etThread.strokeF( tinBaseP , T("got value ")+TF2(vvGot,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
    rReadP.closeF( tinBaseP , offGot , CsLOTSmINUSwO ) ;
    countT vvGot = pcv[ offv % 4 ] ;
    countT offv = offGot >> 0x1e ;

    stPendingP.ungrabF( tinBaseP ) ;
    else      { BLAMMO ; }
    if( ids ) stPendingP.extractF( 0 , tinBaseP ) ;
    stPendingP.sinkF( tinBaseP , ids , offGot , flSTACKsINK_QUERY ) ;
    stPendingP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    ZE( countT , ids ) ;
    countT offGot = rReadP.openF( tinBaseP , CsLOTSmINUSwO ) ;
    //BOSdOnOTtEST( WHATgbo , getch() )
{
voidT readF( tinBaseS& tinBaseP , etherC& etThread , stackC& stPendingP , rangeC& rReadP )

countT vvLath ;
countT pcv[ 4 ] ;
countT cOnPlate ;

*/
/*

//#define CsLOTSmINUSwO 0
//#define CsLOTSmINUSwO ( - 1 )
#define CsLOTSmINUSwO ( TICK * 0x40 - 1 )

/*1*/WAKEsHOWtEXT( "example.other.snip.003014e.rangeC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

