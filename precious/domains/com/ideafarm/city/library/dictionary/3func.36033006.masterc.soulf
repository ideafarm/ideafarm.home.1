
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        b_cLever.ungrabF( tin0P ) ;
        }
            __( pbc - pbe ) ;

            }
                }
                    }
                        }
                            while( !ether && ~handle ) ;
                            }
                                *(countT*)pbc = stUses.upF( tin0P , handle ) ; pbc += sizeof( countT ) ;
                            {
                            do
                            handleC handle( tin0P , TAGoR( TAGiDnULL , idLineCt , idiFileCt , pbBitsCt ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        {
                        if( stUses )

                        *(countT*)pbc = stUses   ; pbc += sizeof( countT ) ;
                        *(countT*)pbc = pc3n->c2 ; pbc += sizeof( countT ) ;
                        *(countT*)pbc = pc3n->c1 ; pbc += sizeof( countT ) ;

                        stackC& stUses = *(stackC*)pc3n->c3 ;
                    {
                    else
                    if( !pc3n->c3 ) __1
                {
                else
                if( !pc3n ) __1
                count3S*& pc3n = (count3S*&)(countT&)swc3 ;

                *(countT*)pbc = cLever = swc3.leverF( tin0P , idf ) ; pbc += sizeof( countT ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )

            *(countT*)pbc = cFlavors                   ; pbc += sizeof( countT ) ;
            *(countT*)pbc = idCopyHW                   ; pbc += sizeof( countT ) ;
            *(countT*)pbc = cbn - 3 * sizeof( countT ) ; pbc += sizeof( countT ) ;
            *(countT*)pbc = 1                          ; pbc += sizeof( countT ) ;
            putNegAM( *(countT*)pbc , FINGERnEG_SOULc ) ; pbc += sizeof( countT ) ;
            byteT* pbe = pbSoulP + cbn ;
            byteT* pbc = pbSoulP ;
        {
        if( pbSoulP )
        ether.newF( tin0P , LF , pbSoulP , cbn ) ; ___( pbSoulP ) ;

        }
            }
                }
                    cbn += sizeof( countT ) * stUses ;      // FOR EACH PLATE: value
                    stackC& stUses = *(stackC*)pc3n->c3 ;
                {
                else
                if( !pc3n->c3 ) __1
            {
            else
            if( !pc3n ) __1
            count3S*& pc3n = (count3S*&)(countT&)swc3 ;
            cLever = swc3.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cbn = sizeof( countT ) * ( 5 + cFlavors * 4 ) ; // FINGERPRINT , IDFORMAT , LENGTHpREFIX , idCopyHW , cFlavors ; FOR EA FLAVOR: cLever , flags , idCopy , cPlates

        const countT cFlavors = swc3.cFlavorsF( tin0P ) ;
        b_cLever.grabF( tin0P , TAGoR( TAGiDnULL , idLineCt , idiFileCt , pbBitsCt ) ) ;
    {
    else
    if( ((tin1S&)tin0P).pag1->_masterOldC_.pMePrime != this ) ((tin1S&)tin0P).pag1->_masterOldC_.pMePrime->soulF( tin0P , pbSoulP ) ;

    }
        if( POOP ) return ;
        __NZ( pbSoulP ) ;
        __( !((tin1S&)tin0P).pag1->_masterOldC_.pMePrime ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    upDnC upDn( tin0P , TAGoR( TAGiDnULL , idLineCt , idiFileCt , pbBitsCt ) , IDFILE , ether ) ;
    scoopC scoop( tin0P , LF , ether ) ;
{
/*1*/voidT masterOldC::soulF( tin0S& tin0P , byteT*& pbSoulP )/*1*/

/**/
*/
\<A HREF=\"5.1490006.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$soulF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

