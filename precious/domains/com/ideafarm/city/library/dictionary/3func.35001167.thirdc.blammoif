
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    thirdC::dosRaiseExceptionIF( tinP , ifcIDeVENTeXCEPTIONmONITORED_BLAMMO , pcArgs , sizeof pcArgs / sizeof pcArgs[ 0 ] ) ;
    countT pcArgs[] = { idLineP , idiFileP , idLineCtP , idiFileCtP , idBlammoP , tinP.monitor.idThread , tinP.osTid , osTidIF() } ;

    }
        //etherC::etRockIF( tinP ).traceF( tinP , (strokeS*)(const osTextT*)"blammoIF: raising exception" , flTRACE_PARAMETERiSoStEXT ) ;
        //LOGrAW( "blammoIF: raising exception ; an exception handler is registered, so an exception report file should be written to the \\tmp folder of the current drive (the same folder that contains this log file)\r\n" ) ;
    {
    else
    }
        //etherC::etRockIF( tinP ).traceF( tinP , (strokeS*)(const osTextT*)"blammoIF: raising exception with no exception handler registered" , flTRACE_PARAMETERiSoStEXT ) ;
        LOGrAW( "blammoIF: raising exception ; **** no exception handler is registered ****\r\n" ) ;
    {
    if( !( F(processGlobal2I.flCt) & flCTdTg_exceptionHandlerRegistered ) || F(processGlobal2I.flDt) & flCTdTg_exceptionHandlerRegistered )

    //LOGrAW( "**************************** BLAMMO ******************************\r\n" ) ;

    }
        tinP.pag1->idBlammo        = idBlammoP  ;
        tinP.pag1->idiFileBlammoCt = idiFileCtP ;
        tinP.pag1->idLineBlammoCt  = idLineCtP  ;
        tinP.pag1->idiFileBlammo   = idiFileP   ;
        tinP.pag1->idLineBlammo    = idLineP    ;
    {
    if( c_pTin )
    countT c_pTin = (countT)&tinP ;

    }
        pg1.idBlammo        = idBlammoP  ;
        pg1.idiFileBlammoCt = idiFileCtP ;
        pg1.idLineBlammoCt  = idLineCtP  ;
        pg1.idiFileBlammo   = idiFileP   ;
        pg1.idLineBlammo    = idLineP    ;

        processGlobal2S& pg1 = processGlobal2S::_processGlobal2I_IF() ;
    {

    }
        //etherC::etRockIF( tinP ).traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
        //U:: PERHAPS USE RESTART HERE ; IF THIS FAILS, IT CAN BLOW THE STACK AND PREVENT AN EXCEPTION REPORT FROM BEING WRITTEN

        //LOGrAW( ostoSay ) ; //JUST IN CASE traceF FAILS

        OStEXTAK( ostoSay , "\r\n" ) ;
        OStEXTA(  ostoSay , &tinP ? tinP.postThreadName : "[&tinP is 0]" ) ;
        OStEXTAK( ostoSay , ") on thread " ) ;
        OStEXTC( ostoSay , idiFileCtP , 0 ) ;
        OStEXTAK( ostoSay , "(" ) ;
        OStEXTC( ostoSay , idLineCtP , 0 ) ;
        OStEXTAK( ostoSay , ") ct at " ) ;
        OStEXTC( ostoSay , idiFileP , 0 ) ;
        OStEXTAK( ostoSay , "(" ) ;
        OStEXTC( ostoSay , idLineP , 0 ) ;
        OStEXTAK( ostoSay , "BLAMMO at " ) ;
        OStEXT(  ostoSay , TUCK << 2 ) ;
    {

    TINSL
{
/*1*/voidT thirdC::blammoIF( const countT idLineP , const countT idiFileP , const countT idLineCtP , const countT idiFileCtP , const countT idBlammoP )/*1*/

/**/
*/
it is illegal to refer to this symbol most anywhere
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//

