
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tinBaseP ) ;

etThread.delF( tinBaseP , psttSay ) ;
etThread.strokeF( tinBaseP , psttSay ) ;

etThread.strFuseF( tinBaseP , psttSay , b3 ) ;
etThread.strFuseF( tinBaseP , psttSay , S3(65.0,scOld_mmMOVEpELtO,65.0) ) ;
etThread.strFuseF( tinBaseP , psttSay , S3(64.0,scOld_mmFRAMEpELtO,64.0) ) ;
etThread.strFuseF( tinBaseP , psttSay , S2(0,scOld_POPfRAME) ) ;
etThread.strFuseF( tinBaseP , psttSay , S2(0,scOld_POPfRAME) ) ;
etThread.strFuseF( tinBaseP , psttSay , tcQuit ) ;
etThread.strFuseF( tinBaseP , psttSay , S2(0,scOld_WRAPoFF) ) ;
//etThread.strFuseF( tinBaseP , psttSay , S2(0,scOld_TRACEoN) ) ;
etThread.strFuseF( tinBaseP , psttSay , 0 , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ TUCK ) ; ___( psttSay ) ;
ZE( strokeS* , psttSay ) ;

etThread.delF( tinBaseP , psttBody3 ) ;
tcButtonC b3( tinBaseP , "b3" , b3CBF , 0 , flTCfEATURE_defaultButton | flTCfEATURE_DRAGGABLE , 0 , psttBody3 , 0 , ifcRGB_R4|ifcRGB_G2 , 2 , 2 , 2 , 2 ) ;
etThread.strFuseF( tinBaseP , psttBody3 , T("D") ) ;
etThread.strFuseF( tinBaseP , psttBody3 , b2 ) ;
etThread.strFuseF( tinBaseP , psttBody3 , T("C") ) ;
etThread.strFuseF( tinBaseP , psttBody3 , 0 , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ TUCK ) ; ___( psttBody3 ) ;
ZE( strokeS* , psttBody3 ) ;

etThread.delF( tinBaseP , psttBody2 ) ;
tcButtonC b2( tinBaseP , "b2" , b2CBF , 0 , flTCfEATURE_defaultButton                         , 0 , psttBody2 , 0 , ifcRGB_R4|ifcRGB_G2 , 1 , 1 , 1 , 1 ) ;
etThread.strFuseF( tinBaseP , psttBody2 , T("B") ) ;
etThread.strFuseF( tinBaseP , psttBody2 , b1 ) ;
etThread.strFuseF( tinBaseP , psttBody2 , T("A") ) ;
etThread.strFuseF( tinBaseP , psttBody2 , 0 , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ TUCK ) ; ___( psttBody2 ) ;
ZE( strokeS* , psttBody2 ) ;

tcButtonC b1( tinBaseP , "b1" , b1CBF , 0 , flTCfEATURE_defaultButton                         , 0 , T("1")                                                     ) ;

TN( tb , " " ) ;
TN( tn , "" ) ;

tcButtonQuitC tcQuit( tinBaseP , "tcQuit" ) ;

TODO

}
    return bHandled ;

    }
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            bHandled = 1 ;

            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
    {
    switch( idTypeCallP )
    ZE( boolT , bHandled ) ;
{
boolT _export b3CBF( tin0S& tinBaseP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    return bHandled ;

    }
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            bHandled = 1 ;

            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
    {
    switch( idTypeCallP )
    ZE( boolT , bHandled ) ;
{
boolT _export b2CBF( tin0S& tinBaseP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    return bHandled ;

    }
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            bHandled = 1 ;

            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
    {
    switch( idTypeCallP )
    ZE( boolT , bHandled ) ;
{
boolT _export b1CBF( tin0S& tinBaseP , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

/*1*/WAKEsHOW( "example.other.1snip.1500009c.tcButtonC.nested.buttons" )/*1*/
/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

