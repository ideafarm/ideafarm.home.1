
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

ether.osThreadF( TaRG1( tmWorkF ) , (countT)&bat2 , (countT)&bat1 ) ;
ether.osThreadF( TaRG1( tmWorkF ) , (countT)&bat1 , (countT)&bat2 ) ;

batonC bat2( tinBaseP , TAG( TAGiDnULL ) ) ;
batonC bat1( tinBaseP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    CONoUTrAW( "Bye!\r\n" ) ;

    batOoP.ungrabF( tinBaseP ) ;
    batWoP.ungrabF( tinBaseP ) ;

    CONoUTrAW5( "grabbed  [idThread,&batOoP]: " , ((tinNormalS&)tinBaseP).monitor.idThread , " " , &batOoP , "\r\n" ) ;
    batOoP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    CONoUTrAW5( "grabbing [idThread,&batOoP]: " , ((tinNormalS&)tinBaseP).monitor.idThread , " " , &batOoP , "\r\n" ) ;
    TELL( "grabbing to intentionally deadlock" )

    ++ s ; etThread.osSleepF( tinBaseP , TOCK ) ;
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    CONoUTrAW5( "grabbed  [idThread,&batWoP]: " , ((tinNormalS&)tinBaseP).monitor.idThread , " " , &batWoP , "\r\n" ) ;
    batWoP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    CONoUTrAW5( "grabbing [idThread,&batWoP]: " , ((tinNormalS&)tinBaseP).monitor.idThread , " " , &batWoP , "\r\n" ) ;

    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) ;

    batonC& batOoP = *(batonC*)pTaskP->c2 ;
    batonC& batWoP = *(batonC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmWorkF )

/*1*/WAKEsHOWtEXT( "tool.test.monitor.deadlock" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

