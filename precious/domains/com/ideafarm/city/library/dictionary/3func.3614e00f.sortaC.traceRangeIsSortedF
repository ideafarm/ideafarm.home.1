

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
}
    }
        countT foo = 2 ;
    {
    if( bit == 0x10000000 )

    ((tinNormalS&)tinP).pEther->delF( tinP , psttd ) ;
    ((tinNormalS&)tinP).pEther->traceF( tinP , T("range is sorted by bit ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+tIndent+T(psttd) , flTRACE_NOpREFIX ) ;
    ((tinNormalS&)tinP).pEther->strReplaceF( tinP , psttd , 0 , T("\r\n") , T("") ) ;   ___( psttd ) ;
    ((tinNormalS&)tinP).pEther->strReplaceF( tinP , psttd , 0 , T("33333333") , T("<<<<<<<<") ) ;   ___( psttd ) ;
    ((tinNormalS&)tinP).pEther->strReplaceF( tinP , psttd , 0 , T("11111111") , T(">>>>>>>>") ) ;   ___( psttd ) ;
    etherC::strDumpIF( tinP , psttd , pbP , cbP , flSTRdUMP_null , cbElt * cEltRange , cbElt / 3 , 0 , 0 ) ;  ___( psttd ) ;
    ZE( strokeS* , psttd ) ;

    countT bit = 1 << shiftP ;

    textC tIndent( tinP , TAG( TAGiDnULL ) , flTEXTc_null , "" , 7 + myOff * 2 + ( myOff / cbElt ) * 3 ) ;
    countT cEltRange = cbP / cbElt ;
    countT myOff = pbP - pbArray ;
    TINSL
{
/*1*/voidT sortaC::traceRangeIsSortedF( byteT* pbP , countT cbP , const countT shiftP )/*1*/


/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
