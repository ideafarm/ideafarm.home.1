
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //SAYnAME( "~tin123S/-\r\n" )
    TELL( "~tin123S: final tell tag in ~tin123S" )
    TINSL

    }
        }
            LOGrAW( "-\r\n" ) ;
            LOGrAW( postThreadName ) ;
        {
        if( F(thirdC::third_flagsModeAdam2I_IF(*this)) & flADAMmODE2_THREADcHATTER )

        }
            if( F(flags) & flTINs_DELETEtLS ) { PUSE( tin0P , *(byteT**)&pbTls           ) ; }
                                                PUSE( tin0P , pbPendingInOutFramePackets ) ;
        {
        else          
        if( !pPoolUse ) processGlobal4I.heap.delF( tin0P , pbPendingInOutFramePackets ) ;

        }
            }
                }
                    etherC::etRockIF( tin0P ).traceF( tin0P , (const strokeS* const)(const osTextT* const)ostoSay , /*flTRACE_LOOP |*/ flTRACE_PARAMETERiSoStEXT ) ;  //USES pbTls SO CANNOT BE LATER

                    OStEXTAK( ostoSay , " ----" ) ;
                    OStEXTA(  ostoSay , postThreadName ) ;
                    OStEXTAK( ostoSay , "_9    " ) ;
                    OStEXTC9( ostoSay , osTid ) ;
                    OStEXTAK( ostoSay , "_9    " ) ;
                    OStEXTC9( ostoSay , osPid ) ;
                    OStEXTAK( ostoSay , "tin123S [osPid,osTid]:    " ) ;
                    OStEXT(   ostoSay , TUCK << 0 ) ;

                    tin0S& tin0P = *this ;
                {
                if( F(thirdC::third_flagsModeProcess2I_IF()) & flMODEpROCESS2_CHATTERtHREADcTdT )

                if( pTinF() != this && idTinNamed != ifcIDtINnAMED_tinHeartI && idTinNamed != ifcIDtINnAMED_tinBreakI ) { BLAMMOiD( 0x22222222 ) } ;

                tell_tmWatchF_toIgnoreMeF() ;
            {
            if( idTinNamed != ifcIDtINnAMED_tinHeartI && idTinNamed != ifcIDtINnAMED_tinBreakI && idTinNamed != ifcIDtINnAMED_tin9VeryVeryEarlyLateMainI )
        {
        if( F(processGlobal2I.flCt) & flCTdTg_WITHINlIFETIMEoFmAIN && !( F(processGlobal2I.flDt) & flCTdTg_WITHINlIFETIMEoFmAIN ) )                                               //THIS IS TO AVOID CLUTTERING THE LOG FILE

        POOPIES
        dtTellCopyDoneF( (countT)this ) ;

        }
            TELLaPPc3LIFI( ifcIDtYPEtELLaPP_INoUTtINdT , (byteT*)&info , sizeof info , ifcLINE , DDNUMB ) ;
            THREADmODE4oN0( flTHREADmODE4_INoUTfRAMEdEFERwRITINGaPPtELEMETRY ) ;

                                                 cCpuCyclesWriteInOutTelemetry = 0 ;
            info.cCpuCyclesWriteInOutTelemetry = cCpuCyclesWriteInOutTelemetry ;
                          cTellsWriteInOutTelemetry = 0 ;
            info.cTells = cTellsWriteInOutTelemetry ;
            info.idThreadReporting = glass.idThread ;
            tellInfoAppInOutFrameTinDtS info ;
            //PS:PSEUDOdUPLICATE CODE: 36024002 360fc002

            }
                }
                    cPending = 0 ;

                    }
                        thirdC::dosTellMonitorIF( tin0P , tell , ifcIDbOOKStELL_APP ) ;
                        tellC tell( tin0P , LF , 0 , ifcIDtYPEtELLaPP_INoUTaRRAY , ((tin1S&)tin0P).pbPendingInOutFramePackets , sizeof( countT ) + cPending * sizeof( tellInfoAppInOutFrameS ) ) ;
                    {

                    }
                        BLAMMOiD( 0x11111111 ) ;
                        LOGrAW5(    "~tin123S error: [cPending,cMax]: " , cPending , " " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                        CONoUTrAW5( "~tin123S error: [cPending,cMax]: " , cPending , " " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                    {
                    if( cPending > CmAXpENDINGiNoUTfRAMEpACKETS )

                    tellInfoAppInOutFrameS* pPending = (tellInfoAppInOutFrameS*)( ((tin1S&)tin0P).pbPendingInOutFramePackets + sizeof( countT ) ) ;
                {
                if( cPending )

                countT& cPending = *(countT*)((tin1S&)tin0P).pbPendingInOutFramePackets ;
            {
            if( ((tin1S&)tin0P).pbPendingInOutFramePackets )
            //PSEUDOdUPLICATEcODE 360fc002 33000065

            THREADmODE4oN0( flTHREADmODE4_INoUTfRAMEdOnOTcOLLECTaPPtELEMETRY | flTHREADmODE4_DOnOTfLUSHpENDINGaPPtELEMETRY ) ;
        {
        if( glass.idThread > 3 ) // FOR THREAD 1, SEE doC::~doC; THREAD 2 AND 3 ARE tinHeart AND tinBreak, WHICH NORMALLY ACCUMULATE NO TELEMETRY

        TINSL       // I CANNOT USE MYSELF BECAUSE I MIGHT BE tinHeart OR tinBreak
    {
    else
    }
        }
            thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOeLDER ) ;
        {
        if( pTinF() != pTin0Prior )

        //putNegAM(     pTin0Prior->fingerprint   ,  FINGERnEG_TINs       ) ;          // FROM NOW UNTIL I AM COMPETELY DT, GLASS2 WILL SEE OO INSTANCES OF tin123S FOR THIS THREAD
        //if( getNegAM( pTin0Prior->fingerprint ) != FINGERnEG_TINszOMBIE ) BLAMMO ;
        //THIS IS DONE WITHIN dtTellCopyDoneF

        }
            thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSpOURfAILED ) ;
            CONoUTrAW( "\r\n" ) ; //CODE SYNC: 003002a 12f0002 12f0003
        {
        if( thirdC::c_memcpyWithCallBackIF( (byteT*)pTin0Prior + sizeof( tin0S ) , (byteT*)this + sizeof( tin0S ) , sizeof( tin123S ) - sizeof( tin0S ) , dtTellCopyDoneF , (countT)this ) )

        //SAYnAME( "~tin123S/ " ) CONoUTrAW( "copying to " ) ; CONoUTrAW( NAME( pTin0Prior->idTinNamed ) ) ; ; CONoUTrAW( "\r\n" ) ;
        TINSL       // I CANNOT USE MYSELF BECAUSE I MIGHT BE tinHeart OR tinBreak
    {
    if( pTin0Prior )

    }
        DEL( pSwsRecycle ) ; //TO MAKE SURE THAT etRock EXISTS WHEN THESE ARE DELETED
        }
            THREADmODE1rESTORE
            }
                }
                    }
                        }
                            }
                                break ;
                                thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSuNEXPECTEDrECYCLEtYPE ) ;
                            {
                            default                            :
                            case ifcIDtYPErECYCLE_switchStackC : { DEL( *(switchStackC**)&pObject ) ; break ; }
                            case ifcIDtYPErECYCLE_switchC      : { DEL(      *(switchC**)&pObject ) ; break ; }
                            case ifcIDtYPErECYCLE_stackC       : { DEL(       *(stackC**)&pObject ) ; break ; }
                            case ifcIDtYPErECYCLE_soulC        : { DEL(        *(soulC**)&pObject ) ; break ; }
                        {
                        switch( *pczl_pSwsRecycle )
                    {
                    if( pczl_pSwsRecycle && pObject )

                    *pSwsRecycle >> *(countT*)&pObject ;
                    ZE( voidT* , pObject ) ;
                {
                while( *pSwsRecycle )
        
                pczl_pSwsRecycle = (countT*)pSwsRecycle->leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = pSwsRecycle->cFlavorsF( tin0P ) ;
            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
        {
        if( pSwsRecycle )
        //PSEUDODUPLICATE CODE: 1450002 12f0002 1030003 1020171

        deregisterIfF( tin0P ) ;
        TELL( "~tin123S: deregistering" )

        }
            thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSsOMETHINGgRABBED ) ;
            }
                }
                    LOGrAW5( "~tin123S dying while this is grabbed [idLineCt,idiFileCt]: " , ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ off + 1 ] , " " , ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ off + 2 ] , "\r\n" ) ;
                {
                if( ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ off ] )
            {
            for( countT off = 0 ; off < offEnd ; off += 5 )
            const countT offEnd = OFFgRABBEDmAX * 5 ;
        {
        if( ((tin1S&)tin0P).glass.cGrabbed )
        TELL( "verifying that nothing is now grabbed by this thread" )

        TELL( "~tin123S: after setting processGlobal2I.flDt flag" )
        }
            }
                case ifcIDtINnAMED_tinInPoolMain             : { processGlobal2I.flDt |= flCTdTg_tinMainInPool             ; break ; }
                case ifcIDtINnAMED_tin9VeryEarlyLateMainI     : { processGlobal2I.flDt |= flCTdTg_tin9VeryEarlyLateMainI     ; break ; }
                case ifcIDtINnAMED_tin9VeryVeryEarlyLateMainI : { processGlobal2I.flDt |= flCTdTg_tin9VeryVeryEarlyLateMainI ; break ; }
            {
            switch( idTinNamed )

            }
                thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOmE ) ;
            {
            if( pTinF() != this )
        {
        if( idTinNamed != ifcIDtINnAMED_tinHeartI && idTinNamed != ifcIDtINnAMED_tinBreakI )
        TELL( "~tin123S: setting processGlobal2I.flDt flag and testing pTinF()" )

        }
            }
                { ++ s ; thirdC::dosSleepWinkIF( tin0P ) ; }
                //if( !cQuiet || !( -- cQuiet ) ) { LOGrAW5( postThreadName , cKidThreads , " ( pTinKid : " , (countT)pTinKid , " )\r\n" ) ; }

                }
                    thirdC::dosExitProcessIF( ifcEXITcODE_EXITpROCESSdTtINSkIDSeXISTdURINGclEANUP ) ;
                    CONoUTrAW( "~tin123S: calling ExitProcess because i am being cleaned up and i have kid threads.\r\n" ) ;
                {
                if( F(flagsThreadMode3) & flTHREADmODE3_EXCEPTIONcLEANUPdELETIONiNpROGRESS || F(processGlobal2I._thirdC_flagsProcessState) & flPROCESSsTATE_EXCEPTIONnOThANDLED )
            {
            while( cKidThreads ) //tmWindowsF must not put itself into this list because main CANNOT BLOCK HERE FOR tmWindowsF TO END BECAUSE tmWindowsF ENDS LATER
            countT cQuiet = 0x40 ; //INCR FROM 01 TO 04 TO AVOID LOGrAW
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
        {
    
        POOPIES

        // ExitProcess RATHER THAN BLAMMO IS USED HERE BECAUSE I CAN BE CALLED BY EXCEPTION HANDLER CLEANUP LOOP

        }
            //}
            //    etherC::etRockIF( tin0P ).traceF( tin0P , (const strokeS* const)(const osTextT* const)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
            //
            //    OStEXTC(  ostoSay , usedPerTuck , 0 ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , glass.idThread , 0 ) ;
            //    OStEXTAK( ostoSay , "~tin123S thread stack max usage [idThread,usedPerTuck]:    " ) ;
            //    OStEXT(   ostoSay , TUCK << 0 ) ;
            //{
            //countT usedPerTuck = !cbStackAll ? 0 : cbStackUsed * 0x100 / cbStackAll ;
            //countT cbStackUsed = pbThreadStackEnd - pbThreadStackLowest ;
            //countT cbStackAll  = pbThreadStackEnd - pbThreadStackStart ;
        {
        if( idTinNamed != ifcIDtINnAMED_tin9VeryVeryEarlyLateMainI )  //20221029@1850: IF DO THIS FOR VERYVERY, traceF CALL WILL CAUSE scoopC CT'OR TO FAIL DUE TO ZOMBIE FINGERPRINT IN my poop MEMBER (NOT ANALYZED)

        //SAYnAME( "~tin123S/+\r\n" )
        TINSL
    {
{
/*1*/tin123S::~tin123S( voidT )/*1*/

//#define SAYnAME(postP) { CONoUTrAW7( "[idTin,idThread,idSerial,name]: " , idTin , " " , glass.idThread , " " , idSerial , " " ) ; CONoUTrAW( NAME( idTinNamed ) ) ; CONoUTrAW( " " postP ) ; }

//#define NAME(idP) processGlobal4I.mapTinName( idP )

/**/
*/
i work unconditionally so that the monitor receives notice of me and so that processGlobal5I.tin9VeryEarlyLateMain is maintained even if impotence occurs
\<A HREF=\"5.12f0002.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

