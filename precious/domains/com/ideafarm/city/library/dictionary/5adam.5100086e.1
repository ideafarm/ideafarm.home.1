
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

thirdC::third_flagsModeProcess2I_IF() &= ~( F(flMODEpROCESS2_SUPPRESSiNoUTfRAMEc) ) ;
etThread.traceF( tin0P , T("i've been fired") ) ;

etherC::loafIF( tin0P ) ;

etThread.traceF( tin0P , T("ok") ) ;
CONoUTrAW( "\r\n" ) ;

}
    //etThread.traceF( tin0P , T("all are ready now") ) ;
    }
        ++ s ; ether.osSleepF( tin0P , TOCK >> 2 ) ;
        //etThread.traceF( tin0P , T("[pending]:    ")+TF2(cLaunched-cReady,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    while( cReady < cLaunched )

    cAlive = 0 ;
    //etThread.traceF( tin0P , T("all are alive now") ) ;
    }
        ++ s ; ether.osSleepF( tin0P , TOCK >> 2 ) ;
        //etThread.traceF( tin0P , T("[pending]:    ")+TF2(cLaunched-cAlive,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    while( cAlive < cLaunched )
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

    //etThread.traceF( tin0P , T("[cWorkers]:    ")+TF2(cLaunched,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    THREADmODE1rESTORE

    ++ cLaunched ; etThread.osThreadF( tin0P , countTC() ,            tmWork_123_F , 0 , &cAlive , flTHREADlAUNCH_NOiNoUTfRAMEsUPPORT | flTHREADlAUNCH_NOtINiNpOOL , CBsTACKmIN << 0 , 0 , (countT)&cReady ) ;

    ++ cLaunched ; etThread.osThreadF( tin0P , countTC() , tmWork_123nOeTsCRATCH_F , 0 , &cAlive , flTHREADlAUNCH_NOiNoUTfRAMEsUPPORT | flTHREADlAUNCH_NOtINiNpOOL , CBsTACKmIN << 0 , 0 , (countT)&cReady ) ;

    ++ cLaunched ; etThread.osThreadF( tin0P , countTC() ,      tmWork_1nOeTHERS_F , 0 , &cAlive , flTHREADlAUNCH_NOiNoUTfRAMEsUPPORT | flTHREADlAUNCH_NOtINiNpOOL , CBsTACKmIN << 0 , 0 , (countT)&cReady ) ;
    ++ cLaunched ; etThread.osThreadF( tin0P , countTC() ,     tmWork_12nOeTHERS_F , 0 , &cAlive , flTHREADlAUNCH_NOiNoUTfRAMEsUPPORT | flTHREADlAUNCH_NOtINiNpOOL , CBsTACKmIN << 0 , 0 , (countT)&cReady ) ;
    ++ cLaunched ; etThread.osThreadF( tin0P , countTC() ,    tmWork_123nOeTHERS_F , 0 , &cAlive , flTHREADlAUNCH_NOiNoUTfRAMEsUPPORT | flTHREADlAUNCH_NOtINiNpOOL , CBsTACKmIN << 0 , 0 , (countT)&cReady ) ;

    THREADmODE1oN( flTHREADmODE1_SUPPRESStELLmONITOR )
    ZE( countT , cReady    ) ;
    ZE( countT , cAlive    ) ;
    ZE( countT , cLaunched ) ;

    CONoUTrAW( "\r\n\r\nstart        lowest       end          size         perTuckUsed   flavor\r\n" ) ;
{
if( !ether )

thirdC::third_flagsModeProcess2I_IF() |= flMODEpROCESS2_SUPPRESSiNoUTfRAMEc ;

static tin123S& tin123 = (tin123S&)tin0P ;

TODO

THREADdEF(         1nOeTHERS )
THREADdEF(        12nOeTHERS )
THREADdEF(       123nOeTHERS )

THREADdEF(    123nOeTsCRATCH )

THREADdEF(               123 )


    DONE##flavorP##( tmWork_##flavorP##_F )
    THREADmODE3rESTORE                                                                              \
    }                                                                                               \
        etherC::loafIF( tin0P ) ;                                                                   \
                                                                                                    \
        CONoUTrAW( ostoBuf ) ;                                                                      \
        OStEXTAK(  ostoBuf , #flavorP ) ;                                                           \
        OStEXTAK(  ostoBuf , "    " ) ;                                                             \
        OStEXTC(   ostoBuf , perTuck  , ' ' ) ;                                                     \
        OStEXTAK(  ostoBuf , "_    % " ) ;                                                          \
        OStEXTCF(  ostoBuf , size     , '0' ) ;                                                     \
        OStEXTAK(  ostoBuf , "_    " ) ;                                                            \
        OStEXTCF(  ostoBuf , pbEnd    , '0' ) ;                                                     \
        OStEXTAK(  ostoBuf , "_    " ) ;                                                            \
        OStEXTCF(  ostoBuf , pbLowest , '0' ) ;                                                     \
        OStEXTAK(  ostoBuf , "_    " ) ;                                                            \
        OStEXTCF(  ostoBuf , pbStart  , '0' ) ;                                                     \
        OStEXTAK(  ostoBuf , "\r\n" ) ;                                                             \
        OStEXT(    ostoBuf , TUCK >> 1 )                                                            \
                                                                                                    \
        countT             perTuck  = ( pbEnd - pbLowest ) * TUCK / size ;                          \
        countT             size     =   pbEnd - pbStart  ;                                          \
        const byteT* const pbEnd    = ((tin1S&)tin0P).pbThreadStackEnd    ;                         \
        const byteT* const pbLowest = ((tin1S&)tin0P).pbThreadStackLowest ;                         \
        const byteT* const pbStart  = ((tin1S&)tin0P).pbThreadStackStart  ;                         \
        inc02AM( cReadyP ) ;                                                                        \
        countT& cReadyP = *(countT*)pTaskP->c1 ;                                                    \
    {                                                                                               \
    if( pTaskP && pTaskP->c1 )                                                                      \
    THREADmODE3oN( flTHREADmODE3_NOsEXiNpOOL ) ;                                                    \
    TASK##flavorP##( tmWork_##flavorP##_F )                                                         \
                                                                                                    \
#define THREADdEF(flavorP)                                                                          \


/*1*/WAKEsHOWtEXT( "example.other.TASK.variations" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
