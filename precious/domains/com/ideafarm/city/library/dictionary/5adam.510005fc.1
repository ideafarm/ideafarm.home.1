
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.strokeF( tinBaseP , T("ok\r\n") ) ;

THREADmODE3rESTORE
}
    }
        }
            ++ s ; ether.osSleepF( tinBaseP , etThread.diskIdF( tinBaseP , T("///c") ) == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 ? TOCK : TICK >> 2 ) ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;                                 IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0
    
            CONoUTrAW3( "\rcycle " , idCycle , " -\r\n" ) ;
            }
                }
                    thirdC::dosSleepWinkIF( tinBaseP ) ;
                    CONoUTrAW3( "\r        \r" , cAlive , "\r" ) ;
                {
                while( cAlive )
        
                }
                    etThread.osThreadF( TaRG1( tmGorillaF ) , (countT)&cAlive , (countT)&puseMaster , (countT)&cDone ) ;
                    inc02AM( cAlive ) ;
                {    
                while( !ether && cToDo -- )
                countT cToDo = TUCK >> 1 ; //PRODUCTION: DOES NOT WORK AS EXPECTED ON IFC8
                //countT cToDo = TUCK >> 3 ;
                //countT cToDo = 2 ; //DUT
                //countT cToDo = 1 ; //DUT
                etThread.strokeF( tinBaseP , T("launching gorilla attack\r\n") ) ;
            
                ZE( countT , cDone ) ;
            {
            CONoUTrAW3( "cycle " , ++ idCycle , " +\r\n" ) ;
    
            ZE( countT , cAlive ) ;
        {
    {
    while( !ether && !POOP )
    ZE( countT , idCycle ) ;
    
    puseC puseWork1( tinBaseP , ifcIDpOOL_ADAMtEMP ) ; //--------------------------------------------------------------------------------------
    puseC puseMaster( tinBaseP , "list.test.gorilla" ) ; //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

TODO

DONE( tmGorillaF )
}
    dec02AM( cAliveP ) ;
    THREADmODE3rESTORE

    }
        THREADmODE3rESTORE
        }
            else if( !( ( ++ idCycle ) % TUCK ) ) thirdC::dosSleepWinkIF( tinBaseP ) ;
                 if( cDoneCopy >= ( TOCK >> 5 ) ) break ; //PRODUCDTION

            listC::dictionaryForgetTextIF( tinBaseP , ostoWord ) ;

            if( !( cDoneCopy % TUCK ) ) CONoUTrAW3( "\r        \r" , cDoneCopy , "\r" ) ;
            countT cDoneCopy = 1 + incv02AM( cDoneP ) ;

            }
                }
                    CONoUTrAW( ostoSay ) ;
                    OStEXTAK( ostoSay , "\"\r\n" ) ;
                    OStEXTA(  ostoSay , spWord ) ;
                    OStEXTAK( ostoSay , "[spWord]: \"" ) ;
                    OStEXT(   ostoSay , TUCK ) ;
                {
                else
                if( !spWord || thirdC::c_strcmpIF( tinBaseP , spWord , ostoWord ) ) { BLAMMO ; }
        
                blobVSP spWord = listC::dictionaryQueryFromIdIF( tinBaseP , idWord ) ;
            {

            countT idWord = listC::dictionaryQueryFromTextIF( tinBaseP , ostoWord ) ;

            puseC pusem( puseMasterP ) ;
        {
        THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )
    {
    while( !ether && !POOP )
    ZE( countT , idCycle ) ;

    OStEXTC(  ostoWord , ((tinFullS&)tinBaseP).monitor.idThread , 0 ) ;
    OStEXTAK( ostoWord , "foo." ) ;
    OStEXT(   ostoWord , TUCK ) ;

    THREADmODE3oN( flTHREADmODE3_MONITORdOnOTrEPORToNmE )

    }
        thirdC::dosPriorityIF( tinBaseP , save ) ;
        thirdC::osThreadYieldIF( tinBaseP , TAG( TAGiDnULL ) ) ;
        thirdC::dosPriorityIF( tinBaseP , ifcTHREADpRIORITY_RUSH ) ;
        countT save = thirdC::dosPriorityIF( tinBaseP ) ;
    {

    //if( etThread.diskIdF( tinBaseP , T("///c") ) != IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 ) thirdC::osSelectProcessorsIF( tinBaseP , 2 ) ; //FOR DEVELOPMENT CONVENIENCE; THIS LINE CAN REMAIN IN PRODUCTION CODE

    countT& cDoneP      = *(countT*)pTaskP->c3 ;
    puseC&  puseMasterP =  *(puseC*)pTaskP->c2 ;
    countT& cAliveP     = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmGorillaF )

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_GORILLAlISTS.gorilla.poolC.lists" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

