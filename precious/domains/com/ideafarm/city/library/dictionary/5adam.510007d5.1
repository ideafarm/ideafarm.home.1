
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    etThread.delF( tin0P , pbi ) ;

    }
        }
            ++ s ; ether.osSleepF( tin0P , TOCK ) ;

            sock.writeF( tin0P , idpi , idhi , (byteT*)&idSay , sizeof idSay ) ;
            etThread.traceF( tin0P , T("throwing ")+TF2(idSay,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" from port ")+TF2(idPortBind,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" to port ")+TF2(idpi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" of ")+T(idhi) ) ;
        {
        while( cDo -- )
        countT cDo = 2 ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        etThread.traceF( tin0P , T("caught ")+TF2(idSay,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" on port ")+TF2(idPortBind,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" from port ")+TF2(idpi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" of ")+T(idhi) ) ;
        countT& idSay = *(countT*)pbi ;
    {
    if( !ether && cbi >= sizeof( countT ) )

    sock.readF( tin0P , pbi , cbi , idpi , idhi ) ;
    nicNameC idhi ;
    ZE( countT , idpi ) ;
    ZE( countT , cbi ) ;
    ZE( byteT* , pbi ) ;
{
while( !ether && !etThread )

idPortBind = sock.bindF( tin0P , idPortBind ) ;
socketC sock( tin0P , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;

countT idPortBind = 0xfade ;

TODO

/*1*/WAKEsHOWtEXT( "dut.catch.udp.datagram" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
