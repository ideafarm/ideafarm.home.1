
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        }
            // POPtINaRGS
            // flagsT flagsRC = listC::walkIF( tinBaseP , hRecord ) ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] = record.nameF() ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
            // PUSHtINaRGS
            // CONoUTrAW( "================== CHATTERING RECORD ==============================\r\n" ) ;
            // 
            // record.openF( tinBaseP , hRecord ) ;
            // handleC hRecord( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
            // 
            // grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;
        
            }
                DELlIST( fieldEditParamOutC , pOut ) ;
                listC::fieldIF( tinBaseP , pOut , hTo , pczField , _fe_pushC( record ) + _fe_modePushSinkC() + _fe_modeUniqueC() , LF ) ;
                countT pczField[] = { LISTnAMEsYS_RECORD , 0 } ;                                                                                                                                                 \
                ZE( fieldEditParamOutC* , pOut ) ;
            
                listC::openIF( tinBaseP , hTo , pczTo ) ;
                handleC hTo( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                countT pczTo[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM4 , LISTnAMEsYS_TEMPORARY , LISTnAMEsYS_SELECTED , ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] , 0 } ;
            
                puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;
            {
            //SINK UNIQUE A listingVSP for record INTO A TEMPORARY LIST
        
            __( !listingC::bIsListingIF( tinBaseP , &record ) ) ;
            listC& record = *(listC*)(const listingC*)spRecord ;
        
            listingVSP spRecord = entry ;
            listing_listingVSP_C& entry = *(listing_listingVSP_C*)pListing ;
        {
        else
        }
            // POPtINaRGS
            // flagsT flagsRC = listOfSetC::walkIF( tinBaseP , hRecord ) ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] = record.nameF() ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
            // ((tin9S&)tinBaseP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
            // PUSHtINaRGS
            // CONoUTrAW( "================== CHATTERING RECORD ==============================\r\n" ) ;
            // 
            // record.openF( tinBaseP , hRecord ) ;
            // handleC hRecord( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
            // 
            // grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;
        
            }
                DELlIST( fieldEditParamOutC , pOut ) ;
                listOfSetC::fieldIF( tinBaseP , pOut , hTo , pczField , _fe_pushC( record ) + _fe_modePushSinkC() + _fe_modeUniqueC() , LF ) ;
                countT pczField[] = { LISTnAMEsYS_RECORD , 0 } ;                                                                                                                                                 \
                ZE( fieldEditParamOutC* , pOut ) ;
            
                listOfSetC::openIF( tinBaseP , hTo , pczTo ) ;
                handleC hTo( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                countT pczTo[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM4 , LISTnAMEsYS_TEMPORARY , LISTnAMEsYS_SELECTED , ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] , 0 } ;
            
                puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;
            {
            //SINK UNIQUE A listingVSP for record INTO A TEMPORARY LIST
        
            __( !listingOfSetC::bIsListingIF( tinBaseP , &record ) ) ;
            listOfSetC& record = *(listOfSetC*)(const listingC*)spRecord ;
        
            listingVSP spRecord = entry ;
            listingOfSet_listingVSP_C& entry = *(listingOfSet_listingVSP_C*)pListing ;
        {
        if( bOfSet )
    {
    if( pListing && !( pListing->flagsF() & fliLISTINGc_MIXINlIST ) && pListing->idTypeDatumF() == ifcIDtYPEmIXINdATUM_listingVSP )

    listingC* pListing = ((tin9S&)tinBaseP).ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = !((tin9S&)tinBaseP).pPoolUse ? 0 : PUSE.flagsPoolFormatF() ;

    if( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) { BLAMMOiD( 0x12121212 ) ; }
{
/*1*/flagsT _export listWalkSelectCBF( tin0S& tinBaseP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

