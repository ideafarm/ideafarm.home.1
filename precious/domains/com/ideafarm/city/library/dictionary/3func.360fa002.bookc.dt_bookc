
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //}
    //    CONoUTrAW(   ostoSay ) ;
    //    OStEXTAK( ostoSay , " \r\n" ) ;
    //    OStEXTC(  ostoSay , this , '0' ) ;
    //    OStEXTAK( ostoSay , "bookC: -- " ) ;
    //    OStEXT(   ostoSay , TUCK << 2 ) ;
    //{

    // if( ((tinFullS&)tinBaseP).pEther ) ((tinFullS&)tinBaseP).pEther->trace F( tinBaseP , TF3((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(": bookC destructed") ) ; //U:: TO FIND A BUG

    }
        }
            THREADmODE2rESTORE
            THREADmODE3rESTORE
            //if( ((tinFullS&)tinBaseP).pc Utility[ 0 ] ) CONoUTrAW( "deleted  backing file 1\r\n" ) ;
            DELzOMBIE( pd ) ;
            //if( ((tinFullS&)tinBaseP).pc Utility[ 0 ] ) CONoUTrAW( "deleting backing file 1\r\n" ) ;
            THREADmODE3oN( flTHREADmODE3_DISALLOWpUSE )
            THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
            fileC* pd = (fileC*)pbFile ;

            *(flagsT*)&flagsCt &= ~( F(flBOOKc_FILEiScONSTRUCTED) ) ;
            _IO_
        {
        if( !( F(flagsCt) & flBOOKc_NOsTATEsPACE ) )

        }
            //if( ((tinFullS&)tinBaseP).pc Utility[ 0 ] ) CONoUTrAW( "deleted  napkin\r\n" ) ;
            DELzOMBIE( pd ) ;
            //if( ((tinFullS&)tinBaseP).pc Utility[ 0 ] ) CONoUTrAW( "deleting napkin 0\r\n" ) ;
            napkinC* pd = (napkinC*)pbNapkin ;
            //if( ((tinFullS&)tinBaseP).pc Utility[ 0 ] ) CONoUTrAW( "deleting napkin 1\r\n" ) ;
            _IO_
        {
        _IO_
    {
    else
    }
        processGlobal4I.heap.delF( tinBaseP , pbFromHeap ) ;
        _IO_
    {
    if( pbFromHeap )

    // }
    //     } //U::TO FIND A BUG
    //     } //U::TO FIND A BUG
    // 
    //     ((tinFullS&)tinBaseP).pEther->trace F( tinBaseP , (const strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
    //     //OStEXTAK( ostoSay , "\"" ) ;
    //     OStEXTA(  ostoSay , postFileName + offset ) ;
    //     //OStEXTAK( ostoSay , "    \"" ) ;
    //     //OStEXTCF( ostoSay , pHead->cbBody , '0' ) ;
    //     //OStEXTAK( ostoSay , "    " ) ;
    //     //OStEXTCF( ostoSay , pbBody , '0' ) ;
    //     //OStEXTAK( ostoSay , "    " ) ;
    //     //OStEXTCF( ostoSay , this , '0' ) ;
    //     OStEXTAK( ostoSay , "~bookC dt"/*" [this,pbBody,cbBody,postFile]"*/": " ) ;
    //     OStEXT(   ostoSay , TUCK << 3 ) ;
    // 
    //     { //U::TO FIND A BUG
    //     _IO_
    //     { //U::TO FIND A BUG
    // 
    //     } //U::TO FIND A BUG
    //     } //U::TO FIND A BUG
    // 
    //     ;
    //         : 0
    //         ? sizeof postPrefix - 1
    //     /*U::countT*/ offset = postFileName == thirdC::c_strstrIF( tinBaseP , postFileName , postPrefix )
    // 
    //     #endif
    //         static osTextT postPrefix[] = "d:\\ideafarm.home.1\\ephemeral\\backed.up.daily\\domains\\com\\ideafarm\\ipdos\\memorySpaces\\Wo'O Ideafarm\\4\\stateSpaces\\0000ffff\\" ;
    //     #else
    //         static osTextT postPrefix[] = "d:\\ideafarm.home.1\\ephemeral\\backed.up.daily\\domains\\com\\ideafarm\\ipdos\\memorySpaces\\Wo'O Ideafarm\\4\\stateSpaces\\0000ffff\\" ;
    //     #if defined( HOMEdRIVEiS_i )
    // 
    //     { //U::TO FIND A BUG
    //     _IO_
    //     { //U::TO FIND A BUG
    //     ZE( countT , offset ) ; //U:: TO FIND A BUG
    // {
    // if( postFileName && thirdC::c_strstrIF( tinBaseP , postFileName , ".putfileif.s.out." ) )
    // const osTextT* postFileName = *(fileC*)pbFile ;
    // //TO FIND A BUG
    // 
    // if( ((tinFullS&)tinBaseP).pEther ) ((tinFullS&)tinBaseP).pEther->trace F( tinBaseP , TF3((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(": bookC destructing") ) ; //U:: TO FIND A BUG

    //}
    //    LOGrAW(   ostoSay ) ;
    //    OStEXTAK( ostoSay , " \r\n" ) ;
    //    OStEXTC(  ostoSay , this , '0' ) ;
    //    OStEXTAK( ostoSay , "bookC: -  " ) ;
    //    OStEXT(   ostoSay , TUCK << 2 ) ;
    //{

    }
        }
            ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ;
            TELL( postFileShort )
            _IO_
        {
        while( pHead->cRef )
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        else                postFileShort = postFileLong ;
        if( postFileShort ) postFileShort ++ ;
        const osTextT* postFileShort = thirdC::c_strrchrIF( tinBaseP , postFileLong , '\\' ) ;
        const osTextT* postFileLong  = (const osTextT*)*(fileC*)pbFile ;
        _IO_
    {
    if( pHead->cRef )

    //U:: STUDY: WHY IS cRef NEEDED?   CONJ: IT IS ONLY NEEDED TO SUPPORT SMARTPOINTERS
    //U:: ALT: THIS CAN BE DONE BY KEEPING cRef IN GLOBAL STATIC PROCESS MEMORY RATHER THAN IN bookHeaderS
    //U:: ALT: KEEP A SEPARATE cRef FOR EACH bookC INSTANCE OR FOR EACH PROCESS
    //20230115@1247: NOTE: IF MULTIPLE PROCESSES HAVE THIS BOOK OPEN THEN dt'or WILL NOT CONTINUE UNTIL ALL PROCESSES HAVE CLOSED THIS BOOK.  THIS IS MORE THAN WHAT IS NEEDED
    //20180707@0756: ADDED TO RESTORE BLOCKING THAT WAS RECENTLY REMOVED FROM booksC::readF

    _IO_

    TINSL
{
/*1*/bookC::~bookC( voidT )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

