
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    THREADmODE3rESTORE
    }
        }
            pGrabNewElt[ offs ].ungrabF( tinP ) ;

            }
                inc02AM( pcTallyOut[ offs ] ) ;
                }
                    }
                        ppSex[ offs ] = pSexNew                                                       ;
                                                       pPoolContainsMe->pSexLifoConstructed = pSexNew ;
                        pSexNew->pSexLifoConstructed = pPoolContainsMe->pSexLifoConstructed           ;
                    {
                    if( pSexNew )

                    }
                        }
                            DELzOMBIE( pPuseWrap ) ;
                            DELzOMBIE( pSexNew ) ;
                            if( pPoolContainsMe ) pPuseWrap = new( 0 , tinP , pbzPuse , sizeof pbzPuse ) puseC( tinP , *pPoolContainsMe ) ;
                        {
                        if( (const poopC&)*pSexNew )

                        DELzOMBIE( pPuseWrap ) ;

                        THREADmODE2rESTORE
                        }
                            pSexNew = new( 0 , tinP , pbza + offs * sizeof( sexC ) , sizeof( sexC ) ) sexC( tinP , TAG( TAGiDnULL ) , idLineNewP , idiFileNewP , ostoName , expCbDrop , cbDropAdjust , offs , cbDropSeparator , flagsc , idStateSpace , idMemorySpace , pPoolContainsMe ) ;
                            tlsAllocStackExp_a_C tls( tinP ) ;
                        {
                        THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

                        if( pPoolContainsMe ) pPuseWrap = new( 0 , tinP , pbzPuse , sizeof pbzPuse ) puseC( tinP , *pPoolContainsMe ) ;
                        ZE( puseC* , pPuseWrap ) ;
                        byteT pbzPuse[ sizeof( puseC ) ] ;
                    {
                    ZE( sexC* , pSexNew ) ;

                    if( F(flagsCt) & flSLOTSc_NOdROPhEADERS ) flagsc |= fliSEXc_NOdROPhEADERS ;
                    if( F(flagsCt) & flSLOTSc_NOsEXiNpOOL   ) flagsc |= fliSEXc_NOsEXiNpOOL   ;
                    if( F(flagsCt) & flSLOTSc_NOTES         ) flagsc |= fliSEXc_NOTES         ;
                    if( F(flagsCt) & flSLOTSc_READoNLY      ) flagsc |= fliSEXc_READoNLY      ;
                    flagsT                                    flagsc  = fliSEXc_nFeO          ;
                {
                else
                if( ppSex[ offs ] ) { BLAMMO ; }
                inc02AM( pcTallyIn[ offs ] ) ;
            {
            if( pGrabNewElt[ offs ].cGrabbedF() == 1 )                                              // sexC CONSTRUCTION CAN NEST IF !flSLOTSc_NOsEXiNpOOL ; PROCEED WITH THIS SLOT ONLY IF I AM NOT NESTED

            pGrabNewElt[ offs ].grabF( tinP , TAG( TAGiDnULL ) ) ;

            OStEXTC(  ostoName , offs , 0 ) ;
            OStEXTAK( ostoName , "." ) ;
            OStEXTA(  ostoName , ostoNameGroup ) ;
            OStEXT(   ostoName , TUCK << 2 )
        {
        for( countT offs = expSlotsMin ; offs < sizeof ppSex / sizeof ppSex[ 0 ] ; offs ++ )

        //}
        //    }
        //        countT foo = 2 ;
        //    {
        //    if( idIn == 5 )
        //
        //    CONoUTrAW( "\r\n" ) ;    
        //    CONoUTrAW( postName ) ;
        //    CONoUTrAW3( "\r\n slotsC [idIn,name]:    " , idIn , "    " ) ;    
        //
        //    countT idIn = 1 + incv02AM( idInLath ) ;
        //    static countT idInLath ;
        //{
        //if( ((tinNormalS&)tinP).pc Utility[ 0 ] )

        OStEXTAK( ostoNameGroup , ".slotsC.sex" ) ;
        OStEXTA(  ostoNameGroup , postName ) ;
        OStEXT(   ostoNameGroup , TUCK << 2 )
    
        for( countT offg = expSlotsMin ; offg < CsLOTeXTENTS ; offg ++ ) new( 0 , tinP , pbzaGrab + offg * sizeof( grabC ) , sizeof( grabC ) ) grabC( tinP , TAG( TAGiDnULL ) , flGRABc_NOTjEALOUS | flGRABc_SNEAKYlOVER | flGRABc_SHARElAYER , ifcIDgRABlAYER_8POOL5nEW ) ;

        thirdC::c_memsetIF( tinP , (byteT*)pcTallyOut , sizeof pcTallyOut ) ;
        thirdC::c_memsetIF( tinP , (byteT*)pcTallyIn  , sizeof pcTallyIn  ) ;
        thirdC::c_memsetIF( tinP , (byteT*)ppSex      , sizeof ppSex      ) ;
        thirdC::c_strcpyIF( tinP , postName , postNameP ) ;

        puseC puseAT( tinP , ifcIDpOOL_ADAMtEMP ) ;
    {
    THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

    if( cbDropSeparatorP && cbDropSeparatorP - sizeof( countT ) ) { BLAMMOiD( 0x33334444 ) ; }
    if( F(((tinNormalS&)tinP).flagsThreadMode3) & flTHREADmODE3_DISALLOWpUSE   ) { BLAMMOiD( 0x11112222 ) ; }
    _IO_
{
pPoolContainsMe( pPoolContainsMeP )
pGrabNewElt( (grabC*)pbzaGrab ) ,
cbDropHeader( F(flagsCt) & flSLOTSc_NOdROPhEADERS ? 0 : CBsEXdROPhEADER ) ,
cbDropSeparator( cbDropSeparatorP ) ,
) ,
    4           //U:: TRIGRAPH AFTER VERIFY THE TABLE BELOW IS CORRECT
(
cBitsExpSlots
) ,
                : 0
                ? 2
            : expCbDrop == 0x12                                 // THESE ARE OPTIMIZATIONS TO REDUCE ADDRESS SPACE FRAGMENTATION ; sexC OF THESE SIZES WOULD BE CT DURING SETUP OF EVERY ADAM ANYWAY
            ? 3
        : expCbDrop == 0x11                                     // THESE ARE OPTIMIZATIONS TO REDUCE ADDRESS SPACE FRAGMENTATION ; sexC OF THESE SIZES WOULD BE CT DURING SETUP OF EVERY ADAM ANYWAY
        ? thirdC::os_expCbAllocationGrain_IF( tinP ) - expCbDrop
    thirdC::os_expCbAllocationGrain_IF( tinP ) > expCbDrop
(
expSlotsMin
cbDropAdjust( cbDropAdjustP ) ,
expCbDrop( expCbDropP ) ,
poolC_cBitsExpCbDrop( poolC_cBitsExpCbDropP ) ,
idMemorySpace( idMemorySpaceP ) ,
idStateSpace( idStateSpaceP ) ,
flagsCt( flagsP ) ,
/*1*/slotsC::slotsC( tinBaseS& tinP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const countT idLineNewP , const countT idiFileNewP , const osTextT* const postNameP , const countT poolC_cBitsExpCbDropP , const countT expCbDropP , const countT cbDropAdjustP , const countT cbDropSeparatorP , const flagsT flagsP , const countT idStateSpaceP , countT idMemorySpaceP , poolC* const pPoolContainsMeP ) :/*1*/

//     | 
//     | f1             0                       0               0               0 --------------------------------- 0
//     | e1             1                       0               1               1 --------------------------------- 1
//     | d1             2                       0               2               2 --------------------------------- 2
//     | c1             3                       0               3               3                                   2
//     | b1             4                       0               4               4 --------------------------------- 3
//     | a1             5                       0               5               5                                   3
//     | 91             6                       0               6               6                                   3
//     | 81             7                       0               7               7                                   3
//     | 71             8                       0               8               8 --------------------------------- 4
//     | 61             9                       0               9               9                                   4
//     | 51             a                       0               a               a                                   4
//     | 41             b                       0               b               b                                   4
//     | 31             c                       0               c               c                                   4
//     | 21             d                       0               d               d                                   4
//     | 11             e                       0               e               e                                   4
//     | 01             f                       0               f               f                                   4
//     | f              01                      1               01              f                                   4
//     | e              11                      2               11              f                                   4
//     | d              21                      3               21              f                                   4
//     | c              31                      4               31              f                                   4
//     | b              41                      5               41              f                                   4
//     | a              51                      6               51              f                                   4
//     | 9              61                      7               61              f                                   4
//     | 8              71                      8               71              f                                   4
//     | 7              81                      9               81              f                                   4
//     | 6              91                      a               91              f                                   4
//     | 5              a1                      b               a1              f                                   4
//     | 4              b1                      c               b1              f                                   4
//     | 3              c1                      d               c1              f                                   4
//     | 2              d1                      e               d1              f                                   4
//     | 1              e1                      f               e1              f                                   4
//     | 0              f1                      01              f1              f                                   4
//     | 
//     | expCbDrop      expSlotsAddressable     expSlotsMin     expSlotsMax     expSlotsAddressable-expSlotsMin     cBitsNeeded
//     | 
//  cBitsExpSlots IS SET ACCORDING TO THIS TABLE

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

