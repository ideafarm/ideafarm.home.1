
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread = 0 ;

        }
            else        { ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmServePriceF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)pso , (countT)&pPricer , (countT)&b_pPricer ) ; }
            if( ether ) { DEL( pso ) ; }
            socket.acceptF( tin0P , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
            ZE( countT , idPortPeer ) ;
            nicNameC nnPeer ;
            ZE( socketC* , pso ) ;
        {
        while( !ether && !etThread )

        socket.listenF( tin0P ) ;    
        countT idPort = socket.bindF( tin0P , ifcPORToLD1pRICEaUTHORITY ) ;
        socketC socket( tin0P , etThread , TAG( TAGiDnULL ) ) ;
    {
    while( !ether )

    { ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmRefreshPricerF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&pPricer , (countT)&b_pPricer ) ; }
    batonC b_pPricer( tin0P , TAG( TAGiDnULL ) ) ;
    ZE( pricerC* , pPricer ) ;

    etThread.strokeF( tin0P , T("IdeaFarm " "(tm) City Price Authority\r\ni state the price of resource usage on request\r\n\r\n")+TPS("price",0xd,S1C('-'))+T("  ")+TPS("qty",8,S1C('-'))+T("  ")+TPS("idResource",0x20,S1C('-'))+T("\r\n") ) ;
{
else
}
    etThread.strokeF( tin0P , T("Another ")+textIdFileC( tin0P , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tin0P , TAG( TAGiDnULL ) , T("6f30104") ) ;

TODO

DONE( tmRefreshPricerF )
}
    }
        }
            }
                DEL( pDoomed ) ;

                b_pPricer.ungrabF( tin0P ) ;
                pPricer = pPricerNew ;
                pricerC* pDoomed = pPricer ;
                b_pPricer.grabF( tin0P , TAG( TAGiDnULL ) ) ;
            {
            if( pPricerNew )

            pricerC* pPricerNew = new( 0 , tin0P , LF ) pricerC( tin0P , etThread ) ;
        {
        if( !( ( ++ idTry ) % 0x1000 ) ) //U: USE bNewHour
        etThread.osSleepF( tin0P , TOCK ) ;
    {
    while( !ether && !etThread )
    ZE( countT , idTry ) ;

    b_pPricer.ungrabF( tin0P ) ;
    pPricer = new( 0 , tin0P , LF ) pricerC( tin0P , etThread ) ;
    b_pPricer.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    batonC&   b_pPricer = *(batonC*)  pTaskP->c2 ;
    pricerC*& pPricer   = *(pricerC**)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmRefreshPricerF )

DONE( tmServePriceF )

}
    DEL( pso ) ;

    }
        }
            break ;
            __1
            __( idCmd ) ;
        {
        default :
        }
            break ;
            }
                pso->readF( tin0P , &bnu , 1 , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
                ZE( byteT , bnu ) ;
                }
                    pso->writeF( tin0P , (byteT*)&idCitizen , sizeof idCitizen ) ;
                    stShare >> idCitizen ;
                    ZE( countT , idCitizen ) ;
                {
                while( stShare )        
                pso->writeF( tin0P , (byteT*)&cShare , sizeof cShare ) ;
                countT cShare = stShare ;
                b_pPricer.ungrabF( tin0P ) ;
                etThread.delF( tin0P , pcPart ) ;
                pPricer->shareF( tin0P , stShare , pcPart ) ;
                b_pPricer.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                stackC stShare( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO ) ;

                if( pcPart ) pcPart[ ccPart ] = 0 ;
                pso->readF( tin0P , (byteT*)pcPart , sizeof( countT ) * ccPart ) ;
                etThread.newF( tin0P , LF , pcPart , ccPart + 1 ) ; ___( pcPart ) ;
                ZE( countT* , pcPart ) ;
            {
            if( !ether && !etThread && ccPart )
            pso->readF( tin0P , (byteT*)&ccPart , sizeof ccPart ) ;
            ZE( countT , ccPart ) ;
        {
        case idCMDpRICER_SHARE :
        }
            break ;
            }
                pso->readF( tin0P , &bnu , 1 , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
                ZE( byteT , bnu ) ;

                etThread.delF( tin0P , pcPart ) ;
                etThread.strokeF( tin0P , TF4(mPrice,flFORMAT_EXPONENT,2,6)+T("  ")+TF3(qty,flFORMAT_UNSIGNED,8)+T("  ")+TF1(pcPart)+T("\r\n") ) ;
                pso->writeF( tin0P , (byteT*)&mPrice , sizeof mPrice ) ;
                b_pPricer.ungrabF( tin0P ) ;
                measureT mPrice = pPricer->priceF( tin0P , pcPart , qty ) ;
                b_pPricer.grabF( tin0P , TAG( TAGiDnULL ) ) ;

                pso->readF( tin0P , (byteT*)&qty , sizeof qty ) ;
                ZE( countT , qty ) ;

                if( pcPart ) pcPart[ ccPart ] = 0 ;
                pso->readF( tin0P , (byteT*)pcPart , sizeof( countT ) * ccPart ) ;
                etThread.newF( tin0P , LF , pcPart , ccPart + 1 ) ; ___( pcPart ) ;
                ZE( countT* , pcPart ) ;
            {
            if( !ether && !etThread && ccPart )
            pso->readF( tin0P , (byteT*)&ccPart , sizeof ccPart ) ;
            ZE( countT , ccPart ) ;
        {
        case idCMDpRICER_PRICE :
    {
    switch( idCmd )
    pso->readF( tin0P , (byteT*)&idCmd , sizeof idCmd ) ;
    ZE( countT , idCmd ) ;

    }
        etThread.osSleepF( tin0P , TOCK * 4 ) ;
        etThread.strokeF( tin0P , T("waiting for a pricerC object to be constructed\r\n") ) ;
    {
    while( !ether && !etThread && !pPricer )

    pso->etherF( tin0P , etThread ) ;
    batonC&   b_pPricer = *(batonC*)  pTaskP->c3 ;
    pricerC*& pPricer   = *(pricerC**)pTaskP->c2 ;
    socketC*  pso       = (socketC*)  pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmServePriceF )

/*1*/WAKEhIDE( "city.price.authority" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

