
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;

}
    }
        while( ~hWalk ) ;
        }
            }
                etThread.traceF( tinBaseP , T((const byteT*)page) ) ;
            {
            else
            if( !page ) { BLAMMO ; } //SHOULD BE IMPOSSIBLE

            pageC page = jotFoo[ idj ] ;

            countT idj = stIdJot.upF( tinBaseP , hWalk ) ;
        {
        do
        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stIdJot )
    etThread.traceF( tinBaseP , T("reading in sorted order, using stIdJot") ) ;

    }
        }
            stIdJot.sinkF( tinBaseP , countTC() , idJot , flSTACKsINK_null , subtractJottedOsTextF ) ;
            etThread.traceF( tinBaseP , T("[idJot]:    ")+TF2(idJot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

            countT idJot = jotFoo.writeF( tinBaseP , tDrawing , tDrawing.csF( tinBaseP ) + 1 ) ;

            TN( tDrawing , "" ) ; tDrawing = TF3(bRandom?cDrawing:ii,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,3) ;
            countT     cDrawing = mDrawing * TUCK ;
            measure04T mDrawing = ru ;
        {
        for( countT ii = 1 ; ii <= TUCK >> 4 ; ii ++ )

        ranUniC ru( tinBaseP , 0 , 0 ) ;
    {
    stackC stIdJot( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE | flSTACKc_SINKiGNOREtABS | flSTACKc_SINKrEVERSE ) ;

    jotC jotFoo( tinBaseP , "foo" , flJOTc_WRITE | flJOTc_PRIVATE | flJOTc_DELETE | flJOTc_PURGEoNcT ) ;
{

boolT bRandom = 0 ;

TODO

}
    return sgn ;

    }
        ether.delF( tinBaseP , post1Copy ) ;

        sgn = thirdC::c_strcmpIF( tinBaseP , post1Copy , post2 ) ; ;
        ether.traceF( tinBaseP , T("subtract [post1,post2]:    ")+T(post1Copy)+T("    ")+T(post2) ) ;

        const osTextT* post2 = page2 ;
        pageC page2 = jotC::readIF( tinBaseP , c2P ) ;

        }
            thirdC::c_memcpyIF( tinBaseP , post1Copy , post1 , cost1 ) ;    
            ether.newF( tinBaseP , LF , post1Copy , cost1 ) ; ___( post1Copy ) ;
            countT         cost1 = page1 ;
            const osTextT* post1 = page1 ;
            pageC page1 = jotC::readIF( tinBaseP , c1P ) ;
        {
        ZE( osTextT* , post1Copy ) ;

        etherC& ether = *(etherC*)pEther ;
    {
    if( pEther )
    ZE( sCountT , sgn ) ;

    }
    {
    IFbEcAREFUL
{
/*1*/countT subtractJottedOsTextF( tin0S& tinBaseP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )/*1*/


//BASELINE: 6ce

/*1*/WAKEsHOWtEXT( "doodle.using.jotC.to.efficiently.sort.osTextT.strings" )/*1*/
/**/
*/
/*




//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

