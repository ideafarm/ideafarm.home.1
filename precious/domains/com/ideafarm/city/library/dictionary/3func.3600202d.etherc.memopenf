
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    thirdC::dosAllocMemIF( tinBaseP , pvP , cbP ) ;
    _IO_

    }
        if( POOP ) return ;
        __Z( cbP ) ;
        __NZ( pvP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::memOpenF( tinBaseS& tinBaseP , voidT*& pvP , const countT cbP )/*1*/
*/
    this example specifies that the memory must be exactly large enough to hold 0x1000 countT objects
   example: 0x1000 * sizeof( countT )
  specify the number of bytes desired
  must not be 0
 cbP
   ether.memOpenF( tinBaseP , pva , 8 ) ;
   ZE( voidT* , pva ) ;
   to use this memory, pva must be cast to a type such as byteT* or countT*
   this example allocates 8 bytes
  example 3
   ether.memOpenF( tinBaseP , (voidT*&)pca , 8 * sizeof( countT ) ) ;
   ZE( countT* , pca ) ;
   this example allocates room for 8 countT objects
  example 2
   ether.memOpenF( tinBaseP , (voidT*&)pba , 8 ) ;
   ZE( byteT* , pba ) ;
   this example allocates 8 bytes
  example 1
  must be 0
 pvP
arguments
  \<A HREF=\"5.c310104.1.1.0.html\"\>c310104:  WAKEsHOW( "example.simplest.func.1030034.etherC.memOpenF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030034.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$memOpenF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

