
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;                            

etThread.traceF( tinBaseP , T(USCORE127 " all filtered (end)") ) ;
etThread.delF( tinBaseP , pcMaxOverride ) ;
etThread.delF( tinBaseP , pcMinOverride ) ;
etThread.delF( tinBaseP , pFlagsOverride ) ;
etThread.delF( tinBaseP , pstt1m ) ;

}
    }
        etThread.delF( tinBaseP , psttm ) ;
        etThread.traceF( tinBaseP , T("match: ")+T(psttm) ) ;
        stMatch >> psttm ;
        ZE( strokeS* , psttm ) ;
    {
    while( stMatch )

    }
        //etThread.traceF( tinBaseP , T("                ")+T("0              1               2               3") ) ;
        //etThread.traceF( tinBaseP , T("                ")+T("123456789abcdef0123456789abcdef0123456789abcdef0") ) ;
        //etThread.traceF( tinBaseP , T("                ")+tShortInspect ) ;
        //etThread.traceF( tinBaseP , T("[idHit,idf]:    ")+TF2(idHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        etThread.traceF( tinBaseP , tShortInspect ) ;
    {
    if( idHit )

    countT idHit = etThread.strIdOptimizedClosureF( tinBaseP , &stMatch , flSTRmATCH_null , idf , sttq , psttRegExp , tShortInspect , flagsOptimize , pFlagsOverride , pcMinOverride , pcMaxOverride ) ;
    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    stackC stMatch( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;

    //etThread.traceF( tinBaseP , T("?               ")+tShortInspect ) ;

    }
        etThread.delF( tinBaseP , psttShortInspect ) ;
        etThread.delF( tinBaseP , psttPathInspect ) ;
        tShortInspect = T(psttShortInspect) ;
        tPathInspect  = T(psttPathInspect) ;
        etThread.strBisectF( tinBaseP , psttPathInspect , psttShortInspect , psttc2 , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttPathInspect ) ; ___( psttShortInspect ) ;
        ZE( strokeS* , psttShortInspect ) ;
        ZE( strokeS* , psttPathInspect ) ;
        TN( tSlash , "/" ) ;
    {
    TN( tShortInspect , "" ) ;
    TN( tPathInspect , "" ) ;
{
FORsTRINGSiN2( pstt1m )
etThread.diskFindFileOrDirOldF( tinBaseP , pstt1m , tPathLike+tStar , 0 , 0 , 0 , 0 ) ; ___( pstt1m ) ;
TN( tb4 , "    " ) ;
TN( tStar , "*" ) ;
etThread.traceF( tinBaseP , T(USCORE127 " all filtered (begin)") ) ;

ZE( strokeS* , pstt1m ) ;

}
    etThread.delF( tinBaseP , psttd ) ;
    etThread.traceF( tinBaseP , T("IPDOS (tm) regular expression:    ")+T(psttd) ) ;
    etThread.strDumpStrokesIF( tinBaseP , psttd , psttRegExp ) ; ___( psttd ) ;
    ZE( strokeS* , psttd ) ;
{

etThread.strPatternFromWildcardsMicrosoftF( tinBaseP , psttRegExp , flagsOptimize , pFlagsOverride , pcMinOverride , pcMaxOverride , tShortLike ) ; ___( psttRegExp ) ; ___( pFlagsOverride ) ; ___( pcMinOverride ) ; ___( pcMaxOverride ) ;
ZE( countT* , pcMaxOverride  ) ;
ZE( countT* , pcMinOverride  ) ;
ZE( flagsT* , pFlagsOverride ) ;
ZE( flagsT  , flagsOptimize  ) ;
ZE( strokeS* , psttRegExp ) ;

}
    etThread.delF( tinBaseP , psttd ) ;
    etThread.traceF( tinBaseP , T("wildcard expression:    \"")+tShortLike+T("\"    ")+T(psttd) ) ;
    etThread.strDumpStrokesIF( tinBaseP , psttd , tShortLike ) ; ___( psttd ) ;
    ZE( strokeS* , psttd ) ;
{

}
    etThread.delF( tinBaseP , psttShortLike ) ;
    etThread.delF( tinBaseP , psttPathLike ) ;
    tShortLike = T(psttShortLike) ;
    tPathLike  = T(psttPathLike) ;
    etThread.strBisectF( tinBaseP , psttPathLike , psttShortLike , tLike , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttPathLike ) ; ___( psttShortLike ) ;
    ZE( strokeS* , psttShortLike ) ;
    ZE( strokeS* , psttPathLike ) ;
    TN( tSlash , "/" ) ;
{
TN( tShortLike , "" ) ;
TN( tPathLike , "" ) ;

}
    etThread.traceF( tinBaseP , T(USCORE127 " like (end)") ) ;
    etThread.delF( tinBaseP , pstt1m ) ;
    }
        etThread.traceF( tinBaseP , psttc1 ) ;
    {
    FORsTRINGSiN1( pstt1m )
    etThread.diskFindFileOrDirOldF( tinBaseP , pstt1m , tLike , 0 , 0 , 0 , 0 ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
    etThread.traceF( tinBaseP , T(USCORE127 " like (begin)") ) ;
{

//TN( tLike , "///d/tmp/wildcard.test/*.batonc.*" ) ;
//TN( tLike , "///d/tmp/wildcard.test/*.batoncthisistoolongthisistoolongthisistoolongthisistoolongthisistoolong.*" ) ;
//TN( tLike , "///d/tmp/wildcard.test/1*" ) ;

     TN( tLike , "///d/tmp/wildcard.test.2/*b*" ) ;
//G: TN( tLike , "///d/tmp/wildcard.test.2/a*c" ) ;
//G: TN( tLike , "///d/tmp/wildcard.test.2/a*" ) ;
//G: TN( tLike , "///d/tmp/wildcard.test.2/*b" ) ;

TODO

// THIS ADAM IS USED AS A DUT TO VERIFY THAT WINDOWS 10 FILENAME WILDCARD SEARCH BEHAVIOR IS EMULATED EXACTLY USING IPDOS (TM) REGULAR EXPRESSIONS GENERATED BY strPatternFromWildcardsMicrosoftF

/*1*/WAKEsHOWtEXT( "dut.emulation.of.filename.wildcards.using.strIdOptimizedClosureF.and.strPatternFromWildcardsMicrosoftF" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
