
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tin0P ) ;
etThread.osThreadF( tin0P , countTC() , tmWorkF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , 1/*U::OBSOLETE*/ ) ;
etThread.osThreadF( tin0P , countTC() , tmWorkF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , 1 ) ;

TODO

DONE( tmWorkF )
}
    }
        if( POOP ) POOPR
        }
            }
                sgnDone_tmPutPayloadsF.waitF( tin0P ) ;
                bQuit = 1 ;
                }
                    }
                        else       { etThread.strokeF( tin0P , T("payload arrived\r\n") ) ; }
                        if( POOP ) POOPR
    
                        idptRelay << sIn ;
                        portTimeC idptRelay ;
    
                        sIn >> sPay ;
                        soulC sPay( tin0P , TAG( TAGiDnULL ) ) ;
    
                        sIn >> flags ;
                        ZE( flagsT , flags ) ;
    
                        sIn >> sToMediator ;
                        soulC sToMediator( tin0P , TAG( TAGiDnULL ) ) ;
    
                        sIn >> sTo ;
                        soulC sTo( tin0P , TAG( TAGiDnULL ) ) ;
    
                        etThread.delF( tin0P , pczChannel ) ;
                        sIn >> pczChannel ;
                        ZE( countT* , pczChannel ) ;
                    {
                    else if( idCmd == ifcOLDiDtYPEwRAP_GIFT )
                         if( idCmd == ifcOLDiDtYPEwRAP_QUIT    ) break ;
            
                    sIn >> idCmd ;
                    ZE( countT , idCmd ) ;
            
                    __( idVersion - 1 ) ;
                    sIn >> idVersion ;
                    ZE( countT , idVersion ) ;
            
                    __( idProtocol - ifcIDpROTOCOL_RELAYwRAP ) ;
                    sIn >> idProtocol ;
                    ZE( countT , idProtocol ) ;
            
                    etThread.delF( tin0P , psttTradeMark ) ;
                    __( ((tin9S&)tin0P).pEtScratch->strCompareF( tin0P , psttTradeMark , T("IdeaFarm " "(tm)") ) ) ;
                    sIn >> psttTradeMark ;
                    ZE( strokeS* , psttTradeMark ) ;
            
                    sock.readF( tin0P , sIn ) ;
                    soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( !ether && !etThread && !POOP )
    
                etThread.osThreadF( tin0P , countTC() , tmPutPayloadsF , &sgnDone_tmPutPayloadsF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&sock , (countT)&bQuit ) ;
                signC sgnDone_tmPutPayloadsF( tin0P , TAG( TAGiDnULL ) ) ;
                ZE( boolT , bQuit ) ;
            
                sock.connectF( tin0P , idpTeat2 , (nicNameC&)idpTeat2 ) ;
                socketC sock( tin0P , *((tin9S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
            {
            if( idpTeat2 )
            portC idpTeat2 = host.idpTeat ;
            
            }
                while( !ether && !idpTeat ) { ++ s ; ether.osSleepF( tin0P , TUCK * 0x40 ) ; }
                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
            {
        {
        while( !ether && !etThread )
        portC& idpTeat = host.idpTeat ;
        homeS& host = homeS::homeIF() ;
        SCOOPS
    {
    IFsCRATCH

    const countT idRelay = pTaskP->c1 ; //U::OBSOLETE
{
if( pTaskP && pTaskP->c1 )
TASK( tmWorkF )

DONE( tmPutPayloadsF )
}
    }
        }
            ++ s ; ether.osSleepF( tin0P , TOCK ) ;
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    
            if( POOP ) POOPR
            
            sockP.writeF( tin0P , sWrap ) ;
            etThread.strokeF( tin0P , T(USCORE79 "\r\n") ) ;
    
            /* a-d */ homeS::homeIF().idptRelay >> sWrap ;
            /* 9 */ sWrap << sGift ;
            /* 8 */ sWrap << flags ;
            /* 7 */ sWrap << sToMediator ;
            /* 6 */ sWrap << sTo ;
            /* 5 */ sWrap << (countT*)c8Channel ;
            /* 4 */ sWrap << (countT)ifcOLDiDtYPEwRAP_GIFT ;
            /* 3 */ sWrap << (countT)1 ; // idVersion
            /* 2 */ sWrap << (countT)ifcIDpROTOCOL_RELAYwRAP ;
            /* 1 */ sWrap << (strokeS*)tTM ;
            soulC sGift( tin0P , TAG( TAGiDnULL ) ) ;
            flagsT flags = flCIOpUT_null ;
            soulC sToMediator( tin0P , TAG( TAGiDnULL ) ) ;
            soulC sTo( tin0P , TAG( TAGiDnULL ) ) ;
            soulC sWrap( tin0P , TAG( TAGiDnULL ) ) ;
        {
        while( !ether && !bQuitP && !etThread )
        count8S c8Channel( 1 , 2 , 3 , 4 ) ;
        TN( tTM , "IdeaFarm " "(tm)" ) ;
        SCOOPS
    {
    IFsCRATCH

    boolT&   bQuitP =   *(boolT*)pTaskP->c2 ;
    socketC& sockP  = *(socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmPutPayloadsF )

/*1*/WAKEhIDE( "ifcIDaDAM_SPACElOAD.space.load.simulator" )/*1*/
/**/
*/
    sleep
    write a soulC
   while not fired
  tmLoadF
    say "payload received"
   for each incoming soulC
   if leaf relay then launch tmLoadF
   connect
  tmWorkF
 for each target relay
pseudocode
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

