
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                    if( ((tinNormalS&)tinBaseP).monitor.idThread <= ClOWtHREADS && !( ++ processGlobal2S::_processGlobal2I_IF().pcPhaseLow[ ((tinNormalS&)tinBaseP).monitor.idThread ] ) ) { BLAMMO ; }
                    _IO_                                                                                                                                                                                                                                                    \
                    if( ((tinNormalS&)tinBaseP).idPhase1 < ifcIDpHASEtHREAD_WORKING ) ((tinNormalS&)tinBaseP).idPhase1 = ifcIDpHASEtHREAD_WORKING ;                                                                                                                                                               \
                    /*(countT&)_tlsBlobStackTop = espAM() ;                      */                                                                                                                                                                                         \
                    /*tlsBlobC _tlsBlobStackTop( tinBaseP , "appStackTop" , "tin" ) ;*/                                                                                                                                                                                         \
                    TELL( "TASK0: entering application code" )                                                                                                                                                                                                              \
                    /*if( F(thirdC::third_flagsModeAdam1I_IF(tinBaseP)) & flADAMmODE1_WHEREaLL && !( F(((tinNormalS&)tinBaseP).monitor.flagsThreadMode1) & flTHREADmODE1_NOwHERE ) ) etThread.etherWhereF( tinBaseP , ifcIDaCTIONwHERE_WATCH ) ;*/                                                     \
                    }                                                                                                                                                                                                                                                       \
                        ether.boxPutF(    tinBaseP , psttThreadFile , "T" ) ;                                                                                                                                                                                                   \
                        ether.strMakeF(    tinBaseP , LF , psttThreadFile , T("///ideafarm/ephemeral/tmp/threads/")+TF1(((tinNormalS&)tinBaseP).osPid)+tDot+TF1(DDNUMB)+tDot+T(#taskFP)+tDot+TF1(((tinNormalS&)tinBaseP).monitor.idThread) ) ; ___( psttThreadFile ) ;                                                \
                        TN( tDot , "." ) ;                                                                                                                                                                                                                                  \
                    {                                                                                                                                                                                                                                                       \
                    if( F(thirdC::third_flagsModeAdam1I_IF(tinBaseP)) & flADAMmODE1_SEEtHREADSaSfILES )                                                                                                                                                                         \
                    ether.osTimeNowF(    tinBaseP , ((tinNormalS&)tinBaseP).time1 , ((tinNormalS&)tinBaseP).time2 ) ;                                                                                                                                                                                                 \
                    /*etherC::ifcSayIF( T("ADAM CELL (idAdam,osPid): ")+TF1(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T(" ")+TF1(((tinNormalS&)tinBaseP).osPid)+T(" ")+TF1(((tinNormalS&)tinBaseP).osTid)+T(" \"")+T(((tinNormalS&)tinBaseP).postThreadName)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;*/                       \
                {                                                                                                                                                                                                                                                           \
                                                                                                                                                                                                                                                                            \
                /*((tinNormalS&)tinBaseP).pSgnUtility = &_sgnUtility ;*/                                                                                                                                                                                                                       \
                /*signC _sgnUtility( tinBaseP , TAG( TAGiDnULL ) ) ;*/                                                                                                                                                                                                          \
                                                                                                                                                                                                                                                                            \
                /*((tinNormalS&)tinBaseP).pEther = &etThread ;*/                                                                                                                                                                                                                               \
                TELL( "TASK0: final setup" )                                                                                                                                                                                                                                \
                                                                                                                                                                                                                                                                            \
                /*POPUP( TF1(((tinNormalS&)tinBaseP).monitor.idThread)+T(" ")+T(((tinNormalS&)tinBaseP).postThreadName)+T("\r\n") ) ;*/                                                                                                                                                                           \
                                                                                                                                                                                                                                                                            \
                /*((tinNormalS&)tinBaseP).pScoopEtThread = new( 0 , tinBaseP , pbScoop , sizeof pbScoop ) scoopC( tinBaseP , LF , etThread ) ; ___( ((tinNormalS&)tinBaseP).pScoopEtThread  ) ;*/                                                                                                                         \
                /*byteT pbScoop[ sizeof( scoopC ) ] ;*/                                                                                                                                                                                                                     \
                /*etherC& etThread  = *pEtThread ;*/                                                                                                                                                                                                                        \
            {                                                                                                                                                                                                                                                               \
            /*if( pEtThread   && ((tinNormalS&)tinBaseP).pEtScratch   )*/                                                                                                                                                                                                                      \
            ZE( strokeS* , psttThreadFile ) ;                                                                                                                                                                                                                               \
            TELL( "TASK0: after newing etThread" )                                                                                                                                                                                                                          \
            /*TESTsCRATCH ;*/                                                                                                                                                                                                                                               \
            /*((tinNormalS&)tinBaseP).pEtScratch   = new( 0 , tinBaseP , pbEther2 , sizeof pbEther2 ) etherC( tinBaseP , TAG( TAGiDnULL ) , flTHIRDmODE_IMPOTENCEeXPECTED ) ;*/                                                                                                                        \
            /*etherC* pEtThread = new( 0 , tinBaseP , pbEther1 , sizeof pbEther1 ) etherC( tinBaseP , TAG( TAGiDnULL ) , flTHIRDmODE_TINoWNER | flagsThirdModeP ) ;*/                                                                                                               \
            /*byteT pbEther2[ sizeof( etherC ) ] ;*/                                                                                                                                                                                                                        \
            /*byteT pbEther1[ sizeof( etherC ) ] ;*/                                                                                                                                                                                                                        \
            TELL( "TASK0: newing etThread" )                                                                                                                                                                                                                                \
                                                                                                                                                                                                                                                                            \
            if( pTaskP && F( pTaskP->flagsThreadMode1Dad ) & flTHREADmODE1_NOwHERE                 ) ((tinNormalS&)tinBaseP).monitor.flagsThreadMode1 |= flTHREADmODE1_NOwHERE                 ;                                                                                               \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_SUPPRESStELLmONITOR     )         ((tinNormalS&)tinBaseP).flagsThreadMode2 |= flTHREADmODE2_SUPPRESStELLmONITOR     ;                                                                                               \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_YELL                    )         ((tinNormalS&)tinBaseP).flagsThreadMode2 |= flTHREADmODE2_YELL                    ;                                                                                               \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_WATCHfORaSYNCHiMPOTENCE )         ((tinNormalS&)tinBaseP).flagsThreadMode2 |= flTHREADmODE2_WATCHfORaSYNCHiMPOTENCE ;                                                                                               \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_QUIETiMPOTENCE          )         ((tinNormalS&)tinBaseP).flagsThreadMode2 |= flTHREADmODE2_QUIETiMPOTENCE          ;                                                                                               \
            if( pTaskP && F( pTaskP->flagsThreadMode2Dad ) & flTHREADmODE2_SHOWpROGRESS            )         ((tinNormalS&)tinBaseP).flagsThreadMode2 |= flTHREADmODE2_SHOWpROGRESS            ;                                                                                               \
            TELL( "TASK0: setting flagsThreadMode2" )                                                                                                                                                                                                                       \
            /*CODEsYNC: 00100df 0010055*/                                                                                                                                                                                                                                   \
                                                                                                                                                                                                                                                                            \
            /*etRock.traceF( tinBaseP , T("TASK0 [osTid]: ")+TF4(((tinNormalS&)tinBaseP).osTid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) , flTRACE_FORCEnOsILENCE ) ;*/                                                                                                     \
                                                                                                                                                                                                                                                                            \
            ((tinNormalS&)tinBaseP).pcQuit = &(const countT&)ether ;                                                                                                                                                                                                                           \
            ((tinNormalS&)tinBaseP).monitor.idProcessOld = thirdC::third_idProcessOldI_IF( tinBaseP ) ;                                                                                                                                                                                            \
            ((tinNormalS&)tinBaseP).idlTask  = ifcLINE ;                                                                                                                                                                                                                                       \
            ((tinNormalS&)tinBaseP).idiTask  = DDNUMB ;                                                                                                                                                                                                                                        \
            TELL( "TASK0: setting miscellaneous fields in tinBaseP" )                                                                                                                                                                                                           \
            etherC& etRock = etherC::etRockIF( tinBaseP ) ;                                                                                                                                                                                                                     \
            etherC& ether = etherC::etPrimeIF( tinBaseP ) ;                                                                                                                                                                                                                     \
            thirdC::osTraceWrongNodeIF( tinBaseP , (byteT*)taskFP##_workF , #taskFP , "_workF" ) ;                                                                                                                                                                              \
            TINSL                                                                                                                                                                                                                                                           \
        {                                                                                                                                                                                                                                                                   \
        if( bTinOk )                                                                                                                                                                                                                                                        \
        TELL( "TASK0: after newing either a tinNormalS in the working poolOld" )                                                                                                                                                                                                  \
        /* AFTER THIS LINE, DO NOT CONSTRUCT ANY OBJECTS THAT HAVE DESTRUCTORS (BECAUSE DECREMENTING cAllKidThreadsI cAllOrphanThreadsI MUST BE THE VERY LAST THING THAT THIS THREAD DOES) */                                                                               \
                                                                                                                                                                                                                                                                            \
        }                                                                                                                                                                                                                                                                   \
            }                                                                                                                                                                                                                                                               \
                ___( pTin ) ;                                                                                                                                                                                                                                               \
                TINSL                                                                                                                                                                                                                                                       \
                /*pTinF() = pTin ;*/                                                                                                                                                                                                                                        \
                bTinOk = 1 ;                                                                                                                                                                                                                                                \
            {                                                                                                                                                                                                                                                               \
            if( pTin )                                                                                                                                                                                                                                                      \
            tinBaseS* pTin = new( 0 , tinBaseP , LF ) tinNormalS( tinBaseP , TAG( TAGiDnULL ) , ebpAM() , pTaskP->idThread , pTinBaseDad , #taskFP , F(pTaskP->flags) & flTHREADlAUNCH_INHERITjOTrEGISTRATIONS ? flTINs_INHERITjOTrEGISTRATIONS : flTINs_null , ifcIDtINnAMED_tinInPool ) ;       \
            TELL( "TASK0: newing a tinNormalS in the working poolOld" )                                                                                                                                                                                                           \
            tinBaseS* const pTinBaseDad = F(pTaskP->flags) & flTHREADlAUNCH_ORPHAN ? 0 : pTaskP->pTinBaseDad ;                                                                                                                                                                          \
        {                                                                                                                                                                                                                                                                   \
        else                                                                                                                                                                                                                                                                \
        }                                                                                                                                                                                                                                                                   \
            THREADmODE5oN( flTHREADmODE5_TINiSnOTiNpOOL ) ;                                                                                                                                                                                                                 \
            bTinOk = 1 ;                                                                                                                                                                                                                                                    \
        {                                                                                                                                                                                                                                                                   \
        if( F(pTaskP->flags) & flTHREADlAUNCH_NOtINiNpOOL )                     /*20240919@1534: I DON'T REMEMBER WHAT THE BENEFIT IS OF CT'ING tinNormalS IN POOL*/                                                                                                              \
        ZE( boolT , bTinOk ) ;                                                                                                                                                                                                                                              \
                                                                                                                                                                                                                                                                            \
        }                                                                                                                                                                                                                                                                   \
            }                                                                                                                                                                                                                                                               \
                ++ s ; thirdC::dosSleepIF( tinBaseP , TOCK >> 3 ) ;                                                                                                                                                                                                             \
            {                                                                                                                                                                                                                                                               \
            while( *pTaskP->pcAlive )                                                                                                                                                                                                                                       \
            inc02AM( *pTaskP->pcAlive ) ;                                                                                                                                                                                                                                   \
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;                                                                                                                                                                                                                           \
        {                                                                                                                                                                                                                                                                   \
        if( pTaskP->pcAlive )   /* ALLOWS THE LAUNCHING THREAD TO LAUNCH MANY THREADS, WAIT FOR ALL THREAD STACKS TO BE ALLOCATED, AND THEN SAY "GO" TO HAVE THEM ALL PROCEED, IN ORDER TO REDUCE FRAGMENTATION OF ADDRESS SPACE */                                         \
                                                                                                                                                                                                                                                                            \
        thirdC::osTraceWrongNodeIF( tinBaseP , (byteT*)&pTaskP , #taskFP , "_workF: pTaskP" ) ;                                                                                                                                                                                 \
        thirdC::osTraceWrongNodeIF( tinBaseP , (byteT*)argP , #taskFP , "_workF: argP"      ) ;                                                                                                                                                                                 \
        taskS* pTaskP = (taskS*)argP ;                                                                                                                                                                                                                                      \
        TELL( "TASK0: workF+" )                                                                                                                                                                                                                                             \
                                                                                                                                                                                                                                                                            \
        /*OStEXTcLEAR( _ostoTmp )                                                                                                              */                                                                                                                           \
        /*osTextC _ostRangerTag( _ostoTmp.costF() + 1 , _ostoTmp , _tlsBlobStatRangerTag , _tlsBlobStatRangerTag.cbF() ) ;                     */                                                                                                                           \
        /*tlsBlobC _tlsBlobStatRangerTag( tinBaseP , "rangerTag" , "sys" , 2 * sizeof( countT ) + _ostoTmp.costF() + 1 , ifcIDtYPEtLSbLOBc_FOOT ) ;*/                                                                                                                           \
        /*tlsAllocStackExp_8_C tlsForMe( tinBaseP ) ;                                                                                              */                                                                                                                           \
        /*OStEXTC(  _ostoTmp , ((tinNormalS&)tinBaseP).monitor.idThread , 0 )                                                                                     */                                                                                                                           \
        /*OStEXTAK( _ostoTmp , "." )                                                                                                           */                                                                                                                           \
        /*OStEXTA(  _ostoTmp , ((tinNormalS&)tinBaseP).postThreadName )                                                                                           */                                                                                                                           \
        /*OStEXTAK( _ostoTmp , "RangerTag:threadStack." )                                                                                      */                                                                                                                           \
        /*OStEXTAK( _ostoTmp , "!ifc" )                                                                                                        */                                                                                                                           \
        /*OStEXT(   _ostoTmp , 0x80 )                                                                                                          */                                                                                                                           \
                                                                                                                                                                                                                                                                            \
        _IO_ TELLsYSlIFInAME( #taskFP )                                                                                                                                                                                                                                     \
        if( ((tinNormalS&)tinBaseP).monitor.idThread <= ClOWtHREADS && !( ++ processGlobal2S::_processGlobal2I_IF().pcPhaseLow[ ((tinNormalS&)tinBaseP).monitor.idThread ] ) ) { BLAMMO ; }                                                                                                                       \
        TINSL                                                                                                                                                                                                                                                               \
    {                                                                                                                                                                                                                                                                       \
    countT taskFP##_workF( countT argP )                                                                                                                                                                                                                                    \
                                                                                                                                                                                                                                                                            \
#define TASK0nOeTHERS(taskFP,flagsThirdModeP)                                                                                                                                                                                                                               \

//CODEsYNC: 0010055 0010056

/*1*//*TASK0nOeTHERS(taskFP,flagsThirdModeP)*//*1*/
/**/
*/
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.11000023.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
