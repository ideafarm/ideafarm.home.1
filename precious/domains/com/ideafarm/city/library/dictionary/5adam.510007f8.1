
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

THREADmODE4rESTORE
}
    }
        etThread.delF( tin0P , pbSymPlainText ) ;
        etThread.traceF( tin0P , T("[pbSymPlainText]:    ")+T(pbSymPlainText) ) ;

        etThread.delF( tin0P , pbSymCypherText ) ;
        etThread.hushDecryptF( tin0P , pbSymPlainText , cbSymPlainText , pbSymCypherText , cbSymCypherText , pbHushedSymKey , cbHushedSymKey , pbSeed , sizeof pbSeed                            , hKeyPrivate ) ; ___( pbSymPlainText  ) ;
        ZE( countT , cbSymPlainText ) ;
        ZE( byteT* , pbSymPlainText ) ;

        etThread.hushEncryptF( tin0P                                   , pbSymCypherText , cbSymCypherText , pbHushedSymKey , cbHushedSymKey , pbSeed , sizeof pbSeed , ppbIn[ offi ] , offi + 1 , hKeyPublic  ) ; ___( pbSymCypherText ) ;
        ZE( countT , cbSymCypherText ) ;
        ZE( byteT* , pbSymCypherText ) ;
    {
    for( countT offi = 0 ; offi < sizeof ppbIn / sizeof ppbIn[ 0 ] ; offi ++ )

    etThread.hushWritePublicKeyToFileF(  tin0P , T("///d/tmp/scratch.adam.ether.key.public.verify.pem")  , hKeyPublic  ) ;
    etThread.hushWritePrivateKeyToFileF( tin0P , T("///d/tmp/scratch.adam.ether.key.private.verify.pem") , hKeyPrivate ) ;

    etThread.hushReadPublicKeyFromFileF(  tin0P , hKeyPublic  , T("///d/tmp/scratch.adam.ether.key.public.pem")  ) ;
    etThread.hushReadPrivateKeyFromFileF( tin0P , hKeyPrivate , T("///d/tmp/scratch.adam.ether.key.private.pem") ) ;

    etThread.hushWritePublicKeyToFileF(  tin0P , T("///d/tmp/scratch.adam.ether.key.public.pem")  , hKeyPair ) ;
    etThread.hushWritePrivateKeyToFileF( tin0P , T("///d/tmp/scratch.adam.ether.key.private.pem") , hKeyPair ) ;

    etThread.traceF( tin0P , T("generated") ) ;
    etThread.hushMakeKeyPairF( tin0P , hKeyPair , 0x400 ) ;
    etThread.traceF( tin0P , T("generating...") ) ;

    handleC hKeyPublic(  tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_OPENSSLkEYpUBLIC  ) ;
    handleC hKeyPrivate( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_OPENSSLkEYpRIVATE ) ;
    handleC hKeyPair(    tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_OPENSSLkEYpAIR    ) ;
{
THREADmODE4oN( flTHREADmODE4_ARMoPENsSL )

TODO

countT cbHushedSymKey = sizeof pbHushedSymKey ;
byteT  pbHushedSymKey[ CBhUSHEDsYMkEY ] ;
byteT  pbSeed[ CBhUSHsEEDaLLOCATION ] ;

//byteT  pbIn[] = "Thank you, Jesus!" ;

;
}
    "123456789abcdef0123456789abcdef0" ,
    "123456789abcdef0123456789abcdef" ,
    "123456789abcdef0123456789abcde" ,
    "123456789abcdef0123456789abcd" ,
    "123456789abcdef0123456789abc" ,
    "123456789abcdef0123456789ab" ,
    "123456789abcdef0123456789a" ,
    "123456789abcdef0123456789" ,
    "123456789abcdef012345678" ,
    "123456789abcdef01234567" ,
    "123456789abcdef0123456" ,
    "123456789abcdef012345" ,
    "123456789abcdef01234" ,
    "123456789abcdef0123" ,
    "123456789abcdef012" ,
    "123456789abcdef01" ,
    "123456789abcdef0" ,
    "123456789abcdef" ,
    "123456789abcde" ,
    "123456789abcd" ,
    "123456789abc" ,
    "123456789ab" ,
    "123456789a" ,
    "123456789" ,
    "12345678" ,
    "1234567" ,
    "123456" ,
    "12345" ,
    "1234" ,
    "123" ,
    "12" ,
    "1" ,
    "" ,
{
byteT* ppbIn[] =


/*1*/WAKEsHOWtEXT( "example.other.openssl.encryption.decryption.using.etherC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
