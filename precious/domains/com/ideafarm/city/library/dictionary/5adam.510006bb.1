
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("loafing") ) ;

}
    }
        }
            }
                while( ~hWalkFresh && !ether ) ;
                }
                    etThread.delF( tinBaseP , psttfnFresh ) ;
                    }
                        while( ~hWalkStale && !ether ) ;
                        }
                            etThread.delF( tinBaseP , psttfnStale ) ;
        
                            if( bSameImage && etThread.strCompareF( tinBaseP , psttfnStale , psttfnFresh ) ) etThread.traceF( tinBaseP , tb4+T(psttfnStale) ) ;
        
                            etThread.delF( tinBaseP , pbBufferStale ) ;
                            etThread.delF( tinBaseP , pbBufferFresh ) ;
                            }
                                }
                                    }
                                        }
                                            break ;
                                            bSameImage = 0 ;
                                        {
                                        if( etThread.memCompareF( tinBaseP , pbBufferFresh , pbBufferStale , cbBite ) )
        
                                        __( cbActual != cbBite ) ;
                                        etThread.fileReadF( tinBaseP , pbBufferStale , cbActual , hFileStale ) ;
                                        cbActual = cbBite ;
        
                                        __( cbActual != cbBite ) ;
                                        etThread.fileReadF( tinBaseP , pbBufferFresh  , cbActual , hFileFresh ) ;
                                        countT cbActual = cbBite ;
        
                                        if( was < cbDo ) cbDoHigh -- ;
                                        cbDo -= cbBite ;
                                        countT was = cbDo ;
        
                                        ;
                                                : cbBuffer
                                                ? cbDo
                                            : cbDo < cbBuffer
                                            ? cbBuffer
                                        countT cbBite = cbDoHigh
                                    {
                                    while( cbDo || cbDoHigh )
                                    countT cbDoHigh = pcLever[ 1 ] ;
                                    countT cbDo     = pcLever[ 0 ] ;
                                {
                            {
                            if( pbBufferFresh && pbBufferStale )
                            boolT bSameImage = 1 ;
        
                            etThread.newF( tinBaseP , LF , pbBufferStale , cbBuffer ) ; ___( pbBufferStale ) ;
                            etThread.newF( tinBaseP , LF , pbBufferFresh , cbBuffer ) ; ___( pbBufferFresh ) ;
        
                            ;
                                    : CBmYbUFFER
                                    ? pcLever[ 0 ]
                                : pcLever[ 0 ] < CBmYbUFFER
                                ? CBmYbUFFER
                            const countT cbBuffer = pcLever[ 1 ]
                            ZE( byteT* , pbBufferStale ) ;
                            ZE( byteT* , pbBufferFresh  ) ;
        
                            etThread.fileOpenF( tinBaseP , hFileStale , countTC() , tPathStale+T(psttfnStale) ) ;
                            etThread.fileOpenF( tinBaseP , hFileFresh , countTC() , tPathFresh+T(psttfnFresh) ) ;
                            handleC hFileStale( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                            handleC hFileFresh( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        
                            { byteT* pbzEncodedStale = (byteT*)swsStale.downF( tinBaseP , hWalkStale ) ; etThread.strDecodeF( tinBaseP , psttfnStale , pbzEncodedStale ) ; } ___( psttfnStale ) ;
                            ZE( strokeS* , psttfnStale ) ;
                        {
                        do
                        handleC hWalkStale( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        
                        etThread.traceF( tinBaseP , tRename+T(psttfnFresh) ) ;
                    {
                    if( swsStale && !bFound )
        
                    }
                        while( ~hWalkStale && !ether && !bFound ) ;
                        }
                            etThread.delF( tinBaseP , psttfnStale ) ;
        
                            if( bSameImage && !etThread.strCompareF( tinBaseP , psttfnStale , psttfnFresh ) ) bFound = 1 ;
        
                            etThread.delF( tinBaseP , pbBufferStale ) ;
                            etThread.delF( tinBaseP , pbBufferFresh ) ;
                            }
                                }
                                    }
                                        break ; // FOR SPEED, I ASSUME THAT FILES ARE IDENTICAL IF THE WOTH CBmYbUFFER OF BYTES IS IDENTICAL ; TO ELIMINATE THIS ASSUMPTION AND DO A FULL TEST, COMMENT OUT THIS LINE

                                        }
                                            break ;
                                            bSameImage = 0 ;
                                        {
                                        if( etThread.memCompareF( tinBaseP , pbBufferFresh , pbBufferStale , cbBite ) )
        
                                        __( cbActual != cbBite ) ;
                                        etThread.fileReadF( tinBaseP , pbBufferStale , cbActual , hFileStale ) ;
                                        cbActual = cbBite ;
        
                                        __( cbActual != cbBite ) ;
                                        etThread.fileReadF( tinBaseP , pbBufferFresh  , cbActual , hFileFresh ) ;
                                        countT cbActual = cbBite ;
        
                                        if( was < cbDo ) cbDoHigh -- ;
                                        cbDo -= cbBite ;
                                        countT was = cbDo ;
        
                                        ;
                                                : cbBuffer
                                                ? cbDo
                                            : cbDo < cbBuffer
                                            ? cbBuffer
                                        countT cbBite = cbDoHigh
                                    {
                                    while( cbDo || cbDoHigh )
                                    countT cbDoHigh = pcLever[ 1 ] ;
                                    countT cbDo     = pcLever[ 0 ] ;
                                {
                            {
                            if( pbBufferFresh && pbBufferStale )
                            boolT bSameImage = 1 ;
        
                            etThread.newF( tinBaseP , LF , pbBufferStale , cbBuffer ) ; ___( pbBufferStale ) ;
                            etThread.newF( tinBaseP , LF , pbBufferFresh , cbBuffer ) ; ___( pbBufferFresh ) ;
        
                            ;
                                    : CBmYbUFFER
                                    ? pcLever[ 0 ]
                                : pcLever[ 0 ] < CBmYbUFFER
                                ? CBmYbUFFER
                            const countT cbBuffer = pcLever[ 1 ]
                            ZE( byteT* , pbBufferStale ) ;
                            ZE( byteT* , pbBufferFresh  ) ;
        
                            etThread.fileOpenF( tinBaseP , hFileStale , countTC() , tPathStale+T(psttfnStale) ) ;
                            etThread.fileOpenF( tinBaseP , hFileFresh , countTC() , tPathFresh+T(psttfnFresh) ) ;
                            handleC hFileStale( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                            handleC hFileFresh( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        
                            { byteT* pbzEncodedStale = (byteT*)swsStale.downF( tinBaseP , hWalkStale ) ; etThread.strDecodeF( tinBaseP , psttfnStale , pbzEncodedStale ) ; } ___( psttfnStale ) ;
                            ZE( strokeS* , psttfnStale ) ;
                        {
                        do
                        handleC hWalkStale( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( swsStale )
                    ZE( boolT , bFound ) ;
        
                    { byteT* pbzEncodedFresh = (byteT*)swsFresh.downF( tinBaseP , hWalkFresh ) ; etThread.strDecodeF( tinBaseP , psttfnFresh , pbzEncodedFresh ) ; } ___( psttfnFresh ) ;
                    ZE( strokeS* , psttfnFresh ) ;
                {
                do
                handleC hWalkFresh( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        
                //etThread.traceF( tinBaseP , T("[cRem,cbLo,cbHi,cf]: ")+TF2(cFlavors-idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb1+TF2(pcLever[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb1+TF2(pcLever[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb1+TF2(swsFresh,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            if( swsFresh )
        
            if( !pcLever[ 0 ] && !pcLever[ 1 ] ) continue ;
        
            etThread.memCopyF( tinBaseP , (byteT*)pcLever , (byteT*)swsFresh.leverF( tinBaseP , idf ) , sizeof pcLever ) ;
        {
        for( countT idf = 1 ; !ether && idf <= cFlavors ; idf ++ )
        countT cFlavors = swsFresh.cFlavorsF( tinBaseP ) ;
        
        TN( tRename , "ren " ) ;
        
        // 
        //     PRINT NAME
        //    IF CONTENT MATCHES AND NAME IS DIFFERENT
        //   FOR EACH STALE FILE OF SAME SIZE
        //   PRINT NAME
        //  IF !bFound
        //   IF CONTENT MATCHES AND NAME MATCHES SET bFound
        //  FOR EACH STALE FILE OF SAME SIZE
        // FOR EACH FRESH FILE
        // 
        // RECIPE
        // 
        
        }
            else          etThread.traceF( tinBaseP , T("fresh    [cFiles,cSizes,filesPerSize]:    ")+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(swsFresh.cFlavorsF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cFiles/swsFresh.cFlavorsF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            if( !cFiles ) etThread.traceF( tinBaseP , T("fresh: no files") ) ;
        
        
            while( ~hFind && !ether ) ;
            }
                DEL( pInfo ) ;
                }
                    swsFresh << pbEncoded ; pbEncoded = 0 ;
                    pcLever[ 1 ] = pInfo->cbUsedHigh ;
                    pcLever[ 0 ] = pInfo->cbUsed     ;
        
                    etThread.delF( tinBaseP , psttShort ) ;
                    etThread.strEncodeF( tinBaseP , pbEncoded , psttShort ) ; ___( pbEncoded ) ;
                    ZE( byteT* , pbEncoded ) ;
        
                    if( !( ( ++ cFiles ) % ( TUCK << 4 ) ) ) etThread.traceF( tinBaseP , psttShort ) ;
        
                    }
                        etThread.delF( tinBaseP , psttPath ) ;
                        ___( psttShort ) ;
                        ___( psttPath  ) ;
                        etThread.strBisectF( tinBaseP , psttPath , psttShort , pInfo->psttIfoName , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ;
                        ZE( strokeS* , psttPath ) ;
                    {
                    ZE( strokeS* , psttShort ) ;
                {
                )
                    pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ] != '/'
                    &&
                    !etThread.strIdF( tinBaseP , tSlashDotDotSlash , pInfo->psttIfoName )
                    &&
                    !etThread.strIdF( tinBaseP , tSlashDotSlash , pInfo->psttIfoName )
                    &&
                    pInfo
                (
                if
                etThread.diskFindFileOrDirOldF( tinBaseP , pInfo , hFind , tLike ) ; ___( pInfo ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            ZE( countT , cFiles ) ;
            TN( tDistinct         , "distinct" ) ;
            TN( tInspecting       , "inspecting " ) ;
            TN( tSlash            , "/" ) ;
            TN( tSlashDotSlash    , "/./" ) ;
            TN( tSlashDotDotSlash , "/../" ) ;
            TN( tLike , "" ) ; tLike = tPathFresh+tPattern ;
        {
        switchStackC swsFresh( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , pbLever , sizeof pcLever , flSTACKc_DOnOTsERIALIZE | flSTACKc_XRAY , ifcSTACKtYPE_PTR_byteT ) ;
        TN( tPathFresh , "///d/ideafarm.home.101/IdeaFarm (tm)/SYSTEM/2.1. Drop Files Here To Archive Them/" ) ;
        etThread.traceF( tinBaseP , T("loading fresh") ) ;
        
        }
            else          etThread.traceF( tinBaseP , T("stale    [cFiles,cSizes,filesPerSize]:    ")+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(swsStale.cFlavorsF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cFiles/swsStale.cFlavorsF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            if( !cFiles ) etThread.traceF( tinBaseP , T("stale: no files") ) ;
        
            while( ~hFind && !ether ) ;
            }
                DEL( pInfo ) ;
                }
                    swsStale << pbEncoded ; pbEncoded = 0 ;
                    pcLever[ 1 ] = pInfo->cbUsedHigh ;
                    pcLever[ 0 ] = pInfo->cbUsed     ;
        
                    etThread.delF( tinBaseP , psttShort ) ;
                    etThread.strEncodeF( tinBaseP , pbEncoded , psttShort ) ; ___( pbEncoded ) ;
                    ZE( byteT* , pbEncoded ) ;
        
                    if( !( ( ++ cFiles ) % ( TUCK << 4 ) ) ) etThread.traceF( tinBaseP , psttShort ) ;
        
                    }
                        etThread.delF( tinBaseP , psttPath ) ;
                        ___( psttShort ) ;
                        ___( psttPath  ) ;
                        etThread.strBisectF( tinBaseP , psttPath , psttShort , pInfo->psttIfoName , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ;
                        ZE( strokeS* , psttPath ) ;
                    {
                    ZE( strokeS* , psttShort ) ;
                {
                )
                    pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ] != '/'
                    &&
                    !etThread.strIdF( tinBaseP , tSlashDotDotSlash , pInfo->psttIfoName )
                    &&
                    !etThread.strIdF( tinBaseP , tSlashDotSlash , pInfo->psttIfoName )
                    &&
                    pInfo
                (
                if
                etThread.diskFindFileOrDirOldF( tinBaseP , pInfo , hFind , tLike ) ; ___( pInfo ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            do
            handleC hFind( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            ZE( countT , cFiles ) ;
            TN( tDistinct         , "distinct" ) ;
            TN( tInspecting       , "inspecting " ) ;
            TN( tSlash            , "/" ) ;
            TN( tSlashDotSlash    , "/./" ) ;
            TN( tSlashDotDotSlash , "/../" ) ;
            TN( tLike , "" ) ; tLike = tPathStale+tPattern ;
        {
        switchStackC swsStale( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , pbLever , sizeof pcLever , flSTACKc_DOnOTsERIALIZE | flSTACKc_XRAY , ifcSTACKtYPE_PTR_byteT ) ;
        TN( tPathStale , "///d/ideafarm.home.101/IdeaFarm (tm)/SYSTEM/arc.b4.clean/" ) ;
        etThread.traceF( tinBaseP , T("loading stale") ) ;
        
        const byteT* pbLever = (byteT*)pcLever ;
        countT pcLever[] = { 0 , 0 } ;
        TN( tb4 , "    " ) ;
        TN( tb1 , " " ) ;
        TN( tc , ":" ) ;
        
        //TN( tPattern , "*" ) ;

        etThread.traceF( tinBaseP , T("[pattern]:    ")+tPattern ) ;
        TN( tPattern , "!ideafarm.6." ) ; tPattern += TF4(year,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE|flFORMAT_NObASE,4,0xa)+TF4(month,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE|flFORMAT_NObASE,2,0xa)+T("*") ;
    {
    for( countT month = 1 ; month <= 12 ; month ++ )
{
for( countT year = 1990 ; year <= 2015 ; year ++ )

TODO

#define CBmYbUFFER ( TOCK << 0 )

/*1*/WAKEsHOWtEXT( "tool.archive.report.name.changes" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

