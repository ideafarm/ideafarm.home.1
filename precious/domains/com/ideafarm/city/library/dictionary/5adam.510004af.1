
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.delF( tinBaseP , postReply ) ;

}
    DEL( pso ) ;

    }
        etThread = 0 ;
        pso->readF( tinBaseP , &bnu , 1 ) ;
        ZE( byteT , bnu ) ;

        }
            etThread.delF( tinBaseP , pstti ) ;
            //etThread.delF( tinBaseP , psttw ) ;
            //}
                //etThread.delF( tinBaseP , postx ) ;
                //) ;
                //    T(postx) )
                //    T("\r\nLast-modified: Sat, 09 May 1998 02:36:28 GMT\r\nAccept-Ranges"": bytes\r\n\r\n") +
                //    TF4(costx,0,0,10) +
                //    T("HTTP/1.0 200 OK\r\nDate: Sat, 09 May 1998 02:36:28 GMT\r\nServer: IdeaFarm/1.0\r\nMIME-version: 1.0\r\nContent-Type: text/html\r\nContent-Length: ") +
                //pso->writeF( tinBaseP , (osTextT*)( 

                pso->writeF( tinBaseP , postReply , costReply ) ;

                //}
                //    etThread.strokeF( tinBaseP , T(" not retrieved\r\n") ) ;
                //    costx = etThread.strMakeF( tinBaseP , LF , postx , T("File \"")+T(psttw)+T("\" could not be retrieved from disk.  Sorry\r\n") ) ; ___( postx ) ;
                //    etThread = 0 ;
                //{
                //else
                //if( !etThread ) etThread.strokeF( tinBaseP , T(" retrieved ok\r\n") ) ;
                //etThread.boxGetShadowF( tinBaseP , postx , costx , psttw , 1 ) ; ___( postx ) ;
                //etThread.strWordF( tinBaseP , psttw , pstti , sttq , S1C(' ') , 2 ) ; ___( psttw ) ;
                ////sttq = ze ;
                //etThread.delF( tinBaseP , psttw ) ;
            //{
            //if( !etThread.strCompareF( tinBaseP , psttw , tGet ) )
            //etThread.strWordF( tinBaseP , psttw , pstti , sttq , S1C(' ') , 1 ) ; ___( psttw ) ;
            //strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            //ZE( strokeS* , psttw ) ;
            pso->readWoLineF( tinBaseP , pstti , 0x10000 ) ; ___( pstti ) ;
            ZE( strokeS* , pstti ) ;
        {
        ZE( countT , costx ) ;
        ZE( osTextT* , postx ) ;
    {
    if( pso && !etThread )
    sock.acceptF( tinBaseP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
    ZE( countT , idPortPeer ) ;
    nicNameC nnPeer ;
    ZE( socketC* , pso ) ;
{
while( !ether && !etThread )

}
    etThread.delF( tinBaseP , postx ) ;
    ) ;
        T(postx)
        T("\r\nLast-modified: Sat, 09 May 1998 02:36:28 GMT\r\nAccept-Ranges"": bytes\r\n\r\n") +
        TF4(costx,0,0,10) +
        T("HTTP/1.0 200 OK\r\nDate: Sat, 09 May 1998 02:36:28 GMT\r\nServer: IdeaFarm/1.0\r\nMIME-version: 1.0\r\nContent-Type: text/html\r\nContent-Length: ") +
    etThread.strMakeF( tinBaseP , LF , postReply ,
    etThread.boxGetShadowF( tinBaseP , postx , costx , T("///d/fooey.html") ) ; ___( postx ) ;
    ZE( countT , costx ) ;
    ZE( osTextT* , postx ) ;
{
ZE( countT   , costReply ) ;
ZE( osTextT* , postReply ) ;

TN( tGet , "GET" ) ;

ZE( countT , cClients ) ;
sock.listenF( tinBaseP ) ;
sock.bindF( tinBaseP , IDpORTlISTEN ) ;
socketC sock( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;

TODO

#define IDpORTlISTEN 0x50

/*1*/WAKEhIDE( "wap.http.server" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

