
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    TELL( "cleaning up" )
    DEL( pStBang4 ) ;
    DEL( pStBang3 ) ;
    DEL( pStBang2 ) ;
    DEL( pStBang1 ) ;
    DEL( pStBang0 ) ;
    TELL( "deleting bang stacks" )

    if( pStBang4 ) { godByeF( tinBaseP , *pStBang4 ) ; cPoof += *pStBang4 ; }
    if( pStBang3 ) { godByeF( tinBaseP , *pStBang3 ) ; cPoof += *pStBang3 ; }
    if( pStBang2 ) { godByeF( tinBaseP , *pStBang2 ) ; cPoof += *pStBang2 ; }
    if( pStBang1 ) { godByeF( tinBaseP , *pStBang1 ) ; cPoof += *pStBang1 ; }
    if( pStBang0 ) { godByeF( tinBaseP , *pStBang0 ) ; cPoof += *pStBang0 ; }
    TELL( "unregistering my bang stacks and calc poof" )
    ZE( countT , cPoof ) ;

    }
        }
            ++ s ; ((tin9S&)tinBaseP).zEtScratch->osSleepF( tinBaseP , TUCK * 0x40 ) ;
        {
        while( ((tin9S&)tinBaseP).cKidThreads )
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    *((tin9S&)tinBaseP).zEtScratch = 0 ;
    TELL( "waiting for all kids to die" )

    if( !ether ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 1 , node , 7 ) ;
    TELL( "reporting my own death" )

    stNodeOpen.ungrabF( tinBaseP ) ;
    if( nodeDns == node ) nodeDns = 0 ;
    stNodeOpen.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    }
        }
            }
                else                { DEL( pso ) ; }
                if( !ether && pso ) etThread.osThreadF( tinBaseP , countTC() , tmServerF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&_c8ni1P , (countT)&_c8ni2P , (countT)&_c8ni3P , (countT)pso , (countT)&sListen , (countT)&cBangClients ) ;
                TELL( "launching tmServerF" )
    
                }
                    break ;
                    DEL( pso ) ;
                    etherC::ifcSayIF( T("gasp!") , flSAY_APPEND | flSAY_LOG ) ;
                    TELL( "quitting" )
                {
                else if( bQuit )
                }
                    continue ;
    
                    etThread.osThreadF( tinBaseP , countTC() , tmPingF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&_c8ni1P , (countT)&_c8ni2P , (countT)&_c8ni3P , (countT)&cBangClients ) ;
                    etThread.osThreadF( tinBaseP , countTC() , tmKillF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&_c8ni1P , (countT)&_c8ni2P , (countT)&_c8ni3P ) ;
                    etThread.osThreadF( tinBaseP , countTC() , tmPrayF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&_c8ni1P , (countT)&_c8ni2P , (countT)&_c8ni3P ) ;
                    }
                        bombF( tinBaseP , etThread , NODEiNFOaRGS , sCry ) ;
                        hdrF( tinBaseP , sCry , node , flPOP_BOMB , IDcMD2PE_CRY ) ;
                        soulC sCry( tinBaseP , TAG( TAGiDnULL ) ) ;
                        TELL( "setting up 2.2" )
                    {

                    }
                        LAUNCHbANGcLIENT( 4 , IDtYPE2PEbANGcLIENTwORK_RIGHT    )
                        LAUNCHbANGcLIENT( 3 , IDtYPE2PEbANGcLIENTwORK_LEFT     )
                        LAUNCHbANGcLIENT( 2 , IDtYPE2PEbANGcLIENTwORK_EXPLODE2 )
                        LAUNCHbANGcLIENT( 1 , IDtYPE2PEbANGcLIENTwORK_EXPLODE1 )
                        LAUNCHbANGcLIENT( 0 , IDtYPE2PEbANGcLIENTwORK_IMPLODE  )
                    {
                    if( pStBang0 && pStBang1 && pStBang2 && pStBang3 && pStBang4 )
    
                    TELL( "setting up 2.3" )
                
                    pStBang4 = new( 0 , tinBaseP , LF ) stackC( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
                    pStBang3 = new( 0 , tinBaseP , LF ) stackC( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
                    pStBang2 = new( 0 , tinBaseP , LF ) stackC( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
                    pStBang1 = new( 0 , tinBaseP , LF ) stackC( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
                    pStBang0 = new( 0 , tinBaseP , LF ) stackC( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
                    TELL( "setting up 2.4" )
                
                    if( nodeDns ) stNodeOpen.sinkF( tinBaseP , countTC() , (byteT*)nodeDns , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                  stNodeOpen.sinkF( tinBaseP , countTC() , (byteT*)&node   , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                    godHelloF( tinBaseP , node ) ;
                    etherC::ifcSayIF( T("cry!") , flSAY_APPEND | flSAY_LOG ) ;
        
                    DEL( pso ) ;
                    { soulC sOk( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , (countT)IDcMD2PE_SERVERoK ) ; pso->writeF( tinBaseP , sOk ) ; }
                    bWoth = 0 ;
                {
                if( bWoth ) //WOTH CLIENT MUST NOT BE REFUSED
        
                }
                    sListen.acceptF( tinBaseP , pso , idPortPeer , nnPeer , bRefuse ) ;
                    ZE( countT , idPortPeer ) ;
                    nicNameC nnPeer ;
                    boolT bRefuse = /*++ idClient == ((tin9S&)tinBaseP).monitor.idThread && !( bRefused ++ ) ? 1 :*/ 0 ;
                    //static boolT bRefused ;
                {
                TELL( "waiting for a client to connect" )
                ZE( socketC* , pso ) ;
    
                if( bWoth ) etThread.osThreadF( tinBaseP , countTC() , tmTickleF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , node.idp , (countT)&bWoth ) ;
            {
            while( !etThread && !ether && !bQuit )
            ZE( countT , cBangClients ) ;
            ZE( countT , idClient ) ;
            boolT bWoth = 1 ;
        
            etThread.osTimeNowF( tinBaseP , timeB1 , timeB2 ) ;
            ZE( sCountT , timeB2 ) ;
            ZE( countT  , timeB1 ) ;
        
            TELL( "setting up 2.b" )
            if( !ether ) sListen.listenF( tinBaseP ) ;
            TELL( "setting up 2.c" )
            stNodeOpen.ungrabF( tinBaseP ) ;
            }
                if( !cTries && !nodeDns ) nodeDns = node ;
                stNodeOpen.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                }
                    if( nodeDns ) break ;
                    ether.osSleepF( tinBaseP , TOCK ) ;
                {
                while( !ether && cTries -- )
                countT cTries = TUCK / /*8*/0x40 ;
                sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ; //GIVE EXISTING NODES TIME TO ASSUME THE DNS ROLE

                stNodeOpen.ungrabF( tinBaseP ) ;
            {
            if( !nodeDns )
            stNodeOpen.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        if( node )
        node = sListen.bindF( tinBaseP ) ;
        TELL( "setting up 2.d" )
        socketC sListen( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
        TELL( "setting up 2" )
    {
    stackC*& pStBang4 = *(stackC**)&_c8ni3P.c2 ;
    stackC*& pStBang3 = *(stackC**)&_c8ni3P.c1 ;
    stackC*& pStBang2 = *(stackC**)&_c8ni2P.c8 ;
    stackC*& pStBang1 = *(stackC**)&_c8ni2P.c7 ;
    stackC*& pStBang0 = *(stackC**)&_c8ni2P.c6 ;
    count8S _c8ni3P( 0 , 0 , (countT)&stPsoServer , (countT)&stIdSerialReceived , (countT)&bTalk ) ;
    count8S _c8ni2P( (countT)&stNodeFailReply , (countT)&stNodeZombie , (countT)&stNodeZombieOld , (countT)&stNodeTest , (countT)&stNodeCurrentBangClient ) ;
    count8S _c8ni1P( idMe , (countT)&node , (countT)&etScratch , (countT)&bQuit , (countT)&ruZeWo , (countT)&stNodeOpen , (countT)&stNodeFailConnect , (countT)&stNodeFailConnectOld ) ;

    ZE( boolT , bTalk ) ;
    nodeC node( tinBaseP , etThread , idMe ) ;
    ZE( boolT , bQuit ) ;
    ranUniC ruZeWo( 1 , 1 ) ;
    stackC stPsoServer(             tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    stackC stIdSerialReceived(      tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    stackC stNodeCurrentBangClient( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeTest(              tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeZombieOld(         tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeZombie(            tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeFailReply(         tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeFailConnectOld(    tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeFailConnect(       tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
    stackC stNodeOpen(              tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ; // { node , timeBorn1 , timeBorn2 }, SORTED BY TIME BORN
    etherC& ether = etherC::etPrimeIF() ;
    const countT idMe = 1 + incv02AM( idMeLath ) ;
    static countT idMeLath ;
    _IO_     TELLsYSlIFInAME( "nodeMainF" )
{
voidT nodeMainF( tin0S& tinBaseP , etherC& etThread )

DONE( tmPrayF )
}
    }
        }
            }
                ++ s ; etThread.osSleepF( tinBaseP , TUCK * 0x40 ) ;
            {
            while( !etThread && !ether && !bQuitP && cToDo -- )
            countT cToDo = TUCK / 0x10 ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        TELL( "sleeping for up to 4 tock" )

        godPrayF( tinBaseP , etThread , stNodeOpenP , nodeP , bTalkP ) ;
        _IO_     TELLsYSlIFInAME( "tmPrayF2" )
    {
    while( !bQuitP && !etThread && !stNodeOpenP.third && !ether )
    _IO_     TELLsYSlIFInAME( "tmPrayF1" )

    NODEiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmPrayF )

DONE( tmPingF )
}
    }
        }
            ++ s ; ether.osSleepF( tinBaseP , TOCK * 0x4 ) ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        TELL( "napping for 4 tocks" )
        ((tin9S&)tinBaseP).idPhase2 = 0 ;
        //CONoUTrAW3( "" , idMeP , "| -\r\n" ) ;
        }
            }
                }
                    bombF( tinBaseP , etThread , NODEiNFOaRGS , sCry ) ;
                    CONoUTrAW3( "" , idMeP , "| NO BANG CLIENTS!!!!\r\n" ) ;
                    hdrF( tinBaseP , sCry , nodeP , flPOP_BOMB , IDcMD2PE_CRY ) ;
                    soulC sCry( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                if( !cBangClientsP )
                stNodeOpenP.ungrabF( tinBaseP ) ;
                _IO_

                }
                    ((tin9S&)tinBaseP).idPhase2 = 2 ;
                    bSawOthers = 1 ;
                {
                if( !bSawOthers )
            {
            else
            }
                }
                    bombF( tinBaseP , etThread , NODEiNFOaRGS , sCry , nodeDnsCopy ) ;
                    hdrF( tinBaseP , sCry , nodeP , flPOP_BOMB , IDcMD2PE_CRY ) ;
                    soulC sCry( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                if( nodeDnsCopy && nodeDnsCopy != nodeP )
                stNodeOpenP.ungrabF( tinBaseP ) ;
                nodeC nodeDnsCopy = nodeDns ;
                _IO_
            {
            if( !stNodeOpenP || ( stNodeOpenP == 1 && *(nodeC*)&stNodeOpenP[ 1 ] == nodeP ) ) //IF I THINK I'M ALONE
            TELL( "inspecting to see whether my list contains only me" )
            stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            _IO_     TELLsYSlIFInAME( "seeing if i am alone or have no clients" )
        {
        TELL( "grabbing open list 2" )

        //}
        //    }
        //        popF( tinBaseP , etThread , etScratchNodeP , pStBang0P , pStBang1P , pStBang2P , pStBang3P , pStBang4P , sPing , bDud ) ;
        //        TELL( "popping" )
        //
        //        stNodeOpenP.ungrabF( tinBaseP ) ;
        //        }
        //            while( !stNodeOpenP.third && ~hDown ) ;
        //            do sPing << *(count4S*)&stNodeOpenP.downF( tinBaseP , hDown ) ;
        //            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //        {
        //        if( stNodeOpenP )
        //        sPing << (countT)stNodeOpenP ;
        //        TELL( "pushing my open list into the ping soul" )
        //
        //        stNodeFailConnectP.ungrabF( tinBaseP ) ;
        //        }
        //            while( !stNodeFailConnectP.third && ~hDown ) ;
        //            do if( stNodeOpenP( (byteT*)&stNodeFailConnectP.downF( tinBaseP , hDown ) , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
        //            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //        {
        //        if( stNodeFailConnectP )
        //        TELL( "removing from the open list the entries that i know have failed" )
        //        stNodeFailConnectP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //        TELL( "grabbing failConnect list" )
        //        stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //        TELL( "grabbing open list" )
        //
        //        hdrF( tinBaseP , sPing , nodeP , flPOP_DOWN|flPOP_UP , IDcMD2PE_PING ) ;
        //        soulC sPing( tinBaseP , TAG( TAGiDnULL ) ) ;
        //        const boolT bDud = stNodeOpenP > 1 && stNodeOpenP( (byteT*)nodeP , subtractNodesF ) != 1 ;
        //        TELL( "preparing to ping" )
        //    {
        //{
        //else if( !( cSkip && cSkip -- ) )
        //}
        //    cSkip = 0 ; //U::8
        //    if( idMeP == 1 ) CONoUTrAW3( "----" , cBack , "----\r\n" ) ;
        //{
        //if( cBack )
        //countT cBack = godBacklogF( tinBaseP ) ;
        //TELL( "inspecting backlog" )

        //}
        //    stNodeTestCopy.purgeF( tinBaseP ) ;
        //    while( !bQuitP && !ether && !stNodeTestCopy.third && ~hDown ) ;
        //    }
        //        }
        //            stNodeOpenP.ungrabF( tinBaseP ) ;
        //            if( stNodeOpenP( (byteT*)nodet , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
        //            stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //            *((tin9S&)tinBaseP).zEtScratch = 0 ;
        //        {
        //        else
        //        if( !*((tin9S&)tinBaseP).zEtScratch ) stNodeOpenP.sinkF( tinBaseP , countTC() , (byteT*)nodet , flSTACKsINK_UNIQUE , subtractNodesF ) ;
        //        boolT bFail = !!*((tin9S&)tinBaseP).zEtScratch ;
        //        testF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , nodet , nodeP ) ;
        //        if( bTalkP ) { CONoUTrAW5( "" , idMeP , "| testing " , *(countT*)&nodet , "\r\n" ) ; }
        //        nodeC& nodet = *(nodeC*)&stNodeTestCopy.downF( tinBaseP , hDown ) ;
        //    {
        //    do
        //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //{
        //if( stNodeTestCopy )

        //stNodeTestP.ungrabF( tinBaseP ) ;
        //}
        //    stNodeTestP.purgeF( tinBaseP ) ;
        //    while( !stNodeTestP.third && ~hDown ) ;
        //    }
        //        stNodeTestCopy << (byteT*)nodet ;
        //        nodeC& nodet = *(nodeC*)&stNodeTestP.downF( tinBaseP , hDown ) ;
        //    {
        //    do
        //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //{
        //if( stNodeTestP )
        //stNodeTestP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

        //}
        //    stNodeExpected.purgeF( tinBaseP ) ;
        //    while( !stNodeExpected.third && ~hDown ) ;
        //    }
        //        stNodeTestCopy << (byteT*)nodee ;
        //        if( bTalkP ) { CONoUTrAW5( "" , idMeP , "| absent: " , *(countT*)&nodee , "\r\n" ) ; }
        //        nodeC& nodee = *(nodeC*)&stNodeExpected.downF( tinBaseP , hDown ) ;
        //    {
        //    do
        //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //{
        //if( stNodeExpected )
        //stackC stNodeTestCopy( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;

        //}
        //    while( !stNodeExpected.third && ~hDown ) ;
        //    }
        //        stNodeCurrentBangClientP.ungrabF( tinBaseP ) ;
        //        }
        //            stNodeExpected.extractF( 0 , tinBaseP ) ;
        //            if( bTalkP ) { CONoUTrAW5( "" , idMeP , " i see " , stNodeCurrentBangClientP[ 0 ] , "\r\n" ) ; }
        //        {
        //        if( stNodeCurrentBangClientP( (byteT*)nodee , subtractNodesF ) )
        //        stNodeCurrentBangClientP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //        nodeC& nodee = *(nodeC*)&stNodeExpected.downF( tinBaseP , hDown ) ;
        //    {
        //    do
        //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        //{
        //if( stNodeExpected )

        //}
        //    }
        //        if( nodeExpected2 ) stNodeExpected.sinkF( tinBaseP , countTC() , (byteT*)nodeExpected2 , flSTACKsINK_UNIQUE , subtractNodesF ) ;
        //        if( nodeExpected1 ) stNodeExpected.sinkF( tinBaseP , countTC() , (byteT*)nodeExpected1 , flSTACKsINK_UNIQUE , subtractNodesF ) ;
        //        nodeClientF( tinBaseP , nodeExpected1 , nodeExpected2 , stNodeOpenP , nodeP , pcIdWork[ off ] ) ;
        //        nodeC nodeExpected2  ;
        //        nodeC nodeExpected1  ;
        //    {
        //    for( countT off = 0 ; off < sizeof pcIdWork / sizeof pcIdWork[ 0 ] ; off ++ )
        //
        //    } ;
        //        IDtYPE2PEbANGcLIENTwORK_RIGHT
        //        IDtYPE2PEbANGcLIENTwORK_LEFT     ,
        //        IDtYPE2PEbANGcLIENTwORK_EXPLODE2 ,
        //        IDtYPE2PEbANGcLIENTwORK_EXPLODE1 ,
        //        IDtYPE2PEbANGcLIENTwORK_IMPLODE  ,
        //    {
        //    countT pcIdWork[] = 
        //{
        //stackC stNodeExpected( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;

        stNodeOpenP.ungrabF( tinBaseP ) ;
        if( !nodeDns ) nodeDns = nodeP ;
        stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

        stNodeZombieP.ungrabF( tinBaseP ) ;
        }
            stNodeZombieP.purgeF( tinBaseP ) ;
            while( !stNodeZombieP.third && ~hDown ) ;
            }
                stNodeZombieOldP.sinkF( tinBaseP , countTC() , (byteT*)nodez , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                nodeC& nodez = *(nodeC*)&stNodeZombieP.downF( tinBaseP , hDown ) ;
            {
            do
            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        {
        if( stNodeZombieP )
        stNodeZombieP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

        }
            }
                stTest.purgeF( tinBaseP ) ;
                while( !stTest.third && ~hDown ) ;
                }
                    bombF( tinBaseP , etThread , NODEiNFOaRGS , sCry , nodeSlandered ) ; //TO TEST HIM
                    if( bTalkP ) { CONoUTrAW5( "" , idMeP , "| testing slandered " , *(countT*)&nodeSlandered , "\r\n" ) ; }
                    hdrF( tinBaseP , sCry , nodeP , flPOP_null , IDcMD2PE_CRY ) ;
                    soulC sCry( tinBaseP , TAG( TAGiDnULL ) ) ;
                    nodeC& nodeSlandered = *(nodeC*)&stTest.downF( tinBaseP , hDown ) ;
                {
                do
                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                _IO_     TELLsYSlIFInAME( "testing slandered nodes" )
            {
            if( stTest )

            stNodeZombieOldP.ungrabF( tinBaseP ) ;
            }
                stNodeZombieOldP.purgeF( tinBaseP ) ;
                while( !stNodeZombieOldP.third && ~hDown ) ;
                }
                    stTest.sinkF( tinBaseP , countTC() , (byteT*)nodeSlandered , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                    nodeC& nodeSlandered = *(nodeC*)&stNodeZombieOldP.downF( tinBaseP , hDown ) ;
                {
                do
                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {
            if( stNodeZombieOldP )
            stNodeZombieOldP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            stackC stTest( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
        {

        stNodeFailConnectP.ungrabF( tinBaseP ) ;
        stNodeFailConnectP.purgeF( tinBaseP ) ;
        }
            while( !stNodeFailConnectP.third && ~hDown ) ;
            }
                stNodeFailConnectOldP.sinkF( tinBaseP , countTC() , (byteT*)nodef , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                nodeC& nodef = *(nodeC*)&stNodeFailConnectP.downF( tinBaseP , hDown ) ;
            {
            do
            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        {
        if( stNodeFailConnectP )
        stNodeFailConnectP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

        stNodeFailConnectOldP.purgeF( tinBaseP ) ;
        //CONoUTrAW3( "" , idMeP , "| +\r\n" ) ;
        ((tin9S&)tinBaseP).idPhase2 = 1 + bSawOthers ;
        _IO_     TELLsYSlIFInAME( "tmPingF1" )
    {
    while( !etThread && !stNodeOpenP.third && !ether && !bQuitP )
    ZE( boolT , bSawOthers ) ;
    //static countT cSkip ;

    countT& cBangClientsP = *(countT*)pTaskP->c4 ;
    NODEiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmPingF )

DONE( tmKillF )
}
    }
        stPsoServerP.ungrabF( tinBaseP ) ;
        }
            while( !etThread && !stPsoServerP.third && ~handle ) ;
            }
                }
                    *((tin9S&)tinBaseP).zEtScratch = 0 ;
                    hSoc.closeIfF() ;
                    handleC& hSoc = *(handleC*)&pso->handleF( tinBaseP ) ;
                {
                if( pso )
                __Z( pso ) ;
                socketC* pso = (socketC*)stPsoServerP.downF( tinBaseP , handle ) ;
            {
            do
            handleC handle( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        {
        if( !etThread && !stPsoServerP.third && stPsoServerP )
        stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    *((tin9S&)tinBaseP).zEtScratch = 0 ;
    }
        sock.connectF( tinBaseP , nodeP.idp ) ;
        socketC sock( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) ) ;
    {
    if( pStBang4P ) *pStBang4P << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    if( pStBang3P ) *pStBang3P << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    if( pStBang2P ) *pStBang2P << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    if( pStBang1P ) *pStBang1P << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    if( pStBang0P ) *pStBang0P << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    //U:: USE THE ___ MACRO TO TAG THESE DROPS
    bQuitP = 1 ;
    TELL( "killing" )

    }
        }
            if( *((tin9S&)tinBaseP).zEtScratch ) *((tin9S&)tinBaseP).zEtScratch = 0 ;
            writeF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , nodeTo , sGasp ) ;
            hdrF( tinBaseP , sGasp , nodeP , flPOP_BOMB , IDcMD2PE_GASP ) ;
            soulC sGasp( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        if( nodeTo )

        if( nodeTo == nodeP ) nodeTo = *(nodeC*)&stNodeOpenP[ 2 ] ;
        nodeC& nodeTo = *(nodeC*)&stNodeOpenP[ 1 ] ;
        TELL( "writing sGasp" )
    {
    godByeF( tinBaseP , nodeP ) ;
    CONoUTrAW3( "" , idMeP , "| gasp!\r\n" ) ;
    _IO_     TELLsYSlIFInAME( "tmKillF1" )

    }
        ++s ; ether.osSleepF( tinBaseP , time1l ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        countT time1l = godMyLifespanF( tinBaseP , nodeP ) ;
    {
    TELL( "napping for life" )

    NODEiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmKillF )

DONE( tmTickleF )
}
    }
        }
            ether.osSleepF( tinBaseP , TUCK * 0x40 ) ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
            *((tin9S&)tinBaseP).zEtScratch = 0 ;
        {
        else
        if( !*((tin9S&)tinBaseP).zEtScratch ) break ;
        VERIFY( sock ) ;
        sock.connectF( tinBaseP , idpP ) ;
        socketC sock( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) ) ;
        _IO_     TELLsYSlIFInAME( "tmTickleF1" )
    {
    while( !ether && bWothP )

    boolT& bWothP = *(boolT*)pTaskP->c2 ;
    countT idpP   =          pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmTickleF )

DONE( tmServerF )
}
    if( bBangClient && !bSaidBye && !ether && !bQuitP ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 1 , nodeBangClient , 0x21 ) ;

    }
        dec02AM( cBangClientsP ) ;
        stNodeCurrentBangClientP.ungrabF( tinBaseP ) ;
        if( stNodeCurrentBangClientP( (byteT*)nodeBangClient , subtractNodesF ) ) stNodeCurrentBangClientP.extractF( 0 , tinBaseP ) ;
        stNodeCurrentBangClientP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( bBangClient )
    TELL( "cleaning up" )

    }
        DEL( psoP ) ;
        stPsoServerP.ungrabF( tinBaseP ) ;
        if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
        stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( psoP )
    TELL( "deleting socket" )
    }
        TELL( "writing ok-" )
        }
            psoP->writeF( tinBaseP , sOk ) ;
        {
        if( psoP )
        TELL( "writing ok+" )

        }
            }
                break ;
                }
                    DEL( psoP ) ;
                    stPsoServerP.ungrabF( tinBaseP ) ;
                    if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
                    stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                if( psoP )
            {
            if( *((tin9S&)tinBaseP).zEtScratch )
            TELL( "testing *((tin9S&)tinBaseP).zEtScratch 1" )

            }
                else                        popF( tinBaseP , etThread , etScratchNodeP , pStBang0P , pStBang1P , pStBang2P , pStBang3P , pStBang4P , sIn ) ;
                if( F(flags) & flPOP_BOMB ) bombF( tinBaseP , etThread , NODEiNFOaRGS , sIn ) ;

                }
                    }
                        break ;
                        TELL( "IDcMD2PE_USERcOMMANDS-" )
                        osTextT* postIn = sIn.pbFieldF( tinBaseP , countTC() , countTC() , countTC() , IDfIELD_IDcMD + 1 ) ;
                        TELL( "IDcMD2PE_USERcOMMANDS+" )
                    {
                    case IDcMD2PE_USERcOMMANDS :
                    }
                        break ;
                        TELL( "IDcMD2PE_PING-" )

                        }
                            while( !stNodeSlander.third && ~hDown ) ;
                            }
                                stNodeZombieP.sinkF( tinBaseP , countTC() , (byteT*)nodeSlander , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                nodeC& nodeSlander = *(nodeC*)&stNodeSlander.downF( tinBaseP , hDown ) ;
                            {
                            do
                            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        {
                        if( stNodeSlander )

                        stHisList.purgeF( tinBaseP ) ;
                        }
                            while( !stHisList.third && ~hDown ) ;
                            }
                                if( nodeSubject && !stNodeFailConnectP( (byteT*)nodeSubject , subtractNodesF ) && !stNodeFailConnectOldP( (byteT*)nodeSubject , subtractNodesF ) ) stNodeOpenP.sinkF( tinBaseP , countTC() , (byteT*)nodeSubject , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                if( nodeSubject && stNodeSlander(       (byteT*)nodeSubject , subtractNodesF )                                                                   ) stNodeSlander.extractF( 0 , tinBaseP ) ;
                                nodeC& nodeSubject = *(nodeC*)&stHisList.downF( tinBaseP , hDown ) ;
                            {
                            do
                            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        {
                        if( stHisList )
                        hisListF( tinBaseP , stHisList , sIn ) ;
                        stackC stHisList( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
                        countT nodeHim = nodeOrigin ;

                        stNodeOpenP.ungrabF( tinBaseP ) ;
                        }
                            while( !stNodeOpenP.third && ~hDown ) ;
                            do stNodeSlander.sinkF( tinBaseP , countTC() , (byteT*)&stNodeOpenP.downF( tinBaseP , hDown ) , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        {
                        if( stNodeOpenP )
                        stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        stackC stNodeSlander( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;

                        TELL( "IDcMD2PE_PING+" )
                    {
                    case IDcMD2PE_PING :
                    }
                        break ;
                        TELL( "IDcMD2PE_NODEfAILEDcONNECT-" )
                        }
                            stNodeOpenP.ungrabF( tinBaseP ) ;
                            if( stNodeOpenP( (byteT*)nodeBad , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
                            stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                            stNodeFailConnectP.sinkF( tinBaseP , countTC() , (byteT*)nodeBad , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                        {
                        if( nodeBad )
                        countT& idSerialFailNote = sIn.cFieldF( tinBaseP , IDfIELD_IDsERIAL ) ;
                        nodeC& nodeBad = nodeC::fieldF( tinBaseP , sIn , IDfIELD_IDcMD + 1 ) ;
                        TELL( "IDcMD2PE_NODEfAILEDcONNECT+" )
                    {
                    case IDcMD2PE_NODEfAILEDcONNECT :
                    }
                        break ;
                        TELL( "IDcMD2PE_NODEfAILEDrEAD-" )
                        if( nodeBad ) stNodeFailReplyP.sinkF( tinBaseP , countTC() , (byteT*)nodeBad , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                        nodeC& nodeBad = nodeC::fieldF( tinBaseP , sIn , IDfIELD_IDcMD + 1 ) ;
                        TELL( "IDcMD2PE_NODEfAILEDrEAD+" )
                    {
                    case IDcMD2PE_NODEfAILEDrEAD :
                    }
                        break ;
                        TELL( "IDcMD2PE_GASP-" )
                        stNodeOpenP.ungrabF( tinBaseP ) ;
                        if( stNodeOpenP( (byteT*)nodeOrigin , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
                        stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        TELL( "IDcMD2PE_GASP+" )
                    {
                    case IDcMD2PE_GASP :
                    }
                        break ;
                        TELL( "IDcMD2PE_CRY-" )

                        }
                            bombF( tinBaseP , etThread , NODEiNFOaRGS , sPing , nodeOrigin , 1 ) ;
                            myListF( tinBaseP , sPing , stNodeOpenP ) ;
                            hdrF( tinBaseP , sPing , nodeP , flPOP_null , IDcMD2PE_PING ) ;
                            soulC sPing( tinBaseP , TAG( TAGiDnULL ) ) ;
                            TELL( "preparing to ping" )
                        {
                        if( *(nodeC*)&stNodeOpenP[ 1 ] == nodeP ) //WELCOME THE NEWCOMER WITH A PING SO THAT IT HAS A FULL LIST

                        if( nodeOrigin ) stNodeOpenP.sinkF( tinBaseP , countTC() , (byteT*)nodeOrigin , flSTACKsINK_UNIQUE , subtractNodesF ) ;

                        stNodeFailConnectP.ungrabF( tinBaseP ) ;
                        if( stNodeFailConnectP( (byteT*)nodeOrigin , subtractNodesF ) ) stNodeFailConnectP.extractF( 0 , tinBaseP ) ;
                        stNodeFailConnectP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                        //PSEUDOdUPLICATEDcODE: fff0104 fff0104
                        TELL( "IDcMD2PE_CRY+" )
                    {
                    case IDcMD2PE_CRY :
                    }
                        break ;
                        TELL( "IDcMD2PE_CLIENTbANGbYE-" )
                        bSaidBye = 1 ;
                        nodeBangClient = 0 ;
                        TELL( "IDcMD2PE_CLIENTbANGbYE+" )
                    {
                    case IDcMD2PE_CLIENTbANGbYE :
                    }
                        break ;
                        TELL( "IDcMD2PE_CLIENTbANGhELLO-" )

                        }
                            stNodeOdd.ungrabF( tinBaseP ) ;
                            }
                                while( !stNodeOdd.third && ~hDown ) ;
                                }
                                    stNodeTestP.sinkF( tinBaseP , countTC() , (byteT*)nodeOdd , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                    nodeC& nodeOdd = *(nodeC*)&stNodeOdd.downF( tinBaseP , hDown ) ;
                                {
                                do
                                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                            if( stNodeOdd )
                            stNodeOdd.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        {
                        if( !bNewbie )

                        myListF( tinBaseP , sOk , stNodeOdd ) ;
                        }
                            stNodeHisList.ungrabF( tinBaseP ) ;
                            }
                                while( !stNodeHisList.third && ~hDown ) ;
                                }
                                    if( !stNodeOpenP( (byteT*)nodeOdd , subtractNodesF ) ) stNodeOdd.sinkF( tinBaseP , countTC() , (byteT*)nodeOdd , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                    nodeC& nodeOdd = *(nodeC*)&stNodeHisList.downF( tinBaseP , hDown ) ;
                                {
                                do
                                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                            if( stNodeHisList )
                            stNodeHisList.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                            stNodeOpenP.ungrabF( tinBaseP ) ;
                            }
                                while( !stNodeOpenP.third && ~hDown ) ;
                                }
                                    if( !stNodeHisList( (byteT*)nodeOdd , subtractNodesF ) ) stNodeOdd.sinkF( tinBaseP , countTC() , (byteT*)nodeOdd , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                    nodeC& nodeOdd = *(nodeC*)&stNodeOpenP.downF( tinBaseP , hDown ) ;
                                {
                                do
                                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                            if( stNodeOpenP )
                            stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        {
                        if( nodeMeVerify != nodeP || ( nodeHimVerify1 != nodeOrigin && nodeHimVerify2 != nodeOrigin ) )
                        stackC stNodeOdd( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;

                        }
                            nodeServerF( tinBaseP , nodeHimVerify2 , stNodeOpenP , nodeP , idWorkInvert2 ) ;
                            nodeServerF( tinBaseP , nodeHimVerify1 , stNodeOpenP , nodeP , idWorkInvert1 ) ;
                            idWorkInvertIF( tinBaseP , idWorkInvert1 , idWorkInvert2 , idWork ) ;
                            ZE( countT , idWorkInvert2 ) ;
                            ZE( countT , idWorkInvert1 ) ;
                        {
                        nodeC nodeHimVerify2  ; //CALC HIS IDENTITY USING MY LIST
                        nodeC nodeHimVerify1  ; //CALC HIS IDENTITY USING MY LIST

                        nodeServerF( tinBaseP , nodeMeVerify , stNodeOpenP , nodeBangClient , idWork ) ;
                        nodeC nodeMeVerify ; //CALC MY IDENTITY USING MY LIST

                        hisListF( tinBaseP , stNodeHisList , sIn , IDfIELD_IDcMD + 3 ) ;
                        stackC stNodeHisList( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
                        bNewbie = sIn.cFieldF( tinBaseP , IDfIELD_IDcMD + 2 ) ;
                        idWork = sIn.cFieldF( tinBaseP , IDfIELD_IDcMD + 1 ) ;

                        inc02AM( cBangClientsP ) ;
                        bBangClient = 1 ;
                        stNodeCurrentBangClientP.sinkF( tinBaseP , countTC() , (byteT*)nodeBangClient , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                        nodeBangClient = nodeOrigin ;
                        TELL( "IDcMD2PE_CLIENTbANGhELLO+" )
                    {
                    case IDcMD2PE_CLIENTbANGhELLO :
                {
                switch( idCmd ) //ALL PROCESSING HERE MUST BE FAST; LONG PROCESSING SHOULD BE DONE AFTER BANGING
                if( *((tin9S&)tinBaseP).zEtScratch ) { BLAMMO ; }
                TELL( "local processing" )

                stNodeOpenP.sinkF( tinBaseP , countTC() , (byteT*)nodeOrigin , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                stIdSerialReceivedP.sinkF( tinBaseP , countTC() , idSerial , flSTACKsINK_UNIQUE ) ;
                TELL( "registering serial" )
            {
            else if( !stIdSerialReceivedP( idSerial ) ) //U::USE OO STACKS AND DISCARD THE OLD INFO
            }
                }
                    DEL( psoP ) ;
                    stPsoServerP.ungrabF( tinBaseP ) ;
                    if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
                    stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                if( psoP )
            {
            if( !idSerial )
            TN( tcr , "\r\n" ) ;
            TELL( "handling soul" )
    
            countT   idCmd      = sIn.cFieldF( tinBaseP , IDfIELD_IDcMD ) ;
            flagsT&  flags      = sIn.cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
            countT   idSerial   = sIn.cFieldF( tinBaseP , IDfIELD_IDsERIAL ) ;
            TELL( "inspecting received soul" )
        {
        if( psoP )

        }
            break ;
            }
                DEL( psoP ) ;
                stPsoServerP.ungrabF( tinBaseP ) ;
                if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
                stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            {
            if( psoP )
        {
        if( bQuitP )

        }
            break ;
            if( !ether && !bQuitP && nodeOriginLathGood ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 0 , nodeOriginLathGood , 6 ) ;
            *((tin9S&)tinBaseP).zEtScratch = 0 ;
            }
                DEL( psoP ) ;
                stPsoServerP.ungrabF( tinBaseP ) ;
                if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
                stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            {
            if( psoP )
        {
        else
        if( !*((tin9S&)tinBaseP).zEtScratch ) nodeOriginLathGood = nodeOrigin ;

        //}
        //    }
        //        break ;
        //        DEL( psoP ) ;       //8: does not work
        //        stPsoServerP.ungrabF( tinBaseP ) ;
        //        if( stPsoServerP( (countT)psoP ) ) stPsoServerP.extractF( tinBaseP ) ;
        //        stPsoServerP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //    {                      //01: works
        //    if( ruZeWoP < (measureT)1/(measureT)0x10 )
        //{


        nodeC& nodeOrigin = *((tin9S&)tinBaseP).zEtScratch ? nodeNull : nodeC::fieldF( tinBaseP , sIn , IDfIELD_NODEoRIGIN ) ;
        nodeC nodeNull ;
        _IO_     TELLsYSlIFInAME( "tmServerF1" )
        psoP->readF( tinBaseP , sIn ) ;
        soulC sIn( tinBaseP , TAG( TAGiDnULL ) ) ;
        TELL( "reading soul" )
    {
    while( !etThread && !ether && !bQuitP && psoP )
    ZE( boolT  , bSaidBye ) ;
    ZE( boolT  , bNewbie ) ;
    ZE( countT , idWork ) ;
    ZE( boolT  , bBangClient ) ;
    ZE( countT , idPingLath ) ;
    nodeC nodeOriginLathGood ;
    nodeC nodeBangClient ;
    soulC sOk( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , (countT)IDcMD2PE_SERVERoK ) ;

    psoP->etherF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch ) ;

    stPsoServerP.sinkF( tinBaseP , countTC() , (countT)psoP , flSTACKsINK_UNIQUE ) ;

    countT&  cBangClientsP =  *(countT*)pTaskP->c6 ;
    socketC& sListenP      = *(socketC*)pTaskP->c5 ;
    socketC* psoP          =  (socketC*)pTaskP->c4 ;
    NODEiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 && pTaskP->c5 && pTaskP->c6 )
TELL( "setting up" )
TASK( tmServerF )

DONE( tmBangClientF )
}
    TELL( "cleaning up" )

    DEL( pso ) ;
    }
        }
            DEL( ps ) ;
            TELL( "deleting soul" )
            }
                }
                    break ;
                    nodePeer = 0 ;
                    DEL( pso ) ;
                    }
                        if( !bQuitP ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 0 , nodePeer , 5 ) ;
                        stBang.insertF( tinBaseP , (countT)ps , ifcSTACKtYPE_PTR_soulC , 1 ) ;
                    {
                    if( !ether && !bQuitP )
                    *((tin9S&)tinBaseP).zEtScratch = 0 ;
                {
                if( *((tin9S&)tinBaseP).zEtScratch )
                TELL( "reading ok-" )
                VERIFY( *pso ) ;
                TELL( "reading ok+ 5" )
                pso->writeF( tinBaseP , *ps ) ;
                TELL( "writing bang" )
            {
            if( pso && !ether && !bQuitP && *ps >= 4 ) //CODEsYNC df40104 df40104
            stBang >> ps ;
            ZE( soulC* , ps ) ;
            TELL( "pulling from stBang" )
        {
        while( stBang )
        
        }
            if( !ether && !bQuitP ) nodeServerF( tinBaseP , nodePeerCorrect , stNodeOpenP , nodeP , idWorkP ) ;
            nodePeerCorrect = 0 ;
            }
                }
                    nodePeer = 0 ;
                    if( !ether && !bQuitP ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 1 , nodePeer , 4 ) ; //FAILURE TO REPLY TO HELLO COUNTS AS A CONNECTION FAILURE (THIS WILL OCCUR WHEN THE SERVER REFUSES THE CONNECTION AND THUS DELETES THE SOCKET IMMEDIATELY)
                    DEL( pso ) ;
                    *((tin9S&)tinBaseP).zEtScratch = 0 ;
                {
                else
                }
                    break ;
                    }
                        stOdd.ungrabF( tinBaseP ) ;
                        }
                            while( !stOdd.third && ~hDown ) ;
                            }
                                stNodeOpenP.ungrabF( tinBaseP ) ;
                                else                                                stNodeOpenP.sinkF( tinBaseP , countTC() , (byteT*)nodeo , flSTACKsINK_UNIQUE , subtractNodesF ) ;
                                if( stNodeOpenP( (byteT*)nodeo , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
                                stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                nodeC& nodeo = *(nodeC*)&stOdd.downF( tinBaseP , hDown ) ;
                            {
                            do
                            handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        {
                        if( stOdd )
                        stOdd.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                        hisListF( tinBaseP , stOdd , sOk , 2 ) ;
                        stackC stOdd( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB , sizeof( nodeC ) ) ;
                    {
                    else
                    else if( !bNewbie ) hisListF( tinBaseP , stNodeTestP , sOk , 2 ) ; //NEWBIES DO NO TESTING; THEY ASSUME THAT THE SERVER'S LIST IS CORRECT
                    if( !sOk.cFieldF( tinBaseP , 2 ) ) bNewbie = 0 ; //WHEN MY LIST AGREES WITH A SERVER THEN I AM NO LONGER A NEWBIE
                {
                if( !*((tin9S&)tinBaseP).zEtScratch )
                TELL( "reading ok-" )
                VERIFY2( sOk , *pso ) ;
                soulC sOk( tinBaseP , TAG( TAGiDnULL ) ) ;
                TELL( "reading ok+ 3" )
                pso->writeF( tinBaseP , sHello ) ;

                myListF( tinBaseP , sHello , stNodeOpenP ) ;
                sHello << bNewbie ;
                sHello << idWorkP ;
                hdrF( tinBaseP , sHello , nodeP , flPOP_null , IDcMD2PE_CLIENTbANGhELLO ) ;
                soulC sHello( tinBaseP , TAG( TAGiDnULL ) ) ;
                TELL( "writing hello" )
            {
            else
            }
                nodePeer = 0 ;
                }
                    stNodeOpenP.ungrabF( tinBaseP ) ;
                    if( stNodeOpenP( (byteT*)nodePeer , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
                    stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                else if( !bQuitP )
                if( !bQuitP ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 1 , nodePeer , 3 ) ;
                DEL( pso ) ;
                *((tin9S&)tinBaseP).zEtScratch = 0 ;
            {
            else if( *((tin9S&)tinBaseP).zEtScratch )
            }
                nodePeer = 0 ;
                DEL( pso ) ;
                *((tin9S&)tinBaseP).zEtScratch = 0 ;
            {
            if( ether || bQuitP )
            pso->connectF( tinBaseP , nodePeer.idp ) ;
            TELL( "connecting" )
            nodePeer = nodePeerCorrect ;
            pso = new( 0 , tinBaseP , LF ) socketC( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) ) ; ___( pso ) ;
            TELL( "looping to write hello" )
        {
        while( !ether && !bQuitP && !pso && nodePeerCorrect )
        
        }
            nodePeer = 0 ;
            DEL( pso ) ;
            }
                if( !ether && !bQuitP ) reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 0 , nodePeer , 2 ) ;
                *((tin9S&)tinBaseP).zEtScratch = 0 ;
            {
            if( *((tin9S&)tinBaseP).zEtScratch )
            TELL( "reading ok-" )
            VERIFY( *pso ) ;
            TELL( "reading ok+ 2" )
            pso->writeF( tinBaseP , sBye ) ;
            TELL( "writing bye" )
            idSerialBye = GETiDsERIAL ;
        {
        if( pso && nodePeer != nodePeerCorrect && !bQuitP && !ether )

        nodeServerF( tinBaseP , nodePeerCorrect , stNodeOpenP , nodeP , idWorkP ) ;
        nodeC nodePeerCorrect ;
        TELL( "calculating nodeCorrect" )
        _IO_     TELLsYSlIFInAME( "tmBangClientF2" )

        stBang.waitF( tinBaseP ) ;
        TELL( " waiting for a push onto stBang" )
    {
    while( !ether && !bQuitP )
    boolT bNewbie = 1 ;
    nodeC nodePeer ;
    ZE( socketC* , pso ) ;

    countT& idSerialBye = sBye.cFieldF( tinBaseP , IDfIELD_IDsERIAL ) ;
    hdrF( tinBaseP , sBye , nodeP , flPOP_null , IDcMD2PE_CLIENTbANGbYE ) ;
    soulC sBye( tinBaseP , TAG( TAGiDnULL ) ) ;


    ;
                    : *pStBang4P
                    ? *pStBang3P
                : idWorkP == IDtYPE2PEbANGcLIENTwORK_LEFT
                ? *pStBang2P
            : idWorkP == IDtYPE2PEbANGcLIENTwORK_EXPLODE2
            ? *pStBang1P
        : idWorkP == IDtYPE2PEbANGcLIENTwORK_EXPLODE1
        ? *pStBang0P
    stackC& stBang = idWorkP == IDtYPE2PEbANGcLIENTwORK_IMPLODE
    TELL( "setting up" )

    countT idWorkP = pTaskP->c4 ;
    NODEiNFOtm
    _IO_     TELLsYSlIFInAME( "tmBangClientF1" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
TASK( tmBangClientF )

}
    stNodeOpenP.ungrabF( tinBaseP ) ;
    }
        }
            case  IDtYPE2PEbANGcLIENTwORK_RIGHT    : {                                nodePeer1P = cNodes > 1 ? *(nodeC*)&stNodeOpenP[ ideMe > 1      ? ideMe - 1 : cNodes ] : nodeNull ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_LEFT     : {                                nodePeer1P = cNodes > 1 ? *(nodeC*)&stNodeOpenP[ ideMe < cNodes ? ideMe + 1 : 1      ] : nodeNull ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_EXPLODE2 : { if( 1 < ideMe                ) nodePeer1P =              *(nodeC*)&stNodeOpenP[ ideMe / 2                           ]            ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_EXPLODE1 :
            case  IDtYPE2PEbANGcLIENTwORK_IMPLODE  : { if( stNodeOpenP >= ideMe * 2 ) nodePeer1P =              *(nodeC*)&stNodeOpenP[ ideMe * 2                           ]            ; if( stNodeOpenP >= ideMe * 2 + 1 ) nodePeer2P = *(nodeC*)&stNodeOpenP[ ideMe * 2 + 1 ] ; break ; }
        {
        switch( idHisWorkP ) // nodeP IS SET IFF A DISTINCT NODE EXISTS
        nodeC nodeNull ;
    {
    if( ideMe )
    countT ideMe = stNodeOpenP( (byteT*)nodeP , subtractNodesF ) ;
    countT cNodes = stNodeOpenP ;
    stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    if( stNodeOpenP.third ) { BLAMMO ; }
    if( nodePeer2P ) { BLAMMO ; }
    if( nodePeer1P ) { BLAMMO ; }
    _IO_     TELLsYSlIFInAME( "nodeClientF" )
{
voidT nodeClientF( tin0S& tinBaseP , nodeC& nodePeer1P , nodeC& nodePeer2P , stackC& stNodeOpenP , nodeC& nodeP , const countT idHisWorkP )

}
    stNodeOpenP.ungrabF( tinBaseP ) ;
    }
        }
            case  IDtYPE2PEbANGcLIENTwORK_RIGHT    : {                                    nodePeerP = cNodes > 1 ? *(nodeC*)&stNodeOpenP[ ideMe < cNodes ? ideMe + 1 : 1      ] : nodeNull ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_LEFT     : {                                    nodePeerP = cNodes > 1 ? *(nodeC*)&stNodeOpenP[ ideMe > 1      ? ideMe - 1 : cNodes ] : nodeNull ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_EXPLODE2 : { if( stNodeOpenP >= ideMe * 2 + 1 ) nodePeerP =              *(nodeC*)&stNodeOpenP[ ideMe * 2 + 1                       ]            ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_EXPLODE1 : { if( stNodeOpenP >= ideMe * 2     ) nodePeerP =              *(nodeC*)&stNodeOpenP[ ideMe * 2                           ]            ; break ; }
            case  IDtYPE2PEbANGcLIENTwORK_IMPLODE  : { if(           1 != ideMe         ) nodePeerP =              *(nodeC*)&stNodeOpenP[ ideMe / 2                           ]            ; break ; }
        {
        switch( idMyWorkP ) // nodeP IS SET IFF A DISTINCT NODE EXISTS
        nodeC nodeNull ;
    {
    if( ideMe )
    countT ideMe = stNodeOpenP( (byteT*)nodeP , subtractNodesF ) ;
    countT cNodes = stNodeOpenP ;
    stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    if( stNodeOpenP.third ) { BLAMMO ; }
    if( nodePeerP ) { BLAMMO ; }
    _IO_     TELLsYSlIFInAME( "nodeServerF" )
{
voidT nodeServerF( tin0S& tinBaseP , nodeC& nodePeerP , stackC& stNodeOpenP , nodeC& nodeP , const countT idMyWorkP )

}
    idWorkInvert2P = idWorkP == IDtYPE2PEbANGcLIENTwORK_EXPLODE1 ? IDtYPE2PEbANGcLIENTwORK_EXPLODE2 : 0 ;

    ;
                    : IDtYPE2PEbANGcLIENTwORK_LEFT
                    ? IDtYPE2PEbANGcLIENTwORK_RIGHT
                : idWorkP == IDtYPE2PEbANGcLIENTwORK_LEFT
                ? IDtYPE2PEbANGcLIENTwORK_IMPLODE
            : idWorkP == IDtYPE2PEbANGcLIENTwORK_EXPLODE2
            ? IDtYPE2PEbANGcLIENTwORK_IMPLODE
        : idWorkP == IDtYPE2PEbANGcLIENTwORK_EXPLODE1
        ? IDtYPE2PEbANGcLIENTwORK_EXPLODE1
        idWorkP == IDtYPE2PEbANGcLIENTwORK_IMPLODE
    idWorkInvert1P =
    _IO_     TELLsYSlIFInAME( "idWorkInvertIF" )
{
voidT idWorkInvertIF( tin0S& tinBaseP , countT& idWorkInvert1P , countT& idWorkInvert2P , const countT idWorkP )

}
    if( idCallLineP ) ; //USED FOR DEBUGGING TO STUDY WHICH CODE LINE CALLS ME LOTS AND LOTS
    }
        }
            bombF( tinBaseP , etThread , NODEiNFOaRGS , sFail ) ;
    
            sFail << *(count4S*)&nodeFailP ;
            hdrF( tinBaseP , sFail , nodeP , flPOP_BOMB , bConnectP ? IDcMD2PE_NODEfAILEDcONNECT : IDcMD2PE_NODEfAILEDrEAD ) ;
            soulC sFail( tinBaseP , TAG( TAGiDnULL ) ) ;
        
            }
                stNodeOpenP.ungrabF( tinBaseP ) ;
                if( stNodeOpenP( (byteT*)nodeFailP , subtractNodesF ) ) stNodeOpenP.extractF( 0 , tinBaseP ) ;
                stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                stNodeFailConnectP.sinkF( tinBaseP , countTC() , (byteT*)nodeP , flSTACKsINK_UNIQUE , subtractNodesF ) ;
            {
            else
            if( !bConnectP ) stNodeFailReplyP.sinkF( tinBaseP , countTC() , (byteT*)nodeFailP , flSTACKsINK_UNIQUE , subtractNodesF ) ;
        {
        if( nodeFailP && ( nodeFailP != nodeP || !bConnectP ) ) //I DO NOT TELL ON MYSELF FOR CONNECTION TYPE FAILURES BECAUSE THIS IS JUST MY PERSONALITY (I AM OBVIOUSLY ALIVE SO THIS AVOIDS TRANSIENT NODE DOWN NOTICES)
    {
    if( !bQuitP )
    NODEiNFOf
    _IO_     TELLsYSlIFInAME( "reportFailF" )
{
voidT reportFailF( tin0S& tinBaseP , etherC& etThread , NODEiNFOpARMS , const boolT bConnectP , const nodeC& nodeFailP , const countT idCallLineP )

}
    }
        }
            break ;
            popF( tinBaseP , etThread , etScratchNodeP , pStBang0P , pStBang1P , pStBang2P , pStBang3P , pStBang4P , soulP ) ;
            }
                flags |= flPOP_UP ;
                flags &= ~( F(flPOP_BOMB) ) ;
            {
            if( F(flags) & flPOP_BOMB )
        {
        else    
        }
            }
                if( !bForever && !( cTriesP && -- cTriesP ) ) nodeTo = 0 ;
                reportFailF( tinBaseP , etThread , NODEiNFOaRGS , 1 , node1 , 1 ) ;
                *((tin9S&)tinBaseP).zEtScratch = 0 ;
            {
            else
            if( !*((tin9S&)tinBaseP).zEtScratch ) break ;
            writeF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , node1 , soulP ) ;
        {
        if( node1 && node1 != nodeP )

        const nodeC& node1 = nodeTo ? nodeTo : *(nodeC*)&stNodeOpenP[ 1 ] ;
    {
    while( !ether && !bQuitP )
    const boolT bForever = nodeTo && !cTriesP ;

    nodeC nodeTo = nodeToP ;
    etherC& ether = etherC::etPrimeIF() ;

    flagsT& flags = soulP.cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
    NODEiNFOf
    _IO_     TELLsYSlIFInAME( "bombF" )
{
voidT bombF( tin0S& tinBaseP , etherC& etThread , NODEiNFOpARMS , soulC& soulP , const nodeC& nodeToP = nodeC() , countT cTriesP = 0 )
*/
  else i reset flPOP_BOMB and push copies of soulP onto my own bang stacks
  if i know a root that is not myself then i connect to it and write soulP to it 
 nodeToP 0: normal mode
   not 0: i retry this cTriesP times and then revert to normal mode
   0: i retry this forever
  cTriesP
  i connect to nodeToP and write soulP to it
 nodeToP not 0: override mode
i have 2 modes
i might reset this flag
soulP must specify flPOP_BOMB
/*

voidT reportFailF( tin0S& tinBaseP , etherC& etThread , NODEiNFOpARMS , const boolT bConnectP , const nodeC& nodeFailP , const countT idCallLineP ) ;

}
    writeF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , nodeTestP , sCry ) ;
    hdrF( tinBaseP , sCry , nodeP , flPOP_null , IDcMD2PE_CRY ) ;
    soulC sCry( tinBaseP , TAG( TAGiDnULL ) ) ;
    _IO_     TELLsYSlIFInAME( "testF" )
{
voidT testF( tin0S& tinBaseP , nodeC& nodeTestP , nodeC& nodeP )

}
    VERIFY( sock ) ;
    sock.writeF( tinBaseP , soulP ) ;
    sock.connectF( tinBaseP , nodeP.idp ) ;
    socketC sock( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) ) ;
    _IO_     TELLsYSlIFInAME( "writeF" )
{
voidT writeF( tin0S& tinBaseP , const nodeC& nodeP , soulC& soulP )

}
    }
        }
            }
                *pStBang4P << pSoul ;
                }
                    flags &= ~( F(flPOP_DOWN) | F(flPOP_UP) ) ;
                    flagsT& flags = pSoul->cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
                {
                if( bDudP )
                *pSoul = soulP ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;
        {
        if( pStBang4P )
        
        }
            }
                *pStBang3P << pSoul ;
                }
                    flags &= ~( F(flPOP_DOWN) | F(flPOP_UP) ) ;
                    flagsT& flags = pSoul->cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
                {
                if( bDudP )
                *pSoul = soulP ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;
        {
        if( pStBang3P )
        
        }
            }
                *pStBang2P << pSoul ;
                }
                    flags &= ~( F(flPOP_DOWN) | F(flPOP_UP) ) ;
                    flagsT& flags = pSoul->cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
                {
                if( bDudP )
                *pSoul = soulP ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;
        {
        if( pStBang2P )
    
        }
            }
                *pStBang1P << pSoul ;
                }
                    flags &= ~( F(flPOP_DOWN) | F(flPOP_UP) ) ;
                    flagsT& flags = pSoul->cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
                {
                if( bDudP )
                *pSoul = soulP ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;
        {
        if( pStBang1P )
    {
    if( F(flags) & flPOP_UP )

    }
        }
            }
                *pStBang0P << pSoul ;
                }
                    flags &= ~( F(flPOP_DOWN) | F(flPOP_UP) ) ;
                    flagsT& flags = pSoul->cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
                {
                if( bDudP )
                *pSoul = soulP ;
            {
            if( pSoul )
            soulC* pSoul = new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ; ___( pSoul ) ;
        {
        if( pStBang0P )
    {
    if( F(flags) & flPOP_DOWN )

    if( F(flags) & flPOP_BOMB ) { BLAMMO ; }
    flagsT& flags = soulP.cFieldF( tinBaseP , IDfIELD_FLAGS ) ;
    _IO_     TELLsYSlIFInAME( "popF" )
{
voidT popF( tin0S& tinBaseP , etherC& etThread , etherC& etScratchNodeP , stackC* pStBang0P , stackC* pStBang1P , stackC* pStBang2P , stackC* pStBang3P , stackC* pStBang4P , soulC& soulP , const boolT bDudP = 0 )

}
    return cNodes ;
    }
        if( node ) stP.sinkF( tinBaseP , countTC() , (byteT*)&node , flSTACKsINK_UNIQUE , subtractNodesF ) ;
        nodeC& node = nodeC::fieldF( tinBaseP , soulP , idFieldP ++ ) ;
    {
    while( cToDo -- )
    countT cToDo = cNodes ;
    const countT cNodes = soulP.cFieldF( tinBaseP , idFieldP ++ ) ;
    _IO_     TELLsYSlIFInAME( "hisListF" )
{
countT hisListF( tin0S& tinBaseP , stackC& stP , soulC& soulP , countT idFieldP = IDfIELD_IDcMD + 1 )

}
    stNodeOpenP.ungrabF( tinBaseP ) ;
    }
        while( !stNodeOpenP.third && ~hDown ) ;
        do soulP << *(count4S*)&stNodeOpenP.downF( tinBaseP , hDown ) ;
        handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stNodeOpenP )
    soulP << (countT)stNodeOpenP ;
    stNodeOpenP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    _IO_     TELLsYSlIFInAME( "myListF" )
{
voidT myListF( tin0S& tinBaseP , soulC& soulP , stackC& stNodeOpenP )

}
    return sgn ;
    if( ((tin9S&)tinBaseP).fingerprint && pEther && c3P ) ;

    sCountT sgn = (nodeC*)c1P && (nodeC*)c2P ? *(nodeC*)c1P - *(nodeC*)c2P : 0 ;
    _IO_     //TELLsYSlIFInAME( "subtractNodesF" )

    }
    {
    IFbEcAREFUL
{
countT subtractNodesF( tin0S& tinBaseP , countT& pEther , countT& c1P , countT& c2P , countT& c3P )

}
    return *(nodeC*)&soulP.c4 FieldF( tinBaseP , idFieldP ) ;
    // MIGRATE THE FOLLOWING LINE TO USE pbFieldF
{
nodeC& nodeC::fieldF( tin0S& tinBaseP , soulC& soulP , const countT idFieldP )

}
    return (byteT*)this ;
{
nodeC::operator byteT*( voidT ) const

}
    return sgn ;

    else if( idp   < nodeP.idp   ) sgn = - 1 ;
         if( idp   > nodeP.idp   ) sgn =   1 ;
    else if( time1 < nodeP.time1 ) sgn = - 1 ;
         if( time1 > nodeP.time1 ) sgn =   1 ;
    else if( time2 < nodeP.time2 ) sgn = - 1 ;
         if( time2 > nodeP.time2 ) sgn =   1 ;
    ZE( sCountT , sgn ) ;
{
sCountT nodeC::operator -( nodeC& nodeP ) const

}
    return idp != nodeP.idp ;
{
boolT nodeC::operator !=( nodeC& nodeP ) const

}
    return idp == nodeP.idp ;
{
boolT nodeC::operator ==( nodeC& nodeP ) const

}
    return *this ;
    if( !idp ) idMe = time2 = time1 = 0 ;
    idp = idpP ;
{
nodeC& nodeC::operator =( const countT idpP )

}
    return *this ;
    time2 = nodeP.time2 ;
    time1 = nodeP.time1 ;
    idp = nodeP.idp ;
    idMe = nodeP.idMe ;
{
nodeC& nodeC::operator =( nodeC& nodeP )

}
    return !!idp ;
{
nodeC::operator boolT( voidT ) const

}
    etThread.osTimeNowF( tinBaseP , time1 , time2 ) ;
{
time2( 0 )
time1( 0 ) ,
idp( 0 ) ,
idMe( idMeP ) ,
nodeC::nodeC( tin0S& tinBaseP , etherC& etThread , const countT idMeP ) :

}
{
time2( 0 )
time1( 0 ) ,
idp( 0 ) ,
idMe( 0 ) ,
nodeC::nodeC( voidT ) :

}

    soulP << idCmdP ;
    soulP << flagsP ;
    soulP << GETiDsERIAL ;
    soulP << *(count4S*)&nodeP ;  //CODEsYNC df40104 df40104
{
voidT hdrF( tin0S& tinBaseP , soulC& soulP , nodeC& nodeP , const flagsT flagsP , const countT idCmdP )

#define IDfIELD_IDcMD                   4
#define IDfIELD_FLAGS                   3
#define IDfIELD_IDsERIAL                2
#define IDfIELD_NODEoRIGIN              1

#define flPOP_UP                   0xe00004ff
#define flPOP_DOWN                 0xe00002ff
#define flPOP_BOMB                 0xe00001ff
#define flPOP_null                 0xe00000ff

nodeC nodeDns ;

;
}
    " USERcOMMANDS "
    " NODEfAILEDcONNECT " ,
    " NODEfAILEDrEAD " ,
    " CLIENTbANGbYE " ,
    " CLIENTbANGhELLO " ,
    " SERVERoK " ,
    " PING " ,
    " GASP " ,
    " CRY " ,
    " (bug)" ,
{
osTextT* ppostOldCmd[] =

;
}
    " RIGHT "
    " LEFT " ,
    " UP2 " ,
    " UP1 " ,
    " DOWN " ,
    " (bug)" ,
{
osTextT* ppostWork[] =

#define IDcMD2PE_USERcOMMANDS                0x9
#define IDcMD2PE_NODEfAILEDcONNECT           0x8
#define IDcMD2PE_NODEfAILEDrEAD              0x7
#define IDcMD2PE_CLIENTbANGbYE               0x6
#define IDcMD2PE_CLIENTbANGhELLO             0x5
#define IDcMD2PE_SERVERoK                    0x4
#define IDcMD2PE_PING                        0x3
#define IDcMD2PE_GASP                        0x2
#define IDcMD2PE_CRY                         0x1

#define IDtYPE2PEbANGcLIENTwORK_RIGHT    0x5
#define IDtYPE2PEbANGcLIENTwORK_LEFT     0x4
#define IDtYPE2PEbANGcLIENTwORK_EXPLODE2 0x3
#define IDtYPE2PEbANGcLIENTwORK_EXPLODE1 0x2
#define IDtYPE2PEbANGcLIENTwORK_IMPLODE  0x1

#define NODEiNFOaRGS           _c8ni1P ,          _c8ni2P ,          _c8ni3P
#define NODEiNFOpARMS count8S& _c8ni1P , count8S& _c8ni2P , count8S& _c8ni3P

    NODEiNFOf
                                                                          \
    count8S& _c8ni3P = *(count8S*)pTaskP->c3 ;                            \
    count8S& _c8ni2P = *(count8S*)pTaskP->c2 ;                            \
    count8S& _c8ni1P = *(count8S*)pTaskP->c1 ;                            \
                                                                          \
#define NODEiNFOtm                                                        \

    boolT&   bTalkP                   =    *(boolT*)_c8ni3P.c5 ;
    stackC&  stIdSerialReceivedP      =   *(stackC*)_c8ni3P.c4 ; \
    stackC&  stPsoServerP             =   *(stackC*)_c8ni3P.c3 ; \
    stackC*& pStBang4P                = *(stackC**)&_c8ni3P.c2 ; \
    stackC*& pStBang3P                = *(stackC**)&_c8ni3P.c1 ; \
    stackC*& pStBang2P                = *(stackC**)&_c8ni2P.c8 ; \
    stackC*& pStBang1P                = *(stackC**)&_c8ni2P.c7 ; \
    stackC*& pStBang0P                = *(stackC**)&_c8ni2P.c6 ; \
    stackC&  stNodeCurrentBangClientP =   *(stackC*)_c8ni2P.c5 ; \
    stackC&  stNodeTestP              =   *(stackC*)_c8ni2P.c4 ; \
    stackC&  stNodeZombieOldP         =   *(stackC*)_c8ni2P.c3 ; \
    stackC&  stNodeZombieP            =   *(stackC*)_c8ni2P.c2 ; \
    stackC&  stNodeFailReplyP         =   *(stackC*)_c8ni2P.c1 ; \
    stackC&  stNodeFailConnectOldP    =   *(stackC*)_c8ni1P.c8 ; \
    stackC&  stNodeFailConnectP       =   *(stackC*)_c8ni1P.c7 ; \
    stackC&  stNodeOpenP              =   *(stackC*)_c8ni1P.c6 ; \
    ranUniC& ruZeWoP                  =  *(ranUniC*)_c8ni1P.c5 ; \
    boolT&   bQuitP                   =    *(boolT*)_c8ni1P.c4 ; \
    etherC&  etScratchNodeP           =   *(etherC*)_c8ni1P.c3 ; \
    nodeC&   nodeP                    =    *(nodeC*)_c8ni1P.c2 ; \
    countT   idMeP                    =             _c8ni1P.c1 ; \
                                                                 \
#define NODEiNFOf                                                \

    etThread.osThreadF( tinBaseP , countTC() , tmBangClientF , 0 , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&_c8ni1P , (countT)&_c8ni2P , (countT)&_c8ni3P , idWorkP ) ;
    godHelloF( tinBaseP , *pStBang##postDigitP ) ;                                              \
                                                                                            \
#define LAUNCHbANGcLIENT(postDigitP,idWorkP)                                                \

#define FINGERnEG         0x87654321

    }
        __( !soulP || soulP.cFieldF( tinBaseP , 1 ) != IDcMD2PE_SERVERoK ) ; \
        (sockP).readF( tinBaseP , soulP , TOCK * 0x8 ) ;                                            \
    {                                                                                           \
                                                                                                \
#define VERIFY2(soulP,sockP)                                                                    \

    }
        __( !_sOk || _sOk.cFieldF( tinBaseP , 1 ) != IDcMD2PE_SERVERoK ) ; \
        (sockP).readF( tinBaseP , _sOk , TOCK * 0x8 ) ;                                             \
        soulC _sOk( tinBaseP , TAG( TAGiDnULL ) ) ;                                                 \
    {                                                                                           \
                                                                                                \
#define VERIFY(sockP)                                                                           \

#include postADAMhEADER

/*1*//*"ifcIDaDAM_3BANG: TODO/REST CODE FOR THE NODE ADAM"*//*1*/
/**/
*/
obsoleted by ff40104
objective: explore distributed blob storage
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

