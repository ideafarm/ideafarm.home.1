
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        }
            DEL( pSw ) ;
            }
                }
                    etThread.strokeF( tin0P , T("\r\n") ) ;
                    for( countT off = 0 ; off < CsAMPLES ; off ++ ) etThread.strokeF( tin0P , TF3(pcTally[off],flFORMAT_UNSIGNED,9) ) ;
                    etThread.strokeF( tin0P , TF4(idLine&0xfff,flFORMAT_UNSIGNED|flFORMAT_NObASE,5,0xa)+TF3(idiFile,flFORMAT_UNSIGNED|flFORMAT_FILLzE,7)+tb+TF4(idLineNote&0xfff,flFORMAT_UNSIGNED|flFORMAT_NObASE,5,0xa)+TF3(idiFileNote,flFORMAT_UNSIGNED|flFORMAT_FILLzE,7)+tb+TF3(idAdamRoot,flFORMAT_UNSIGNED,8)+TF3(idProcessOld,flFORMAT_UNSIGNED,9)+TP(processGlobal4I.mapdropNoteType(idType),processGlobal4I.mapdropNoteType.costMaxF())+tb ) ;
                    countT idType             = c7lever.c7 ;
                    countT idProcessOld          = c7lever.c6 ;
                    countT idAdamRoot = c7lever.c5 ;
                    countT idiFileNote        = c7lever.c4 ;
                    countT idLineNote         = c7lever.c3 ;
                    countT idiFile            = c7lever.c2 ;
                    countT idLine             = c7lever.c1 ;
                {
                if( bSuspectF( pcTally ) )
                countT* pcTally = &(countT&)*pSw ;
                c7lever = *(count7S*)pSw->leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors && !ether ; idf ++ )
            countT cFlavors = pSw->cFlavorsF( tin0P ) ;
        {
        if( pSw )
        switchC*& pSw = *(switchC**)&(countT&)sw_pSw ;
        etThread.strokeF( tin0P , T("\r\n" USCORE127 "\r\n")+T(psttIdName)+tc+TPS("",127,sttd)+T("\r\n\r\n")+T("line ")+TPS("file",7,sttd)+tb+T("linn ")+TPS("filn",7,sttd)+tb+TPS("adam",7,sttd)+tb+TPS("process",8,sttd)+tb+TPS("type",processGlobal4I.mapdropNoteType.costMaxF(),sttd)+tb+TPS("tallies",9*CsAMPLES-1,sttd)+tc ) ;
        psttIdName = (strokeS*)sw_pSw.leverF( tin0P , idp ) ;
    {
    for( countT idp = 1 ; idp <= cPools ; idp ++ )
    countT cPools = sw_pSw.cFlavorsF( tin0P ) ;
    strokeS sttd( '-' ) ;
    TN( tc , "\r\n" ) ;
    TN( tb , " " ) ;
{
if( !ether )

}
    etThread.strokeF( tin0P , T("\r") ) ;
    }
        ++ s ; ether.osSleepF( tin0P , TICK , 0 , flSLEEP_TALK ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    {
    if( idSample < CsAMPLES )

    }
        }
            }
                }
                    etThread.delF( tin0P , psttName ) ;
                    }
                        etThread.delF( tin0P , psttIdName ) ;
                        }
                            sIn2.removeAllF( tin0P ) ;
                            }
                                etThread.strokeF( tin0P , T("\r        \r") ) ;
                                }
                                    etThread.delF( tin0P , pcInfo ) ;
                                    }
                                        pcTally[ idSample - 1 ] ++ ;
                                        countT* pcTally = &(countT&)*pSw ;
                                        c7lever = *(count7S*)pcInfo ;
                                    {
                                    if( pcInfo )
                                    sIn2.shiftRightF( tin0P , pcInfo , ccInfo ) ; ___( pcInfo ) ;
                                    ZE( countT  , ccInfo ) ;
                                    ZE( countT* , pcInfo ) ;
                                    if( !( (countT)sIn2 % 0x1000 ) ) etThread.strokeF( tin0P , T("\r        \r")+TF1((countT)sIn2) ) ;
                                {
                                while( (countT)sIn2 && !ether )
                            {
                            if( idReply == ifcIDrEPLYgLASS2_POOLoLDwALK1 && !ether )
                            sIn2 >> idReply ;
                            ZE( countT , idReply ) ;
                            sock.readF( tin0P , sIn2 ) ;
                            
                            sOut.removeAllF( tin0P ) ;
                            sock.writeF( tin0P , sOut ) ;
                            sOut << psttName ;
                            sOut << idMemorySpace ;
                            sOut << (countT)ifcIDcMDgLASS2_POOLoLDwALK1 ;
                        {
                        if( pSw )
                        if( !pSw ) { pSw = new( 0 , tin0P , LF ) switchC( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , (byteT*)&c7lever , sizeof c7lever , CsAMPLES * sizeof( countT ) ) ; ___( pSw ) ; }
                        switchC*& pSw = *(switchC**)&(countT&)sw_pSw ;
                        etThread.strMakeF( tin0P , LF , psttIdName , TF1(idMemorySpace)+T("!")+T(psttName) ) ; ___( psttIdName ) ;
                        etThread.strokeF( tin0P , T("sample ")+TF1(idSample)+T(" for ")+TF1(idMemorySpace)+T(" \"")+T(psttName)+T("\"\r\n") ) ;
                    {
                    //if( etThread.strIdF( tin0P , countTC( 1 ) , T("1050104") , psttName ) )
                    //if( !etThread.strIdF( tin0P , countTC( 1 ) , T("fooey") , psttName ) )
    
                    sIn >> psttName ; ___( psttName ) ;
                    ZE( strokeS* , psttName ) ;
                {
                while( cNames -- && !ether )
                sIn >> cNames ;
                ZE( countT , cNames ) ;
                sIn >> idMemorySpace ;
                ZE( countT , idMemorySpace ) ;
            {
            while( cSpaces -- && !ether )
            sIn >> cSpaces ;
            ZE( countT , cSpaces ) ;
        {
        if( idReply == ifcIDrEPLYgLASS2_POOLoLDnAMES && !ether )
        sIn >> idReply ;
        ZE( countT , idReply ) ;
        
        sock.readF( tin0P , sIn ) ;
        soulC sIn2( tin0P , TAG( TAGiDnULL ) ) ;
        soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
        sOut.removeAllF( tin0P ) ;
        sock.writeF( tin0P , sOut ) ;
        soulC sOut( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDgLASS2_POOLoLDnAMES ) ;
        sock.connectF( tin0P , ifcIDpORT_DOOR ) ;
        socketC sock( tin0P , etThread , TAG( TAGiDnULL ) ) ;
    {
{
for( countT idSample = 1 ; idSample <= CsAMPLES && !ether ; idSample ++ )
count7S c7lever ;
switchC sw_pSw( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , psttIdName ) ;
ZE( strokeS* , psttIdName ) ;
etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_RUSH ) ;

TODO

}
    return bSuspect ;

    }
        }
            break ;
            bSuspect = 0 ;
        {
        if( pcTallyP[ off ] <= pcTallyP[ off - 1 ] )
    {
    for( countT off = 1 ; off < CsAMPLES ; off ++ )

    boolT bSuspect = 1 ;
{
boolT bSuspectF( const countT* const pcTallyP )

#define CsAMPLES 0x4

#include postADAMhEADER

/*1*/WAKEhIDE( "tool.monitor.query.2.leak.finder" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

