
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

if( bReboot ) etThread.osFireF( tin0P ) ;

}
    }
        }
            }
                }
                    //}
                        //}
                    //        TELL( "hired self" )
                    //        { countT idAdam = DDNUMB ; etThread.ifcHireF( tin0P , T("tool.gorilla.ephemeral.threads") , idAdam , 0 ) ; }
                    //        TELL( "hiring self" )                                       
                        //{
                        //else
                        //}
                        //    break ;
                        //    POPUP( "BURNIN PASS" ) ;
                        //{
                        //if( !( state.idMe % 0x400 ) )
                        //if( !( state.idMe % 0x400 ) ) bReboot = 1 ;
                    //{
                    //if( cAll == 0x10 )

                    if( !( cAll % 0x10 ) ) etThread.winSetTitleF( tin0P , /*TF1(state.idMe)+tb+TF1(state.cThreads)+tb+*/TF1(cAll)+tb+TF1(cAlive) ) ;
                    cAll ++ ;
                    //state.cThreads ++ ;
                    }
                        //etThread.ifcSayF( tin0P , TF1(cAll) , flSAY_APPEND | flSAY_LOG ) ;
                        etThread.strokeF( tin0P , T("\r        \r")+TF1(cAll) ) ;
                    {
                    if( !( cAll % 0x10000 ) )
                {
                if( !etThread )
                etThread.osThreadF( tin0P , countTC() , tmNullF ) ;
            {
            if( !ether )
            }
                //++ s ; ether.osSleepF( tin0P , TUCK * 0x10 ) ;
                //sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
            {
        {
        else
        }
            thirdC::dosPriorityIF( tin0P , idDesireSave ) ;
            ((tin1S&)tin0P).cYield = 0 ;
            thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) ) ;
            ((tin1S&)tin0P).cYield = 0 ;
            thirdC::dosPriorityIF( tin0P , ifcTHREADpRIORITY_RUSH ) ;
            const countT idDesireSave = ((tin1S&)tin0P).idDesireSetBySelf ;
        {
        //if( cAlive > 0x10 )
        //if( cAlive > 0x40 )
        if( cAlive > 0x100 )
    {
    while( !ether && !etThread )
    ranUniC ru( TOCK * 4 , 1 ) ;
    countT& cAlive = thirdC::os_cAllKidThreadsI_IF( tin0P ) ;
    ZE( countT , cAll ) ;
    TN( tb , " " ) ;

    TN( tLog , "\\log.8140104" ) ;

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_LAZIEST ) ;

    //U::COMMENTED OUT SO CAN HAVE MULTIPLE CELLS OF ME: stateS state( tin0P , etThread ) ;
{
ZE( boolT , bReboot ) ;

//}
//    ++ s ; ether.osSleepF( tin0P , TOCK * 0x40 ) ; //TO GIVE OTHER HOSTS TIME TO INITIALIZE
//    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
//{

TODO

DONE( tmNullF )
}
    ++ s ; etThread.osSleepF( tin0P , TUCK * 0x10 ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
{
TASK( tmNullF )

}
{
stateC( tin0P , etherP , sizeof *this , 0 , translateStateF )
stateS::stateS( tin0S& tin0P , etherC& etherP ) :

TRANSLATEsTATE_END
    state.idMe ++ ;
TRANSLATEsTATE_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
    case 2 : { state.cThreads    = stateOther.cThreads    ; }
TRANSLATEsTATE_BEGIN( stateS , 2 )

;
}
    stateS( tin0S& tin0P , etherC& etherP ) ;

    countT cThreads ;
    countT idMe ;
    countT idVersion ;
{
struct stateS : public stateC

/*1*/WAKEhIDE( "tool.gorilla.ephemeral.threads" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

