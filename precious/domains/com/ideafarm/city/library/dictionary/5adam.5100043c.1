
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    TELL( "cleaning up" ) ;
    etThread.loafIF( tin0P ) ;
    TELL( "waiting to be fired" ) ;

    HIRE( T("sentient.mailer") , 0x4010441 , 0x1000000 , 0x4010441 , 0x1000000 )
    TELL( "hiring 144" )

    etThread.ifcChatF( tin0P , 0 , DDNUMB , jobFillCourseF , jobHearOrderF ) ;
    TELL( "preparing to accept chat clients" ) ;

    stateS state( tin0P , etThread ) ;
    TELL( "setting up" )
{

etThread.winSetTitleF( tin0P , TF1(DDNUMB) ) ; //U::
TODO

STATE0

}
    if( ether && cArgP && c8argP.c1 && sDataP && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            }
                }
                    break ;

                    etThread.delF( tin0P , psttJobType ) ;

                    else __1
                    }
                        }
                            __1
                            *((tin1S&)tin0P).zEtScratch = 0 ;
                        {
                        if( *((tin1S&)tin0P).zEtScratch )

                        //etherC::ifcSayIF( T("-") , flSAY_APPEND | flSAY_LOG ) ;
                        etThread.delF( tin0P , psttBody ) ;
                        etThread.delF( tin0P , psttFrom ) ;
                        etThread.delF( tin0P , psttServer ) ;

                        }
                            }
                                etThread.delF( tin0P , psttr ) ;
                                }
                                    }
                                        }
                                            }
                                                }
                                                    if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"quit\": ")+TF1(etScratch+221)+T("    \"")+T(psttr)+T("\"") ) ;
                                                    __( sockc.readWoReplyF( tin0P , psttr ) - 221 ) ;
                                                    etThread.delF( tin0P , psttr ) ;
                                                    sockc.writeF( tin0P , (osTextT*)tQuit ) ;
                                                    //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing quit: ")+tQuit , flSAY_APPEND | flSAY_LOG ) ;
                                                {
                                                else
                                                if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"body\": ")+TF1(etScratch+250)+T("    \"")+T(psttr)+T("\"") ) ;
                    
                                                __( sockc.readWoReplyF( tin0P , psttr ) - 250 ) ;
                                                etThread.delF( tin0P , psttr ) ;
                                                sockc.writeF( tin0P , (osTextT*)tBody , tBody.csF( tin0P ) ) ;
                                                //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing body: ")+tBody , flSAY_APPEND | flSAY_LOG ) ;
                                            {
                                            else
                                            if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"data\": ")+TF1(etScratch+354)+T("    \"")+T(psttr)+T("\"") ) ;
                
                                            __( sockc.readWoReplyF( tin0P , psttr ) - 354 ) ;
                                            etThread.delF( tin0P , psttr ) ;
                                            sockc.writeF( tin0P , (osTextT*)tData ) ;
                                            //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing data: ")+tData , flSAY_APPEND | flSAY_LOG ) ;
                                        {
                                        else
                                        if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("some recipients were rejected") ) ;
            
                                        }
                                            if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"")+tTo+T("\": ")+TF1(etScratch+250)+T("    \"")+T(psttr)+T("\"") ) ;
                                            __( sockc.readWoReplyF( tin0P , psttr ) - 250 ) ;
                                            etThread.delF( tin0P , psttr ) ;
                                            sockc.writeF( tin0P , (osTextT*)tTo ) ;
                                            //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing to: ")+tTo , flSAY_APPEND | flSAY_LOG ) ;
            
                                            etThread.delF( tin0P , psttTo ) ;
                                            TN( tTo , "" ) ; tTo = T("rcpt to:<")+T(psttTo)+T(">\r\n") ;
                                            st_psttTo >> psttTo ; ___( psttTo ) ;
                                            ZE( strokeS* , psttTo ) ;
                                        {
                                        while( !*((tin1S&)tin0P).zEtScratch && st_psttTo )
            
                                        if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"from\": ")+TF1(etScratch+250)+T("    \"")+T(psttr)+T("\"") ) ;
                                        __( sockc.readWoReplyF( tin0P , psttr ) - 250 ) ;
                                        etThread.delF( tin0P , psttr ) ;
                                        sockc.writeF( tin0P , (osTextT*)tFrom ) ;
                                        //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing from: ")+tFrom , flSAY_APPEND | flSAY_LOG ) ;
                                    {
                                    else
                                    if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"hello\": ")+TF1(etScratch+250)+T("    \"")+T(psttr)+T("\"") ) ;
        
                                    __( sockc.readWoReplyF( tin0P , psttr ) - 250 ) ;
                                    etThread.delF( tin0P , psttr ) ;
                                    sockc.writeF( tin0P , (osTextT*)tHelo ) ;
                                    //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("writing hello") , flSAY_APPEND | flSAY_LOG ) ;
                                {
                                else
                                if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("\"connect\": ")+TF1(etScratch+220)+T("    \"")+T(psttr)+T("\"") ) ;
                                //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("connected to ")+T(psttServer) , flSAY_APPEND | flSAY_LOG ) ;
                                __( sockc.readWoReplyF( tin0P , psttr ) - 220 ) ;
                                sockc.connectF( tin0P , 0x19 , socketC::nicNameIF( tin0P , *((tin1S&)tin0P).zEtScratch , psttServer ) , 1 ) ;
                                //((tin1S&)tin0P).zEtScratch->ifcSayIF( T("connecting to ")+T(psttServer) , flSAY_APPEND | flSAY_LOG ) ;
                            {
                            else
                            if( *((tin1S&)tin0P).zEtScratch ) logErrorF( tin0P , etThread , psttServer , psttFrom , st_psttTo , psttBody , T("could not construct socket") ) ;
                            socketC sockc( tin0P , *((tin1S&)tin0P).zEtScratch , TAG( TAGiDnULL ) ) ;
                            ZE( strokeS* , psttr ) ;

                            TN( tQuit , "quit\r\n" ) ;
                            TN( tBody , "" ) ; tBody = T(psttBody)+T("\r\n.\r\n") ;
                            TN( tData , "data\r\n" ) ;
                            TN( tFrom , "" ) ; tFrom = T("mail from:<")+T(psttFrom)+T(">\r\n") ;
                            TN( tHelo , "helo unknown.ideafarm.com\r\n" ) ;

                            etThread.strReplaceF( tin0P , psttBody , 0 , T("\r\n.") , T("\r\n..") , 0 , flSTRrEPLACE_IGNOREqUOTES ) ; ___( psttBody ) ;
                        {
                        //SMTP TELNET SESSION WITH psttServer

                        }
                            etThread.delF( tin0P , psttr ) ;
                            //etherC::ifcSayIF( psttr , flSAY_APPEND | flSAY_LOG ) ;
                            while( !etThread && ~hDown ) ;
                            }
                                etThread.strFuseF( tin0P , psttr , T(" ")+T(psttTo)+T("\r\n") ) ; ___( psttr ) ;
                                strokeS* psttTo = (strokeS*)st_psttTo.downF( tin0P , hDown ) ;
                            {
                            do
                            handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            etThread.strMakeF( tin0P , LF , psttr , T("mailOutToNamed_SMTP_receiver \"")+T(psttServer)+T("\" for ")+TF1((countT)st_psttTo)+T(" recipients:\r\n\r\n") , st_psttTo * ( csttMaxTo + 0x40 ) ) ; ___( psttr ) ;
                            ZE( strokeS* , psttr ) ;
                        {

                        sOrderP >> psttBody ; ___( psttBody ) ;
                        ZE( strokeS* , psttBody ) ;

                        }
                            if( psttTo && csttMaxTo < psttTo->idAdam ) csttMaxTo = psttTo->idAdam ;

                            st_psttTo << psttTo ;
                            sOrderP >> psttTo ; ___( psttTo ) ;
                            ZE( strokeS* , psttTo ) ;
                        {
                        while( cTo -- )
                        stackC st_psttTo( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
                        ZE( countT , csttMaxTo ) ;

                        sOrderP >> cTo ;
                        ZE( countT , cTo ) ;

                        sOrderP >> psttFrom ; ___( psttFrom ) ;
                        ZE( strokeS* , psttFrom ) ;

                        sOrderP >> psttServer ; ___( psttServer ) ;
                        ZE( strokeS* , psttServer ) ;
                        //etherC::ifcSayIF( T("+") , flSAY_APPEND | flSAY_LOG ) ;
                        TN( tLogFile , "" ) ; tLogFile = T("///d/ideafarm.log.")+TF1(DDNUMB)+T(".ifcIDcMDjOBoRDER_NAMED.mailOutToNamed_SMTP_receiver" ) ;
                    {
                    else if( !etThread.strCompareF( tin0P , psttJobType , T("!mailOutToNamed_SMTP_receiver") ) )
                    }
                        //etherC::ifcSayIF( T("ifcIDcMDjOBoRDER_NAMED/!mailOut/-") , flSAY_APPEND | flSAY_LOG ) ;
                        etThread.delF( tin0P , psttBody ) ;
                        }
                            __( cFail ) ;
                            }
                                }
                                    ++ s ; etThread.osSleepF( tin0P , TOCK * 4 ) ;
                                    //etherC::ifcSayIF( T("waiting for ")+TF1(cPending)+T(" tmSubJobF threads to complete") , flSAY_APPEND | flSAY_LOG ) ;
                                {
                                while( cPending )
                                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                            {

                            }
                                }
                                    etThread.osThreadF( tin0P , countTC() , tmSubJobF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&cPending , (countT)psOrder , (countT)&cFail ) ;
                                    cPending ++ ;
                                {
                                if( psOrder && !etThread )
                                st_sOrder >> psOrder ;
                                ZE( soulC* , psOrder ) ;
                            {
                            while( !etThread && st_sOrder )
                            ZE( countT , cFail ) ;
                            ZE( countT , cPending ) ;
                            //etherC::ifcSayIF( T("ifcIDcMDjOBoRDER_NAMED/!mailOut/")+T("about to launch ")+TF1(st_sOrder)+T(" tmSubJobF threads") , flSAY_APPEND | flSAY_LOG ) ;

                            }
                                }
                                    st_sOrder << psOrder ;
                                    *psOrder << psttBody ;
                                    }
                                        etThread.delF( tin0P , psttTo ) ;
                                        *psOrder << psttTo ;
                                        st_psttTo >> psttTo ;
                                        ZE( strokeS* , psttTo ) ;
                                    {
                                    while( st_psttTo )
                                    *psOrder << (countT)st_psttTo ;
                                    *psOrder << (strokeS*)tFrom ;
                                    *psOrder << psttServer ;
                                    *psOrder << (strokeS*)T("!mailOutToNamed_SMTP_receiver") ;

                                    TN( tFrom , "" ) ; tFrom = TF1(idAdamFrom)+T("@" "ideafarm.com") ;

                                    while( !etThread && ~hDown ) ;
                                    }
                                        while( !etThread && ~hDown2 ) ;
                                        }
                                            st_psttTo << psttTo ;
                                            strokeS* psttTo = psttOldC( tin0P , etThread , T(psttWho)+tAt+T(psttDomain) ) ; ___( psttTo ) ;
                                            strokeS* psttWho = (strokeS*)sws_psttWho.downF( tin0P , hDown2 ) ;
                                        {
                                        do
                                        handleC hDown2( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                                        psttDomain = (strokeS*)sws_psttDomain.downF( tin0P , hDown ) ;
                                    {
                                    do
                                    handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                    stackC st_psttTo( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
                                {
                                if( psOrder )
                                soulC* psOrder = new( 0 , tin0P , LF ) soulC( tin0P , etThread , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_NAMED ) ;

                                psttServer = (strokeS*)sws_psttDomain.leverF( tin0P , idf ) ;
                            {
                            for( countT idf = 1 ; idf <= cServers ; idf ++ )
                            countT cServers = sws_psttDomain.cFlavorsF( tin0P ) ;
                            stackC st_sOrder( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_soulC ) ;
                        {

                        }
                            etThread.delF( tin0P , psttr ) ;
                            //etherC::ifcSayIF( psttr , flSAY_APPEND | flSAY_LOG ) ;

                            }
                                while( !etThread && ~hDown ) ;
                                }
                                    while( !etThread && ~hDown2 ) ;
                                    }
                                        etThread.strFuseF( tin0P , psttr , T("   ")+T(psttWho)+T("\r\n") ) ; ___( psttr ) ;
                                        strokeS* psttWho = (strokeS*)sws_psttWho.downF( tin0P , hDown2 ) ;
                                    {
                                    do
                                    handleC hDown2( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                                    etThread.strFuseF( tin0P , psttr , T("  ")+T(psttDomain)+T("\r\n") ) ; ___( psttr ) ;
                                    psttDomain = (strokeS*)sws_psttDomain.downF( tin0P , hDown ) ;
                                {
                                do
                                handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                                etThread.strFuseF( tin0P , psttr , T(" ")+T(psttServer)+T("\r\n") ) ; ___( psttr ) ;
                                psttServer = (strokeS*)sws_psttDomain.leverF( tin0P , idf ) ;
                            {
                            for( countT idf = 1 ; idf <= cServers ; idf ++ )

                            etThread.strMakeF( tin0P , LF , psttr , T("mailOut from ")+TF1(idAdamFrom)+T(" to ")+TF1(cToNoDuplicates)+T(" recipients at ")+TF1(cDomains)+T(" domains, served by ")+TF1(cServers)+T(" incoming mail receivers:\r\n\r\n")+T(psttBody)+T("\r\n\r\nrecipients:\r\n\r\n") , ( cToNoDuplicates + cServers + cDomains ) * 0x80 ) ; ___( psttr ) ;
                            ZE( strokeS* , psttr ) ;
                            countT cDomains = sws_psttWho.cFlavorsF(tin0P) ;
                            countT cServers = sws_psttDomain.cFlavorsF( tin0P ) ;
                        {

                        }
                            }
                                etThread.delF( tin0P , psttServer ) ;
                                if( !ids ) etThread.delF( tin0P , psttDomain ) ;
                                sws_psttDomain.sinkF( tin0P , ids , psttDomain , flSTACKsINK_UNIQUE ) ;
                                ZE( countT , ids ) ;

                                etThread.dnsNicNamesF( tin0P , psttServer , psttDomain , ifcIDtYPEdNSqUERY_MX ) ; ___( psttServer ) ;
                                psttDomain = psttOldC( tin0P , etThread , (strokeS*)sws_psttWho.leverF( tin0P , idf ) ) ; ___( psttDomain ) ;
                            {
                            for( countT idf = 1 ; idf <= cDomains ; idf ++ )
                            countT cDomains = sws_psttWho.cFlavorsF( tin0P ) ;
                        {
                        switchStackC sws_psttDomain( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , psttServer , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
                        ZE( strokeS* , psttServer ) ;

                        sOrderP >> psttBody ; ___( psttBody ) ;
                        ZE( strokeS* , psttBody ) ;

                        }
                            etThread.delF( tin0P , psttDomain ) ;
                            else      etThread.delF( tin0P , psttWho ) ;
                            if( ids ) cToNoDuplicates ++ ;
                            sws_psttWho.sinkF( tin0P , ids , psttWho , flSTACKsINK_UNIQUE ) ;
                            ZE( countT , ids ) ;

                            if( psttDomain && csttMaxDomain < psttDomain->idAdam ) csttMaxDomain = psttDomain->idAdam ;
                            if( psttWho    && csttMaxWho    <    psttWho->idAdam )    csttMaxWho =    psttWho->idAdam ;

                            etThread.delF( tin0P , psttTo ) ;
                            etThread.strSubstringF( tin0P , psttDomain , idf , sttq , tAt , psttTo , 1 ) ; ___( psttDomain ) ;
                            etThread.strSubstringF( tin0P , psttWho    , idf , sttq , tAt , psttTo , 1 ) ; ___( psttWho    ) ;
                            ZE( strokeS* , psttWho ) ;
                            countT idf = 1 ;
                            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;

                            __(  psttTo && !psttTo->idAdam ) ;
                            __Z( psttTo ) ;
                            sOrderP >> psttTo ; ___( psttTo ) ;
                            ZE( strokeS* , psttTo ) ;
                        {
                        while( cTo -- )
                        ZE( countT , cToNoDuplicates ) ;
                        switchStackC sws_psttWho( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , psttDomain , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
                        TN( tAt , "@" ) ;
                        ZE( strokeS* , psttDomain ) ;
                        ZE( countT , csttMaxWho ) ;
                        ZE( countT , csttMaxDomain ) ;

                        __Z(  cTo ) ;
                        sOrderP >> cTo ;
                        ZE( countT , cTo ) ;

                        __Z(  idAdamFrom ) ;
                        sOrderP >> idAdamFrom ;
                        ZE( countT , idAdamFrom ) ;
                        //etherC::ifcSayIF( T("ifcIDcMDjOBoRDER_NAMED/!mailOut/+") , flSAY_APPEND | flSAY_LOG ) ;
                        TN( tLogFile , "" ) ; tLogFile = T("///d/ideafarm.log.")+TF1(DDNUMB)+T(".ifcIDcMDjOBoRDER_NAMED.mailOut" ) ;
                    {
                    if( !etThread.strCompareF( tin0P , psttJobType , T("!mailOut") ) )

                    sOrderP >> psttJobType ; ___( psttJobType ) ;
                    ZE( strokeS* , psttJobType )
                {
                case ifcIDcMDjOBoRDER_NAMED :
                }
                    break ;

                    etThread.delF( tin0P , psttBody ) ;
                    etThread.delF( tin0P , psttFrom ) ;
                    }
                        etThread.delF( tin0P , postBody ) ;
                        etThread.delF( tin0P , psttu ) ;
                        etThread.boxPutUniqueF( tin0P , psttu , T("///ideafarm/ephemeral/")+TF1(DDNUMB)+T("/in/ignored/in") , postBody , costBody ) ;
                        ZE( strokeS* , psttu ) ;

                        countT costBody = etThread.strMakeF( tin0P , LF , postBody , psttBody ) ; ___( postBody ) ;
                        ZE( osTextT* , postBody ) ;
                    {

                    sOrderP >> psttBody ; ___( psttBody ) ;
                    ZE( strokeS* , psttBody ) ;

                    __( idAdamTo - DDNUMB ) ;
                    __Z(  idAdamTo ) ;
                    sOrderP >> idAdamTo ;
                    ZE( countT , idAdamTo ) ;

                    __(  psttFrom && !psttFrom->idAdam ) ;
                    __Z( psttFrom ) ;
                    sOrderP >> psttFrom ; ___( psttFrom ) ;
                    ZE( strokeS* , psttFrom ) ;
                    //etherC::ifcSayIF( T("whoopiee!! i got new mail.  filing it") , flSAY_APPEND | flSAY_LOG ) ;
                    TN( tLogFile , "" ) ; tLogFile = T("///d/ideafarm.log.")+TF1(DDNUMB)+T(".ifcIDcMDjOBoRDER_MAIL" ) ;
                {
                case ifcIDcMDjOBoRDER_MAIL :
            {
            switch( idJobType )

            sOrderP >> idJobType ;
            ZE( countT , idJobType ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    __( idAdamP - DDNUMB ) ;
{
voidT jobFillCourseF( tin0S& tin0P , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( cArgP && c8argP.c1 && sOrderP && ether && idChatSessionP ) ;

    __( idAdamP - DDNUMB ) ;
{
voidT jobHearOrderF( tin0S& tin0P , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( ((tin1S&)tin0P).fingerprint && etThread && psttServerP && psttFromP && st_psttToP && psttBodyP && psttNoteP ) ;

    //etherC::ifcSayIF( T("s=\"")+T(psttServerP)+T("\" f=\"")+T(psttFromP)+T("\" n=\"")+T(psttNoteP)+T("\"") , flSAY_APPEND | flSAY_LOG ) ;
{
voidT logErrorF( tin0S& tin0P , etherC& etThread , const strokeS* const psttServerP , const strokeS* const psttFromP , stackC& st_psttToP , const strokeS* const psttBodyP , const strokeS* const psttNoteP )

DONE( tmSubJobF )
}
    cPending -- ;
    }
        cFail ++ ;
        *((tin1S&)tin0P).zEtScratch = 0 ;
    {
    if( *((tin1S&)tin0P).zEtScratch )
    }
        DEL( psOrder ) ;
        //etherC::ifcSayIF( T("ifcIDcMDjOBoRDER_NAMED/!mailOut/tmSubJobF/ifcJobF/-") , flSAY_APPEND | flSAY_LOG ) ;
        ((tin1S&)tin0P).zEtScratch->ifcJobF( tin0P , stCourses , DDNUMB , *psOrder , stOrders , T("ifcIDcMDjOBoRDER_NAMED/!mailOut/tmSubJobF") , 1 ) ;
        //etherC::ifcSayIF( T("ifcIDcMDjOBoRDER_NAMED/!mailOut/tmSubJobF/ifcJobF/+") , flSAY_APPEND | flSAY_LOG ) ;
        stOrders << new( 0 , tin0P , LF ) soulC( tin0P , etThread , TAG( TAGiDnULL ) ) ;
        stackC stOrders(  tin0P , *((tin1S&)tin0P).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
        stackC stCourses( tin0P , *((tin1S&)tin0P).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
    {

    countT& cFail    = *(countT*)pTaskP->c3 ;
    soulC*  psOrder  =   (soulC*)pTaskP->c2 ;
    countT& cPending = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmSubJobF )

/*1*/WAKEhIDE( "ifcIDaDAMoLD_MAILcLERK.sentient.mailer" )/*1*/
/**/
*/
 the supervising job does not complete until all delivery jobs complete
 the job at each domain does not complete until all items have been delivered
 each such domain is handled as a separate job
copies to recipients at other domains are sent to the smtp server for each domain
copies to recipients at ideafarm.com are sent directly to the recipient via chat
i handle both small jobs and very large jobs
the mail must be from an idAdam
i accept and perform jobs to send mail
\<A HREF=\"5.f340104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

