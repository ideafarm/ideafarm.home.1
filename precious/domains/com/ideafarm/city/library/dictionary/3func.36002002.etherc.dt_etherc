
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            SCOOPSdEL
            scoopC* _pScoopsSave = pScoopsSave ;
        {
        if( bSniffingTinNotMe )
    
        }
            delF( tin0P , psttUid ) ;
    
            //if( pcRaceId ) ifcRaceIdF( tin0P ) ;
    
            etherTestF( tin0P ) ;
            }
                delF( tin0P , psttLog ) ;
    
                delF( tin0P , postLog ) ;
                { ifcDatumF( tin0P , flDATUM1_CLASSeXCEPTIONjOURNAL , flDATUM2_osTextT , 0 , 0 , postLog , costLog ) ; }
                //else           { ifcDatumF( tin0P , flDATUM1_CLASSeXCEPTIONjOURNAL   , flDATUM2_osTextT , 0 , 0 , postLog , costLog ) ; }
                //if( bImpotent ){ ifcDatumF( tin0P , flDATUM1_CLASSeXCEPTIONiMPOTENCE , flDATUM2_osTextT , 0 , 0 , postLog , costLog ) ; }
                countT costLog = strMakeF( tin0P , LF , postLog , psttLog ) ; ___( postLog ) ;
                ZE( osTextT* , postLog ) ;
    
                }
                    //delF( tin0P , psttw ) ;
                    //third = 0 ;
                    //ifcPutHostLogEntryF( tin0P , psttw ) ; // U: CONDITIONALLY DO THIS ONLY IF CONNECTED TO THE INTERNET
                    //strToUrlF( tin0P , psttw , psttLog ) ; ___( psttw ) ;
                    //ZE( strokeS* , psttw ) ;
                {
    
                countT cIn = 1 + incv02AM( cInLath ) ;
                static countT cInLath ;
                //U:
            {
            if( psttLog )
    
            //}
            //    { countT pcPart[] = { idr_ETHERtIMEsLEPT1 , idiFileCt , idLineCt , 0 } ; ifcDatumF( tin0P , flDATUM1_CLASStACHOMETER , flDATUM2_null , timeSlept1 , pcPart ) ; }
            //    { countT pcPart[] = { idr_ETHERtIMEsLEPT2 , idiFileCt , idLineCt , 0 } ; ifcDatumF( tin0P , flDATUM1_CLASStACHOMETER , flDATUM2_null , timeSlept2 , pcPart ) ; }
            //    { countT pcPart[] = { idr_ETHERtIMEaGE1   , idiFileCt , idLineCt , 0 } ; ifcDatumF( tin0P , flDATUM1_CLASStACHOMETER , flDATUM2_null , timeAge1   , pcPart ) ; }
            //    { countT pcPart[] = { idr_ETHERtIMEaGE2   , idiFileCt , idLineCt , 0 } ; ifcDatumF( tin0P , flDATUM1_CLASStACHOMETER , flDATUM2_null , timeAge2   , pcPart ) ; }
            //{
    
            //#if defined( NEVERdEFINED )
            //U: NOTE: GENERATED DATA SUGGESTS THAT idiFileCt IS ALWAYS 0
            //U: ENABLE THIS AFTER FIND THE CULPRIT GENERATING CORRUPT DATUM ITEMS
    
            if( ((tin1S&)tin0P).pag1->_etherC_.pEtPrime == this ) delF( tin0P , ((tin1S&)tin0P).pag1->_etherC_.pstt1_processParameters ) ;
    
            //U: REPORT TIME AWAKE, TIME SLEPT FOR PERFORMANCE MONITORING AT OPERATIONS
            third.osTimeSubtractF( tin0P , timeAge1 , timeAge2 , timeBorn1 , timeBorn2 ) ;
            third.osTimeNowF( tin0P , timeAge1 , timeAge2 ) ;
            ZE( sCountT , timeAge2 ) ;
            ZE( countT , timeAge1 ) ;
        {
    
    
        //bFunctionCountersReady = 0 ;
    
        DEL( _pSwSoixlOldApiDoc ) ;
        DEL( _pSwSoixlOldApi ) ;
        DEL( third.pswWinFromDrawDuringPaint ) ;
        DEL( third.pswWinFromDraw ) ;
        DEL( third.pswPaintInfoFromDrawingHandle ) ;
    
        }
            DEL( ((tin1S&)tin0P).pag1->_etherC_.cio_pStkOut ) ;
            DEL( ((tin1S&)tin0P).pag1->_etherC_.cio_pBaton ) ; //A: ASSUME: CHANNEL IO THREAD HAS ENDED
    
            }
                ((tin1S&)tin0P).pag1->_etherC_.pSwDllReferences->ungrabF( tin0P ) ;
                }
                    }
                        handle.osF( ifcIDtYPEhANDLE_DLL , osh ) ;
                        handleC handle( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_DLL ) ;
                        stHandle >> osh ;
                        ZE( countT , osh ) ;
                    {
                    else while( stHandle )
                    if( !stHandle ) break ;
                    for( countT idf = 1 ;idf <= cFlavors ; idf ++ ) stHandle << ((tin1S&)tin0P).pag1->_etherC_.pSwDllReferences->leverF( tin0P , idf ) ;
                    countT cFlavors = ((tin1S&)tin0P).pag1->_etherC_.pSwDllReferences->cFlavorsF( tin0P ) ;
                {
                while( !POOP )
                ((tin1S&)tin0P).pag1->_etherC_.pSwDllReferences->grabF( tin0P , TAG( TAGiDnULL ) ) ;

                stackC stHandle( tin0P , third , TAG( TAGiDnULL ) ) ;
            {
            if( ((tin1S&)tin0P).pag1->_etherC_.pSwDllReferences )
    
            //U:__( ifcHandoffOldF( tin0P ).idPhaseF( tin0P ) - ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;
    
            flagsMode &= ~( F(flTHIRDmODE_QUITTER) ) ;
    
            }
                }
                    if( !b_tmWindows ) thirdC::third_flagsProcessStateI_IF( tin0P , flPROCESSsTATE_MAINtHREADiSaLONE , 1 ) ;
                    //THIS CODE HAS BEEN ALTERED SO THAT I BLOCK UNTIL I AM ALONE (EXCEPT FOR tmHeartF)
                    //THAT BLOCKAGE IN WM_CLOSE IS PERMANENTLY COMMENTED OUT; WHY WAS IT NEEDED?
                    //THE PRECEEDING COMMENT IS OBSOLETE AND FALSE
                    /* ONLY main AND tmWindowsF REMAIN, AND tmWindowsF IS BLOCKED IN WM_CLOSE AND HAS ALREADY DESTROYED ITS etThread */
                    }
                        ++ s ; thirdC::dosSleepIF( tin0P , TUCK * 0x40 ) ;
                        //etherC::etRockIF( tin0P ).traceF( tin0P , T("~etherC / waiting for all kids and orphans to die [cAllKidThreadsI,cAllOrphanThreadsI]:    ")+TF2(cAllKidThreadsI,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cAllOrphanThreadsI,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ") ) ;
                    {
                    while( cAllKidThreadsI + cAllOrphanThreadsI ) //WANT TO WAIT TILL tmWindowsF IS GONE CAUSE windowOldC::ether MUST BE DT FOR ALL WINDOWS
                    //OLD: while( cAllKidThreadsI + cAllOrphanThreadsI > !!b_tmWindows )
                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                    POOPIE
                {
                //if( !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_etThreadONmainISiMPOTENT ) )
                countT& cAllOrphanThreadsI = thirdC::os_cAllOrphanThreadsI_IF( tin0P ) ;
                countT& cAllKidThreadsI    = thirdC::os_cAllKidThreadsI_IF( tin0P ) ;
                const boolT b_tmWindows = !!( F(thirdC::third_flagsModeAdam1I_IF(tin0P)) & flADAMmODE1_tmWindows ) ;
                if( F(((tin123S&)tin0P).flagsThreadMode2) & flTHREADmODE2_DRIVERaDAM ) { BLAMMO ; }
                FIREmYSELF ;
            {
    
            if( ((tin123S&)tin0P).pcQuit == &(const countT&)POOP ) ((tin123S&)tin0P).pcQuit = 0 ;
    
            DEL( ((tin123S&)tin0P).pSwsRecycle ) ; //TO MAKE SURE THAT etRock EXISTS WHEN THESE ARE DELETED
            }
                THREADmODE2rESTORE
                }
                    }
                        }
                            }
                                default                            : { BLAMMO                           ; break ; }
                                case ifcIDtYPErECYCLE_switchStackC : { DEL( *(switchStackC**)&pObject ) ; break ; }
                                case ifcIDtYPErECYCLE_switchC      : { DEL(      *(switchC**)&pObject ) ; break ; }
                                case ifcIDtYPErECYCLE_stackC       : { DEL(       *(stackC**)&pObject ) ; break ; }
                                case ifcIDtYPErECYCLE_soulC        : { DEL(        *(soulC**)&pObject ) ; break ; }
                            {
                            switch( *((tin123S&)tin0P).pczl_pSwsRecycle )
                        {
                        if( ((tin123S&)tin0P).pczl_pSwsRecycle && pObject )
    
                        //LOGrAWtID4( "deleting object " , (countT)pObject , " using pcz lever at " , ((tin123S&)tin0P).pczl_pSwsRecycle ) ; //U::
    
                        *((tin123S&)tin0P).pSwsRecycle >> *(countT*)&pObject ;
                        ZE( voidT* , pObject ) ;
                    {
                    while( *((tin123S&)tin0P).pSwsRecycle )
    
                    ((tin123S&)tin0P).pczl_pSwsRecycle = (countT*)((tin123S&)tin0P).pSwsRecycle->leverF( tin0P , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = ((tin123S&)tin0P).pSwsRecycle->cFlavorsF( tin0P ) ;
                THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
            {
            if( ((tin123S&)tin0P).pSwsRecycle )
            //PSEUDODUPLICATE CODE: 1450002 12f0002 1030003 1020171

            delF( tin0P , ((tin1S&)tin0P).pag1->_etherC_.psttEarlyFolder ) ;
        {
        if( ((tin1S&)tin0P).pag1->_etherC_.pEtPrime == this )
    
        third.pEtherContainsMe = 0 ;
    
        if( processGlobal4I.tin9VeryVeryEarlyLateMain.pEther == this ) processGlobal4I.tin9VeryVeryEarlyLateMain.pEther = 0 ; //U:: THIS SHOULD NOT BE NEEDED.  IT WAS NOT EFFECTIVE ANYWAY TO PAPER OVER THE BUG FOUND REGARDING ((tin123S&)tin0P).pEther

        if( ((tin1S&)tin0P).pag1->pEtThreadMain == this ) ((tin1S&)tin0P).pag1->pEtThreadMain = 0 ;
        if( ((tin123S&)tin0P).pEther              == this ) ((tin123S&)tin0P).pEther              = 0 ;
    
        }
            }
                delF( tin0P , psttd ) ;
                strokeS*& psttd = *(strokeS**)&(countT&)*_pSwSoixlOldApiDoc ;
                _psttLeverSoixlOldApi = (strokeS*)_pSwSoixlOldApiDoc->leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = _pSwSoixlOldApiDoc->cFlavorsF( tin0P ) ;
        {
        if( _pSwSoixlOldApiDoc ) // THIS LOOP USES ((tin123S&)tin0P).pEther (subractor callback uses it)
    
        }
            bSniffingTinNotMe = 1 ;
            pScoopsSave = _pScoopsSave ;
            SCOOPSnEWsPECIFIED( poopBefore )
        {
        if( ((tin1S&)tin0P).pag1->_etherC_.pEtPrime == this && POOP == ifcIDsUBtYPEpOOP_FIREDbYmONITOR )
        ZE( scoopC* , pScoopsSave ) ;                                                                                                                 \
        ZE( boolT , bSniffingTinNotMe ) ;
    {
    _IO_

    SCOOP
    const poopC& poopBefore = *((tin123S&)tin0P).pPoop ;
    TINSL
{
/*1*/etherC::~etherC( voidT )/*1*/

/**/
*/
  \<A HREF=\"5.f010104.1.1.0.html\"\>f010104:  WAKEsHOW( "example.simplest.func.1030003.etherC.dt_etherC" )\</A\>
 simplest
examples
\<A HREF=\"5.1030003.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

