
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            if( pbP ) indexF( tin0P ) ;

            aptData = pbData ;

            if( pbP ) thirdC::c_memcpyIF( tin0P , pbc , pbP , cbv ) ;
            *(countT*)pbc = cbv ; pbc += sizeof( countT ) ;
            *(countT*)pbc = 0   ; pbc += sizeof( countT ) ; //CS:CODEsYNC: 2200010 2240003

            byteT* pbc = pbData ;
        {
        if( pbData )
        PUSE.newF( tin0P , idLineNewP , idiFileNewP , pbData , cba ) ; ___( pbData ) ;
        ZE( byteT* , pbData ) ;
        countT cba = 2 * sizeof( countT ) + cbv ; // cRef cb value
        countT cbv = cbP ? cbP : 1 + thirdC::c_strlenIF( tin0P , pbP ) ;
    {
    if( pbP || cbP )    // IF !pbP THEN I WILL CREATE AN UNINITIALIZED DATUM OF SIZE cbP ; THIS CAN BE USED TO CREATE LARGE INTERPROCESS SHARED BUFFERS
    //CS:CODEsYNC: 360ea004 360ea002
{
datumC( flagsiP , idTypeP , ifcIDtYPEmIXINdATUM_blob , listingP )
/*1*/datum_blob_C::datum_blob_C( tin0S& tin0P , byteT& flagsiP , byteT& idTypeP , const byteT* const pbP , const countT cbP , const listingC& listingP , const countT idLineNewP , const countT idiFileNewP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

