
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return offsForThisNn ;

    traceF( tinP , T("ifcUdpFileOffSecretForThisNnF [offsForThisNn,nn,offSlotP]:    ")+TF2(offsForThisNn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+T(nnP)+tb4+TF2(offSlotP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    countT offsForThisNn = offs % CuDPfILEsECRETS ;

    }
        offs ^= *( pcc ++ ) ^ hashSecret ;
        //traceF( tinP , T("ifcUdpFileOffSecretForThisNnF [offhs,hashSecret]:    ")+TF2(offhs,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(hashSecret,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        countT hashSecret = ppcHashSecretsP[ offSlotP ][ offhs ] ;
    {
    for( countT offhs = 0 ; pcc < pce && offhs < CuDPfILEhASHsECRETS ; offhs ++ )
    ZE( countT , offs ) ;
    TN( tb4 , "    " ) ;

    countT* pce = pcc + sizeof nnP / sizeof( countT ) ;         //A:ASSUME: nicNameC IS AN INTEGRAL NUMBER OF countT ; IF NOT TRUE THEN THE TRAILING PORTION WILL NOT BE HASHED
    countT* pcc = (countT*)&nnP ;

    _IO_

    }
        if( POOP ) return 0 ;
        __Z( ppcHashSecretsP ) ;
        __( !nnP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::ifcUdpFileOffSecretForThisNnF( tinBaseS& tinP , const nicNameC& nnP , const countT offSlotP , const countT** ppcHashSecretsP )/*1*/


/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//




