
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("socketC [flagsP,flagsMode]:    ")+TF2(flagsP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(flagsMode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //TN( tb4 , "    " ) ;

    dec02AM( cFunctionsPending ) ;
    }
    
        bWrite.ungrabF( tinBaseP ) ;
        bRead.ungrabF( tinBaseP ) ;
    
        if( timeAllowedConnected && F(flagsP) & flSOCKETc_CTbYlISTENER ) FRESHtIMEaTOMIC( *pEther , timeConnected.time1 , timeConnected.time2 )
    
        }
            __Z( idSlot ) ;
            etherC::sockStkIdleTimeoutersF( tinBaseP ).sinkF( tinBaseP , idSlot , (countT)this , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idSlot ) ;
        {
        if( !( F(flags) & flSOCKETc_DOnOTrEGISTERtIMEoUT ) )
    
        }
            __Z( idSlot ) ;
            etherC::sockStkQuittersF( tinBaseP ).sinkF( tinBaseP , idSlot , (countT)this , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idSlot ) ;
            //__( F(((tinNormalS&)tinBaseP).flagsThreadMode4) & flTHREADmODE4_IGNOREmE_tmWatchF_ ) ;
        {
        if( idType != ifcSOCKETtYPE_DATAgRAM && !( F(flags) & flSOCKETc_DOnOTrEGISTERqUITTER ) )

        if(    ~nnMulticast                                   && idType == ifcSOCKETtYPE_DATAgRAM ) pEther->sockOptionMulticastF( tinBaseP , handle , psttAddrMulticastP ) ; //U:: 20210313@1322: CRAFTWORK IN PROGRESS
        if(    F(flags) & flSOCKETc_CANbROADCASToLDdOnOTuSE   && idType == ifcSOCKETtYPE_DATAgRAM ) pEther->sockOptionBroadcastF( tinBaseP , handle ) ;
        if( !( F(flags) & flSOCKETc_NOsENDnOW               ) && idType == ifcSOCKETtYPE_STREAM   ) pEther->sockOptionSendNowF(   tinBaseP , handle ) ;
        if( !( F(flags) & flSOCKETc_NOlINGER                ) && idType == ifcSOCKETtYPE_STREAM   ) pEther->sockOptionLingerF(    tinBaseP , handle ) ;
        if( !( F(flags) & flSOCKETc_NOdUALsTACK             )                                     ) pEther->sockOptionDualStackF( tinBaseP , handle ) ;
        __Z( handle ) ;
        }
            pEther->sockF( tinBaseP , handle , idType , !( F(flags) & flSOCKETc_CRYPTfOREIGNsSL ) ? 0 : &hSslContext ) ;
            armSslC armMe( tinBaseP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
    
        bRead.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        bWrite.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    
        //20141028@0638: REGISTRATION MOVED FROM HERE
    
        else            thirdC::c_memsetIF( tinBaseP , (byteT*)pbBitsCt , sizeof pbBitsCt ) ;
        if( pbBitsCtP ) thirdC::c_memcpyIF( tinBaseP , (byteT*)pbBitsCt , (byteT*)pbBitsCtP , sizeof pbBitsCt ) ;
    
        }
            etherP.openSslTls_getContextF( tinBaseP , hSslContext , psttPemCertificatesP , psttPemPrivateKeyP ) ;
            armSslC armMe( tinBaseP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL )

        if( idleTimeAllowedWrite && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTwANiMPATIENT && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTlAN ) pEther->traceF( tinBaseP , T("socketC / unusual parameter value [this,idleTimeAllowedWrite]: ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idleTimeAllowedWrite,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        if( idleTimeAllowedRead  && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTwANiMPATIENT && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) pEther->traceF( tinBaseP , T("socketC / unusual parameter value [this,idleTimeAllowedRead ]: ")+TF2((countT)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idleTimeAllowedRead ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    
        //if( idleTimeAllowedWrite && idleTimeAllowedWrite != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) { BLAMMO ; } 
        //if( idleTimeAllowedRead  && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTwAN && idleTimeAllowedRead  != SOCKETtIMEOUTdEFAULTlAN ) { BLAMMO ; }

        if( psttPemPrivateKey   ) { etherP.strMakeF( tinBaseP , LF , psttPemPrivateKey   , psttPemPrivateKeyP   ) ; ___( psttPemPrivateKey   ) ; }
        if( psttPemCertificates ) { etherP.strMakeF( tinBaseP , LF , psttPemCertificates , psttPemCertificatesP ) ; ___( psttPemCertificates ) ; }
    
        _IO_
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )

            FV( flSOCKETc , flagsP ) ;
            __( idType != ifcSOCKETtYPE_DATAgRAM && ~nnMulticast                                 ) ;
            __( idType == ifcSOCKETtYPE_DATAgRAM && F(flags) & flSOCKETc_DOnOTrEGISTERqUITTER    ) ;
            __( idType == ifcSOCKETtYPE_DATAgRAM && F(flags) & flSOCKETc_NOlINGER                ) ;
            __( idType == ifcSOCKETtYPE_STREAM   && F(flags) & flSOCKETc_CANbROADCASToLDdOnOTuSE ) ;

            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL    
        SCOOPP

        ((tinNormalS&)tinBaseP).pag3->_socketC_.grab.ungrabF( tinBaseP ) ;
        }
            ((tinNormalS&)tinBaseP).pag3->_socketC_.pSwOdometer = new( 0 , tinBaseP , LF ) switchC( tinBaseP , etRock , idLineCtP , idiFileCtP , pbBitsCtP , flSTACKc_null , ((tinNormalS&)tinBaseP).pag3->_socketC_.nnLever , 0 , sizeof( sockOdometerS ) ) ; ___( ((tinNormalS&)tinBaseP).pag3->_socketC_.pSwOdometer ) ;
            etherC& etRock = etherC::etRockIF( tinBaseP ) ;

            }
                THREADmODE2rESTORE
                }
                    }
                        ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ;
                    {
                    while( ((tinNormalS&)tinBaseP).pag3->_socketC_.pSwOdometer )
                    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
                {
                THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
            {
            if( ((tinNormalS&)tinBaseP).pag3->_socketC_.pSwOdometer )
        {
        if( !incv02AM( ((tinNormalS&)tinBaseP).pag3->_socketC_.cRef ) )
        ((tinNormalS&)tinBaseP).pag3->_socketC_.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        //20141028@0638: REGISTRATION MOVED TO HERE
    {
    inc02AM( cFunctionsPending ) ;

    //}
    //    etherP.traceF( tinBaseP , T("socketC::socketC bRead  [finger]:     ")+TF2(*pcFingerRead ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //    etherP.traceF( tinBaseP , T("socketC::socketC bWrite [finger]:     ")+TF2(*pcFingerWrite,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //
    //    countT* pcFingerRead  = *(countT**)( (byteT*)this + 0x2e0 ) ;
    //    countT* pcFingerWrite = *(countT**)( (byteT*)this + 0x12c ) ;
    //
    //    countT off_bRead  = (byteT*)&bRead -(byteT*)this ;
    //    countT off_bWrite = (byteT*)&bWrite-(byteT*)this ;
    //
    //    etherP.traceF( tinBaseP , T("socketC::socketC offset to bRead:     ")+TF2((byteT*)&bRead -(byteT*)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //    etherP.traceF( tinBaseP , T("socketC::socketC offset to bWrite:    ")+TF2((byteT*)&bWrite-(byteT*)this,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //{
    //TO FIND A BUG
{
psttPemPrivateKey( 0 )
psttPemCertificates( 0 ) ,
hSslContext( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_openSslContext ) ,
pMapPortBind( 0 ) ,
idleTimeAllowedWrite( pIdleTimeAllowedWriteP ? *pIdleTimeAllowedWriteP : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysTimeoutDefaultWan : ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysZe ) ,
idleTimeAllowedRead(  pIdleTimeAllowedReadP  ? *pIdleTimeAllowedReadP  : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysTimeoutDefaultWan : ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysZe ) ,
timeAllowedConnected( pTimeAllowedConnectedP ? *pTimeAllowedConnectedP : F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ? ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysZe                : ((tinNormalS&)tinBaseP).pag3->_socketC_.alwaysZe ) , // SSL IS A PIECE OF SHIT: IT CAN PEG CPU FOREVER IN AN INFINITE LOOP ; 20161201@1201: CHANGED FROM TICK TO ZE TO AVOID CANCELING LONG CLOUD TRANSFERS.  HOPEFULLY THE IDLE LIMITS WILL SUFFICE TO KILL SSL PEGGING CPU
psttName( 0 ) ,
pczKeyTopSecretPeer( 0 ) ,
pczKeyTopSecret( 0 ) ,
idPhaseTopSecret( ifcIDpHASEsOCKETtOPsECRET_1SENDpINnAME ) ,
dad( tinBaseP , etherP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) ) ,
mom( tinBaseP , etherP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) ) ,
hnu( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ,
idPortMe( 0 ) ,
bCatcher( 0 ) ,
bAcceptor( 0 ) ,
cbMsgInLast( 0 ) ,
idMsgInLast( 0 ) ,
idMsgOutLast( 0 ) ,
handle( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_SOCKET ) ,
bRead( tinBaseP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , 0 , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ,
bWrite( tinBaseP , TAGoR( TAGiDnULL , idLineCtP , idiFileCtP , pbBitsCtP ) , 0 , ifcIDgRABlAYER_7BASEmISC1 , flBATONc_NOTjEALOUS | flBATONc_SHARElAYER ) ,
flagsOpenSslFails( flSOCKETcoPENsSLfAILS_null ) ,
flagsMode( flSOCKETcmODE_null ) ,
) ,
    )
            : flSOCKETc_null
            ? flSOCKETc_DOnOTrEGISTERtIMEoUT
        ( !pIdleTimeAllowedReadP && !pIdleTimeAllowedWriteP && !pTimeAllowedConnectedP && !( F(flagsP) & flSOCKETc_CRYPTfOREIGNsSL ) ) || idType == ifcSOCKETtYPE_DATAgRAM
    (
    flagsP |
(
flags
fListening( 0 ) ,
idType( idTypeP ) ,
pPoop( &(const poopC&)etherP ) ,
pEther( &etherP ) ,
bAcceptedByLF( 0 ) ,
pOdometer( 0 ) ,
nnMulticast( !psttAddrMulticastP ? nicNameC() : socketC::nicNameIF( tinBaseP , etherP , psttAddrMulticastP ) ) ,
cFunctionsPending( 0 ) ,
idiFileCt( idiFileCtP ) ,
idLineCt( idLineCtP ) ,
/*1*/socketC::socketC( tinBaseS& tinBaseP , etherC& etherP , const countT idLineCtP , const countT idiFileCtP , const byteT* const pbBitsCtP , const boolT idTypeP , const flagsT flagsP , const strokeS* const psttAddrMulticastP , const countT* const pIdleTimeAllowedReadP , const countT* const pIdleTimeAllowedWriteP , const countT* const pTimeAllowedConnectedP , const strokeS* const psttPemCertificatesP , const strokeS* const psttPemPrivateKeyP )/*1*/ :

/**/
*/
 this is because SSL is a piece of shit and can peg the cpu in an infinite loop
default behavior is to not time out, except that SSL socket defaults to timeout in a TICK (approx. 5 foreign minutes)
 flagsP
 idTypeP
 etherP
 tinBaseP
arguments
sets the linger option
constructs a socket that can be used to communicate with another local or a remote process
  \<A HREF=\"5.3420104.1.1.0.html\"\>3420104:  WAKEsHOW( "example.simplest.func.1070001.socketC.socketC" )\</A\>
 simplest
examples
\<A HREF=\"5.1070001.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

