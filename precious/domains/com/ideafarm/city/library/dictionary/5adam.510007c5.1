
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.traceF( tin0P , T("ok") ) ;

#endif



    }
        }
            etThread.traceF( tin0P , T("idSerial found:    ")+TF2(*(pcw++),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        {
        for( countT idSerial = 1 ; idSerial <= ccw ; idSerial ++ )

        countT  ccw = cbw / sizeof( countT ) ;
        countT* pcw = (countT*)pbw ;
    {
    if( pbw && cbw )

    fwsIn.getF( tin0P , pbw , cbw , TICK >> 2 , ( TICK >> 2 ) - sizeof( countT ) ) ;
    ZE( countT , cbw ) ;
    ZE( byteT* , pbw ) ;

    fileWindowsC fwsIn( tin0P , etThread , tFile , flFILEwINDOW_DOnOTvALIDATE ) ;

#else

    }
        }
            *( pcw ++ ) = idSerial ;
        {
        for( countT idSerial = 1 ; idSerial <= ccw ; idSerial ++ )

        countT  ccw = cbw / sizeof( countT ) ;
        countT* pcw = (countT*)pbw ;
    {
    if( pbw && cbw )

    fwsOut.getF( tin0P , pbw , cbw , TICK >> 1 ) ;
    ZE( countT , cbw ) ;
    ZE( byteT* , pbw ) ;

    fileWindowsC fwsOut( tin0P , etThread , tFile , flFILEwINDOW_WRITE | flFILEwINDOW_DOnOTvALIDATE ) ;
    etThread.boxPutF( tin0P , tFile , "X" , 1 ) ;

#if defined( NEVERdEFINED )

TN( tFile , "///d/tmp/foo.ttt" ) ;


TODO

/*1*/WAKEsHOWtEXT( "doodle.fileWindowsC.writing.then.reading" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
