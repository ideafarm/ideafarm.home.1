
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}

etherC::loafIF( tin0P ) ;

// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
#endif

    }
        ++ s ; ether.osSleepF( tin0P , TOCK << 0 ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        etThread.diskFileOrDirDeleteF( tin0P , tFolderMyEvents ) ;
        }
            while( !ether && ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        etThread.traceF( tin0P , (!F(flagsFail)?T("aok"):T("flagsFail:")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)) ) ;

                        }
                            }
                                ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                flagsFail |= flFAIL_COULDnOTmOVEfILE ;
                                POOPR
                            {
                            if( POOP )
                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tWhere+tShort , tIfoName , 1 ) ;

                            SCOOPS
                        {
                        IFsCRATCHoK

                        ;
                                : tSharedFolderEventDone
                                ? tSharedFolderEventRetryLater
                            : F(flagsFail) || !bRegistered
                            ? tSharedFolderEventGorilla01
                        TN( tWhere , "" ) ; tWhere = bGorilla01

                        etThread.traceF( tin0P , T("moving the file") ) ;

                        etThread.traceF( tin0P , T("cleaning up 3") ) ;

                        }
                            ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                            etThread.traceF( tin0P , T("unknown error") ) ;
                            flagsFail |= flFAIL_UNKNOWNeRROR ;
                            POOPR
                        {
                        if( POOP )
                        etThread.traceF( tin0P , T("cleaning up 2") ) ;

                        }
                            etThread.delF( tin0P , psttValueMiddleAmountDiscount     ) ;
                            etThread.delF( tin0P , psttValueMiddleAmountSubtotal     ) ;
                            etThread.delF( tin0P , psttValueMiddleAmountTotal        ) ;
                            etThread.delF( tin0P , psttValueMiddleCurrencyConversion ) ;
                            etThread.delF( tin0P , psttValueMiddleCurrency           ) ;
                            etThread.delF( tin0P , psttValueLive                     ) ;
                            etThread.delF( tin0P , psttValueIdSubscription           ) ;
                            etThread.delF( tin0P , psttValueName                     ) ;
                            etThread.delF( tin0P , psttValueEmail                    ) ;
                            etThread.delF( tin0P , psttValuePostalCode               ) ;
                            etThread.delF( tin0P , psttValueCountry                  ) ;
                            etThread.delF( tin0P , psttValueHawker                   ) ;
                            etThread.delF( tin0P , psttValueAge                      ) ;
                            etThread.delF( tin0P , psttVersion                       ) ;
                            etThread.delF( tin0P , psttEvent                         ) ;
                            }
                                }
                                    }
                                        }
                                            etThread.traceF( tin0P , T("debug / 0") ) ;
                                            etThread.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/factoryreports@ideafarm.com/")+T(psttValueEmail)+T("") , tThankYou ) ;
                                            etThread.traceF( tin0P , T("debug / 1") ) ;

                                            }
                                                ) ;

                                                    "Be sure to use the same email address so that we can detect duplicate charges and reverse them.\r\n\r\n"
                                                    "If you entered your [matrix] username incorrectly, you can submit a new, corrected order.\r\n"
                                                    "\r\nWe have been notified and will contact you via email during business hours.\r\n"

                                                tThankYou += T(

                                                }
                                                    ) ;

                                                        "    [students and faculty]:    ")+tValueError3+T("\r\n"

                                                    tThankYou += T(
                                                {
                                                if( bFail3 )

                                                }
                                                    ) ;

                                                        "    [courtship workshops]:     ")+tValueError2+T("\r\n"

                                                    tThankYou += T(
                                                {
                                                if( bFail2 )

                                                }
                                                    ) ;

                                                        "    [visitors]:                ")+tValueError1+T("\r\n"

                                                    tThankYou += T(
                                                {
                                                if( bFail1 )

                                                ) ;

                                                    "Your payment has been received but this automated system could not generate some of your invite(s):\r\n\r\n"

                                                tThankYou += T(
                                            {
                                            if( bFail1 || bFail2 || bFail3 )

                                            ) ;
                                                "go to http://admissions.ideafarm.com/ and click: \"[Click here to manage your subscription]\".\r\n"
                                                "unless you think that this email is spam.  To terminate or modify the subscription that you just paid for,\r\n"
                                                "The anti-spam link at the bottom appears at the end of all email sent from IDEAFARM.COM.  Please do NOT click it\r\n"
                                                +tInvitationsSubmitted +T("\r\n\r\n"
                                                "You have been invited to join the following spaces and rooms at The IdeaFarm (tm) College of Imagination Science:\r\n\r\n")
                                                "    [backup codes]:  ")+T("        (You will receive these during your first login, but hopefully will never need them.)\r\n\r\n"
                                                "    [secret phrase]: ")+T("        (You will make this up during your first login and enter it each time you log in.)\r\n"
                                                "Your account will also be secured by the following credentials:\r\n\r\n"
                                                "    [password]:      ")+tNewPassword+T("        (Be sure to change this right away!)\r\n\r\n"
                                                "    [username]:      ")+tNewUserNameShort+T("\r\n"
                                                "Here are your credentials.  You can use them immediately to log in:\r\n\r\n"
                                                "For instructions, see http://admissions.ideafarm.com .\r\n\r\n"
                                                "    [hawker]:        ")+T(psttValueHawker)+T("\r\n\r\n"
                                                "    [age (parsed)]:  ")+TF4(age,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n"
                                                "    [age (raw)]:     ")+T(psttValueAge)+T("\r\n"
                                                "    [email]:         ")+T(psttValueEmail)+T("\r\n"
                                                +T("Payment received for:\r\n\r\n"
                                                "Subject: Notification from IDEAFARM.COM\r\n\r\nThank you for ")+tForWhat

                                            TN( tThankYou , "" ) ; tThankYou = T(

                                            else           tForWhat = T("paying your entry fee for self-monitored chat.\r\n\r\n") ;
                                            if( bStudent ) tForWhat = T("registering as a student on IDEAFARM.COM.\r\n\r\n") ;
                                            TN( tForWhat , "" ) ;
                                            etThread.traceF( tin0P , T("debug / 2") ) ;

                                            }
                                                }
                                                    }
                                                        }
                                                            etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                            POOPRqUIET
                                                        {
                                                        if( POOP )
                                                    
                                                        etThread.traceF( tin0P , T("[accessToken,deviceId]:    ")+tValueAccessToken+tb4+tValueDeviceId ) ;
                                                    
                                                        }
                                                            DEL( pSwPathValue ) ;
                                                    
                                                            }
                                                                }
                                                                    etThread.delF( tin0P , pstpsttValue ) ;
                                                    
                                                                    }
                                                                        }
                                                                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            *pptValue[ offe ] = T(pstpsttValue) ;
                                                                        {
                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                    {
                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )
                                                    
                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                                                    
                                                                    //etThread.trace F( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                    //etThread.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                    
                                                                    strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                                                    
                                                                    _IO_
                                                                {
                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                            {
                                                            if( !POOP )
                                                    
                                                            ;
                                                            }
                                                                &tPathDeviceId     ,
                                                                &tPathAccessToken  ,
                                                            {
                                                            textC* pptPath[] =
                                                    
                                                            TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                                                            TN( tPathAccessToken , "\"access_token\"/" ) ;
                                                    
                                                            ;
                                                            }
                                                                &tValueDeviceId      ,
                                                                &tValueAccessToken ,
                                                            {
                                                            textC* pptValue[] =
                                                    
                                                            __Z( pSwPathValue ) ;
                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                            ZE( switchC* , pSwPathValue ) ;
                                                            ZE( strokeS* , psttPath     ) ;
                                                        {
                                                    
                                                        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("json response:") ) ;
                                                    
                                                        }
                                                            }
                                                                else if( costj ) break ;
                                                                     if( cNest ) costj ++ ;
                                                    
                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                     if( postj[ costj ] == '{' ) cNest ++ ;

                                                                if( !cbIn ) break ;
                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                            {
                                                            for(;;)
                                                            ZE( countT , cNest ) ;
                                                        {
                                                        ZE( countT , costj ) ;
                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                        osTextT postj[ TUCK << 1 ] ;
                                                    
                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("request:") ) ;
                                                    
                                                        TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/logout HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(0,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n") ;
                                                    
                                                        //sockc.connectF( tin0P , 80 , nnServer ) ;
                                                        //socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                    
                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                    
                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT timeAllowedConnected = TICK >> 2 ;
                                                    
                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                        nicNameC nnServer ;
                                                    
                                                        SCOOPS
                                                        _IO_
                                                    {
                                                    IFsCRATCHoK                                                           // LOGOUT

                                                    if( !tInvitationsSubmitted.csF( tin0P ) ) tInvitationsSubmitted = T("    none\r\n") ;
                                                    etThread.traceF( tin0P , T("debug / 3") ) ;

                                                    }            
                                                        }
                                                            }
                                                                tInvitationsSubmitted += tb4+tNameSpaceAcademic+tcrlf ;
                                                                TN( tNameSpaceAcademic , "Students and Faculty Only (ICIS)" ) ;
                                                            {
                                                            if( !bFail3 )

                                                            }
                                                                bFail3 = 1 ;
                                                                etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                                POOPRqUIET
                                                            {
                                                            if( POOP )
                                                        
                                                            }
                                                                if( !tValueErrorCode3.csF( tin0P ) ) bFail3 = 0 ;
                                                                DEL( pSwPathValue ) ;
                                                                }
                                                                    }
                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                        }
                                                                            }
                                                                                etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                            {
                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                        {
                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                        _IO_
                                                                    {
                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                {
                                                                if( !POOP )

                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                ;
                                                                }
                                                                    &tPathError     ,
                                                                    &tPathErrorCode ,
                                                                {
                                                                textC* pptPath[] =

                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                ;
                                                                }
                                                                    &tValueError3     ,
                                                                    &tValueErrorCode3 ,
                                                                {
                                                                textC* pptValue[] =

                                                                __Z( pSwPathValue ) ;
                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                ZE( switchC* , pSwPathValue ) ;
                                                                ZE( strokeS* , psttPath     ) ;
                                                            {

                                                            etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("json response:") ) ;

                                                            }
                                                                }
                                                                    else if( costj ) break ;
                                                                         if( cNest ) costj ++ ;
                                                        
                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                        
                                                                    putchar( postj[ costj ] ) ;

                                                                    if( !cbIn ) break ;
                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                {
                                                                for(;;)
                                                                ZE( countT , cNest ) ;
                                                            {
                                                            ZE( countT , costj ) ;
                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                            osTextT postj[ TUCK << 1 ] ;
                                                        
                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                            etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("request:") ) ;

                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!CxQXuURdflEEIURQXO:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                        
                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                        
                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                        
                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                            nicNameC nnServer ;
                                                        
                                                            SCOOPS
                                                        {
                                                        IFsCRATCHoK
                                                        _IO_
                                                    {
                                                    else if( !bFail0 )
                                                    if( age < 16 || !bStudent ) bFail3 = 0 ;
                                                    TN( tNameSpaceAcademic , "Students and Faculty Only (ICIS)" ) ;    // INVITE TO SPACE
                                                    etThread.traceF( tin0P , T("debug / 4") ) ;
                                                    
                                                    }            
                                                        }
                                                            }
                                                                tInvitationsSubmitted += tb4+tNameSpaceCourtship+tcrlf ;
                                                                TN( tNameSpaceCourtship , "Bait N' Switch Courtship Workshops (ICIS)" ) ;
                                                            {
                                                            if( !bFail2 )

                                                            }
                                                                bFail2 = 1 ;
                                                                etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                                POOPRqUIET
                                                            {
                                                            if( POOP )
                                                        
                                                            }
                                                                if( !tValueErrorCode2.csF( tin0P ) ) bFail2 = 0 ;
                                                                DEL( pSwPathValue ) ;
                                                                }
                                                                    }
                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                        }
                                                                            }
                                                                                etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                            {
                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                        {
                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                        _IO_
                                                                    {
                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                {
                                                                if( !POOP )

                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                ;
                                                                }
                                                                    &tPathError     ,
                                                                    &tPathErrorCode ,
                                                                {
                                                                textC* pptPath[] =

                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                ;
                                                                }
                                                                    &tValueError2     ,
                                                                    &tValueErrorCode2 ,
                                                                {
                                                                textC* pptValue[] =

                                                                __Z( pSwPathValue ) ;
                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                ZE( switchC* , pSwPathValue ) ;
                                                                ZE( strokeS* , psttPath     ) ;
                                                            {

                                                            etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("json response:") ) ;

                                                            }
                                                                }
                                                                    else if( costj ) break ;
                                                                         if( cNest ) costj ++ ;
                                                        
                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                        
                                                                    putchar( postj[ costj ] ) ;

                                                                    if( !cbIn ) break ;
                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                {
                                                                for(;;)
                                                                ZE( countT , cNest ) ;
                                                            {
                                                            ZE( countT , costj ) ;
                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                            osTextT postj[ TUCK << 1 ] ;
                                                        
                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                            etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("request:") ) ;
                                                        
                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!esnkyOGEyeJQlIZGPM:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                        
                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                        
                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                        
                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                            nicNameC nnServer ;
                                                        
                                                            SCOOPS
                                                        {
                                                        IFsCRATCHoK
                                                        _IO_
                                                    {
                                                    else if( !bFail0 )
                                                    if( age < 13 || age > 29 ) bFail2 = 0 ;
                                                    etThread.traceF( tin0P , T("debug / 5") ) ;
                                                    
                                                    }
                                                        }
                                                            }
                                                                tInvitationsSubmitted += tb4+tNameSpaceVisitors+tcrlf ;
                                                                TN( tNameSpaceVisitors , "Visitors (ICIS: The IdeaFarm (tm) College of Imagination Science)" ) ;
                                                            {
                                                            if( !bFail1 )

                                                            }
                                                                bFail1 = 1 ;
                                                                etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                                POOPRqUIET
                                                            {
                                                            if( POOP )
                                                        
                                                            }
                                                                if( !tValueErrorCode1.csF( tin0P ) ) bFail1 = 0 ;
                                                                DEL( pSwPathValue ) ;
                                                                }
                                                                    }
                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                        }
                                                                            }
                                                                                etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                            {
                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                        {
                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                        _IO_
                                                                    {
                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                {
                                                                if( !POOP )

                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                ;
                                                                }
                                                                    &tPathError     ,
                                                                    &tPathErrorCode ,
                                                                {
                                                                textC* pptPath[] =

                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                ;
                                                                }
                                                                    &tValueError1     ,
                                                                    &tValueErrorCode1 ,
                                                                {
                                                                textC* pptValue[] =

                                                                __Z( pSwPathValue ) ;
                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                ZE( switchC* , pSwPathValue ) ;
                                                                ZE( strokeS* , psttPath     ) ;
                                                            {

                                                            etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("json response:") ) ;

                                                            }
                                                                }
                                                                    else if( costj ) break ;
                                                                         if( cNest ) costj ++ ;
                                                        
                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                        
                                                                    putchar( postj[ costj ] ) ;

                                                                    if( !cbIn ) break ;
                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                {
                                                                for(;;)
                                                                ZE( countT , cNest ) ;
                                                            {
                                                            ZE( countT , costj ) ;
                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                            osTextT postj[ TUCK << 1 ] ;
                                                        
                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                            etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("request:") ) ;
                                                        
                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!tvsMKCZYUrmUfxhZIq:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                        
                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                        
                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                        
                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                            nicNameC nnServer ;
                                                        
                                                            SCOOPS
                                                        {
                                                        IFsCRATCHoK                                                       // INVITE TO SPACE
                                                        _IO_
                                                    {
                                                    else if( !bFail0 )
                                                    if( age < 13 ) bFail1 = 0 ;
                                                    etThread.traceF( tin0P , T("debug / 6") ) ;

                                                    }
                                                        if( tValueAccessToken.csF( tin0P ) ) bFail0 = 0 ;

                                                        }
                                                            etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                            POOPRqUIET
                                                        {
                                                        if( POOP )
                                                    
                                                        etThread.traceF( tin0P , T("[accessToken,deviceId]:    ")+tValueAccessToken+tb4+tValueDeviceId ) ;
                                                    
                                                        }
                                                            DEL( pSwPathValue ) ;
                                                            
                                                            }
                                                                }
                                                                    etThread.delF( tin0P , pstpsttValue ) ;
                                                            
                                                                    }
                                                                        }
                                                                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            *pptValue[ offe ] = T(pstpsttValue) ;
                                                                        {
                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                    {
                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )
                                                            
                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                                                            
                                                                    //etThread.trace F( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                    //etThread.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            
                                                                    strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                                                            
                                                                    _IO_
                                                                {
                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                            {
                                                            if( !POOP )
                                                            
                                                            ;
                                                            }
                                                                &tPathDeviceId     ,
                                                                &tPathAccessToken  ,
                                                            {
                                                            textC* pptPath[] =
                                                            
                                                            TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                                                            TN( tPathAccessToken , "\"access_token\"/" ) ;
                                                            
                                                            ;
                                                            }
                                                                &tValueDeviceId      ,
                                                                &tValueAccessToken ,
                                                            {
                                                            textC* pptValue[] =
                                                            
                                                            __Z( pSwPathValue ) ;
                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                            ZE( switchC* , pSwPathValue ) ;
                                                            ZE( strokeS* , psttPath     ) ;
                                                            _IO_
                                                        {
                                                    
                                                        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("json response:") ) ;
                                                    
                                                        }
                                                            }
                                                                else if( costj ) break ;
                                                                     if( cNest ) costj ++ ;
                                                    
                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                     if( postj[ costj ] == '{' ) cNest ++ ;
                                                    
                                                                putchar( postj[ costj ] ) ;

                                                                if( !cbIn ) break ;
                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                            {
                                                            for(;;)
                                                            ZE( countT , cNest ) ;
                                                        {
                                                        ZE( countT , costj ) ;
                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                        osTextT postj[ TUCK << 1 ] ;
                                                    
                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("request:") ) ;
                                                    
                                                        TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/login HTTP/1.1\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;
                                                    
                                                        countT costBody = tBody.csF( tin0P ) ;
                                                    
                                                        //sockc.connectF( tin0P , 80 , nnServer ) ;
                                                        //socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                    
                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                    
                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT timeAllowedConnected = TICK >> 2 ;
                                                    
                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                        nicNameC nnServer ;
                                                    
                                                        ) ;
                                                        
                                                            "}\r\n"
                                                            "    \"password\": \"")+tApiPassword+T("\"\r\n"
                                                            "    },\r\n"
                                                            "        \"user\": \"a.1\"\r\n"
                                                            "        \"type\": \"m.id.user\",\r\n"
                                                            "    {\r\n"
                                                            "    \"identifier\":\r\n"
                                                            "    \"type\": \"m.login.password\",\r\n"
                                                            "{\r\n"
                                                        
                                                        TN( tBody , "" ) ; tBody = T(
                                                        
                                                        }
                                                            etThread.delF( tin0P , psttApiPassword ) ;
                                                            tApiPassword = T(psttApiPassword) ;
                                                            etThread.traceF( tin0P , T("[password]:    ")+T(psttApiPassword) ) ;
                                                            if( psttApiPassword && psttApiPassword->idAdam ) tApiPassword = T(psttApiPassword) ;

                                                              ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.ideafarm.com.a.1"          ) ) ; ___( psttApiPassword ) ;
                                                            //ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.ideafarm.com.administrator") ) ; ___( psttApiPassword ) ;
                                                            //ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.communick.com.ideafarm"    ) ) ; ___( psttApiPassword ) ;
                                                        {
                                                        TN( tApiPassword , "" ) ;

                                                        SCOOPS
                                                        _IO_
                                                    {
                                                    IFsCRATCHoK                                                           // LOGIN

                                                    TN( tValueDeviceId    , ""                     ) ;
                                                    TN( tValueAccessToken , ""                     ) ;
                                                    TN( tServer              , "ideafarm.com"         ) ;
                                                  //TN( tServer              , "matrix.communick.com" ) ;
                                                    etThread.traceF( tin0P , T("debug / 7") ) ;

                                                    }
                                                        etThread.traceF( tin0P , T("debug / 7.1") ) ;
                                                        }
                                                            etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                            POOPRqUIET
                                                        {
                                                        if( POOP )
                                                        etThread.traceF( tin0P , T("debug / 7.2") ) ;

                                                        etThread.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;
                                                        TN( tb4 , "    " ) ;

                                                        }
                                                            }
                                                                etThread.boxPutF( tin0P , tLong , tRecord , tRecord.csF( tin0P ) ) ;

                                                                etThread.delF( tin0P , psttu ) ;
                                                                TN( tLong , "" ) ; tLong = T("///z/ideafarm.shared/precious/")+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/json/usernames/")+T("json.username.")+T(psttu)+T(".json") ;
                                                                etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                                                ZE( strokeS* , psttu ) ;

                                                                ) ;

                                                                    "}\r\n"
                                                                    "    \"subscription.id\" : \"")+T(psttValueIdSubscription)+T("\"\r\n"
                                                                    "    \"type\" : \"")+T(bStudent?"student":"visitor")+T("\"\r\n"
                                                                    "    \"username\" : \"")+tNewUserNameLong+T("\"\r\n"
                                                                    "    \"email\" : \"")+T(psttValueEmail)+T("\"\r\n"
                                                                    "    \"live\" : \"")+T(psttValueLive)+T("\"\r\n"
                                                                    "    \"time\" : \"")+TTF(timeN1,timeN2)+T("\"\r\n"
                                                                    "{\r\n"

                                                                TN( tRecord , "" ) ; tRecord = T(

                                                                etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
                                                                ZE( sCountT , timeN2 ) ;
                                                                ZE( countT  , timeN1 ) ;

                                                                bRegistered = 1 ;
                                                            {
                                                            else
                                                            }
                                                                continue ;
                                                                bRetrySameUsername = 1 ;
                                                                etThread.traceF( tin0P , T("!exception / other error ; will retry the same value [errorCode,error]:    ")+tValueErrorCode+tb4+tValueError ) ;
                                                            {
                                                            else if( tValueErrorCode.csF( tin0P ) || tValueError.csF( tin0P ) )
                                                            }
                                                                continue ;
                                                                etThread.traceF( tin0P , T("!exception / this username is already registered ; will try the next value [errorCode,error]:    ")+tValueErrorCode+tb4+tValueError ) ;
                                                            {
                                                            if( !etThread.strCompareF( tin0P , tValueErrorCode , T("M_USER_IN_USE") ) )

                                                            DEL( pSwPathValue ) ;

                                                            }
                                                                }
                                                                    etThread.delF( tin0P , psttValue ) ;

                                                                    }
                                                                        }
                                                                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            *pptValue[ offe ] = T(psttValue) ;
                                                                        {
                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                    {
                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                    //etThread.trace F( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                    //etThread.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                                                                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                    _IO_
                                                                {
                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                _IO_
                                                            {
                                                            if( !POOP )

                                                            //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                            ;
                                                            }
                                                                &tPathNonce     ,
                                                                &tPathError     ,
                                                                &tPathErrorCode ,
                                                            {
                                                            textC* pptPath[] =

                                                            TN( tPathNonce     , "\"nonce\"/"   ) ;
                                                            TN( tPathError     , "\"error\"/"   ) ;
                                                            TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                            ;
                                                            }
                                                                &tValueNonce     ,
                                                                &tValueError     ,
                                                                &tValueErrorCode ,
                                                            {
                                                            textC* pptValue[] =

                                                            TN( tValueError     , "" ) ;
                                                            TN( tValueErrorCode , "" ) ;

                                                            __Z( pSwPathValue ) ;
                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                            ZE( switchC* , pSwPathValue ) ;
                                                            ZE( strokeS* , psttPath     ) ;
                                                            _IO_
                                                        {
                                                        TN( tValueNonce     , "" ) ;
                                                        etThread.traceF( tin0P , T("debug / 7.3") ) ;

                                                        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("json response:") ) ;

                                                        }
                                                            etThread.traceF( tin0P , T(posth) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                            etThread.traceF( tin0P , T("[headers]:") ) ;
                                                            posth[ costh ] = 0 ;
                                                            }
                                                                }
                                                                    break ;

                                                                    postj[ costj ] = save ;
                                                                                   postj[ costj ] = 0 ;
                                                                    osTextT save = postj[ costj ] ;
                                                                {
                                                                else if( costj )
                                                                     if( cNest ) costj ++ ;

                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                     if( postj[ costj ] == '{' ) cNest ++ ;

                                                                if( !costj && !cNest ) posth[ costh ++ ] = postj[ costj ] ;

                                                                //etThread.traceF( tin0P , TF3(++idReadLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,8)+T("    ")+T(post2) ) ;
                                                                //osTextT post2[] = { postj[ costj ] , 0 } ;
                                                    
                                                                if( !cbIn ) break ;
                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                            {
                                                            for(;;)
                                                            ZE( countT , cNest ) ;
                                                            ZE( countT , idReadLath ) ;

                                                            ZE( countT , costh ) ;
                                                            osTextT posth[ TUCK << 1 ] ;
                                                            _IO_
                                                        {
                                                        ZE( countT , costj ) ;
                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;
                                                        osTextT postj[ TUCK << 1 ] ;
                                                        etThread.traceF( tin0P , T("debug / 7.4") ) ;

                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("request:") ) ;
                                                        etThread.traceF( tin0P , T("debug / 7.5") ) ;

                                                        TN( tSay , "" ) ; tSay = T("POST /_synapse/admin/v1/register HTTP/1.1")/*+T("\r\nAuthorization: Bearer ")+tValueSharedSecret*/+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;

                                                        countT costBody = tBody.csF( tin0P ) ;

                                                        etThread.traceF( tin0P , T("debug / 7.6") ) ;
                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                        etThread.traceF( tin0P , T("debug / 7.7") ) ;

                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT timeAllowedConnected = TICK >> 2 ;

                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                        nicNameC nnServer ;

                                                        etThread.traceF( tin0P , T("debug / 7.8") ) ;
                                                        ) ;

                                                            "}\r\n"
                                                            "    \"mac\": \"")+tMac                 +T("\"\r\n"
                                                            "    \"password\": \"")+tNewPassword           +T("\",\r\n"
                                                            "    \"username\": \"")+tNewUserNameShort      +T("\",\r\n"
                                                            "    \"nonce\": \"")+tValueNonce        +T("\",\r\n"
                                                            "{\r\n"

                                                        TN( tBody , "" ) ; tBody = T(

                                                        etThread.traceF( tin0P , T("[mac]:    ")+tMac ) ;
                                                        }
                                                            etThread.delF( tin0P , psttMac ) ;
                                                            tMac = T(psttMac) ;
                                                            etThread.openSslHmacF( tin0P , psttMac , tValueSharedSecret , tValueSharedSecret.csF( tin0P ) , postRaw , costRaw ) ; ___( psttMac ) ;
                                                            ZE( strokeS* , psttMac ) ;

                                                            countT costRaw = postc - postRaw ;

                                                            thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi     ;
                                                            costi = tNote.csF( tin0P ) ;
                                                            posti = tNote ;

                                                            thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                            costi = tNewPassword.csF( tin0P ) ;
                                                            posti = tNewPassword ;

                                                            thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                            costi = tNewUserNameShort.csF( tin0P ) ;
                                                            posti = tNewUserNameShort ;

                                                            thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                            countT   costi = tValueNonce.csF( tin0P ) ;
                                                            osTextT* posti = tValueNonce ;

                                                            osTextT* postc = postRaw ;
                                                            thirdC::c_memsetIF( tin0P , postRaw , sizeof postRaw , 0 ) ;
                                                            osTextT postRaw[ TUCK ] ;
                                                            etThread.traceF( tin0P , T("debug / 7.g") ) ;
                                                            _IO_
                                                        {
                                                        TN( tMac , "" ) ;

                                                        TN( tNote , "notadmin"  ) ;
                                                        etThread.traceF( tin0P , T("debug / 7.h") ) ;

                                                        _IO_
                                                    {
                                                    etThread.traceF( tin0P , T("debug / 8") ) ;

                                                    }
                                                        }
                                                            etThread.traceF( tin0P , T("socket is impotent") ) ;
                                                            POOPRqUIET
                                                        {
                                                        if( POOP )

                                                        etThread.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;

                                                        }
                                                            DEL( pSwPathValue ) ;

                                                            }
                                                                }
                                                                    etThread.delF( tin0P , psttValue ) ;

                                                                    }
                                                                        }
                                                                            etThread.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            *pptValue[ offe ] = T(psttValue) ;
                                                                        {
                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                    {
                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                    //etThread.trace F( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                    //etThread.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                                                                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                    _IO_
                                                                {
                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                _IO_
                                                            {
                                                            if( !POOP )

                                                            //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                            ;
                                                            }
                                                                &tPathNonce     ,
                                                                &tPathError     ,
                                                                &tPathErrorCode ,
                                                            {
                                                            textC* pptPath[] =

                                                            TN( tPathNonce     , "\"nonce\"/"   ) ;
                                                            TN( tPathError     , "\"error\"/"   ) ;
                                                            TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                            ;
                                                            }
                                                                &tValueNonce     ,
                                                                &tValueError     ,
                                                                &tValueErrorCode ,
                                                            {
                                                            textC* pptValue[] =

                                                            TN( tValueError     , "" ) ;
                                                            TN( tValueErrorCode , "" ) ;

                                                            __Z( pSwPathValue ) ;
                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                            ZE( switchC* , pSwPathValue ) ;
                                                            ZE( strokeS* , psttPath     ) ;
                                                            _IO_
                                                        {

                                                        etThread.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("json response:") ) ;

                                                        }
                                                            }
                                                                else if( costj ) break ;
                                                                     if( cNest ) costj ++ ;

                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                     if( postj[ costj ] == '{' ) cNest ++ ;

                                                                putchar( postj[ costj ] ) ;

                                                                if( !cbIn ) break ;
                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                            {
                                                            for(;;)
                                                            ZE( countT , cNest ) ;
                                                            _IO_
                                                        {
                                                        ZE( countT , costj ) ;
                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;
                                                        osTextT postj[ TUCK << 1 ] ;

                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                        etThread.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                        etThread.traceF( tin0P , T("request:") ) ;

                                                        TN( tSay , "" ) ; tSay = T("GET /_synapse/admin/v1/register HTTP/1.1")+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;

                                                        countT costBody = tBody.csF( tin0P ) ;

                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;

                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                        countT timeAllowedConnected = TICK >> 2 ;

                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                        nicNameC nnServer ;

                                                        TN( tBody , "" ) ;

                                                        SCOOPS
                                                        _IO_
                                                    {
                                                    IFsCRATCHoK
                                                    TN( tValueNonce , "" ) ;
                                                    _IO_
                                                {
                                                else
                                                }
                                                    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                                    flagsFail |= flFAIL_COULDnOTgETsHAREDsECRET ;
                                                    etThread.traceF( tin0P , T("could not retrieve shared secret") ) ;
                                                {
                                                if( !tValueSharedSecret.csF( tin0P ) )

                                                TN( tServer , "ideafarm.com" ) ;

                                                }
                                                    etThread.traceF( tin0P , T("[sharedSecret]:    ")+tValueSharedSecret ) ;
                                                    etThread.delF( tin0P , psttSharedSecret ) ;
                                                    if( psttSharedSecret && psttSharedSecret->idAdam ) tValueSharedSecret = T(psttSharedSecret) ;

                                                    ZE( strokeS* , psttSharedSecret ) ; etThread.querySettingF( tin0P , psttSharedSecret , T("!ipdos.password.matrix.ideafarm.com.shared.secret")  ) ; ___( psttSharedSecret ) ;
                                                {
                                                TN( tValueSharedSecret , "" ) ;

                                                tNewPassword = TF4((countT)ruPassword,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE|flFORMAT_FILLzE,0,0x3e) ;
                                                countT idNewPassword = ruPassword ;
                                                _IO_
                                            {
                                            if( tNewUserNameLong.csF( tin0P ) )

                                            }
                                                tBodyInvite = T("{\"user_id\": \"")+tNewUserNameLong+T("\"}\r\n") ;
                                                tNewUserNameLong  = T("@")+tNewUserNameShort+T(":ideafarm.com") ;       // GIVE ONLY THE SHORT USERNAME IN THE EMAILS BECAUSE NONFEDERATED SO (1) LONG NAME ISN'T NEEDED AND (2) LONG NAME WILL PRODUCE AN ERROR MESSAGE THAT WILL CONFUSE EVEN THOUGH IT WILL THEN WORK
                                                tNewUserNameShort = T(bLive?"a.":"test.")+TF4(idNewUser,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x24) ;       // [0-9,a-z]

                                                }
                                                    etThread.fileWriteF( tin0P , fileCount , (byteT*)&idNewUser , sizeof idNewUser ) ;
                                                    etThread.fileSetPtrF( tin0P , fileCount , flSETfILEpTR_BEGINNING , c2z ) ;
                                                    count2S c2z ;

                                                    idNewUser = bRetrySameUsername && idOld ? idOld : ++ idOld ;

                                                    }
                                                        }
                                                            etThread.traceF( tin0P , T("!exception / invalid file size for idNewUserLath, so using 0 [tName]:    ")+tName ) ;
                                                            idOld = 0 ;
                                                        {
                                                        if( cbr - sizeof idOld )

                                                        }
                                                            }
                                                                cbr = 0 ;       // PROBABLY REDUNDANT
                                                                etThread.traceF( tin0P , T("!exception / countT file is not of the expected size [tName]")+tName ) ;
                                                                POOPR ;
                                                            {
                                                            if( POOP )
                                                            ((tin1S&)tin0P).pEtScratch->fileReadF( tin0P , (byteT*)&idOld , cbr , fileCount ) ;
                                                            SCOOPS
                                                        {
                                                        IFsCRATCHoK
                                                        countT cbr = sizeof idOld ;
                                                    {
                                                    if( !bNewFile )
                                                    ZE( countT , idOld ) ;

                                                    const boolT bNewFile = ifcOPENrESULT_CREATED == fileCount.idOpenResultF( tin0P  ) ;
                                                    fileC fileCount( tin0P , (strokeS*)tName , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeO ) ;
                                                {
                                                ZE( countT , idNewUser ) ;

                                                TN( tName , bLive ? "///z/ideafarm.shared/precious/idNewLiveUserLath" : "///z/ideafarm.shared/precious/idNewTestUserLath" ) ;
                                                const boolT bLive = !etThread.strCompareF( tin0P , psttValueLive , tTrue ) ;
                                                _IO_
                                            {
                                            TN( tBodyInvite , "" ) ;
                                            // DISPENSE CREDENTIALS (LIVE OR TEST)

                                            tNewPassword          = tn ;
                                            tNewUserNameLong      = tn ;
                                            tNewUserNameShort     = tn ;
                                            tValueError3          = tn ;
                                            tValueErrorCode3      = tn ;
                                            tValueError2          = tn ;
                                            tValueErrorCode2      = tn ;
                                            tValueError1          = tn ;
                                            tValueErrorCode1      = tn ;
                                            tInvitationsSubmitted = tn ;
                                            bFail3 = 1 ;
                                            bFail2 = 1 ;
                                            bFail1 = 1 ;
                                            bFail0 = 1 ;
                                            _IO_
                                        {
                                        while( !ether && !POOP && !bRegistered )     //WILL continue UNTIL SUCCESSFULLY REGISTER A NEW USERNAME ; THIS CAUSES idNewUser TO INCREMENT UNTIL IT IS A VALUE THAT HAS NOT BEEN REGISTERED
                                        ZE( boolT , bRetrySameUsername ) ;
                                        TN( tNewPassword         , "" ) ;
                                        TN( tNewUserNameLong     , "" ) ;
                                        TN( tNewUserNameShort    , "" ) ;
                                        TN( tValueError3         , "" ) ;
                                        TN( tValueErrorCode3     , "" ) ;
                                        TN( tValueError2         , "" ) ;
                                        TN( tValueErrorCode2     , "" ) ;
                                        TN( tValueError1         , "" ) ;
                                        TN( tValueErrorCode1     , "" ) ;
                                        boolT bFail3 = 1 ;
                                        boolT bFail2 = 1 ;
                                        boolT bFail1 = 1 ;
                                        boolT bFail0 = 1 ;
                                        TN( tInvitationsSubmitted , "" ) ;
                                    {
                                    else
                                    }
                                        etThread.traceF( tin0P , T("ignoring gorilla01") ) ;
                                    {
                                    if( bGorilla01 )
                                {
                                if( !flagsFail )

                                }
                                    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                    flagsFail |= flFAIL_UNKNOWNpRODUCT ;
                                {
                                if( !bStudent && !bVisitor && !bGorilla01 )

                                ;
                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RTnJkcMaLDwaqK") )      // TEST
                                    ||
                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RJ1RvgWrjbn5VU") )      // LIVE
                                const boolT bVisitor =

                                ;
                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RTh7nU4xMtwvzD") )      // TEST
                                    ||
                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RJ1XOIUO9htwyX") )      // LIVE
                                const boolT bStudent =

                                bGorilla01 = !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_GORILLA01") ) ;

                                _IO_
                            {
                            else
                            }
                                ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                            {
                            if( flagsFail )

                            if( age < 13                                                                                                                         ) flagsFail |= flFAIL_UNEXPECTEDaGEtOOyOUNG ;
                            if( etThread.strCompareF( tin0P , psttVersion , tCorrectVersion1 ) && etThread.strCompareF( tin0P , psttVersion , tCorrectVersion2 ) ) flagsFail |= flFAIL_UNEXPECTEDvERSION     ;
                            if( etThread.strCompareF( tin0P , psttEvent   , tCorrectEvent    )                                                                   ) flagsFail |= flFAIL_UNEXPECTEDeVENT       ;

                            const sCountT age = etThread.strDigitsToSCountF( tin0P , psttValueAge , 0xa , 1 ) ;

                            }
                                sIn >> psttValueMiddleAmountDiscount     ; ___( psttValueMiddleAmountDiscount     ) ; etThread.traceF( tin0P , T("[ValueMiddleAmountDiscount     ]:    ")+T(psttValueMiddleAmountDiscount     ) ) ;
                                sIn >> psttValueMiddleAmountSubtotal     ; ___( psttValueMiddleAmountSubtotal     ) ; etThread.traceF( tin0P , T("[ValueMiddleAmountSubtotal     ]:    ")+T(psttValueMiddleAmountSubtotal     ) ) ;
                                sIn >> psttValueMiddleAmountTotal        ; ___( psttValueMiddleAmountTotal        ) ; etThread.traceF( tin0P , T("[ValueMiddleAmountTotal        ]:    ")+T(psttValueMiddleAmountTotal        ) ) ;
                                sIn >> psttValueMiddleCurrencyConversion ; ___( psttValueMiddleCurrencyConversion ) ; etThread.traceF( tin0P , T("[ValueMiddleCurrencyConversion ]:    ")+T(psttValueMiddleCurrencyConversion ) ) ;
                                sIn >> psttValueMiddleCurrency           ; ___( psttValueMiddleCurrency           ) ; etThread.traceF( tin0P , T("[ValueMiddleCurrency           ]:    ")+T(psttValueMiddleCurrency           ) ) ;
                            {
                            if( !etThread.strCompareF( tin0P , psttVersion , tCorrectVersion2 ) )

                            TN( tCorrectVersion2 , "2" ) ;
                            TN( tCorrectVersion1 , "1" ) ;
                            TN( tCorrectEvent    , "ipdos.subscription.create" ) ;

                            ZE( strokeS* , psttValueMiddleAmountDiscount     ) ;
                            ZE( strokeS* , psttValueMiddleAmountSubtotal     ) ;
                            ZE( strokeS* , psttValueMiddleAmountTotal        ) ;
                            ZE( strokeS* , psttValueMiddleCurrencyConversion ) ;
                            ZE( strokeS* , psttValueMiddleCurrency           ) ;
                            // VERSION 2

                            ZE( strokeS* , psttValueHawker                   ) ; sIn >> psttValueHawker                   ; ___( psttValueHawker                   ) ; etThread.traceF( tin0P , T("[ValueHawker                   ]:    ")+T(psttValueHawker                   ) ) ;
                            ZE( strokeS* , psttValueAge                      ) ; sIn >> psttValueAge                      ; ___( psttValueAge                      ) ; etThread.traceF( tin0P , T("[ValueAge                      ]:    ")+T(psttValueAge                      ) ) ;
                            ZE( strokeS* , psttValueName                     ) ; sIn >> psttValueName                     ; ___( psttValueName                     ) ; etThread.traceF( tin0P , T("[ValueName                     ]:    ")+T(psttValueName                     ) ) ;
                            ZE( strokeS* , psttValueEmail                    ) ; sIn >> psttValueEmail                    ; ___( psttValueEmail                    ) ; etThread.traceF( tin0P , T("[ValueEmail                    ]:    ")+T(psttValueEmail                    ) ) ;
                            ZE( strokeS* , psttValuePostalCode               ) ; sIn >> psttValuePostalCode               ; ___( psttValuePostalCode               ) ; etThread.traceF( tin0P , T("[ValuePostalCode               ]:    ")+T(psttValuePostalCode               ) ) ;
                            ZE( strokeS* , psttValueCountry                  ) ; sIn >> psttValueCountry                  ; ___( psttValueCountry                  ) ; etThread.traceF( tin0P , T("[ValueCountry                  ]:    ")+T(psttValueCountry                  ) ) ;
                            ZE( strokeS* , psttValueIdSubscription           ) ; sIn >> psttValueIdSubscription           ; ___( psttValueIdSubscription           ) ; etThread.traceF( tin0P , T("[ValueIdSubscription           ]:    ")+T(psttValueIdSubscription           ) ) ;
                            ZE( strokeS* , psttValueIdProduct                ) ; sIn >> psttValueIdProduct                ; ___( psttValueIdProduct                ) ; etThread.traceF( tin0P , T("[ValueIdProduct                ]:    ")+T(psttValueIdProduct                ) ) ;
                            ZE( strokeS* , psttValueLive                     ) ; sIn >> psttValueLive                     ; ___( psttValueLive                     ) ; etThread.traceF( tin0P , T("[ValueLive                     ]:    ")+T(psttValueLive                     ) ) ;
                            ZE( strokeS* , psttVersion                       ) ; sIn >> psttVersion                       ; ___( psttVersion                       ) ; etThread.traceF( tin0P , T("[Version                       ]:    ")+T(psttVersion                       ) ) ;
                            ZE( strokeS* , psttEvent                         ) ; sIn >> psttEvent                         ; ___( psttEvent                         ) ; etThread.traceF( tin0P , T("[Event                         ]:    ")+T(psttEvent                         ) ) ;
                            // VERSION 1

                            _IO_
                        {
                        if( !( F(flagsFail) & flFAIL_COULDnOTgETsHADOW ) )
                        ZE( boolT , bGorilla01  ) ;
                        ZE( boolT , bRegistered ) ;

                        }
                            }
                                ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                etThread.traceF( tin0P , T("could not get shadow of ")+T((strokeS*)tIfoName)+T(": ") ) ;
                                flagsFail |= flFAIL_COULDnOTgETsHADOW ;
                                POOPR ;
                            {
                            if( POOP )
                            ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sIn , tIfoName , 1 ) ;
                            SCOOPS
                        {
                        IFsCRATCHoK
                        soulC sIn( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                        IFsCRATCHoK{}

                        ZE( flagsT , flagsFail ) ;
                        etThread.traceF( tin0P , T("receiving ")+T((strokeS*)tIfoName)+T(": ") ) ;

                        etThread.traceF( tin0P , tShort ) ;

                        }
                            etThread.delF( tin0P , psttShort ) ;
                            tShort = T(psttShort) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShort , tIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                            ZE( strokeS* , psttShort ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShort , "" ) ;

                        TN( tIfoName , pInfo->psttIfoName ) ;
                        _IO_
                    {
                    if( !bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFind , tFolderMyEvents ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
        {

        }
            while( !ether && ~hFind && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        }
                            }
                                etThread.traceF( tin0P , T("collision / could not move event to my events folder [short]:    ")+tShort ) ;
                                POOPRqUIET ;
                            {
                            if( POOP )
                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongTo , tLongFrom , 1 ) ;
                            SCOOPS
                        {
                        IFsCRATCHoK

                        etThread.traceF( tin0P , T("[tLongFrom]:    ")+tLongFrom ) ;
                        etThread.traceF( tin0P , T("[tLongTo]:      ")+tLongTo ) ;
                        TN( tLongFrom , "" ) ; tLongFrom = tSharedFolderEventIncoming+tShort ;
                        TN( tLongTo   , "" ) ; tLongTo   = tFolderMyEvents+tShort ;
     
                        }
                            etThread.delF( tin0P , psttShort ) ;
                            tShort = T(psttShort) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShort , tIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                            ZE( strokeS* , psttShort ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShort , "" ) ;

                        TN( tIfoName , pInfo->psttIfoName ) ;
                        _IO_
                    {
                    if( !bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFind , tSharedFolderEventIncoming ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
        {

        }
            while( !etThread.diskMakeDirIfNeededF( tin0P , tFolderMyEvents ) ) ;                   // RETRY IF EXISTS ; EXISTS SHOULD BE IMPOSSIBLE, BUT THIS LOOP ENSURES THAT tFolderMyEvents IS UNIQUE AND NEWLY MADE
            }
                etThread.delF( tin0P , psttu ) ;
                tFolderMyEvents = tSharedFolderPrefix+T("incoming.events.")+T(psttu)+T("/") ;
                etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                ZE( strokeS* , psttu ) ;
            {
            do
        {
        TN( tFolderMyEvents , "" ) ;

                                                        cNewEvents ++ ;
                                                        etThread.diskFileOrDirDeleteF( tin0P , tFolderReady ) ;
                                                        etThread.diskMoveFileOrDirF( tin0P , tSharedFolderRawDone+tShortInner  , tFolderReady+tShortInner  ) ;
                                                        etThread.diskMoveFileOrDirF( tin0P , tSharedFolderRawDone+tShortMiddle , tFolderReady+tShortMiddle ) ;
                                                        etThread.diskMoveFileOrDirF( tin0P , tSharedFolderRawDone+tShortOuter  , tFolderReady+tShortOuter  ) ;

                                                        etThread.delF( tin0P , psttFile ) ;
                                                        etThread.boxPutUniqueF( tin0P , psttFile , tSharedFolderEventIncoming+tShortEvent , WS( sOut ) ) ;
                                                        ZE( strokeS* , psttFile ) ;

                                                        TN( tShortEvent , "" ) ; tShortEvent = T(bLive?"soul.event.live.":"soul.event.test.")+tEvent ;

                                                        boolT bLive = !etThread.strCompareF( tin0P , tValueOuterLive , T("true") ) ;

                                                        }
                                                            sOut << (strokeS*)tValueMiddleAmountDiscount     ;
                                                            sOut << (strokeS*)tValueMiddleAmountSubtotal     ;
                                                            sOut << (strokeS*)tValueMiddleAmountTotal        ;
                                                            sOut << (strokeS*)tValueMiddleCurrencyConversion ;
                                                            sOut << (strokeS*)tValueMiddleCurrency           ;
                                                            // VERSION 2

                                                            sOut << (strokeS*)tValueMiddleHawker             ;
                                                            sOut << (strokeS*)tValueMiddleAge                ;
                                                            sOut << (strokeS*)tValueMiddleName               ;
                                                            sOut << (strokeS*)tValueMiddleEmail              ;
                                                            sOut << (strokeS*)tValueMiddlePostalCode         ;
                                                            sOut << (strokeS*)tValueMiddleCountry            ;
                                                            sOut << (strokeS*)tValueMiddleIdSubscription     ;
                                                            sOut << (strokeS*)tValueOuterIdProduct           ;
                                                            sOut << (strokeS*)tValueOuterLive                ;
                                                            // VERSION 1

                                                            sOut << (strokeS*)tVersion                       ;
                                                            sOut << (strokeS*)tEvent                         ;
                                                        {
                                                        soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                                                        TN( tVersion   , "2" ) ;
                                                        TN( tEvent , "ipdos.subscription.create" ) ;

                                                            TN( tValueInnerAmountDiscount   , "" ) ;
                                                            TN( tValueInnerIdSubscription   , "" ) ;
                                                            TN( tValueInnerMode             , "" ) ;
                                                            TN( tValueInnerName             , "" ) ;
                                                            TN( tValueInnerEmail            , "" ) ;
                                                            TN( tValueInnerPostalCode       , "" ) ;
                                                            TN( tValueInnerCountry          , "" ) ;
                                                            TN( tValueInnerHawker           , "" ) ;
                                                            TN( tValueInnerAge              , "" ) ;
                                                            TN( tValueInnerAmountTotal      , "" ) ;
                                                            TN( tValueInnerAmountSubtotal   , "" ) ;
                                                            TN( tValueInnerApiVersion       , "" ) ;
                                                            TN( tValueInnerIdProduct        , "" ) ;
                                                            TN( tValueInnerStatus           , "" ) ;
                                                            TN( tValueInnerLatestInvoice    , "" ) ;
                                                            TN( tValueInnerStripeNoticeType , "" ) ;
                                                            TN( tValueInnerLive             , "" ) ;

                                        TN( tValueMiddleCurrencyConversion , "" ) ;
                                        TN( tValueMiddleCurrency           , "" ) ;
                                        TN( tValueMiddleAmountDiscount     , "" ) ;
                                        TN( tValueMiddleIdSubscription     , "" ) ;
                                        TN( tValueMiddleMode               , "" ) ;
                                        TN( tValueMiddleName               , "" ) ;
                                        TN( tValueMiddleEmail              , "" ) ;
                                        TN( tValueMiddlePostalCode         , "" ) ;
                                        TN( tValueMiddleCountry            , "" ) ;
                                        TN( tValueMiddleHawker             , "" ) ;
                                        TN( tValueMiddleAge                , "" ) ;
                                        TN( tValueMiddleAmountTotal        , "" ) ;
                                        TN( tValueMiddleAmountSubtotal     , "" ) ;
                                        TN( tValueMiddleApiVersion         , "" ) ;
                                        TN( tValueMiddleIdProduct          , "" ) ;
                                        TN( tValueMiddleInvoice            , "" ) ;
                                        TN( tValueMiddleStripeNoticeType   , "" ) ;
                                        TN( tValueMiddleLive               , "" ) ;

                        TN( tValueOuterAmountDiscount   , "" ) ;
                        TN( tValueOuterIdSubscription   , "" ) ;
                        TN( tValueOuterMode             , "" ) ;
                        TN( tValueOuterName             , "" ) ;
                        TN( tValueOuterEmail            , "" ) ;
                        TN( tValueOuterPostalCode       , "" ) ;
                        TN( tValueOuterCountry          , "" ) ;
                        TN( tValueOuterHawker           , "" ) ;
                        TN( tValueOuterAge              , "" ) ;
                        TN( tValueOuterAmountTotal      , "" ) ;
                        TN( tValueOuterAmountSubtotal   , "" ) ;
                        TN( tValueOuterApiVersion       , "" ) ;
                        TN( tValueOuterIdProduct        , "" ) ;

                        TN( tValueOuterStatus           , "" ) ;
                        TN( tValueOuterLatestInvoice    , "" ) ;
                        TN( tValueOuterStripeNoticeType , "" ) ;
                        TN( tValueOuterLive             , "" ) ;

        _IO_
    {
    while( !ether && !etThread )
    ZE( countT , idCycle ) ;
    TN( tStar  , "*" ) ;
    TN( tSlash , "/" ) ;

    ranUniC ruPassword( tin0P , (measure04T)MAXcOUNTT + 1 , processGlobal1S::_processGlobal1I_IF().trueRandom ) ;

    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventDone       ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventGorilla01  ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventRetryLater ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventIncoming   ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderRawSubDeleted   ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderRawDone         ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderRawRetryLater   ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderRawIncoming     ) ;

    TN( tValueWantedInnerStripeNoticeType      , "customer.subscription.updated" ) ;
    TN( tValueWantedMiddleStripeNoticeType     , "checkout.session.completed"    ) ;
    TN( tValueWantedOuterStripeNoticeType      , "customer.subscription.created" ) ;

    TN( tValueWantedSubRenewedStripeNoticeType , "customer.subscription.updated" ) ;
    TN( tValueWantedSubDeletedStripeNoticeType , "customer.subscription.deleted" ) ;

    TN( tn                       , ""                              ) ;
    TN( tb4                      , "    "                          ) ;
    TN( tcrlf                    , "\r\n"                          ) ;
    TN( tCorrectStripeNoticeType , "customer.subscription.created" ) ;
    TN( tCorrectApiVersion       , "2023-10-16"                    ) ;
    TN( tFalse                   , "false"                         ) ;
    TN( tTrue                    , "true"                          ) ;

    TN( tSharedFolderEventDone       , "" ) ; tSharedFolderEventDone       = tSharedFolderPrefix+T("events.4.done/"                     ) ;
    TN( tSharedFolderEventGorilla01  , "" ) ; tSharedFolderEventGorilla01  = tSharedFolderPrefix+T("events.3.gorilla01/"                ) ;
    TN( tSharedFolderEventRetryLater , "" ) ; tSharedFolderEventRetryLater = tSharedFolderPrefix+T("events.2.retry.later/"              ) ;
    TN( tSharedFolderEventIncoming   , "" ) ; tSharedFolderEventIncoming   = tSharedFolderPrefix+T("events.1.incoming/"                 ) ;
    TN( tSharedFolderRawDone         , "" ) ; tSharedFolderRawDone         = tSharedFolderPrefix+T("raw.notices.5.done/"                ) ;
    TN( tSharedFolderRawSubRenewed   , "" ) ; tSharedFolderRawSubRenewed   = tSharedFolderPrefix+T("raw.notices.4.subscription.renewed/") ;
    TN( tSharedFolderRawSubDeleted   , "" ) ; tSharedFolderRawSubDeleted   = tSharedFolderPrefix+T("raw.notices.3.subscription.deleted/") ;
    TN( tSharedFolderRawRetryLater   , "" ) ; tSharedFolderRawRetryLater   = tSharedFolderPrefix+T("raw.notices.2.retry.later/"         ) ;
    TN( tSharedFolderRawIncoming     , "" ) ; tSharedFolderRawIncoming     = tSharedFolderPrefix+T("raw.notices.1.incoming/"            ) ;
    TN( tSharedFolderPrefix          , "" ) ; tSharedFolderPrefix          = T("///z/ideafarm.shared/precious/")+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/") ;

#define flFAIL_UNKNOWNpRODUCT                   0xe01000ff
#define flFAIL_COULDnOTzAPrAW                   0xe00800ff
#define flFAIL_COULDnOTgEThMAC                  0xe00400ff
#define flFAIL_COULDnOTpUTrAW                   0xe00200ff
#define flFAIL_COULDnOTgETsHAREDsECRET          0xe00100ff
#define flFAIL_UNEXPECTEDaGEtOOyOUNG            0xe00080ff
#define flFAIL_UNEXPECTEDvERSION                0xe00010ff
#define flFAIL_UNEXPECTEDeVENT                  0xe00008ff
#define flFAIL_COULDnOTmOVEfILE                 0xe00004ff
#define flFAIL_COULDnOTgETsHADOW                0xe00002ff
#define flFAIL_UNKNOWNeRROR                     0xe00001ff


                        etThread.traceF( tin0P , T("[tLongFrom]:    ")+tLongFrom ) ;
                        etThread.traceF( tin0P , T("[tLongTo]:      ")+tLongTo ) ;
                        TN( tLongFrom , "" ) ; tLongFrom = tSharedFolderEventIncoming+tShort ;
                        TN( tLongTo   , "" ) ; tLongTo   = tFolderMyEvents+tShort ;

     

#if defined( NEVERdEFINED )
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************
// ***********************************************************************************************************************************************************************************************





































    }
break ;
        while( !ether && ~hFindModulo && !POOP ) ;
        }
            DEL( pInfo ) ;
            }
                }
                    while( !ether && ~hFindInvoice && !POOP ) ;
                    }
                        DEL( pInfo ) ;
                        }
                            }
                                }
                                    etThread.diskFileOrDirDeleteF( tin0P , tLongInvoiceMine , flFILEoRdIRdELETE_RECURSE ) ;

                                    }
                                        etThread.delF( tin0P , psttUpdatedAmountDiscount   ) ;
                                        etThread.delF( tin0P , psttUpdatedIdSubscription   ) ;
                                        etThread.delF( tin0P , psttUpdatedMode             ) ;
                                        etThread.delF( tin0P , psttUpdatedName             ) ;
                                        etThread.delF( tin0P , psttUpdatedEmail            ) ;
                                        etThread.delF( tin0P , psttUpdatedPostalCode       ) ;
                                        etThread.delF( tin0P , psttUpdatedCountry          ) ;
                                        etThread.delF( tin0P , psttUpdatedHawker           ) ;
                                        etThread.delF( tin0P , psttUpdatedAge              ) ;
                                        etThread.delF( tin0P , psttUpdatedAmountTotal      ) ;
                                        etThread.delF( tin0P , psttUpdatedAmountSubtotal   ) ;
                                        etThread.delF( tin0P , psttUpdatedApiVersion       ) ;
                                        etThread.delF( tin0P , psttUpdatedIdProduct        ) ;
                                        etThread.delF( tin0P , psttUpdatedStatus           ) ;
                                        etThread.delF( tin0P , psttUpdatedLatestInvoice    ) ;
                                        etThread.delF( tin0P , psttUpdatedStripeNoticeType ) ;
                                        etThread.delF( tin0P , psttUpdatedLive             ) ;
                                        etThread.delF( tin0P , psttUpdatedVersion               ) ;
                                        etThread.delF( tin0P , psttUpdatedEvent                 ) ;

                                        etThread.delF( tin0P , psttCreatedAmountDiscount   ) ;
                                        etThread.delF( tin0P , psttCreatedIdSubscription   ) ;
                                        etThread.delF( tin0P , psttCreatedMode             ) ;
                                        etThread.delF( tin0P , psttCreatedName             ) ;
                                        etThread.delF( tin0P , psttCreatedEmail            ) ;
                                        etThread.delF( tin0P , psttCreatedPostalCode       ) ;
                                        etThread.delF( tin0P , psttCreatedCountry          ) ;
                                        etThread.delF( tin0P , psttCreatedHawker           ) ;
                                        etThread.delF( tin0P , psttCreatedAge              ) ;
                                        etThread.delF( tin0P , psttCreatedAmountTotal      ) ;
                                        etThread.delF( tin0P , psttCreatedAmountSubtotal   ) ;
                                        etThread.delF( tin0P , psttCreatedApiVersion       ) ;
                                        etThread.delF( tin0P , psttCreatedIdProduct        ) ;
                                        etThread.delF( tin0P , psttCreatedStatus           ) ;
                                        etThread.delF( tin0P , psttCreatedLatestInvoice    ) ;
                                        etThread.delF( tin0P , psttCreatedStripeNoticeType ) ;
                                        etThread.delF( tin0P , psttCreatedLive             ) ;
                                        etThread.delF( tin0P , psttCreatedVersion               ) ;
                                        etThread.delF( tin0P , psttCreatedEvent                 ) ;

                                        etThread.delF( tin0P , psttPaidCurrencyConversion ) ;
                                        etThread.delF( tin0P , psttPaidCurrency           ) ;
                                        etThread.delF( tin0P , psttPaidAmountDiscount     ) ;
                                        etThread.delF( tin0P , psttPaidIdSubscription     ) ;
                                        etThread.delF( tin0P , psttPaidMode               ) ;
                                        etThread.delF( tin0P , psttPaidName               ) ;
                                        etThread.delF( tin0P , psttPaidEmail              ) ;
                                        etThread.delF( tin0P , psttPaidPostalCode         ) ;
                                        etThread.delF( tin0P , psttPaidCountry            ) ;
                                        etThread.delF( tin0P , psttPaidHawker             ) ;
                                        etThread.delF( tin0P , psttPaidAge                ) ;
                                        etThread.delF( tin0P , psttPaidAmountTotal        ) ;
                                        etThread.delF( tin0P , psttPaidAmountSubtotal     ) ;
                                        etThread.delF( tin0P , psttPaidApiVersion         ) ;
                                        etThread.delF( tin0P , psttPaidIdProduct          ) ;
                                        etThread.delF( tin0P , psttPaidInvoice            ) ;
                                        etThread.delF( tin0P , psttPaidStripeNoticeType   ) ;
                                        etThread.delF( tin0P , psttPaidLive               ) ;
                                        etThread.delF( tin0P , psttPaidVersion                 ) ;
                                        etThread.delF( tin0P , psttPaidEvent                   ) ;

                                        }
                                            etThread.delF( tin0P , psttFile ) ;
                                            etThread.boxPutUniqueF( tin0P , psttFile , ( bLive ? tFolderEventsIncomingPrecious : tFolderEventsIncomingSandbox ) + T("event.@1@.soulC") , WS( sOut ) ) ;
                                            ZE( strokeS* , psttFile ) ;

                                            TN( tShortEvent , "" ) ; tShortEvent = T(bLive?"soul.event.live.":"soul.event.test.")+tEvent ;

                                            boolT bLive = !etThread.strCompareF( tin0P , psttCreatedLive , T("true") ) ;

                                            }
                                                sOut << psttPaidAmountDiscount     ;
                                                sOut << psttPaidAmountSubtotal     ;
                                                sOut << psttPaidAmountTotal        ;
                                                sOut << psttPaidCurrencyConversion ;
                                                sOut << psttPaidCurrency           ;
                                                // VERSION 2

                                                sOut << psttPaidHawker             ;
                                                sOut << psttPaidAge                ;
                                                sOut << psttPaidName               ;
                                                sOut << psttPaidEmail              ;
                                                sOut << psttPaidPostalCode         ;
                                                sOut << psttPaidCountry            ;
                                                sOut << psttPaidIdSubscription     ;
                                                sOut << psttCreatedIdProduct       ;
                                                sOut << psttCreatedLive            ;
                                                // VERSION 1

                                                sOut << (strokeS*)tVersion         ;
                                                sOut << (strokeS*)tEvent           ;
                                            {
                                            soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                                            TN( tVersion   , "2" ) ;
                                            TN( tEvent , "ipdos.subscription.create" ) ;
                                        {

                                        sInUpdated >> psttUpdatedAmountDiscount   ; ___( psttUpdatedAmountDiscount   ) ;
                                        sInUpdated >> psttUpdatedIdSubscription   ; ___( psttUpdatedIdSubscription   ) ;
                                        sInUpdated >> psttUpdatedMode             ; ___( psttUpdatedMode             ) ;
                                        sInUpdated >> psttUpdatedName             ; ___( psttUpdatedName             ) ;
                                        sInUpdated >> psttUpdatedEmail            ; ___( psttUpdatedEmail            ) ;
                                        sInUpdated >> psttUpdatedPostalCode       ; ___( psttUpdatedPostalCode       ) ;
                                        sInUpdated >> psttUpdatedCountry          ; ___( psttUpdatedCountry          ) ;
                                        sInUpdated >> psttUpdatedHawker           ; ___( psttUpdatedHawker           ) ;
                                        sInUpdated >> psttUpdatedAge              ; ___( psttUpdatedAge              ) ;
                                        sInUpdated >> psttUpdatedAmountTotal      ; ___( psttUpdatedAmountTotal      ) ;
                                        sInUpdated >> psttUpdatedAmountSubtotal   ; ___( psttUpdatedAmountSubtotal   ) ;
                                        sInUpdated >> psttUpdatedApiVersion       ; ___( psttUpdatedApiVersion       ) ;
                                        sInUpdated >> psttUpdatedIdProduct        ; ___( psttUpdatedIdProduct        ) ;
                                        sInUpdated >> psttUpdatedStatus           ; ___( psttUpdatedStatus           ) ;
                                        sInUpdated >> psttUpdatedLatestInvoice    ; ___( psttUpdatedLatestInvoice    ) ;
                                        sInUpdated >> psttUpdatedStripeNoticeType ; ___( psttUpdatedStripeNoticeType ) ;
                                        sInUpdated >> psttUpdatedLive             ; ___( psttUpdatedLive             ) ;
                                        sInUpdated >> psttUpdatedVersion               ; ___( psttUpdatedVersion               ) ;
                                        sInUpdated >> psttUpdatedEvent                 ; ___( psttUpdatedEvent                 ) ;

                                        sInCreated >> psttCreatedAmountDiscount   ; ___( psttCreatedAmountDiscount   ) ;
                                        sInCreated >> psttCreatedIdSubscription   ; ___( psttCreatedIdSubscription   ) ;
                                        sInCreated >> psttCreatedMode             ; ___( psttCreatedMode             ) ;
                                        sInCreated >> psttCreatedName             ; ___( psttCreatedName             ) ;
                                        sInCreated >> psttCreatedEmail            ; ___( psttCreatedEmail            ) ;
                                        sInCreated >> psttCreatedPostalCode       ; ___( psttCreatedPostalCode       ) ;
                                        sInCreated >> psttCreatedCountry          ; ___( psttCreatedCountry          ) ;
                                        sInCreated >> psttCreatedHawker           ; ___( psttCreatedHawker           ) ;
                                        sInCreated >> psttCreatedAge              ; ___( psttCreatedAge              ) ;
                                        sInCreated >> psttCreatedAmountTotal      ; ___( psttCreatedAmountTotal      ) ;
                                        sInCreated >> psttCreatedAmountSubtotal   ; ___( psttCreatedAmountSubtotal   ) ;
                                        sInCreated >> psttCreatedApiVersion       ; ___( psttCreatedApiVersion       ) ;
                                        sInCreated >> psttCreatedIdProduct        ; ___( psttCreatedIdProduct        ) ;
                                        sInCreated >> psttCreatedStatus           ; ___( psttCreatedStatus           ) ;
                                        sInCreated >> psttCreatedLatestInvoice    ; ___( psttCreatedLatestInvoice    ) ;
                                        sInCreated >> psttCreatedStripeNoticeType ; ___( psttCreatedStripeNoticeType ) ;
                                        sInCreated >> psttCreatedLive             ; ___( psttCreatedLive             ) ;
                                        sInCreated >> psttCreatedVersion               ; ___( psttCreatedVersion               ) ;
                                        sInCreated >> psttCreatedEvent                 ; ___( psttCreatedEvent                 ) ;

                                        sInPaid >> psttPaidCurrencyConversion ; ___( psttPaidCurrencyConversion ) ;
                                        sInPaid >> psttPaidCurrency           ; ___( psttPaidCurrency           ) ;
                                        sInPaid >> psttPaidAmountDiscount     ; ___( psttPaidAmountDiscount     ) ;
                                        sInPaid >> psttPaidIdSubscription     ; ___( psttPaidIdSubscription     ) ;
                                        sInPaid >> psttPaidMode               ; ___( psttPaidMode               ) ;
                                        sInPaid >> psttPaidName               ; ___( psttPaidName               ) ;
                                        sInPaid >> psttPaidEmail              ; ___( psttPaidEmail              ) ;
                                        sInPaid >> psttPaidPostalCode         ; ___( psttPaidPostalCode         ) ;
                                        sInPaid >> psttPaidCountry            ; ___( psttPaidCountry            ) ;
                                        sInPaid >> psttPaidHawker             ; ___( psttPaidHawker             ) ;
                                        sInPaid >> psttPaidAge                ; ___( psttPaidAge                ) ;
                                        sInPaid >> psttPaidAmountTotal        ; ___( psttPaidAmountTotal        ) ;
                                        sInPaid >> psttPaidAmountSubtotal     ; ___( psttPaidAmountSubtotal     ) ;
                                        sInPaid >> psttPaidApiVersion         ; ___( psttPaidApiVersion         ) ;
                                        sInPaid >> psttPaidIdProduct          ; ___( psttPaidIdProduct          ) ;
                                        sInPaid >> psttPaidInvoice            ; ___( psttPaidInvoice            ) ;
                                        sInPaid >> psttPaidStripeNoticeType   ; ___( psttPaidStripeNoticeType   ) ;
                                        sInPaid >> psttPaidLive               ; ___( psttPaidLive               ) ;
                                        sInPaid >> psttPaidVersion                 ; ___( psttPaidVersion                 ) ;
                                        sInPaid >> psttPaidEvent                   ; ___( psttPaidEvent                   ) ;

                                        ZE( strokeS* , psttUpdatedAmountDiscount    ) ;
                                        ZE( strokeS* , psttUpdatedIdSubscription    ) ;
                                        ZE( strokeS* , psttUpdatedMode              ) ;
                                        ZE( strokeS* , psttUpdatedName              ) ;
                                        ZE( strokeS* , psttUpdatedEmail             ) ;
                                        ZE( strokeS* , psttUpdatedPostalCode        ) ;
                                        ZE( strokeS* , psttUpdatedCountry           ) ;
                                        ZE( strokeS* , psttUpdatedHawker            ) ;
                                        ZE( strokeS* , psttUpdatedAge               ) ;
                                        ZE( strokeS* , psttUpdatedAmountTotal       ) ;
                                        ZE( strokeS* , psttUpdatedAmountSubtotal    ) ;
                                        ZE( strokeS* , psttUpdatedApiVersion        ) ;
                                        ZE( strokeS* , psttUpdatedIdProduct         ) ;
                                        ZE( strokeS* , psttUpdatedStatus            ) ;
                                        ZE( strokeS* , psttUpdatedLatestInvoice     ) ;
                                        ZE( strokeS* , psttUpdatedStripeNoticeType  ) ;
                                        ZE( strokeS* , psttUpdatedLive              ) ;
                                        ZE( strokeS* , psttUpdatedVersion                ) ;
                                        ZE( strokeS* , psttUpdatedEvent                  ) ;

                                        ZE( strokeS* , psttCreatedAmountDiscount   ) ;
                                        ZE( strokeS* , psttCreatedIdSubscription   ) ;
                                        ZE( strokeS* , psttCreatedMode             ) ;
                                        ZE( strokeS* , psttCreatedName             ) ;
                                        ZE( strokeS* , psttCreatedEmail            ) ;
                                        ZE( strokeS* , psttCreatedPostalCode       ) ;
                                        ZE( strokeS* , psttCreatedCountry          ) ;
                                        ZE( strokeS* , psttCreatedHawker           ) ;
                                        ZE( strokeS* , psttCreatedAge              ) ;
                                        ZE( strokeS* , psttCreatedAmountTotal      ) ;
                                        ZE( strokeS* , psttCreatedAmountSubtotal   ) ;
                                        ZE( strokeS* , psttCreatedApiVersion       ) ;
                                        ZE( strokeS* , psttCreatedIdProduct        ) ;
                                        ZE( strokeS* , psttCreatedStatus           ) ;
                                        ZE( strokeS* , psttCreatedLatestInvoice    ) ;
                                        ZE( strokeS* , psttCreatedStripeNoticeType ) ;
                                        ZE( strokeS* , psttCreatedLive             ) ;
                                        ZE( strokeS* , psttCreatedVersion               ) ;
                                        ZE( strokeS* , psttCreatedEvent                 ) ;

                                        ZE( strokeS* , psttPaidCurrencyConversion ) ;
                                        ZE( strokeS* , psttPaidCurrency           ) ;
                                        ZE( strokeS* , psttPaidAmountDiscount     ) ;
                                        ZE( strokeS* , psttPaidIdSubscription     ) ;
                                        ZE( strokeS* , psttPaidMode               ) ;
                                        ZE( strokeS* , psttPaidName               ) ;
                                        ZE( strokeS* , psttPaidEmail              ) ;
                                        ZE( strokeS* , psttPaidPostalCode         ) ;
                                        ZE( strokeS* , psttPaidCountry            ) ;
                                        ZE( strokeS* , psttPaidHawker             ) ;
                                        ZE( strokeS* , psttPaidAge                ) ;
                                        ZE( strokeS* , psttPaidAmountTotal        ) ;
                                        ZE( strokeS* , psttPaidAmountSubtotal     ) ;
                                        ZE( strokeS* , psttPaidApiVersion         ) ;
                                        ZE( strokeS* , psttPaidIdProduct          ) ;
                                        ZE( strokeS* , psttPaidInvoice            ) ;
                                        ZE( strokeS* , psttPaidStripeNoticeType   ) ;
                                        ZE( strokeS* , psttPaidLive               ) ;
                                        ZE( strokeS* , psttPaidVersion                 ) ;
                                        ZE( strokeS* , psttPaidEvent                   ) ;

                                        etThread.traceF( tin0P , T("doing the deed with ")+tLongInvoiceMine ) ;
                                    {
                                    if( !cFail )

                                    }
                                        }
                                            }
                                                }
                                                    etThread.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongUpdated ) ;
                                                    cFail ++ ;
                                                    POOPR ;
                                                {
                                                if( POOP )
                                                ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInUpdated , tLongUpdated , 1 ) ;
                                                SCOOPS
                                            {
                                            IFsCRATCHoK

                                            }
                                                }
                                                    etThread.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongCreated ) ;
                                                    cFail ++ ;
                                                    POOPR ;
                                                {
                                                if( POOP )
                                                ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInCreated , tLongCreated , 1 ) ;
                                                SCOOPS
                                            {
                                            IFsCRATCHoK

                                            }
                                                }
                                                    etThread.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongPaid ) ;
                                                    cFail ++ ;
                                                    POOPR ;
                                                {
                                                if( POOP )
                                                ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInPaid , tLongPaid , 1 ) ;
                                                SCOOPS
                                            {
                                            IFsCRATCHoK

                                            TN( tLongUpdated , "" ) ; tLongUpdated = tLongInvoiceMine+tShortWantUpdated ;
                                            TN( tLongCreated , "" ) ; tLongCreated = tLongInvoiceMine+tShortWantCreated ;
                                            TN( tLongPaid    , "" ) ; tLongPaid    = tLongInvoiceMine+tShortWantPaid    ;
                                        {
                                        else
                                        }
                                            etThread.traceF( tin0P , T("collision / could not rename to mine [tLongInvoice]:    ")+tLongInvoice ) ;
                                            POOPRqUIET ;
                                        {
                                        if( POOP )
                                        ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongInvoiceMine , tLongInvoice , 1 ) ;
                                        SCOOPS
                                    {
                                    IFsCRATCHoK
                                    soulC sInUpdated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                    soulC sInCreated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                    soulC sInPaid(    tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                    ZE( countT , cFail ) ;
                                {
                                if( bReady )

                                ;
                                    && etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantUpdated )
                                    && etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantCreated )
                                       etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantPaid    )
                                boolT bReady =

                                }
                                    etThread.delF( tin0P , psttu ) ;
                                    tLongInvoiceMine = tLongModulo+T("eating.")+T(psttu)+tSlash ;
                                    etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                    ZE( strokeS* , psttu ) ;
                                {
                                TN( tLongInvoiceMine , "" ) ;

                                etThread.traceF( tin0P , T("[tShortInvoice]:      ")+tShortInvoice ) ;
                                }
                                    etThread.delF( tin0P , psttShortInvoice ) ;
                                    tShortInvoice = T(psttShortInvoice) ;
                                    etThread.delF( tin0P , psttnu ) ;
                                    etThread.strBisectF( tin0P , psttnu , psttShortInvoice , tLongInvoice , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortInvoice ) ;
                                    ZE( strokeS* , psttShortInvoice ) ;
                                    ZE( strokeS* , psttnu ) ;
                                {
                                TN( tShortInvoice , "" ) ;

                                TN( tLongInvoice , pInfo->psttIfoName ) ;
                                _IO_
                            {
                            if( bDir )

                            const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                            _IO_
                        {
                        else
                        }
                            break ;
                            DEL( pInfo ) ;
                        {
                        if( !pInfo || !pInfo->psttIfoName )

                        etThread.diskFindFileOrDirF( tin0P , pInfo , hFindInvoice , tLongModulo , &patInvoice ) ;
                        ZE( infoFileS* , pInfo ) ;
                        _IO_
                    {
                    do
                    handleC hFindInvoice( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                    etThread.traceF( tin0P , T("[tShortModulo]:      ")+tShortModulo ) ;
                    }
                        etThread.delF( tin0P , psttShortModulo ) ;
                        tShortModulo = T(psttShortModulo) ;
                        etThread.delF( tin0P , psttnu ) ;
                        etThread.strBisectF( tin0P , psttnu , psttShortModulo , tLongModulo , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortModulo ) ;
                        ZE( strokeS* , psttShortModulo ) ;
                        ZE( strokeS* , psttnu ) ;
                    {
                    TN( tShortModulo , "" ) ;
                    TN( tLongModulo , pInfo->psttIfoName ) ;
                    _IO_
                {
                if( bDir )

                const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                _IO_
            {
            else
            }
                break ;
                DEL( pInfo ) ;
            {
            if( !pInfo || !pInfo->psttIfoName )

            etThread.diskFindFileOrDirF( tin0P , pInfo , hFindModulo , tRoot ) ;
            ZE( infoFileS* , pInfo ) ;
            _IO_
        {
        do
        handleC hFindModulo( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    {
    while( !ether )

    TN( tShortWantUpdated , "sub.updated.soulC"        ) ;
    TN( tShortWantCreated , "sub.created.soulC"        ) ;
    TN( tShortWantPaid    , "checkout.completed.soulC" ) ;

    patternC patInvoice( tin0P , etThread , tPatternInvoice , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
    TN( tPatternInvoice , "new.*" ) ;

    TN( tRoot , "///z/ideafarm.shared/sandbox/5100088f/test/sub.created/" ) ;
    TN( tSlash , "/" ) ;

    TN( tFolderEventsIncomingPrecious , "///z/ideafarm.shared/precious/5100088f/events.incoming/" ) ;
    TN( tFolderEventsIncomingSandbox , "///z/ideafarm.shared/sandbox/5100088f/events.incoming/" ) ;

    _IO_
{
if( pTaskP )
TASK( tmWorkF )

// CONTAINS COMMENTED OUT CODE TO MIGRATE TO A NEW EVENT EATER ADAM
// EMITS INCOMING EVENTS (soulC FILES)
// BASELINE: 880_ ; I AM A REWRITE OF THE EVENT PORTION OF 880_ ; UNLIKE 880_, I TAKE MY INPUT FROM INVOICE FOLDERS, EACH CONTAINING 3 soulC FILES

/*1*/WAKEhIDE( "ifcIDaDAM_ADMINISTRATOR" )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
