
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    etherC::loafIF( tin0P ) ;

    }
        ++ s ; ether.osSleepF( tin0P , TOCK ) ;

        }
            while( !ether && ~hFindModulo && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        while( !ether && ~hFindInvoice && !POOP ) ;
                        }
                            DEL( pInfo ) ;
                            }
                                }
                                    }
                                        etThread.diskFileOrDirDeleteF( tin0P , tLongInvoiceMine , flFILEoRdIRdELETE_RECURSE ) ;

                                        }
                                            etThread.delF( tin0P , psttUpdatedAmountDiscount   ) ;
                                            etThread.delF( tin0P , psttUpdatedIdSubscription   ) ;
                                            etThread.delF( tin0P , psttUpdatedMode             ) ;
                                            etThread.delF( tin0P , psttUpdatedName             ) ;
                                            etThread.delF( tin0P , psttUpdatedEmail            ) ;
                                            etThread.delF( tin0P , psttUpdatedPostalCode       ) ;
                                            etThread.delF( tin0P , psttUpdatedCountry          ) ;
                                            etThread.delF( tin0P , psttUpdatedHawker           ) ;
                                            etThread.delF( tin0P , psttUpdatedAge              ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountTotal      ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountSubtotal   ) ;
                                            etThread.delF( tin0P , psttUpdatedApiVersion       ) ;
                                            etThread.delF( tin0P , psttUpdatedIdProduct        ) ;
                                            etThread.delF( tin0P , psttUpdatedStatus           ) ;
                                            etThread.delF( tin0P , psttUpdatedLatestInvoice    ) ;
                                            etThread.delF( tin0P , psttUpdatedStripeNoticeType ) ;
                                            etThread.delF( tin0P , psttUpdatedLive             ) ;
                                            etThread.delF( tin0P , psttUpdatedNnPeer           ) ;
                                            etThread.delF( tin0P , psttUpdatedVersion          ) ;
                                            etThread.delF( tin0P , psttUpdatedEvent            ) ;

                                            }
                                                etThread.delF( tin0P , psttFile ) ;
                                                etThread.boxPutUniqueF( tin0P , psttFile , ( bLive ? tFolderEventsIncomingPrecious : tFolderEventsIncomingSandbox ) + T("event.@1@.soulC") , WS( sOut ) ) ;
                                                ZE( strokeS* , psttFile ) ;

                                                TN( tShortEvent , "" ) ; tShortEvent = T(bLive?"soul.event.live.":"soul.event.test.")+tEvent ;

                                                boolT bLive = psttUpdatedLive && !etThread.strCompareF( tin0P , psttUpdatedLive , T("true") ) ;

                                                }
                                                    sOut << psttUpdatedAmountDiscount     ;
                                                    sOut << psttUpdatedAmountSubtotal     ;
                                                    sOut << psttUpdatedAmountTotal        ;
                                                    sOut << psttUpdatedHawker             ;
                                                    sOut << psttUpdatedAge                ;
                                                    sOut << psttUpdatedName               ;
                                                    sOut << psttUpdatedEmail              ;
                                                    sOut << psttUpdatedPostalCode         ;
                                                    sOut << psttUpdatedCountry            ;
                                                    sOut << psttUpdatedIdSubscription     ;
                                                    sOut << psttUpdatedIdProduct          ;
                                                    sOut << psttUpdatedLive               ;
                                                    sOut << psttUpdatedNnPeer             ;
                                                    // VERSION 1

                                                    sOut << (strokeS*)tVersion         ;
                                                    sOut << (strokeS*)tEvent           ;
                                                {
                                                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                                                TN( tVersion   , "1" ) ;
                                                TN( tEvent , "ipdos.subscription.delete" ) ;
                                            {

                                            sInUpdated >> psttUpdatedAmountDiscount   ; ___( psttUpdatedAmountDiscount   ) ;
                                            sInUpdated >> psttUpdatedIdSubscription   ; ___( psttUpdatedIdSubscription   ) ;
                                            sInUpdated >> psttUpdatedMode             ; ___( psttUpdatedMode             ) ;
                                            sInUpdated >> psttUpdatedName             ; ___( psttUpdatedName             ) ;
                                            sInUpdated >> psttUpdatedEmail            ; ___( psttUpdatedEmail            ) ;
                                            sInUpdated >> psttUpdatedPostalCode       ; ___( psttUpdatedPostalCode       ) ;
                                            sInUpdated >> psttUpdatedCountry          ; ___( psttUpdatedCountry          ) ;
                                            sInUpdated >> psttUpdatedHawker           ; ___( psttUpdatedHawker           ) ;
                                            sInUpdated >> psttUpdatedAge              ; ___( psttUpdatedAge              ) ;
                                            sInUpdated >> psttUpdatedAmountTotal      ; ___( psttUpdatedAmountTotal      ) ;
                                            sInUpdated >> psttUpdatedAmountSubtotal   ; ___( psttUpdatedAmountSubtotal   ) ;
                                            sInUpdated >> psttUpdatedApiVersion       ; ___( psttUpdatedApiVersion       ) ;
                                            sInUpdated >> psttUpdatedIdProduct        ; ___( psttUpdatedIdProduct        ) ;
                                            sInUpdated >> psttUpdatedStatus           ; ___( psttUpdatedStatus           ) ;
                                            sInUpdated >> psttUpdatedLatestInvoice    ; ___( psttUpdatedLatestInvoice    ) ;
                                            sInUpdated >> psttUpdatedStripeNoticeType ; ___( psttUpdatedStripeNoticeType ) ;
                                            sInUpdated >> psttUpdatedLive             ; ___( psttUpdatedLive             ) ;
                                            sInUpdated >> psttUpdatedNnPeer           ; ___( psttUpdatedNnPeer           ) ;
                                            sInUpdated >> psttUpdatedVersion          ; ___( psttUpdatedVersion          ) ;
                                            sInUpdated >> psttUpdatedEvent            ; ___( psttUpdatedEvent            ) ;

                                            ZE( strokeS* , psttUpdatedAmountDiscount   ) ;
                                            ZE( strokeS* , psttUpdatedIdSubscription   ) ;
                                            ZE( strokeS* , psttUpdatedMode             ) ;
                                            ZE( strokeS* , psttUpdatedName             ) ;
                                            ZE( strokeS* , psttUpdatedEmail            ) ;
                                            ZE( strokeS* , psttUpdatedPostalCode       ) ;
                                            ZE( strokeS* , psttUpdatedCountry          ) ;
                                            ZE( strokeS* , psttUpdatedHawker           ) ;
                                            ZE( strokeS* , psttUpdatedAge              ) ;
                                            ZE( strokeS* , psttUpdatedAmountTotal      ) ;
                                            ZE( strokeS* , psttUpdatedAmountSubtotal   ) ;
                                            ZE( strokeS* , psttUpdatedApiVersion       ) ;
                                            ZE( strokeS* , psttUpdatedIdProduct        ) ;
                                            ZE( strokeS* , psttUpdatedStatus           ) ;
                                            ZE( strokeS* , psttUpdatedLatestInvoice    ) ;
                                            ZE( strokeS* , psttUpdatedStripeNoticeType ) ;
                                            ZE( strokeS* , psttUpdatedLive             ) ;
                                            ZE( strokeS* , psttUpdatedNnPeer           ) ;
                                            ZE( strokeS* , psttUpdatedVersion          ) ;
                                            ZE( strokeS* , psttUpdatedEvent            ) ;

                                            //etRock.traceF( tin0P , T("doing the deed with ")+tLongInvoiceMine ) ;
                                        {
                                        if( !cFail )

                                        }
                                            }
                                                }
                                                    }
                                                        etRock.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongUpdated ) ;
                                                        cFail ++ ;
                                                        POOPR ;
                                                    {
                                                    if( POOP )
                                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInUpdated , tLongUpdated , 1 ) ;
                                                    SCOOPS
                                                {
                                                IFsCRATCHoK

                                                TN( tLongUpdated , "" ) ; tLongUpdated = tLongInvoiceMine+tShortWantNewUpdated ;
                                            {
                                            else
                                            }
                                                etRock.traceF( tin0P , T("collision / could not rename to mine [tLongInvoice]:    ")+tLongInvoice ) ;
                                                POOPRqUIET ;
                                            {
                                            if( POOP )
                                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongInvoiceMine , tLongInvoice , 1 ) ;
                                            SCOOPS
                                        {
                                        IFsCRATCHoK
                                        soulC sInUpdated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                        ZE( countT , cFail ) ;
                                    {
                                    if( bReady )

                                    boolT bReady = etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantOldUpdated ) ;

                                    }
                                        etThread.delF( tin0P , psttu ) ;
                                        tLongInvoiceMine = tLongModulo+T("eating.")+T(psttu)+tSlash ;
                                        etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                        ZE( strokeS* , psttu ) ;
                                    {
                                    TN( tLongInvoiceMine , "" ) ;

                                    //etRock.traceF( tin0P , T("[tShortInvoice]:      ")+tShortInvoice ) ;
                                    }
                                        etThread.delF( tin0P , psttShortInvoice ) ;
                                        tShortInvoice = T(psttShortInvoice) ;
                                        etThread.delF( tin0P , psttnu ) ;
                                        etThread.strBisectF( tin0P , psttnu , psttShortInvoice , tLongInvoice , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortInvoice ) ;
                                        ZE( strokeS* , psttShortInvoice ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    TN( tShortInvoice , "" ) ;

                                    TN( tLongInvoice , pInfo->psttIfoName ) ;
                                    _IO_
                                {
                                if( bDir )

                                const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                                _IO_
                            {
                            else
                            }
                                break ;
                                DEL( pInfo ) ;
                            {
                            if( !pInfo || !pInfo->psttIfoName )

                            etThread.diskFindFileOrDirF( tin0P , pInfo , hFindInvoice , tLongModulo , &patNewDotStar ) ;
                            ZE( infoFileS* , pInfo ) ;
                            _IO_
                        {
                        do
                        handleC hFindInvoice( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                        //etRock.traceF( tin0P , T("[tShortModulo]:      ")+tShortModulo ) ;
                        }
                            etThread.delF( tin0P , psttShortModulo ) ;
                            tShortModulo = T(psttShortModulo) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShortModulo , tLongModulo , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortModulo ) ;
                            ZE( strokeS* , psttShortModulo ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShortModulo , "" ) ;
                        TN( tLongModulo , pInfo->psttIfoName ) ;
                        _IO_
                    {
                    if( bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFindModulo , tFolder ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFindModulo( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            textC& tFolder = *pptRootIncomingNoticesSubDeleted[ offf ] ;
            _IO_
        {
        for( countT offf = 0 ; offf < sizeof pptRootIncomingNoticesSubDeleted / sizeof pptRootIncomingNoticesSubDeleted[ 0 ] ; offf ++ )

        }
            while( !ether && ~hFindModulo && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        while( !ether && ~hFindInvoice && !POOP ) ;
                        }
                            DEL( pInfo ) ;
                            }
                                }
                                    }
                                        etThread.diskFileOrDirDeleteF( tin0P , tLongInvoiceMine , flFILEoRdIRdELETE_RECURSE ) ;

                                        }
                                            etThread.delF( tin0P , psttUpdatedAmountDiscount   ) ;
                                            etThread.delF( tin0P , psttUpdatedIdSubscription   ) ;
                                            etThread.delF( tin0P , psttUpdatedMode             ) ;
                                            etThread.delF( tin0P , psttUpdatedName             ) ;
                                            etThread.delF( tin0P , psttUpdatedEmail            ) ;
                                            etThread.delF( tin0P , psttUpdatedPostalCode       ) ;
                                            etThread.delF( tin0P , psttUpdatedCountry          ) ;
                                            etThread.delF( tin0P , psttUpdatedHawker           ) ;
                                            etThread.delF( tin0P , psttUpdatedAge              ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountTotal      ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountSubtotal   ) ;
                                            etThread.delF( tin0P , psttUpdatedApiVersion       ) ;
                                            etThread.delF( tin0P , psttUpdatedIdProduct        ) ;
                                            etThread.delF( tin0P , psttUpdatedStatus           ) ;
                                            etThread.delF( tin0P , psttUpdatedLatestInvoice    ) ;
                                            etThread.delF( tin0P , psttUpdatedStripeNoticeType ) ;
                                            etThread.delF( tin0P , psttUpdatedLive             ) ;
                                            etThread.delF( tin0P , psttUpdatedNnPeer           ) ;
                                            etThread.delF( tin0P , psttUpdatedVersion          ) ;
                                            etThread.delF( tin0P , psttUpdatedEvent            ) ;

                                            }
                                                etThread.delF( tin0P , psttFile ) ;
                                                etThread.boxPutUniqueF( tin0P , psttFile , ( bLive ? tFolderEventsIncomingPrecious : tFolderEventsIncomingSandbox ) + T("event.@1@.soulC") , WS( sOut ) ) ;
                                                ZE( strokeS* , psttFile ) ;

                                                TN( tShortEvent , "" ) ; tShortEvent = T(bLive?"soul.event.live.":"soul.event.test.")+tEvent ;

                                                boolT bLive = psttUpdatedLive && !etThread.strCompareF( tin0P , psttUpdatedLive , T("true") ) ;

                                                }
                                                    sOut << psttUpdatedAmountDiscount     ;
                                                    sOut << psttUpdatedAmountSubtotal     ;
                                                    sOut << psttUpdatedAmountTotal        ;
                                                    sOut << psttUpdatedHawker             ;
                                                    sOut << psttUpdatedAge                ;
                                                    sOut << psttUpdatedName               ;
                                                    sOut << psttUpdatedEmail              ;
                                                    sOut << psttUpdatedPostalCode         ;
                                                    sOut << psttUpdatedCountry            ;
                                                    sOut << psttUpdatedIdSubscription     ;
                                                    sOut << psttUpdatedIdProduct          ;
                                                    sOut << psttUpdatedLive               ;
                                                    sOut << psttUpdatedNnPeer             ;
                                                    // VERSION 1

                                                    sOut << (strokeS*)tVersion         ;
                                                    sOut << (strokeS*)tEvent           ;
                                                {
                                                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                                                TN( tVersion   , "1" ) ;
                                                TN( tEvent , "ipdos.subscription.renew" ) ;
                                            {

                                            sInUpdated >> psttUpdatedAmountDiscount   ; ___( psttUpdatedAmountDiscount   ) ;
                                            sInUpdated >> psttUpdatedIdSubscription   ; ___( psttUpdatedIdSubscription   ) ;
                                            sInUpdated >> psttUpdatedMode             ; ___( psttUpdatedMode             ) ;
                                            sInUpdated >> psttUpdatedName             ; ___( psttUpdatedName             ) ;
                                            sInUpdated >> psttUpdatedEmail            ; ___( psttUpdatedEmail            ) ;
                                            sInUpdated >> psttUpdatedPostalCode       ; ___( psttUpdatedPostalCode       ) ;
                                            sInUpdated >> psttUpdatedCountry          ; ___( psttUpdatedCountry          ) ;
                                            sInUpdated >> psttUpdatedHawker           ; ___( psttUpdatedHawker           ) ;
                                            sInUpdated >> psttUpdatedAge              ; ___( psttUpdatedAge              ) ;
                                            sInUpdated >> psttUpdatedAmountTotal      ; ___( psttUpdatedAmountTotal      ) ;
                                            sInUpdated >> psttUpdatedAmountSubtotal   ; ___( psttUpdatedAmountSubtotal   ) ;
                                            sInUpdated >> psttUpdatedApiVersion       ; ___( psttUpdatedApiVersion       ) ;
                                            sInUpdated >> psttUpdatedIdProduct        ; ___( psttUpdatedIdProduct        ) ;
                                            sInUpdated >> psttUpdatedStatus           ; ___( psttUpdatedStatus           ) ;
                                            sInUpdated >> psttUpdatedLatestInvoice    ; ___( psttUpdatedLatestInvoice    ) ;
                                            sInUpdated >> psttUpdatedStripeNoticeType ; ___( psttUpdatedStripeNoticeType ) ;
                                            sInUpdated >> psttUpdatedLive             ; ___( psttUpdatedLive             ) ;
                                            sInUpdated >> psttUpdatedNnPeer           ; ___( psttUpdatedNnPeer           ) ;
                                            sInUpdated >> psttUpdatedVersion          ; ___( psttUpdatedVersion          ) ;
                                            sInUpdated >> psttUpdatedEvent            ; ___( psttUpdatedEvent            ) ;

                                            ZE( strokeS* , psttUpdatedAmountDiscount   ) ;
                                            ZE( strokeS* , psttUpdatedIdSubscription   ) ;
                                            ZE( strokeS* , psttUpdatedMode             ) ;
                                            ZE( strokeS* , psttUpdatedName             ) ;
                                            ZE( strokeS* , psttUpdatedEmail            ) ;
                                            ZE( strokeS* , psttUpdatedPostalCode       ) ;
                                            ZE( strokeS* , psttUpdatedCountry          ) ;
                                            ZE( strokeS* , psttUpdatedHawker           ) ;
                                            ZE( strokeS* , psttUpdatedAge              ) ;
                                            ZE( strokeS* , psttUpdatedAmountTotal      ) ;
                                            ZE( strokeS* , psttUpdatedAmountSubtotal   ) ;
                                            ZE( strokeS* , psttUpdatedApiVersion       ) ;
                                            ZE( strokeS* , psttUpdatedIdProduct        ) ;
                                            ZE( strokeS* , psttUpdatedStatus           ) ;
                                            ZE( strokeS* , psttUpdatedLatestInvoice    ) ;
                                            ZE( strokeS* , psttUpdatedStripeNoticeType ) ;
                                            ZE( strokeS* , psttUpdatedLive             ) ;
                                            ZE( strokeS* , psttUpdatedNnPeer           ) ;
                                            ZE( strokeS* , psttUpdatedVersion          ) ;
                                            ZE( strokeS* , psttUpdatedEvent            ) ;

                                            //etRock.traceF( tin0P , T("doing the deed with ")+tLongInvoiceMine ) ;
                                        {
                                        if( !cFail )

                                        }
                                            }
                                                }
                                                    }
                                                        etRock.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongUpdated ) ;
                                                        cFail ++ ;
                                                        POOPR ;
                                                    {
                                                    if( POOP )
                                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInUpdated , tLongUpdated , 1 ) ;
                                                    SCOOPS
                                                {
                                                IFsCRATCHoK

                                                TN( tLongUpdated , "" ) ; tLongUpdated = tLongInvoiceMine+tShortWantNewUpdated ;
                                            {
                                            else
                                            }
                                                etRock.traceF( tin0P , T("collision / could not rename to mine [tLongInvoice]:    ")+tLongInvoice ) ;
                                                POOPRqUIET ;
                                            {
                                            if( POOP )
                                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongInvoiceMine , tLongInvoice , 1 ) ;
                                            SCOOPS
                                        {
                                        IFsCRATCHoK
                                        soulC sInUpdated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                        ZE( countT , cFail ) ;
                                    {
                                    if( bReady )

                                    boolT bReady = etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantOldUpdated ) ;

                                    }
                                        etThread.delF( tin0P , psttu ) ;
                                        tLongInvoiceMine = tLongModulo+T("eating.")+T(psttu)+tSlash ;
                                        etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                        ZE( strokeS* , psttu ) ;
                                    {
                                    TN( tLongInvoiceMine , "" ) ;

                                    //etRock.traceF( tin0P , T("[tShortInvoice]:      ")+tShortInvoice ) ;
                                    }
                                        etThread.delF( tin0P , psttShortInvoice ) ;
                                        tShortInvoice = T(psttShortInvoice) ;
                                        etThread.delF( tin0P , psttnu ) ;
                                        etThread.strBisectF( tin0P , psttnu , psttShortInvoice , tLongInvoice , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortInvoice ) ;
                                        ZE( strokeS* , psttShortInvoice ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    TN( tShortInvoice , "" ) ;

                                    TN( tLongInvoice , pInfo->psttIfoName ) ;
                                    _IO_
                                {
                                if( bDir )

                                const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                                _IO_
                            {
                            else
                            }
                                break ;
                                DEL( pInfo ) ;
                            {
                            if( !pInfo || !pInfo->psttIfoName )

                            etThread.diskFindFileOrDirF( tin0P , pInfo , hFindInvoice , tLongModulo , &patNewDotStar ) ;
                            ZE( infoFileS* , pInfo ) ;
                            _IO_
                        {
                        do
                        handleC hFindInvoice( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                        //etRock.traceF( tin0P , T("[tShortModulo]:      ")+tShortModulo ) ;
                        }
                            etThread.delF( tin0P , psttShortModulo ) ;
                            tShortModulo = T(psttShortModulo) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShortModulo , tLongModulo , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortModulo ) ;
                            ZE( strokeS* , psttShortModulo ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShortModulo , "" ) ;
                        TN( tLongModulo , pInfo->psttIfoName ) ;
                        _IO_
                    {
                    if( bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFindModulo , tFolder ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFindModulo( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            textC& tFolder = *pptRootIncomingNoticesSubRenewed[ offf ] ;
            _IO_
        {
        for( countT offf = 0 ; offf < sizeof pptRootIncomingNoticesSubRenewed / sizeof pptRootIncomingNoticesSubRenewed[ 0 ] ; offf ++ )

        }
            while( !ether && ~hFindModulo && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        while( !ether && ~hFindInvoice && !POOP ) ;
                        }
                            DEL( pInfo ) ;
                            }
                                }
                                    }
                                        etThread.diskFileOrDirDeleteF( tin0P , tLongInvoiceMine , flFILEoRdIRdELETE_RECURSE ) ;

                                        }
                                            etThread.delF( tin0P , psttUpdatedAmountDiscount   ) ;
                                            etThread.delF( tin0P , psttUpdatedIdSubscription   ) ;
                                            etThread.delF( tin0P , psttUpdatedMode             ) ;
                                            etThread.delF( tin0P , psttUpdatedName             ) ;
                                            etThread.delF( tin0P , psttUpdatedEmail            ) ;
                                            etThread.delF( tin0P , psttUpdatedPostalCode       ) ;
                                            etThread.delF( tin0P , psttUpdatedCountry          ) ;
                                            etThread.delF( tin0P , psttUpdatedHawker           ) ;
                                            etThread.delF( tin0P , psttUpdatedAge              ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountTotal      ) ;
                                            etThread.delF( tin0P , psttUpdatedAmountSubtotal   ) ;
                                            etThread.delF( tin0P , psttUpdatedApiVersion       ) ;
                                            etThread.delF( tin0P , psttUpdatedIdProduct        ) ;
                                            etThread.delF( tin0P , psttUpdatedStatus           ) ;
                                            etThread.delF( tin0P , psttUpdatedLatestInvoice    ) ;
                                            etThread.delF( tin0P , psttUpdatedStripeNoticeType ) ;
                                            etThread.delF( tin0P , psttUpdatedLive             ) ;
                                            etThread.delF( tin0P , psttUpdatedNnPeer           ) ;
                                            etThread.delF( tin0P , psttUpdatedVersion          ) ;
                                            etThread.delF( tin0P , psttUpdatedEvent            ) ;

                                            etThread.delF( tin0P , psttCreatedAmountDiscount   ) ;
                                            etThread.delF( tin0P , psttCreatedIdSubscription   ) ;
                                            etThread.delF( tin0P , psttCreatedMode             ) ;
                                            etThread.delF( tin0P , psttCreatedName             ) ;
                                            etThread.delF( tin0P , psttCreatedEmail            ) ;
                                            etThread.delF( tin0P , psttCreatedPostalCode       ) ;
                                            etThread.delF( tin0P , psttCreatedCountry          ) ;
                                            etThread.delF( tin0P , psttCreatedHawker           ) ;
                                            etThread.delF( tin0P , psttCreatedAge              ) ;
                                            etThread.delF( tin0P , psttCreatedAmountTotal      ) ;
                                            etThread.delF( tin0P , psttCreatedAmountSubtotal   ) ;
                                            etThread.delF( tin0P , psttCreatedApiVersion       ) ;
                                            etThread.delF( tin0P , psttCreatedIdProduct        ) ;
                                            etThread.delF( tin0P , psttCreatedStatus           ) ;
                                            etThread.delF( tin0P , psttCreatedLatestInvoice    ) ;
                                            etThread.delF( tin0P , psttCreatedStripeNoticeType ) ;
                                            etThread.delF( tin0P , psttCreatedLive             ) ;
                                            etThread.delF( tin0P , psttCreatedNnPeer           ) ;
                                            etThread.delF( tin0P , psttCreatedVersion          ) ;
                                            etThread.delF( tin0P , psttCreatedEvent            ) ;

                                            etThread.delF( tin0P , psttPaidCurrencyConversion ) ;
                                            etThread.delF( tin0P , psttPaidCurrency           ) ;
                                            etThread.delF( tin0P , psttPaidAmountDiscount     ) ;
                                            etThread.delF( tin0P , psttPaidIdSubscription     ) ;
                                            etThread.delF( tin0P , psttPaidMode               ) ;
                                            etThread.delF( tin0P , psttPaidName               ) ;
                                            etThread.delF( tin0P , psttPaidEmail              ) ;
                                            etThread.delF( tin0P , psttPaidPostalCode         ) ;
                                            etThread.delF( tin0P , psttPaidCountry            ) ;
                                            etThread.delF( tin0P , psttPaidHawker             ) ;
                                            etThread.delF( tin0P , psttPaidAge                ) ;
                                            etThread.delF( tin0P , psttPaidAmountTotal        ) ;
                                            etThread.delF( tin0P , psttPaidAmountSubtotal     ) ;
                                            etThread.delF( tin0P , psttPaidApiVersion         ) ;
                                            etThread.delF( tin0P , psttPaidIdProduct          ) ;
                                            etThread.delF( tin0P , psttPaidInvoice            ) ;
                                            etThread.delF( tin0P , psttPaidStripeNoticeType   ) ;
                                            etThread.delF( tin0P , psttPaidLive               ) ;
                                            etThread.delF( tin0P , psttPaidNnPeer             ) ;
                                            etThread.delF( tin0P , psttPaidVersion            ) ;
                                            etThread.delF( tin0P , psttPaidEvent              ) ;

                                            }
                                                etThread.delF( tin0P , psttFile ) ;
                                                etThread.boxPutUniqueF( tin0P , psttFile , ( bLive ? tFolderEventsIncomingPrecious : tFolderEventsIncomingSandbox ) + T("event.@1@.soulC") , WS( sOut ) ) ;
                                                ZE( strokeS* , psttFile ) ;

                                                TN( tShortEvent , "" ) ; tShortEvent = T(bLive?"soul.event.live.":"soul.event.test.")+tEvent ;

                                                boolT bLive = psttCreatedLive && !etThread.strCompareF( tin0P , psttCreatedLive , T("true") ) ;

                                                }
                                                    sOut << psttPaidAmountDiscount     ;
                                                    sOut << psttPaidAmountSubtotal     ;
                                                    sOut << psttPaidAmountTotal        ;
                                                    sOut << psttPaidCurrencyConversion ;
                                                    sOut << psttPaidCurrency           ;
                                                    sOut << psttPaidHawker             ;
                                                    sOut << psttPaidAge                ;
                                                    sOut << psttPaidName               ;
                                                    sOut << psttPaidEmail              ;
                                                    sOut << psttPaidPostalCode         ;
                                                    sOut << psttPaidCountry            ;
                                                    sOut << psttPaidIdSubscription     ;
                                                    sOut << psttCreatedIdProduct       ;
                                                    sOut << psttCreatedLive            ;
                                                    sOut << psttUpdatedNnPeer          ; //20250315@1651: ADDED ; VERSION NOT INCREMENTED BECAUSE THERE ARE NO PRODUCTION DATA
                                                    sOut << psttCreatedNnPeer          ; //20250315@1651: ADDED ; VERSION NOT INCREMENTED BECAUSE THERE ARE NO PRODUCTION DATA
                                                    sOut << psttPaidNnPeer             ; //20250315@1651: ADDED ; VERSION NOT INCREMENTED BECAUSE THERE ARE NO PRODUCTION DATA
                                                    // VERSION 1

                                                    sOut << (strokeS*)tVersion         ;
                                                    sOut << (strokeS*)tEvent           ;
                                                {
                                                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                                                TN( tVersion   , "1" ) ;
                                                TN( tEvent , "ipdos.subscription.create" ) ;
                                            {

                                            sInUpdated >> psttUpdatedAmountDiscount   ; ___( psttUpdatedAmountDiscount   ) ;
                                            sInUpdated >> psttUpdatedIdSubscription   ; ___( psttUpdatedIdSubscription   ) ;
                                            sInUpdated >> psttUpdatedMode             ; ___( psttUpdatedMode             ) ;
                                            sInUpdated >> psttUpdatedName             ; ___( psttUpdatedName             ) ;
                                            sInUpdated >> psttUpdatedEmail            ; ___( psttUpdatedEmail            ) ;
                                            sInUpdated >> psttUpdatedPostalCode       ; ___( psttUpdatedPostalCode       ) ;
                                            sInUpdated >> psttUpdatedCountry          ; ___( psttUpdatedCountry          ) ;
                                            sInUpdated >> psttUpdatedHawker           ; ___( psttUpdatedHawker           ) ;
                                            sInUpdated >> psttUpdatedAge              ; ___( psttUpdatedAge              ) ;
                                            sInUpdated >> psttUpdatedAmountTotal      ; ___( psttUpdatedAmountTotal      ) ;
                                            sInUpdated >> psttUpdatedAmountSubtotal   ; ___( psttUpdatedAmountSubtotal   ) ;
                                            sInUpdated >> psttUpdatedApiVersion       ; ___( psttUpdatedApiVersion       ) ;
                                            sInUpdated >> psttUpdatedIdProduct        ; ___( psttUpdatedIdProduct        ) ;
                                            sInUpdated >> psttUpdatedStatus           ; ___( psttUpdatedStatus           ) ;
                                            sInUpdated >> psttUpdatedLatestInvoice    ; ___( psttUpdatedLatestInvoice    ) ;
                                            sInUpdated >> psttUpdatedStripeNoticeType ; ___( psttUpdatedStripeNoticeType ) ;
                                            sInUpdated >> psttUpdatedLive             ; ___( psttUpdatedLive             ) ;
                                            sInUpdated >> psttUpdatedNnPeer           ; ___( psttUpdatedNnPeer           ) ;
                                            sInUpdated >> psttUpdatedVersion          ; ___( psttUpdatedVersion          ) ;
                                            sInUpdated >> psttUpdatedEvent            ; ___( psttUpdatedEvent            ) ;

                                            sInCreated >> psttCreatedAmountDiscount   ; ___( psttCreatedAmountDiscount   ) ;
                                            sInCreated >> psttCreatedIdSubscription   ; ___( psttCreatedIdSubscription   ) ;
                                            sInCreated >> psttCreatedMode             ; ___( psttCreatedMode             ) ;
                                            sInCreated >> psttCreatedName             ; ___( psttCreatedName             ) ;
                                            sInCreated >> psttCreatedEmail            ; ___( psttCreatedEmail            ) ;
                                            sInCreated >> psttCreatedPostalCode       ; ___( psttCreatedPostalCode       ) ;
                                            sInCreated >> psttCreatedCountry          ; ___( psttCreatedCountry          ) ;
                                            sInCreated >> psttCreatedHawker           ; ___( psttCreatedHawker           ) ;
                                            sInCreated >> psttCreatedAge              ; ___( psttCreatedAge              ) ;
                                            sInCreated >> psttCreatedAmountTotal      ; ___( psttCreatedAmountTotal      ) ;
                                            sInCreated >> psttCreatedAmountSubtotal   ; ___( psttCreatedAmountSubtotal   ) ;
                                            sInCreated >> psttCreatedApiVersion       ; ___( psttCreatedApiVersion       ) ;
                                            sInCreated >> psttCreatedIdProduct        ; ___( psttCreatedIdProduct        ) ;
                                            sInCreated >> psttCreatedStatus           ; ___( psttCreatedStatus           ) ;
                                            sInCreated >> psttCreatedLatestInvoice    ; ___( psttCreatedLatestInvoice    ) ;
                                            sInCreated >> psttCreatedStripeNoticeType ; ___( psttCreatedStripeNoticeType ) ;
                                            sInCreated >> psttCreatedLive             ; ___( psttCreatedLive             ) ;
                                            sInCreated >> psttCreatedNnPeer           ; ___( psttCreatedNnPeer           ) ;
                                            sInCreated >> psttCreatedVersion          ; ___( psttCreatedVersion          ) ;
                                            sInCreated >> psttCreatedEvent            ; ___( psttCreatedEvent            ) ;

                                            sInPaid >> psttPaidCurrencyConversion ; ___( psttPaidCurrencyConversion ) ;
                                            sInPaid >> psttPaidCurrency           ; ___( psttPaidCurrency           ) ;
                                            sInPaid >> psttPaidAmountDiscount     ; ___( psttPaidAmountDiscount     ) ;
                                            sInPaid >> psttPaidIdSubscription     ; ___( psttPaidIdSubscription     ) ;
                                            sInPaid >> psttPaidMode               ; ___( psttPaidMode               ) ;
                                            sInPaid >> psttPaidName               ; ___( psttPaidName               ) ;
                                            sInPaid >> psttPaidEmail              ; ___( psttPaidEmail              ) ;
                                            sInPaid >> psttPaidPostalCode         ; ___( psttPaidPostalCode         ) ;
                                            sInPaid >> psttPaidCountry            ; ___( psttPaidCountry            ) ;
                                            sInPaid >> psttPaidHawker             ; ___( psttPaidHawker             ) ;
                                            sInPaid >> psttPaidAge                ; ___( psttPaidAge                ) ;
                                            sInPaid >> psttPaidAmountTotal        ; ___( psttPaidAmountTotal        ) ;
                                            sInPaid >> psttPaidAmountSubtotal     ; ___( psttPaidAmountSubtotal     ) ;
                                            sInPaid >> psttPaidApiVersion         ; ___( psttPaidApiVersion         ) ;
                                            sInPaid >> psttPaidIdProduct          ; ___( psttPaidIdProduct          ) ;
                                            sInPaid >> psttPaidInvoice            ; ___( psttPaidInvoice            ) ;
                                            sInPaid >> psttPaidStripeNoticeType   ; ___( psttPaidStripeNoticeType   ) ;
                                            sInPaid >> psttPaidLive               ; ___( psttPaidLive               ) ;
                                            sInPaid >> psttPaidNnPeer             ; ___( psttPaidNnPeer             ) ;
                                            sInPaid >> psttPaidVersion            ; ___( psttPaidVersion            ) ;
                                            sInPaid >> psttPaidEvent              ; ___( psttPaidEvent              ) ;

                                            ZE( strokeS* , psttUpdatedAmountDiscount   ) ;
                                            ZE( strokeS* , psttUpdatedIdSubscription   ) ;
                                            ZE( strokeS* , psttUpdatedMode             ) ;
                                            ZE( strokeS* , psttUpdatedName             ) ;
                                            ZE( strokeS* , psttUpdatedEmail            ) ;
                                            ZE( strokeS* , psttUpdatedPostalCode       ) ;
                                            ZE( strokeS* , psttUpdatedCountry          ) ;
                                            ZE( strokeS* , psttUpdatedHawker           ) ;
                                            ZE( strokeS* , psttUpdatedAge              ) ;
                                            ZE( strokeS* , psttUpdatedAmountTotal      ) ;
                                            ZE( strokeS* , psttUpdatedAmountSubtotal   ) ;
                                            ZE( strokeS* , psttUpdatedApiVersion       ) ;
                                            ZE( strokeS* , psttUpdatedIdProduct        ) ;
                                            ZE( strokeS* , psttUpdatedStatus           ) ;
                                            ZE( strokeS* , psttUpdatedLatestInvoice    ) ;
                                            ZE( strokeS* , psttUpdatedStripeNoticeType ) ;
                                            ZE( strokeS* , psttUpdatedLive             ) ;
                                            ZE( strokeS* , psttUpdatedNnPeer           ) ;
                                            ZE( strokeS* , psttUpdatedVersion          ) ;
                                            ZE( strokeS* , psttUpdatedEvent            ) ;

                                            ZE( strokeS* , psttCreatedAmountDiscount   ) ;
                                            ZE( strokeS* , psttCreatedIdSubscription   ) ;
                                            ZE( strokeS* , psttCreatedMode             ) ;
                                            ZE( strokeS* , psttCreatedName             ) ;
                                            ZE( strokeS* , psttCreatedEmail            ) ;
                                            ZE( strokeS* , psttCreatedPostalCode       ) ;
                                            ZE( strokeS* , psttCreatedCountry          ) ;
                                            ZE( strokeS* , psttCreatedHawker           ) ;
                                            ZE( strokeS* , psttCreatedAge              ) ;
                                            ZE( strokeS* , psttCreatedAmountTotal      ) ;
                                            ZE( strokeS* , psttCreatedAmountSubtotal   ) ;
                                            ZE( strokeS* , psttCreatedApiVersion       ) ;
                                            ZE( strokeS* , psttCreatedIdProduct        ) ;
                                            ZE( strokeS* , psttCreatedStatus           ) ;
                                            ZE( strokeS* , psttCreatedLatestInvoice    ) ;
                                            ZE( strokeS* , psttCreatedStripeNoticeType ) ;
                                            ZE( strokeS* , psttCreatedLive             ) ;
                                            ZE( strokeS* , psttCreatedVersion          ) ;
                                            ZE( strokeS* , psttCreatedNnPeer           ) ;
                                            ZE( strokeS* , psttCreatedEvent            ) ;

                                            ZE( strokeS* , psttPaidCurrencyConversion  ) ;
                                            ZE( strokeS* , psttPaidCurrency            ) ;
                                            ZE( strokeS* , psttPaidAmountDiscount      ) ;
                                            ZE( strokeS* , psttPaidIdSubscription      ) ;
                                            ZE( strokeS* , psttPaidMode                ) ;
                                            ZE( strokeS* , psttPaidName                ) ;
                                            ZE( strokeS* , psttPaidEmail               ) ;
                                            ZE( strokeS* , psttPaidPostalCode          ) ;
                                            ZE( strokeS* , psttPaidCountry             ) ;
                                            ZE( strokeS* , psttPaidHawker              ) ;
                                            ZE( strokeS* , psttPaidAge                 ) ;
                                            ZE( strokeS* , psttPaidAmountTotal         ) ;
                                            ZE( strokeS* , psttPaidAmountSubtotal      ) ;
                                            ZE( strokeS* , psttPaidApiVersion          ) ;
                                            ZE( strokeS* , psttPaidIdProduct           ) ;
                                            ZE( strokeS* , psttPaidInvoice             ) ;
                                            ZE( strokeS* , psttPaidStripeNoticeType    ) ;
                                            ZE( strokeS* , psttPaidLive                ) ;
                                            ZE( strokeS* , psttPaidNnPeer              ) ;
                                            ZE( strokeS* , psttPaidVersion             ) ;
                                            ZE( strokeS* , psttPaidEvent               ) ;

                                            //etRock.traceF( tin0P , T("doing the deed with ")+tLongInvoiceMine ) ;
                                        {
                                        if( !cFail )

                                        }
                                            }
                                                }
                                                    }
                                                        etRock.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongUpdated ) ;
                                                        cFail ++ ;
                                                        POOPR ;
                                                    {
                                                    if( POOP )
                                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInUpdated , tLongUpdated , 1 ) ;
                                                    SCOOPS
                                                {
                                                IFsCRATCHoK

                                                }
                                                    }
                                                        etRock.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongCreated ) ;
                                                        cFail ++ ;
                                                        POOPR ;
                                                    {
                                                    if( POOP )
                                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInCreated , tLongCreated , 1 ) ;
                                                    SCOOPS
                                                {
                                                IFsCRATCHoK

                                                }
                                                    }
                                                        etRock.traceF( tin0P , T("could not get shadow [tLong]:    ")+tLongPaid ) ;
                                                        cFail ++ ;
                                                        POOPR ;
                                                    {
                                                    if( POOP )
                                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sInPaid , tLongPaid , 1 ) ;
                                                    SCOOPS
                                                {
                                                IFsCRATCHoK

                                                TN( tLongUpdated , "" ) ; tLongUpdated = tLongInvoiceMine+tShortWantNewUpdated ;
                                                TN( tLongCreated , "" ) ; tLongCreated = tLongInvoiceMine+tShortWantCreated ;
                                                TN( tLongPaid    , "" ) ; tLongPaid    = tLongInvoiceMine+tShortWantPaid    ;
                                            {
                                            else
                                            }
                                                etRock.traceF( tin0P , T("collision / could not rename to mine [tLongInvoice]:    ")+tLongInvoice ) ;
                                                POOPRqUIET ;
                                            {
                                            if( POOP )
                                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongInvoiceMine , tLongInvoice , 1 ) ;
                                            SCOOPS
                                        {
                                        IFsCRATCHoK
                                        soulC sInUpdated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                        soulC sInCreated( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                        soulC sInPaid(    tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                        ZE( countT , cFail ) ;
                                    {
                                    if( bReady )

                                    ;
                                        && etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantNewUpdated )
                                        && etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantCreated )
                                           etThread.diskFileExistsF( tin0P , tLongInvoice+tShortWantPaid    )
                                    boolT bReady =

                                    }
                                        etThread.delF( tin0P , psttu ) ;
                                        tLongInvoiceMine = tLongModulo+T("eating.")+T(psttu)+tSlash ;
                                        etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                        ZE( strokeS* , psttu ) ;
                                    {
                                    TN( tLongInvoiceMine , "" ) ;

                                    //etRock.traceF( tin0P , T("[tShortInvoice]:      ")+tShortInvoice ) ;
                                    }
                                        etThread.delF( tin0P , psttShortInvoice ) ;
                                        tShortInvoice = T(psttShortInvoice) ;
                                        etThread.delF( tin0P , psttnu ) ;
                                        etThread.strBisectF( tin0P , psttnu , psttShortInvoice , tLongInvoice , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortInvoice ) ;
                                        ZE( strokeS* , psttShortInvoice ) ;
                                        ZE( strokeS* , psttnu ) ;
                                    {
                                    TN( tShortInvoice , "" ) ;

                                    TN( tLongInvoice , pInfo->psttIfoName ) ;
                                    _IO_
                                {
                                if( bDir )

                                const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                                _IO_
                            {
                            else
                            }
                                break ;
                                DEL( pInfo ) ;
                            {
                            if( !pInfo || !pInfo->psttIfoName )

                            etThread.diskFindFileOrDirF( tin0P , pInfo , hFindInvoice , tLongModulo , &patNewDotStar ) ;
                            ZE( infoFileS* , pInfo ) ;
                            _IO_
                        {
                        do
                        handleC hFindInvoice( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                        //etRock.traceF( tin0P , T("[tShortModulo]:      ")+tShortModulo ) ;
                        }
                            etThread.delF( tin0P , psttShortModulo ) ;
                            tShortModulo = T(psttShortModulo) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShortModulo , tLongModulo , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortModulo ) ;
                            ZE( strokeS* , psttShortModulo ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShortModulo , "" ) ;
                        TN( tLongModulo , pInfo->psttIfoName ) ;
                        _IO_
                    {
                    if( bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFindModulo , tFolder ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFindModulo( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            textC& tFolder = *pptRootIncomingNoticesSubCreated[ offf ] ;
            _IO_
        {
        for( countT offf = 0 ; offf < sizeof pptRootIncomingNoticesSubCreated / sizeof pptRootIncomingNoticesSubCreated[ 0 ] ; offf ++ )

        _IO_
    {
    while( !ether )
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

    TN( tShortWantOldUpdated , "sub.old.updated.soulC"    ) ;
    TN( tShortWantNewUpdated , "sub.new.updated.soulC"    ) ;
    TN( tShortWantCreated    , "sub.created.soulC"        ) ;
    TN( tShortWantPaid       , "checkout.completed.soulC" ) ;

    patternC patNewDotStar( tin0P , etThread , tPatternNewDotStar , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
    TN( tPatternNewDotStar , "new.*" ) ;

    textC* pptRootIncomingNoticesSubDeleted[] = { &tRootIncomingNoticesTestSubDeleted , &tRootIncomingNoticesLiveSubDeleted } ;
    textC* pptRootIncomingNoticesSubRenewed[] = { &tRootIncomingNoticesTestSubRenewed , &tRootIncomingNoticesLiveSubRenewed } ;
    textC* pptRootIncomingNoticesSubCreated[] = { &tRootIncomingNoticesTestSubCreated , &tRootIncomingNoticesLiveSubCreated } ;

    TN( tRootIncomingNoticesLiveSubDeleted , "" ) ; tRootIncomingNoticesLiveSubDeleted = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/live/sub.delated/" ) ;
    TN( tRootIncomingNoticesTestSubDeleted , "" ) ; tRootIncomingNoticesTestSubDeleted = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/test/sub.deleted/" ) ;

    TN( tRootIncomingNoticesLiveSubRenewed , "" ) ; tRootIncomingNoticesLiveSubRenewed = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/live/sub.renewed/" ) ;
    TN( tRootIncomingNoticesTestSubRenewed , "" ) ; tRootIncomingNoticesTestSubRenewed = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/test/sub.renewed/" ) ;

    TN( tRootIncomingNoticesLiveSubCreated , "" ) ; tRootIncomingNoticesLiveSubCreated = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/live/sub.created/" ) ;
    TN( tRootIncomingNoticesTestSubCreated , "" ) ; tRootIncomingNoticesTestSubCreated = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/test/sub.created/" ) ;

    TN( tSlash , "/" ) ;

    TN( tFolderEventsIncomingPrecious , "" ) ; tFolderEventsIncomingPrecious = T("////go1/d/ideafarm.shared/precious/")+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/events.incoming/" ) ;
    TN( tFolderEventsIncomingSandbox  , "" ) ; tFolderEventsIncomingSandbox  = T("////go1/d/ideafarm.shared/sandbox/" )+TfORsTRING(ifcIDaDAM_WEBhOOKnOTICEfILER)+T("/events.incoming/" ) ;

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_NORMAL ) ;
    thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_NORMAL ) ;

    etherC& etRock = etherC::etRockIF( tin0P ) ;

    _IO_
{
if( pTaskP )
TASK( tmWorkF )

// CONTAINS COMMENTED OUT CODE TO MIGRATE TO A NEW EVENT EATER ADAM
// EMITS INCOMING EVENTS (soulC FILES)
// BASELINE: 880_ ; I AM A REWRITE OF THE EVENT PORTION OF 880_ ; UNLIKE 880_, I TAKE MY INPUT FROM INVOICE FOLDERS, EACH CONTAINING 3 soulC FILES

/*1*/WAKEhIDE( "ifcIDaDAM_ADMINISTRATOR" )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
