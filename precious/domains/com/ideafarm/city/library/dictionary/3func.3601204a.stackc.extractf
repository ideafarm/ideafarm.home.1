
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    _OUTbATONsTACKc_

    }
        if( pSgnEvent && F(flags) & flSTACKc_GIVEsIGNdELpLATE ) pSgnEvent->giveF( tinBaseP ) ;

        }
            third.delF( tinBaseP , (byteT*&)ppc ) ;
            _IO_
        {
        else
        }
            pXray->freeF( tinBaseP , idSave == - 1 ) ;
            _IO_
        {
        if( F(flags) & flSTACKc_XRAY )

        }
            newTabsIfF( tinBaseP , ppc , 1 ) ;
            _IO_
        {

        if( ppc->ppU ) ppc->ppU->ppD = ppc->ppD ;
        if( ppc->ppD ) ppc->ppD->ppU = ppc->ppU ;
        if( ppTop    == ppc ) ppTop    = ppc->ppD ;
        if( ppBottom == ppc ) ppBottom = ppc->ppU ;
        cPlates -- ;

        }
            }
                else { __1 ; }
                else if( ppc == ppBottom ) idSave = - 1 ;
                     if( ppc == ppTop    ) idSave =   1 ;
            {
            if( !idSave )
            _IO_
        {
        if( F(flags) & flSTACKc_XRAY )

        }
            }
                default                    : {   *(countT*)pbP =             PLATE_countT_REF( ppc ) ; break ; }
                case ifcSTACKtYPE_timeS    : {    *(timeS*)pbP =    *(timeS*)PLATE_byteT_PTR(  ppc ) ; break ; }
                case ifcSTACKtYPE_nicNameC : { *(nicNameC*)pbP = *(nicNameC*)PLATE_byteT_PTR(  ppc ) ; break ; }
                }
                    break ;
                    else         {  __1 } //U: SUPPORT VARIABLE LENGTH (LENGTH PREFIXED) BLOBS
                    if( cbData ) third.c_memcpyIF( tinBaseP , pbP , PLATE_byteT_PTR(  ppc ) , cbData ) ;
                {
                case ifcSTACKtYPE_BLOB :
            {
            switch( idType )
            _IO_
        {
        if( pbP )

        }
            adjustRefsF( tinBaseP , idP , ifcIDaCTIONsTACKaDJUSTrEFS_DELETED ) ;
            _IO_
        {
        _IO_
    {
    if( idP )
    plateS* ppc = pPlateF( tinBaseP , idP ) ;
    countT idSave = idP ;

    LATHrEF

    if( cPlates < *p_idCursor || ( *p_idCursor && !*p_ppCursor ) ) { BLAMMO ; } //U::

    CURSOR

    _INbATONsTACKc_

    }
        if( third ) return ;
        __( F(flagsState) & flSTACKsTATE_LOCKED ) ;
        }
            else                                { __( idP != 1               ) ; }
            else if( F(flags) & flSTACKc_FIFO ) { __( idP != 1 && idP != - 1 ) ; }
            if( !idP ) ; //MUST VALIDATE LATER
        {
        if( F(flags) & flSTACKc_XRAY )
        if( third ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/*1*/voidT stackC::extractF( byteT* const pbP , tin0S& tinBaseP , countT idP )/*1*/

/**/
*/
  idP == -2 , -3 , -4 , ... refer to items near the bottom of the stack
  idP == -1 refers to the bottommost (earliest) item
  idP == 2 , 3 , 4 , ... refer to items near the top of the stack
  idP == 1 refers to the topmost (most recently added) item
   it is illegal to call this function with idP == 0 before using one of the other member functions to refer to an item on this stackC object
   if idP == 0 then the plate whose value was most recently referenced will be extracted
  1-based: idP == 0 has a special meaning
 idP
  if not 0 then must point to cbData bytes, which will receive the value of the extracted plate
  can be 0
 pbP
arguments
it is illegal to call me for an ifcSTACKtYPE_nicNameC or ifcSTACKtYPE_timeS stackC
returns the idP'th item and removes it from the stack
\<A HREF=\"5.115004f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$extractF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

