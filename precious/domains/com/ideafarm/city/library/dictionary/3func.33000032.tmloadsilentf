
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmLoadSilentF )
}
    etThread.delF( tinBaseP , pc8tp ) ;
    b_pnnSilentP.ungrabF( tinBaseP ) ;
    cnnSilentP = 0 ;
    etThread.delF( tinBaseP , pnnSilentP ) ;
    b_pnnSilentP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    etThread.traceF( tinBaseP , T("cleaning up") ) ;

    }
        }
            }
                ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
            {
            while( !bQuitP && cToDo -- )
            countT cToDo = TUCK ;

            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        //etThread.traceF( tinBaseP , T("napping") ) ;

        etThread.delF( tinBaseP , psttAll ) ;
        }
            etThread.delF( tinBaseP , pstt1Lines ) ;
            b_pnnSilentP.ungrabF( tinBaseP ) ;
            }
                etThread.delF( tinBaseP , psttnn ) ;
                //etThread.strokeF( tinBaseP , T("i will silently ignore: ")+T(pnnSilentP[off-1])+T(" (\"")+T(psttnn)+T("\")\r\n") ) ;
                pnnSilentP[ off ++ ] = etThread.strDigitsToNicNameF( tinBaseP , psttnn ) ;
                etThread.strWordF( tinBaseP , psttnn , psttc1 , sttq , S1C(';') ) ; ___( psttnn ) ;
                ZE( strokeS* , psttnn ) ;
                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            {
            FORsTRINGSiN1( pstt1Lines )
            ZE( countT , off ) ;
            etThread.newF( tinBaseP , LF , pnnSilentP , cnnSilentP ) ; ___( pnnSilentP ) ;
            cnnSilentP = etThread.strWordsOldF( tinBaseP , pstt1Lines , psttAll , sttq , T("\r\n") ) ; ___( pstt1Lines ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , pstt1Lines ) ;

            cnnSilentP = 0 ;
            etThread.delF( tinBaseP , pnnSilentP ) ;

            b_pnnSilentP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            etThread.traceF( tinBaseP , T("loading pnnSilent[]") ) ;
        {
        if( psttAll )

        GETsETTING( etThread , psttAll , T("nnSilent") ) //IN THE FORMER CODE, THERE WAS SERIALIZATION OF ACCESS TO THE SETTINGS FILE, BUT THAT SERIALIZATION CODE WAS COMMENTED OUT

        //etThread.traceF( tinBaseP , T("getting the nnSilent setting") ) ;
    {
    while( !etThread && !bQuitP )

    countT&    cnnSilentP   =    *(countT*)pc8tp->c3 ;
    nicNameC*& pnnSilentP   = *(nicNameC**)pc8tp->c2 ;
    batonC&    b_pnnSilentP =    *(batonC*)pc8tp->c1 ;
    count8S*   pc8tp = (count8S*)cArgThreadP ;

    boolT& bQuitP = *(boolT*)pTaskP->c2 ;
    countT& cArgThreadP = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
/*1*/TASK( tmLoadSilentF )/*1*/
/**/
*/
/*
//DUPLICATED CODE: 1030168 2540104 U::MOVED

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

