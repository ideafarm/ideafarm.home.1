
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        //etThread.delF( tin0P , psttnFound ) ;
        //etThread.delF( tin0P , pbA ) ;
        //}
        //    while( ~hWalk ) ;
        //    }
        //        }
        //            etThread.delF( tin0P , pbB ) ;
        //            }
        //                LOGrAW( T("did not zap (different image): ")+T(psttn)+tcr ) ;
        //            {
        //            else
        //            }
        //                etThread.delF( tin0P , psttn ) ;
        //                LOGrAW( T("zapped: ")+T(psttn)+tcr ) ;
        //                etThread.boxZapF( tin0P , psttn ) ;
        //                swsName.extractF( 0 , tin0P ) ;
        //            {
        //            else if( cbB == cbA && !etThread.memCompareF( tin0P , pbA , pbB , cbA ) )
        //            }
        //                }
        //                    LOGrAW( T("did not zap (different hash): ")+T(psttn)+tcr ) ;
        //                {
        //                else
        //                }
        //                    etThread.delF( tin0P , psttn ) ;
        //                    LOGrAW( T("zapped (big): ")+T(psttn)+tcr ) ;
        //                    swsName.extractF( 0 , tin0P ) ;
        //                    etThread.boxZapF( tin0P , psttn ) ;
        //                {
        //                if( hashA == hashB )
        //            {
        //            if( !pbB )
        //
        //            }
        //                etThread.boxGetShadowF( tin0P , pbB , cbB , psttn ) ; ___( pbB ) ;
        //            {
        //            else
        //            }
        //                }
        //                    BLAMMO ;
        //                    LOGrAW( T("could not get hash: ")+T(psttn)+tcr ) ;
        //                {
        //                if( !hashB )
        //
        //                PUSE( tin0P , pbBuf ) ;
        //                hashB = hashF( pbBuf , TICK , 0 ) ;
        //            
        //                }
        //                    __( TICK - cbr ) ;
        //                    etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
        //                    countT cbr = TICK ;
        //
        //                    etThread.fileOpenF( tin0P , hFile , countTC() , psttn , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
        //                    handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        //                {
        //                byteT* pbBuf = PUSE.newF( tin0P , LF , TICK ) ; ___( pbBuf ) ;
        //            {
        //            if( pcLever[ 2 ] || pcLever[ 3 ] > TICK )
        //            ZE( countT , hashB ) ;
        //            ZE( countT , cbB ) ;
        //            ZE( byteT* , pbB ) ;
        //        {
        //        if( etThread.strCompareF( tin0P , psttn , psttnFound ) )
        //
        //        strokeS* psttn = (strokeS*)swsName.downF( tin0P , hWalk ) ;
        //    {
        //    do
        //{
        //if( bFound )
        //
        //while( ~hWalk ) ;
        //}
        //    }
        //        break ;
        //        }
        //            etThread.boxGetShadowF( tin0P , pbA , cbA , psttn ) ; ___( pbA ) ;
        //        {
        //        else
        //        }
        //            }
        //                BLAMMO ;
        //                LOGrAW( T("could not get hash: ")+T(psttn)+tcr ) ;
        //            {
        //            if( !hashA )
        //
        //            PUSE( tin0P , pbBuf ) ;
        //            hashA = hashF( pbBuf , TICK , 0 ) ;
        //
        //            }
        //                __( TICK - cbr ) ;
        //                etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
        //                countT cbr = TICK ;
        //
        //                etThread.fileOpenF( tin0P , hFile , countTC() , psttn , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
        //                handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        //            {
        //            byteT* pbBuf = PUSE.newF( tin0P , LF , TICK ) ; ___( pbBuf ) ;
        //        {
        //        if( pcLever[ 2 ] || pcLever[ 3 ] > TICK )
        //
        //        etThread.strMakeF( tin0P , LF , psttnFound , psttn ) ; ___( psttnFound ) ;
        //
        //        }
        //            cbA = hashA = 0 ;
        //            etThread.delF( tin0P , pbA ) ;
        //            etThread.delF( tin0P , psttnFound ) ;
        //        {
        //        if( psttnFound )
        //
        //        if( !bFound ) bFound = 1 ;
        //    {
        //    if( !psttnFound || psttn->idAdam < psttnFound->idAdam )
        //
        //    strokeS* psttn = (strokeS*)swsName.downF( tin0P , hWalk ) ;
        //{
        //if( !bFound ) do                        // FIND THE NAME THAT IS THE SHORTEST





        while( ~hWalk ) ;
        }
            etThread.delF( tin0P , pbA ) ;
            while( ~hWalk2 ) ;
            }
                }
                    etThread.delF( tin0P , pbB ) ;
                    }
                        hWalk.closeIfF() ;
                        etThread.delF( tin0P , psttn2 ) ;
                        LOGrAW( T("zapped big: ")+T(psttn2)+tcr ) ;
                        etThread.boxZapF( tin0P , psttn2 ) ;
                        swsName.extractF( 0 , tin0P ) ;
                    {
                    else if( hashA == hashB )
                    }
                        hWalk.closeIfF() ;
                        etThread.delF( tin0P , psttn2 ) ;
                        LOGrAW( T("zapped: ")+T(psttn2)+tcr ) ;
                        etThread.boxZapF( tin0P , psttn2 ) ;
                        swsName.extractF( 0 , tin0P ) ;
                    {
                    if( cbA && cbB == cbA && !etThread.memCompareF( tin0P , pbA , pbB , cbA ) )

                    }
                        hashB = hashF( pbB , cbB , 0 ) ;
                        etThread.boxGetShadowF( tin0P , pbB , cbB , psttn2 ) ; ___( pbB ) ;
                    {
                    else
                    }
                        }
                            BLAMMO ;
                            LOGrAW( T("could not get hash: ")+T(psttn2)+tcr ) ;
                        {
                        if( !hashB )
                
                        PUSE( tin0P , pbBuf ) ;
                        hashB = hashF( pbBuf , TICK , 0 ) ;
                
                        }
                            __( TICK - cbr ) ;
                            etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
                            countT cbr = TICK ;
                
                            etThread.fileOpenF( tin0P , hFile , countTC() , psttn2 , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
                            handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                        {
                        byteT* pbBuf = PUSE.newF( tin0P , LF , TICK ) ; ___( pbBuf ) ;
                    {
                    if( pcLever[ 2 ] || pcLever[ 3 ] > TICK )
                    ZE( countT , hashB ) ;
                    ZE( countT , cbB ) ;
                    ZE( byteT* , pbB ) ;
                {
                if( etThread.strCompareF( tin0P , psttn , psttn2 ) )

                strokeS* psttn2 = (strokeS*)swsName.downF( tin0P , hWalk2 ) ;
            {
            do
            handleC hWalk2( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

            }
                hashA = hashF( pbA , cbA , 0 ) ;
                etThread.boxGetShadowF( tin0P , pbA , cbA , psttn ) ; ___( pbA ) ;
            {
            else
            }
                }
                    BLAMMO ;
                    LOGrAW( T("could not get hash: ")+T(psttn)+tcr ) ;
                {
                if( !hashA )
        
                PUSE( tin0P , pbBuf ) ;
                hashA = hashF( pbBuf , TICK , 0 ) ;
        
                }
                    __( TICK - cbr ) ;
                    etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
                    countT cbr = TICK ;
        
                    etThread.fileOpenF( tin0P , hFile , countTC() , psttn , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
                    handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                {
                byteT* pbBuf = PUSE.newF( tin0P , LF , TICK ) ; ___( pbBuf ) ;
            {
            if( pcLever[ 2 ] || pcLever[ 3 ] > TICK )
            ZE( countT , hashA ) ;
            ZE( countT , cbA ) ;
            ZE( byteT* , pbA ) ;

            //LOGrAW( T("++++++++ ")+T(psttn)+tcr ) ;

            strokeS* psttn = (strokeS*)swsName.downF( tin0P , hWalk ) ;
        {
        do


       
        //while( ~hWalk ) ;
        //}
        //    else etThread.delF( tin0P , psttTest ) ;
        //    }
        //        break ;
        //        etThread.delF( tin0P , psttTest ) ;
        //        }
        //            etThread.boxGetShadowF( tin0P , pbA , cbA , psttn ) ; ___( pbA ) ;
        //        {
        //        else
        //        }
        //            }
        //                BLAMMO ;
        //                LOGrAW( T("could not get hash: ")+T(psttn)+tcr ) ;
        //            {
        //            if( !hashA )
        //
        //            PUSE( tin0P , pbBuf ) ;
        //            hashA = hashF( pbBuf , TICK , 0 ) ;
        //
        //            }
        //                __( TICK - cbr ) ;
        //                etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
        //                countT cbr = TICK ;
        //
        //                etThread.fileOpenF( tin0P , hFile , countTC() , psttn , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
        //                handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        //            {
        //            byteT* pbBuf = PUSE.newF( tin0P , LF , TICK ) ; ___( pbBuf ) ;
        //        {
        //        if( pcLever[ 2 ] || pcLever[ 3 ] > TICK )
        //
        //        etThread.strMakeF( tin0P , LF , psttnFound , psttn ) ; ___( psttnFound ) ;
        //
        //        bFound = 1 ;
        //    {
        //    if( !etThread.strCompareF( tin0P , psttTest , tTest ) )
        //    etThread.strSubstringF( tin0P , psttTest , idf , idl , psttn ) ; ___( psttTest ) ;
        //    countT idl = 36 ;
        //    countT idf = 34 ;
        //    ZE( strokeS* , psttTest ) ;
        //
        //    strokeS* psttn = (strokeS*)swsName.downF( tin0P , hWalk ) ;
        //{
        //do                                      // FIND A NAME THAT CONTAINS THE TEST VALUE
        //ZE( strokeS* , psttnFound ) ;
        //ZE( countT , hashA ) ;
        //ZE( countT , cbA ) ;
        //ZE( byteT* , pbA ) ;
        //ZE( boolT , bFound ) ;
        handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( swsName > 1 )

    //LOGrAW( "----------------------------------------------------------------------------------------------------------------\r\n" ) ;
    CONoUTrAW5( "\r                 \r" , cFlavors , " " , idf , "" ) ;

    etThread.memCopyF( tin0P , (byteT*)pcLever , (byteT*)swsName.leverF( tin0P , idf ) , sizeof pcLever ) ;
{
for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
countT cFlavors = swsName.cFlavorsF( tin0P ) ;
TN( tTest , "dsc" ) ;

}
    etThread.delF( tin0P , pstt1m ) ;
    }
        }
            PUSE( tin0P , *(byteT**)&pInfo ) ;
    
            }
                swsName << psttn ;
                etThread.strMakeF( tin0P , LF , psttn , psttc1 ) ; ___( psttn ) ;
                ZE( strokeS* , psttn ) ;
    
                pcLever[ 3 ] = pInfo->cbUsed ;
                pcLever[ 2 ] = pInfo->cbUsedHigh ;
                pcLever[ 1 ] = 0 /*pInfo->timeWritten1*/ ;
                pcLever[ 0 ] = hash /*pInfo->timeWritten2*/ ;

                }
                    PUSE( tin0P , pbBuf ) ;
                    hash = hashF( pbBuf , cbHash , 0 ) ;
                    
                    }
                        __( cbHash - cbr ) ;
                        etThread.fileReadF( tin0P , pbBuf , cbr , hFile ) ;
                        countT cbr = cbHash ;
                    {
                    byteT* pbBuf = PUSE.newF( tin0P , LF , cbHash ) ; ___( pbBuf ) ;
                {
                if( cbHash )

                ;
                    : pInfo->cbUsed
                    ? TICK
                countT cbHash = pInfo->cbUsedHigh || pInfo->cbUsed > TICK
            {
            if( pInfo )
    
            etThread.diskFileQueryF( tin0P , pInfo , hFile ) ; ___( pInfo ) ;
            ZE( infoFileS* , pInfo ) ;
        {
        if( ~hFile )
    
        etThread.fileOpenF( tin0P , hFile , countTC() , psttc1 , ifcOPENaCCESS_R , 0 , flOPENdETAILS_null , ifcOPENhOW_nFeO ) ;
        handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
        ZE( countT , hash ) ;
    {
    FORsTRINGSiN1( pstt1m )
    
    etThread.boxMenuF( tin0P , soul , T("///d/gather.to/*") ) ; ___( pstt1m ) ;
    ZE( strokeS* , pstt1m ) ;
{
switchStackC swsName( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , (byteT*)pcLever , sizeof pcLever , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
countT pcLever[ 4 ] ;
TN( tcr , "\r\n" ) ;

TODO

/*1*/WAKEsHOWtEXT( "tool.migrate.delete.redundant.gathered.files" )/*1*/
/**/
*/
 countT timeWritten1 ;
 sCountT timeWritten2 ;
 countT cbUsedHigh ;
 countT cbUsed ;
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

