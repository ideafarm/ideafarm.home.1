
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        strMakeF( tinBaseP , LF , psttP , T("") ) ; //CALLER MUST TAG
    {
    if( !psttP ) // THIS WILL HAPPEN IF psttP IS NULL LENGTH

    delF( tinBaseP , pstt1Lines ) ;
    }
        }
            }

                }
                    }
                        }
                            break ;
                            
                            delF( tinBaseP , psttw ) ;
                            strFuseF( tinBaseP , psttP , psttw ) ;
                            strFuseF( tinBaseP , psttP , tIndent ) ;
                            strSubstringF( tinBaseP , psttw , idf , idl , psttc1 ) ; ___( psttw ) ;
                            ZE( countT , idl ) ;
                            countT idf = idMin ;
                            ZE( strokeS* , psttw ) ;
                        {
                        case 2 :
                        case 1 : { cNonblankLines ++ ; csttText += psttc1->idAdam - idMin + 1 ; break ; }
                        case 0 : { if( !idMin || idMin > idWoth ) idMin = idWoth              ; break ; }
                    {
                    switch( offPass )
                {
                if( idWoth )                                                                                    // IF THE LINE CONTAINS NONBLANK TEXT
                countT idWoth = strIdAnyF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tb , psttc1 , 0 , 1 , flSTRiDaNY_NOT ) ;
                idf = 1 ;
            {
            else
            }
                }
                    case 2 : { strFuseF( tinBaseP , psttP , tcr ) ; break ; }
                    case 1 : { cDelimitersNeeded ++ ; break ; }
                {
                switch( offPass )
            {
            if( strIdAnyF( tinBaseP , 0 , flSTRmATCH_null , idf , sttq , tcr , psttc1 ) )                                                 // IF THE LINE IS DELIMITERS
            countT idf = 1 ;

            }
                }
                    }
                        break ;
                        strMakeF( tinBaseP , LF , psttP , 0 , cNonblankLines * csttP + csttText + cDelimitersNeeded * tcr.csF( tinBaseP ) ) ; //CALLER MUST TAG
                    {
                    case 2 :
                {
                switch( offPass )
                bWoth = 0 ;
            {
            if( bWoth )
        {
        FORsTRINGSiN1( pstt1Lines )
        boolT bWoth = 1 ;
    {
    for( countT offPass = 0 ; offPass <= 2 ; offPass ++ ) // 0: CALD idMin ; 1: CALC SPACE NEEDED ; 2: ALLOCATE AND BUILD THE OUTPUT
    TN( tIndent , "" ) ; tIndent = TP("",csttP) ;
    ZE( countT , cNonblankLines ) ;
    ZE( countT , csttText ) ;
    ZE( countT , cDelimitersNeeded ) ;
    ZE( countT , idMin ) ;

    if( bDeleteOld ) delF( tinBaseP , *(strokeS**)&psttOldP ) ;
    strWordsF( tinBaseP , pstt1Lines , psttOldP , sttq , tcr , flSTRwORDS_DELIMITERS ) ; ___( pstt1Lines ) ;
    TN( tcr , "\r\n" ) ;
    TN( tb , " " ) ;
    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
    ZE( strokeS* , pstt1Lines ) ;

    }
                   psttP = 0 ;
        psttOldP = psttP ;
    {
    if( bDeleteOld )
    boolT bDeleteOld = !psttOldP ;

    _IO_

    }
        if( POOP ) return ;
        __( !psttP == !psttOldP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    SCOOP
{
/**//*1*/voidT etherC::strIndentF( tinBaseS& tinBaseP , strokeS*& psttP , const strokeS* psttOldP , const countT csttP )/*1*/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

