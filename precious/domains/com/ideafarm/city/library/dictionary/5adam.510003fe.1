
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    etThread.delF( tinBaseP , psttLevel ) ;
    }
        }
            }
                }
                    if( pMainF ) (*pMainF)( &main ) ;
                    mainS main( tinBaseP , ether , etThread , T("cid ")+tCid+T(" level ")+T(psttLevel) ) ;
                    etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step f of 31") ) ;
                {
                else
                if( etThread ) ifcGATEeRROR( e )
                etThread.dllEntryF( tinBaseP , pMainF , hDll , T("mainF") ) ;
                ZE( mainFT , pMainF ) ;
                etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step e of 31") ) ;
            {
            else
            if( etThread ) ifcGATEeRROR( d )
            etThread.dllOpenF( tinBaseP , hDll , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevel)+T("/40000401.ipdos-wd") ) ;
            ZE( countT , hDll ) ;
            etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step d of 31") ) ;
        {
        else
        if( etThread ) ifcGATEeRROR( c )
        refreshFilesF( tinBaseP , etThread , psttLevel , tCid ) ;
        etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step c of 31") ) ;
    {
    else
    if( etThread ) ifcGATEeRROR( b )
    etThread.delF( tinBaseP , psttOldCid ) ;
    TN( tCid , psttOldCid ) ;
    etThread.strWordF( tinBaseP , psttLevel , pmp->psttDirectives , sttQuote , S1C(' ') , 4 ) ;
    etThread.delF( tinBaseP , psttLevel ) ;
    __( !!etThread.strCompareF( tinBaseP , psttLevel , T("level") ) ) ;
    etThread.strWordF( tinBaseP , psttLevel , pmp->psttDirectives , sttQuote , S1C(' ') , 3 ) ;

    etThread.strWordF( tinBaseP , psttOldCid , pmp->psttDirectives , sttQuote , S1C(' ') , 2 ) ;
    etThread.delF( tinBaseP , psttOldCid ) ;
    __( !!etThread.strCompareF( tinBaseP , psttOldCid , T("cid") ) ) ;
    etThread.strWordF( tinBaseP , psttOldCid , pmp->psttDirectives , sttQuote , S1C(' ') , 1 ) ;

    strokeS sttQuote ;
    ZE( strokeS* , psttLevel ) ;
    ZE( strokeS* , psttOldCid ) ;
    etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("step b of 31") ) ;
{
else
if( etThread ) ifcGATEeRROR( a )
__Z( pmp ) ;
etThread.strokeF( tinBaseP , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+T("\r" BLANK79 "\rstep a of 31") ) ;

TODO

}
    etThread.delF( tinBaseP , psttInUse ) ;
    etThread.delF( tinBaseP , pstt1Wanted ) ;
    etThread.diskFileRefreshF( tinBaseP , psttInUse , pstt1Wanted , pstt1Wanted , T("city.center.ideafarm.com//box.server.deputy/") ) ;
    ZE( strokeS* , psttInUse ) ;
    fileListF( tinBaseP , etThread , pstt1Wanted , psttLevelP , psttOldCidP ) ;
    ZE( strokeS* , pstt1Wanted ) ;
{
voidT refreshFilesF( tinBaseS& tinBaseP , etherC& etThread , const strokeS* const psttLevelP , const strokeS* const psttOldCidP )

}
    etThread.delF( tinBaseP , psttAdams ) ;

    }
        if( idf ) etThread.strSubstringF( tinBaseP , pstta , idf , sttq , T(" ") , psttAdams , 1 ) ;
        etThread.delF( tinBaseP , pstta ) ;
        if( pstta->idAdam ) { etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/")+T(pstta)+T(".ipdos-wd") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ; }
    {
    while( pstta )
    etThread.strSubstringF( tinBaseP , pstta , idf , sttq , T(" ") , psttAdams , 1 ) ;
    ZE( strokeS* , pstta ) ;
    countT idf = 1 ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;

    etThread.delF( tinBaseP , post ) ;
    etThread.strMakeF( tinBaseP , LF , psttAdams , T(post) ) ; ___( psttAdams ) ;
    ZE( strokeS* , psttAdams ) ;

    __Z( post ) ;
    }
        etThread = 0 ;
        etThread.boxGetShadowF( tinBaseP , post , cost , T("city.center.ideafarm.com//box.server////ideafarm/ephemeral/domains/com/ideafarm/city/data/base/")+T(psttOldCidP)+T("/subscriptions") ) ; ___( post ) ;
    {
    ZE( countT , cost ) ;
    ZE( osTextT* , post ) ;

    etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/40401040.ipdos-wd") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ;
    etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/20401040.ipdos-wd") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ;
    etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/40000401.ipdos-wd") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ;
    etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/01000030.ipdos-we") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ;
    etThread.strFuseSeparateF( tinBaseP , pstt1P , T("///ideafarm/ephemeral/domains/com/ideafarm/city/park/")+T(psttLevelP)+T("/01000020.ipdos-we") , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ; ___( pstt1P ) ;
    __NZ( pstt1P ) ;
{
voidT fileListF( tinBaseS& tinBaseP , etherC& etThread , strokeS*& pstt1P , const strokeS* const psttLevelP , const strokeS* const psttOldCidP )

/*1*/WAKEhIDE( "city.gate.2" )/*1*/
/**/
*/
 strFuseSeparateF
this function can fail due to hardcoded capacity limits
then it calls the gate dll
it obtains the gate dll, the citizen bootstrap exe, and this host's subscription list
this is the bootstrap dll
it is illegal to refer to this symbol in the definition of an adam
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

