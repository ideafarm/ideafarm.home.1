
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.delF( tinBaseP , pbSecret ) ;

etThread.strokeF( tinBaseP , T("\r\nthe secret is:\r\n")+T(pbSecret)+T("\r\n") ) ;

etThread.delF( tinBaseP , pc01All ) ;
dad( tinBaseP , pbSecret , cbSecret , pc01All , cc01All ) ; ___( pbSecret ) ;
ZE( countT , cbSecret ) ;
ZE( byteT* , pbSecret ) ;

dadC dad( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;

}
    etThread.strokeF( tinBaseP , T("\r\ncode:\r\n")+T(psttd) ) ;
    etThread.strDumpIF( tinBaseP , psttd , (byteT*)pc01All , cc01All * sizeof( count01T ) , 0x20 , 4 , ' ' ) ; ___( psttd ) ;
    ZE( strokeS* , psttd ) ;
{

}
    etThread.delF( tinBaseP , pc01Secret ) ;
    etThread.delF( tinBaseP , pc01SRU ) ;
    }    
        etThread.memCopyF( tinBaseP , (byteT*)( pc01All + cc01SRU ) , (byteT*)pc01Secret , cc01Secret * sizeof( count01T ) ) ;
        etThread.memCopyF( tinBaseP , (byteT*)  pc01All             , (byteT*)pc01SRU    , cc01SRU    * sizeof( count01T ) ) ;
    {
    if( pc01All )
    etThread.newF( tinBaseP , LF , pc01All , cc01All ) ; ___( pc01All ) ;
    cc01All = cc01SRU + cc01Secret ;
    
    mom( tinBaseP , pc01Secret , cc01Secret , postSecret , sizeof postSecret ) ; ___( pc01Secret ) ;
    ZE( countT    , cc01Secret ) ;
    ZE( count01T* , pc01Secret ) ;
    
    osTextT postSecret[] = "This is the day that the Lord has made.  Let us rejoice and be glad.  For He is the source of all things!  Thank you, Jesus!" ;
    
    etThread.delF( tinBaseP , pbSRU ) ;
    mom( tinBaseP , pc01SRU , cc01SRU , pbSRU , /*cbCover ? cbCover : 0x400*/cbSRU , c8n , 1 ) ; ___( pc01SRU ) ;
    ZE( countT    , cc01SRU ) ;
    ZE( count01T* , pc01SRU ) ;
    
    momC mom( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
    
    count8S c8n( timeN2 , timeN1 , 1 , idbNAMEpIN_PUREsUPERrANDOMdOnOTrELEASE , 1 ) ;
    
    etThread.osTimeNowF( tinBaseP , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT , timeN1 ) ;

    countT cbCover = cbCoverF( tinBaseP , pbSRU , cbSRU ) ;
    
    }
        etThread.delF( tinBaseP , pstt1m ) ;
        }
            break ;
            etThread.boxGetShadowF( tinBaseP , pbSRU , cbSRU , psttc1 ) ; ___( pbSRU ) ;
            //U:: USE GET,NOT GET SHADOW
        {
        FORsTRINGSiN1( pstt1m )
        etThread.boxMenuF( tinBaseP , soul , tInLike , 0 , 1 ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;
        TN( tInLike , "///ideafarm/ephemeral/super.random.numbers/set.*" ) ;
        TN( tDot , "." ) ;
    {
    ZE( countT , cbSRU ) ;
    ZE( byteT* , pbSRU ) ;
{
ZE( countT    , cc01All ) ;
ZE( count01T* , pc01All ) ;

TODO

DONE( tmF )
}
{
if( pTaskP && pTaskP->c1 )
TASK( tmF )

/*1*/WAKEhIDE( "doodle.secrets" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

