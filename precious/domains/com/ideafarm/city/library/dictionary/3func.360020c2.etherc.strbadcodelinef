
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        if( POOP ) POOPR

        }
            ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttBad ) ;
            }
                ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttp ) ;
                ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , psttP , T(psttp)+T("@\r\n")+T(psttBad)+T("\r\n")+T(psttp)+T("@\r\n") ) ; //CALLER MUST TAG ___( psttP ) ;
                ((tinNormalS&)tinP).pEtScratch->strResizeF( tinP , psttp , idCol - 1 ) ; ___( psttp ) ;
                ZE( strokeS* , psttp ) ;
            {
            else
            }
                ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , psttP , psttBad ) ; //CALLER MUST TAG ___( psttP ) ;
            {
            if( !idCol )
        {
        if( psttBad )

        }
            ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttAll ) ;
            ((tinNormalS&)tinP).pEtScratch->strSubstringLineF( tinP , psttBad , idf , sttq , psttAll , idLine ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
            }
                ((tinNormalS&)tinP).pEtScratch->delF( tinP , postAll ) ;
                ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , psttAll , T(postAll) ) ; ___( psttAll ) ;
                ((tinNormalS&)tinP).pEtScratch->boxGetShadowF( tinP , postAll , costAll , T("///ideafarm/ephemeral/backed.up.never/gen/")+T(psttIdAdamP)+T("/")+T(psttIdAdamP)+T(".cpp") , 1 ) ; ___( postAll ) ;
                ZE( countT , costAll ) ;
                ZE( osTextT* , postAll ) ;
            {
            ZE( strokeS* , psttAll ) ;
        {
        ZE( strokeS* , psttBad ) ;

        ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttErr ) ;
        }
            }
                ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttw ) ;
                }
                    ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttw2 ) ;
                    idCol = ((tinNormalS&)tinP).pEtScratch->strDigitsToSCountF( tinP , psttw2 , 0xa , 1 ) ;
                    ((tinNormalS&)tinP).pEtScratch->strSubstringF( tinP , psttw2 , idf2 , idl2 , psttw ) ; ___( psttw2 ) ;
                    ZE( strokeS* , psttw2 ) ;
                    idl2 -- ;
                    idf2 += 5 ; // "(col "
                {
                if( idf2 && idl2 )
                idl2 = ((tinNormalS&)tinP).pEtScratch->strIdF( tinP     , idf , sttq , S1C(')')   , psttw ) ;
                idf2 = ((tinNormalS&)tinP).pEtScratch->strIdF( tinP , 0 , flSTRmATCH_null , idf , sttq , T("(col ") , psttw ) ;
                //sttq = ze ;
                idf = 1 ;
                ((tinNormalS&)tinP).pEtScratch->strSubstringF( tinP , psttw , idf , sttq , T("\r\n") , psttErr , 1 ) ; ___( psttw ) ;

                ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttw ) ;
                idLine = ((tinNormalS&)tinP).pEtScratch->strDigitsToSCountF( tinP , psttw , 0xa , 1 ) ;
                ((tinNormalS&)tinP).pEtScratch->strSubstringF( tinP , psttw , idf2 , idl2 , psttErr ) ; ___( psttw ) ;
                ZE( strokeS* , psttw ) ;
                idl2 -- ;
                idf2 ++ ;
            {
            if( idf2 && idl2 )
            countT idl2 = ((tinNormalS&)tinP).pEtScratch->strIdF( tinP , idf , sttq , S1C(')') , psttErr ) ;
            countT idf2 = ((tinNormalS&)tinP).pEtScratch->strIdF( tinP , idf , sttq , S1C('(') , psttErr ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
        {
        ZE( countT , idCol ) ;
        ZE( countT , idLine ) ;

        }
            ((tinNormalS&)tinP).pEtScratch->delF( tinP , postErr ) ;
            ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , psttErr , T(postErr) ) ; ___( psttErr ) ;
            ((tinNormalS&)tinP).pEtScratch->boxGetShadowF( tinP , postErr , costErr , T("///ideafarm/ephemeral/backed.up.never/gen/")+T(psttIdAdamP)+T("/windows/")+T(psttIdAdamP)+T(".err") , 1 ) ; ___( postErr ) ;
            ZE( countT , costErr ) ;
            ZE( osTextT* , postErr ) ;
        {
        ZE( strokeS* , psttErr ) ;
        SCOOPS
    {
    IFsCRATCH

    _IO_

    }
        if( POOP ) return ;
        __Z( psttIdAdamP ) ;
        __NZ( psttP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strBadCodeLineF( tinBaseS& tinP , strokeS*& psttP , const strokeS* const psttIdAdamP )/*1*/

/**/
*/
arguments
 for "warning" errors, psttP will report the problematic line even though the adam class was made
the adam class might have been made even if psttP is not null
if the specified adam was made successfully, psttP will remain null
if the specified adam has not yet been made, psttP will remain null
sets psttP to a line triplet containing the first definition line that contains an error
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.10300dd.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strBadCodeLineF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

