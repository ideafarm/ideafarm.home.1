
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            //}
            //    pEtRock->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
            //
            //    }
            //        OStEXTC(  ostoSay , offsTry , 0 ) ;
            //        OStEXTAK( ostoSay , "    " ) ;
            //    {
            //    if( !pbP )
            //    OStEXTC(  ostoSay , offs , 0 ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , mask , 0 ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , dropHeader , '0' ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , poolC_cBitsExpCbDrop , 0 ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , expSlotsMin , 0 ) ;
            //    OStEXTAK( ostoSay , "    " ) ;
            //    OStEXTC(  ostoSay , expCbDrop , 0 ) ;
            //    OStEXTA(  ostoSay , !pbP ? "slotsC::operator (): trying harder succeeded [expCbDrop,expSlotsMin,poolC_cBitsExpCbDrop,dropHeader,mask,offs,offsTry]:    " : "slotsC::operator (): trying harder failed [expCbDrop,expSlotsMin,poolC_cBitsExpCbDrop,dropHeader,mask,offs]:    " ) ;
            //    OStEXT( ostoSay , TUCK << 0 ) ;
            //{
            //if( pEtRock )

            }
                }
                    if( !pbP ) break ;
                    (*ppSex[ offsTry ])( tinP , pbP ) ;
                {
                if( ppSex[ offsTry ] )
            {
            for( offsTry = 0 ; offsTry < CsLOTeXTENTS ; offsTry ++ )
            ZE( countT , offsTry ) ;

            //}
            //    pEtRock->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
            //
            //    OStEXTC(  ostoSay , expCbDrop , 0 ) ;
            //    OStEXTAK( ostoSay , "slotsC::operator (): trying harder [expCbDrop]:    " ) ;
            //    OStEXT(   ostoSay , TUCK << 0 ) ;
            //{
            //if( pEtRock )
            //etherC* pEtRock = &etherC::etRockIF( tinP ) ;
        {
        else
        }
            inc02AM( pcTallyOut[ offs ] ) ;

            }
                //if( !pPoolContainsMe ) { BLAMMOiD( 0xf ) ; }   // I BLAMMO EVEN IF I WAS ABLE TO DELETE THE DROP, BECAUSE dropHeader HAS BEEN CORRUPTED OR THERE IS SOME OTHER ERROR ; A:ASSUME: IF pPoolContainsMe THEN I ASSUME THAT *pPoolContainsMe WILL BLAMMO AFTER TRACING

                if( pbP ) { BLAMMOiD( 0xe ) ; }     // I BLAMMO IF TRYING HARDER DIDN'T WORK

                THREADmODE4rESTORE

                }
                    //((tinNormalS&)tinP).pc Utility[ 7 ] = bDeleted ? BM_HIGH | offsTry              : 0 ;
                    //((tinNormalS&)tinP).pc Utility[ 6 ] =            BM_HIGH | bDeleted                 ;
                    //((tinNormalS&)tinP).pc Utility[ 5 ] =            BM_HIGH | offs                     ;
                    //((tinNormalS&)tinP).pc Utility[ 4 ] =            BM_HIGH | poolC_cBitsExpCbDrop     ;
                    //((tinNormalS&)tinP).pc Utility[ 3 ] =            BM_HIGH | expSlotsMin              ;
                    //((tinNormalS&)tinP).pc Utility[ 2 ] = mask ;
                    //((tinNormalS&)tinP).pc Utility[ 1 ] = dropHeader ;

                    }
                        }
                            }
                                break ;
                                bDeleted = 1 ;
                            {
                            if( !pbP )

                            (*ppSex[ offsTry ])( tinP , pbP ) ;
                        {
                        if( ppSex[ offsTry ] )
                    {
                    for( offsTry = 0 ; offsTry < CsLOTeXTENTS ; offsTry ++ )
                    ZE( countT , offsTry ) ;
                    ZE( boolT , bDeleted ) ;
                {
                else
                if( pPoolContainsMe ) (*pPoolContainsMe)( tinP , pbP ) ;

                //((tinNormalS&)tinP).pc Utility[ 0 ] = (countT)pbP ;

                THREADmODE4oN( flTHREADmODE4_POOLdELtRYhARDERaNDtRACE )
            {
            if( pbP )

            }
                //}
                //    pEtRock->traceF( tinP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
                //
                //    OStEXTC(  ostoSay , offs , 0 ) ;
                //    OStEXTAK( ostoSay , "    " ) ;
                //    OStEXTC(  ostoSay , mask , 0 ) ;
                //    OStEXTAK( ostoSay , "    " ) ;
                //    OStEXTC(  ostoSay , dropHeader , 0 ) ;
                //    OStEXTAK( ostoSay , "    " ) ;
                //    OStEXTC(  ostoSay , poolC_cBitsExpCbDrop , 0 ) ;
                //    OStEXTAK( ostoSay , "    " ) ;
                //    OStEXTC(  ostoSay , expSlotsMin , 0 ) ;
                //    OStEXTAK( ostoSay , "slotsC::operator (): no sex here! [expSlotsMin,poolC_cBitsExpCbDrop,dropHeader,mask,offs]:    " ) ;
                //    OStEXT(   ostoSay , TUCK << 0 ) ;
                //{
                //if( pEtRock )
                //etherC* pEtRock = &etherC::etRockIF( tinP ) ;
            {
            else                                                                    // OBSERVED CLOUD 6d9: 20211202@1230 20211211@0800
            if( ppSex[ offs ] ) (*ppSex[ offs ])( tinP , pbP ) ;                    // I TRY TO DELETE pbP HERE

            inc02AM( pcTallyIn[ offs ] ) ;

            countT offs = expSlotsMin + ( ( dropHeader >> poolC_cBitsExpCbDrop ) & mask ) ;
            countT mask = ( 1 << CbITSeXPsLOTS ) - 1 ;
            countT& dropHeader = ((countT*)pbP)[ - 1 ] ;
        {
        if( cbDropHeader && !( F(((tinNormalS&)tinP).flagsThreadMode4) & flTHREADmODE4_POOLdELtRYhARDERaNDtRACE ) )
    {
    if( pbP )

    if( F(flagsCt) & flSLOTSc_READoNLY ) { BLAMMO ; }
    _IO_
{
/*1*/voidT slotsC::operator ()( tinNormalS& tinP , byteT*& pbP )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

