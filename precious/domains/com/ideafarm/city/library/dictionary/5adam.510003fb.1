
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

else           for( countT idAdam = idMin ; !ether && idAdam <= idMax && !etThread ; idAdam ++ ) workF( tin0P , etThread , idAdam ) ;
if( bReverse ) for( countT idAdam = idMax ; !ether && idAdam >= idMin && !etThread ; idAdam -- ) workF( tin0P , etThread , idAdam ) ;

const boolT bReverse = bReverseF( tin0P , etThread ) ;

if( idMin == ifcIDaDAMoLD_BASELINErOOT ) idMin ++ ;
else etThread.boxMenuIdRangeF( tin0P , idMin , idMax , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.????104") , 0x100000 , S1C('/') ) ;
}
    idMax = 0x4010112 ;
    idMin = 0x4010112 ;
{
if( bTest )
ZE( countT , idMax ) ;
ZE( countT , idMin ) ;

const boolT bTest = bTestF( tin0P , etThread ) ;

TODO

}
    etThread.delF( tin0P , psttp ) ;
    etThread = 0 ;
    etThread.diskMoveFileOrDirF( tin0P , t1build , T("///d/ideafarm.work/backed.up.never/gen/exe/")+T(psttp)+T(".ipdos-wd") ) ;
    etThread = 0 ;
    etThread.diskFileOrDirDeleteF( tin0P , t1build , flFILEoRdIRdELETE_null , 1 ) ;
    textC t1build = T("///ideafarm/ephemeral/city/park/1build/")+T(psttp)+T(".ipdos-wd") ;
    makeF( tin0P , etThread , psttp , tPrefix+T(psttp)+T(" ") ) ;
    etThread.strFromF( tin0P , psttp , idAdamP ) ;
    ZE( strokeS* , psttp ) ;

    TN( tPrefix , "df30104 makeAllAdams"": " ) ;
{
voidT workF( tin0S& tin0P , etherC& etThread , const countT idAdamP )

}
    //etThread.osProcessF( value , idDeathType , tin0P , T("wlib.exe") , tLibArg ) ;
    //textC tLibArg = T("-q -n -b ")+tIdi+T("w.lib +")+tIdi+T(".ipdos-wd") ;
    //NOT NEEDED.  DOES NOT WORK

    }
        etThread.strokeF( tin0P , T(psttPrefixP)+T("(done)\r\n") ) ;
        etThread.osProcessF( value , idDeathType , tin0P , T("wlink.exe") , tLinkArg ) ;
        textC tLinkArg = T("system nt_dll op q name \\ideafarm.work\\backed.up.never\\gen\\exe\\")+tIdi+T(".ipdos-wd file ")+tIdi+T(".obj library \\ideafarm.work\\backed.up.never\\gen\\exe\\ifcbasew.lib") ;
        ZE( countT , idDeathType ) ;
        ZE( countT , value ) ;
        hoverC hover2( tin0P , etThread , tDirw+T("/") ) ;
        etThread.strokeF( tin0P , T(psttPrefixP)+T("(step a of a)\r\n") ) ;
    {
    else
    }
        etThread.strokeF( tin0P , T(psttPrefixP)+T("(aborted)\r\n") ) ;
        }
            ((thirdC&)etThread).logF( tin0P , T("strBadCodeLineF could not process ")+tIdi ) ;
            etThread.strokeF( tin0P , T("||||\r\nno more information is available\r\n||||") ) ;
        {
        else
        }
            etThread.delF( tin0P , psttbcl ) ;
            etThread.strokeF( tin0P , psttbcl ) ;
        {
        if( psttbcl )
        etThread.strBadCodeLineF( tin0P , psttbcl , tIdi ) ;
        ZE( strokeS* , psttbcl ) ;

        ((thirdC&)etThread).logF( tin0P , T("4e30104: MAKE FAILED: ")+T(psttPrefixP) ) ;

        etThread = 0 ;
    {
    if( etThread )

    etThread.delF( tin0P , post ) ;
    //U: OBSOLETED: ((thirdC&)etThread).osCompileF( tin0P , post ) ;
    etThread.strMakeF( tin0P , LF , post , tIdi ) ;
    hoverC hover1( tin0P , etThread , tDir+T("/") ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tDirw+T("/") ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 9 of a)\r\n") ) ;

    }
        __( idDeathType ) ;
        __( value ) ;
        etThread.osProcessF( value , idDeathType , tin0P , T("///d/ideafarm.work/backed.up.never/gen/exe/released.i00005/01000020.ipdos-we") , T("5c30104 !faceHear ")+tIdi ) ;
        ZE( countT , idDeathType ) ;
        ZE( countT , value ) ;
        etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 8 of a)\r\n") ) ;
    {

    cost = 0 ;
    etThread.delF( tin0P , post ) ;
    etThread.boxPutF( tin0P , tCpp , post , cost ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 7 of a)\r\n") ) ;
    etThread.delF( tin0P , psttAll ) ;
    cost = etThread.strMakeF( tin0P , LF , post , psttAll ) ; ___( post ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 6 of a)\r\n") ) ;

    etThread.delF( tin0P , psttBody ) ;
    etThread.strMakeF( tin0P , LF , psttAll , T("#include \"\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\library\\snip\\ipdos.h\"\r\n#include \"\\ideafarm.home.1\\ephemeral\\city\\workshop\\snip\\1snip.005000a.lines.adam.")+tIdi+T( "\"\r\n//SOURCE: adam.")+tIdi+T(" BEGIN\r\n#define DDNAME \"adam.")+tIdi+T("\"\r\n#define DDNUMB 0x")+tIdiR+T("\r\n")+T(psttBody)+T("\r\n#undef DDNUMB\r\n#undef DDNAME\r\n//SOURCE: adam.")+tIdi+T(" END\r\n") ) ; ___( psttAll ) ;
    ZE( strokeS* , psttAll ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 5 of a)\r\n") ) ;

    etThread.strReverseF( tin0P , psttBody , 0 , T("\r\n") ) ; ___( psttBody ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 4 of a)\r\n") ) ;
    cost = 0 ;
    etThread.delF( tin0P , post ) ;
    etThread.strMakeF( tin0P , LF , psttBody , T(post) ) ; ___( psttBody ) ;
    ZE( strokeS* , psttBody ) ;
    etThread.strokeF( tin0P , T(psttPrefixP)+T("(step 3 of a)\r\n") ) ;
    etThread.boxGetShadowF( tin0P , post , cost , tRaw , 1 ) ; ___( post ) ;
    ZE( countT , cost ) ;
    ZE( osTextT* , post ) ;
    etThread.strokeF( tin0P , T("\f")+T(psttPrefixP)+T("(step 2 of a)\r\n") ) ;

    textC tDirw = tDir+T("/windows") ;
    textC tDir = tGen+tIdi ;
    textC tCpp = tGen+tIdi+T("/")+tIdi+T(".cpp") ;
    textC tRaw = tDic+T("adam.")+tIdi ;
    TN( tDic  , "///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/" ) ;
    TN( tGen  , "///d/ideafarm.work/backed.up.never/gen/" ) ;    

    }
        etThread.delF( tin0P , psttw ) ;
        tIdiR = T(psttw) ;
        etThread.strReverseF( tin0P , psttw ) ; ___( psttw ) ;
        etThread.strMakeF( tin0P , LF , psttw , psttParameterP ) ; ___( psttw ) ;
        ZE( strokeS* , psttw ) ;
    {
    TN( tIdiR , "" ) ;
    etThread.paperTitleF( tin0P , tIdi ) ;
    TN( tIdi  , psttParameterP ) ;
{
voidT makeF( tin0S& tin0P , etherC& etThread , const strokeS* const psttParameterP , const strokeS* const psttPrefixP )
//U: DIFFERENCE: socketC& sReplyP IS REMOVED FROM THIS COPY
//U: -NEARLY- DUPLICATE CODE: 4e30104 AND df30104

}
    return bTest ;

    }
        }
            if( bOk ) etThread.strokeF( tin0P , T("\"")+T(psttc1)+T("\" ok\r\n") ) ;
            else if( !etThread.strCompareF( tin0P , psttc1 , T("!test") ) ) { bTest = bOk = 1 ; }
            }
                }
                    default : { idArg = 0 ; break ; }
                {
                switch( idArg )
            {
            if( idArg )

            ZE( boolT , bOk ) ;
        {
        FORsTRINGSiN1( etThread.ether_pstt1_processParametersI_F( tin0P ) )
        ZE( countT , idArg ) ;
    {
    ZE( boolT , bTest ) ;
{
boolT bTestF( tin0S& tin0P , etherC& etThread )

}
    return bReverse ;

    }
        }
            if( bOk ) etThread.strokeF( tin0P , T("\"")+T(psttc1)+T("\" ok\r\n") ) ;
            else if( !etThread.strCompareF( tin0P , psttc1 , T("!reverse") ) ) { bReverse = bOk = 1 ; }
            }
                }
                    default : { idArg = 0 ; break ; }
                {
                switch( idArg )
            {
            if( idArg )

            ZE( boolT , bOk ) ;
        {
        FORsTRINGSiN1( etThread.ether_pstt1_processParametersI_F( tin0P ) )
        ZE( countT , idArg ) ;
    {
    ZE( boolT , bReverse ) ;
{
boolT bReverseF( tin0S& tin0P , etherC& etThread )

/*1*/WAKEhIDE( "city.make.all.adams" )/*1*/
/**/
*/
\<A HREF=\"5.df30104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

