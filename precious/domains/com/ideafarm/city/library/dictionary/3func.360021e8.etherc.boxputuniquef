
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            break ;
            strMakeF( tin0P , LF , psttP , psttc1 ) ; ___( psttP ) ;
        {
        FORsTRINGSiN1( pstt1zUse )
    {
    else
    if( bStringOfStrings ) { strMakeF( tin0P , LF , psttP , pstt1zUse ) ; ___( psttP ) ; }

    __( cFail ) ;

                            delF( tin0P , psttU     ) ;
    if( !bStringOfStrings ) delF( tin0P , pstt1Like ) ;

    }
        }
            }
                }
                    cFail ++ ;
                    POOPRqUIET
                {
                if( POOP )
                box.putF( tin0P , soulP ) ;
                boxC box( tin0P , *this , psttc1 , 0 , 0 , 0 , cOpenTriesP , 0 , 0 , flagsOpenDetailsP ) ;
                SCOOPS
            {
            IFsCRATCH
        {
        else
        }
            if( POOP ) break ;
            box.putF( tin0P , soulP ) ;
            boxC box( tin0P , *this , psttc1 , 0 , 0 , 0 , cOpenTriesP , 0 , 0 , flagsOpenDetailsP ) ;
        {
        if( this != ((tin123S&)tin0P).pEtScratch )
    {
    FORsTRINGSiN1( pstt1zUse )
    ZE( countT , cFail ) ;

    strokeS* pstt1zUse = tListUse ;
    }
        }
            delF( tin0P , psttUse ) ;
            tListUse += T(psttUse) ;

            }
                strFuseF( tin0P , psttUse , psttU ) ; ___( psttP ) ;
                strFuseF( tin0P , psttUse , T(".") ) ; ___( psttP ) ;
                strMakeF( tin0P , LF , psttUse , psttLikeP , ( psttU ? 1 + psttU->idAdam : 0 ) ) ; ___( psttUse ) ;
            {
            else
            if( strIdF( tin0P , tMark , psttc1 ) ) { strReplaceF( tin0P , psttUse , psttc1 , tMark , psttU ) ; ___( psttUse ) ; }
            ZE( strokeS* , psttUse ) ;
        {
        FORsTRINGSiN1( pstt1Like )
        TN( tMark , "@1@" ) ;
    {
    TlIST( tListUse ) ;

    else                    pstt1Like = (strokeS*)psttLikeP ;
    if( !bStringOfStrings ) { strFuseSeparateF( tin0P , pstt1Like , psttLikeP ) ; ___( pstt1Like ) ; }
    ZE( strokeS* , pstt1Like ) ;
    boolT bStringOfStrings = ISsTRINGoFsTRINGS( psttLikeP ) ;

    strUniqueF( tin0P , psttU ) ; ___( psttU ) ;
    ZE( strokeS* , psttU ) ;

    _IO_

    }
        if( POOP ) return ;
        __NZ( psttP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::boxPutUniqueF( tin0S& tin0P , strokeS*& psttP , const strokeS* const psttLikeP , soulC& soulP , countT cOpenTriesP , const flagsT flagsOpenDetailsP )/*1*/

/**/
*/
  if not 0 then will try cTriesP times
  if 0 then will retry forever
 cOpenTriesP
   example: T("///ideafarm/ephemeral/tmp/1030078")
  the prefix for the unique name
 psttLikeP
  will be set to the actual name used
 psttP
arguments
  \<A HREF=\"5.c710104.1.1.0.html\"\>c710104:  WAKEsHOW( "example.simplest.func.1030078.etherC.boxPutUniqueF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030078.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$boxPutUniqueF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

