
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

DONE( tmHooF )
}
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) ; //INTENTIONALLY NOT RESTORED
    grab1.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    }
        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( bNap )

    boolT  bNap  =          pTaskP->c2 ;
    grabC& grab1 = *(grabC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmHooF )

#if defined( NEVERdEFINED )

DONE( tmGooF )
}
    THREADmODE2rESTORE ;
    //CONoUTrAW3( "tmGooF/" , ((tinNormalS&)tinBaseP).monitor.idThread , ": you'll never see this\r\n" ) ;
    grab2.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    //CONoUTrAW3( "tmGooF/" , ((tinNormalS&)tinBaseP).monitor.idThread , ": grabbing (this should deadlock)\r\n" ) ;
    }
        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    grab1.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) ;

    grabitC& grab2 = *(grabitC*)pTaskP->c2 ;
    grabitC& grab1 = *(grabitC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmGooF )

DONE( tmFooF )
}
    THREADmODE2rESTORE ;
    //CONoUTrAW3( "tmFooF/" , ((tinNormalS&)tinBaseP).monitor.idThread , ": you'll never see this\r\n" ) ;
    grab2.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    //CONoUTrAW3( "tmFooF/" , ((tinNormalS&)tinBaseP).monitor.idThread , ": grabbing (this should deadlock)\r\n" ) ;
    }
        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    grab1.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) ;

    grabC& grab2 = *(grabC*)pTaskP->c2 ;
    grabC& grab1 = *(grabC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmFooF )

DONE( tmConsoleF )
}
    }
        ++ s ; etThread.osSleepF( tinBaseP , TOCK * 0x8 ) ;
   
        }
            etThread.delF( tinBaseP , psttr ) ;

            }
                etThread.delF( tinBaseP , psttf ) ;
                etThread.boxPutGenerationF( tinBaseP , psttf , T("///d/ideafarm.rpt.monitor.console") , TUCK , (osTextT*)tRpt , tRpt.csF( tinBaseP ) ) ; ___( psttf ) ;
                ZE( strokeS* , psttf ) ;
                TN( tRpt , psttr ) ;
            {
            else
            if( !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_SERVICE ) ) etThread.strokeF( tinBaseP , psttr ) ;

            swMemorySpaceP.ungrabF( tinBaseP ) ;
            }
                memorySpace.grab.ungrabF( tinBaseP ) ;

                }
                    }
                        while( ~hWalk ) ;
                        }
                            }
                                }
                                    }
                                        }
                                            ) ;
                                        
                                                +top+TF2(pCopyGrab->idLineCt,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tcp+tcr
                                                TP("",0x29)+TF2(pCopyGrab->idiFileCt,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)
                                        
                                            etThread.strFuseF( tinBaseP , psttr ,
                                        {
                                        else
                                        if( !bOk || getNegAM( pCopyGrab->finger ) != FINGERnEG_GRABc ) pCopyGrab = 0 ;
                                        thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopyGrab , sizeof( grabC ) , bOk , (voidT*)((tinNormalS*)pCopyTin)->pPanLifiRecurseGrabbedLevel[ off ] , info.osPid ) ;
                                        ZE( boolT , bOk ) ;
                                        grabC* pCopyGrab = (grabC*)pbCopyGrab ;
                                        byteT pbCopyGrab[ sizeof( grabC ) ] ;
                                    {
                                    if( ((tinNormalS*)pCopyTin)->pPanLifiRecurseGrabbedLevel[ off ] )
                                {                                                                                                                              //U::BUG: SHOULD BE off += 5?
                                for( countT off = 0 ; off < sizeof ((tinNormalS*)pCopyTin)->pPanLifiRecurseGrabbedLevel / sizeof ((tinNormalS*)pCopyTin)->pPanLifiRecurseGrabbedLevel[ 0 ] ; off ++ ) //U::OBSOLETED BY MIGRATION TO pPanLifiRecurseGrabbedLevel; SEE tmReportF
    
                                etThread.strFuseF( tinBaseP , psttr , tcr ) ;
    
                                ) ;
                                    
                                    +top+TF2(((tinNormalS*)pCopyTin)->monitor.pPanLifiGrabbing[1],flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tcp
                                    tb+TF2(((tinNormalS*)pCopyTin)->monitor.pPanLifiGrabbing[2],flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)
                                    
                                etThread.strFuseF( tinBaseP , psttr ,
    
                                ) ;
            
                                    +TP(info.postThreadName,0x20)
                                    TF3(info.idThread,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)
                            
                                etThread.strFuseF( tinBaseP , psttr , 
                            {
                            if( pCopyTin && ((tinNormalS*)pCopyTin)->monitor.pPanLifiGrabbing[ 0 ] )
    
                            }
                                if( !bOk || getNegAM( pc2[ 0 ] ) != FINGERnEG_TINs || info.idSerial != pc2[ 1 ] ) pCopyTin = 0 ;
                                thirdC::dosReadProcessMemoryIF( tinBaseP , (byteT*)pc2 , sizeof pc2 , bOk , (voidT*)info.ip , info.osPid ) ;
                                bOk = 0 ;
                                countT pc2[ 2 ] ; //CODE SYNC: ad40104 003002a: fingerprint idSerial MUST BE AT OFFSETS 0 4
                            {
                            else
                            if( !bOk || getNegAM( ((tinNormalS*)pCopyTin)->fingerprint ) != FINGERnEG_TINs || info.idSerial != ((tinNormalS*)pCopyTin)->idSerial ) pCopyTin = 0 ;
                            thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopyTin , sizeof( tinNormalS ) , bOk , (voidT*)info.ip , info.osPid ) ;
                            ZE( boolT , bOk ) ;
                            tinBaseS* pCopyTin = (tinBaseS*)pbCopyTin ;
                            byteT pbCopyTin[ sizeof( tinNormalS ) ] ;
    
                            tinEntryS& info = *(tinEntryS*)&memorySpace.swsTin.downF( tinBaseP , hWalk ) ;
                        {
                        do
                        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( memorySpace.swsTin )

                    ) ;
    
                        +T("swsTin       : ")+TF2(memorySpace.swsTin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tcr
                         T("Memory space: ")+TF2(cLeverIdMemoryP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tcr
    
                    etThread.strFuseF( tinBaseP , psttr , 

                    memorySpace.pczLeverAdam = (countT*)memorySpace.swsTin.leverF( tinBaseP , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                const countT cFlavors = memorySpace.swsTin.cFlavorsF( tinBaseP ) ;

                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                
                memorySpaceS& memorySpace = *(memorySpaceS*)&(countT&)swMemorySpaceP ;
                cLeverIdMemoryP = swMemorySpaceP.leverF( tinBaseP , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = swMemorySpaceP.cFlavorsF( tinBaseP ) ;
            swMemorySpaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

            etThread.strMakeF( tinBaseP , LF , psttr , T("\fIPDOS (tm) <> IdeaFarm " "(tm) Piggyback Distributed Operating System\r\nPerformance Monitor\r\ncycle: ")+TF2(++icCycle,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n") , TOCK ) ; ___( psttr ) ;
            ZE( strokeS* , psttr ) ;
        {
        if( !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_SERVICE ) )

        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    while( !POOP && !bQuitConsoleP )
    TN( tcp , ")" ) ;
    TN( top , "(" ) ;
    TN( tb , " " ) ;
    TN( tcr , "\r\n" ) ;
    ZE( countT , icCycle ) ;

    switchC& swMemorySpaceP  = *(switchC*)pTaskP->c3 ;
    countT&  cLeverIdMemoryP =  *(countT*)pTaskP->c2 ;
    boolT&   bQuitConsoleP   =   *(boolT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmConsoleF )

#include postADAMhEADER

/*1*//*ifcIDaDAM_2GLASS2 3*//*1*/

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

