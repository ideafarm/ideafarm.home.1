
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

THREADmODE2rESTORE
THREADmODE3rESTORE
}
    etThread.traceF( tinP , T("chattered  uri.access.events") ) ;
    }
        POPtINaRGS
        listC::walkIF( tinP , pczEvents , flLISToPEN_IFeXISTS ) ;

        ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 3 ] = (countT)&hFileReport ;
        ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 2 ] = 0 ;                                         // WILL HOLD idJotUri       FOR THE URI CURRENTLY BEING PROCESSED
        ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 1 ] = 0 ;                                         // WILL HOLD idJotContainer FOR THE URI CURRENTLY BEING PROCESSED
        ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 0 ] = sizeof( countT ) ;

        ((tinNormalS&)tinP).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_MAPiDjOTvALUES ;
        ((tinNormalS&)tinP).ta.pushed.u.listWalk.util.pcP[ 0 ] = pczEvents[ 1 ] ;
        ((tinNormalS&)tinP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_IGNOREdELETErEQUESTEDbIT ;
        ((tinNormalS&)tinP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkReportAccessEventsCBF ;
        PUSHtINaRGS

        grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
    {
    etThread.traceF( tinP , T("chattering uri.access.events") ) ;

    listC::dictionaryReplaceOsTextIF( tinP , pczEvents ) ;
    countT pczEvents[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , (countT)"listAccessEeventsByContainerUri" , 0 } ;

    listC::chatterIF( tinP ) ;

    puseC puseEvents( tinP , "uri.access.events" , flPOOLc_DOnOTiNDEXdURINGcT , ifcIDsTATEsPACE_MULTIPLEaDAMS , 3 , 6 ) ;
    puseC puseAT( tinP , ifcIDpOOL_ADAMtEMP ) ;

    handleC hFileReport( tinP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
{
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )
THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

jotC jhsOther(   tinP , "jotAccessEvents.hash.string.other"   , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 ) ;   // [STRING]; WO JOT PER UNIQUE STRING
jotC jhsBrowser( tinP , "jotAccessEvents.hash.string.browser" , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 ) ;   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
jotC jhsQuery(   tinP , "jotAccessEvents.hash.string.query"   , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 ) ;   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
jotC jhsUri(     tinP , "jotAccessEvents.hash.string.uri"     , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 ) ;   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
//CS:CODEsYNC: 73a 740 (THESE MUST BE CT IN THE SAME ORDER SO THAT THE SAME TAG VALES ARE ASSIGNED

TODO

}
    return flrc ;

    THREADmODE3rESTORE
    THREADmODE4rESTORE

    }
        }
            }
                }
                    }
                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , pstto ) ;
                        POOPR
                    {
                    else
                    }
                        break ;
                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , pstto ) ;
                        ((tinNormalS&)tinP).pEtScratch->traceF( tinP , pstto ) ;
                    {
                    if( !POOP )

                    if( flagsi & fliLISTINGc_DELETErEQUESTED ) ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("DELETErEQUESTED") ) ;

                    }
                        THREADmODE2rESTORE
                        }
                            ((tinNormalS&)tinP).tlsDelF( *(byteT**)&pczHe ) ;
                            //{ puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ; PUSE( tinP , *(byteT**)&pczHe ) ; }

                            }
                                if( pczHe[ ++ offo ] ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("/") ) ; }
            
                                }
                                    }
                                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T((const byteT*)vspo) ) ;
                                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                                    {
                                    else            
                                    if( !(const byteT*)vspo ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(pczHe[offo],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
                
                                    if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tinP , pczHe[ offo ] ) ;
                                    blobVSP vspo ;
                                {
                                else
                                if( postzMap ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postzMap) ) ; }
                                const osTextT* postzMap = pg3.mapListName( pczHe[ offo ] ) ;
                            {
                            while( pczHe[ offo ] )
                            countT offo = 0 ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" Refers to: ") ) ;

                            ((const listingC*)vspValue)->nameF( tinP , pczHe ) ; //___( pczHe ) ;
                            ZE( countT* , pczHe ) ;

                            if( flagsi & fliLISTINGc_DELETErEQUESTED ) ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" DELETErEQUESTED") ) ;
                            }
                                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postNamePool) ) ;
                                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" in pool: \"") ) ;
                            {
                            if( postNamePool )
                            const osTextT* postNamePool = ((tinNormalS&)tinP).pPoolUse ? ((tinNormalS&)tinP).pPoolUse->postNameF( tinP ) : 0 ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(aptRef,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" a: ") ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2((countT)(const listingC*)vspValue,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("listingVSP: p: ") ) ;
            
                            aptC aptRef( tinP , vspValue ) ;
            
                            puseC puseRecord( tinP , *pPool ) ;

                            __Z( pPool ) ;
                            poolC* pPool = poolC::pPoolIF( tinP , (byteT*)(const listingC*)vspValue ) ;
                        {
                        THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) ;
                    {
                    else if( (const listingC*)vspValue )
                    }
                        }
                            if( pczValue[ ++ offo ] ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("/") ) ; }

                            }
                                }
                                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T((const byteT*)vspo) ) ;
                                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                                {
                                else            
                                if( !(const byteT*)vspo ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(pczValue[offo],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
            
                                if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tinP , pczValue[ offo ] ) ;
                                blobVSP vspo ;
                            {
                            else
                            if( postzMap ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postzMap) ) ; }
                            const osTextT* postzMap = pg3.mapListName( pczValue[ offo ] ) ;
                        {
                        while( pczValue[ offo ] )
                        countT offo = 0 ;

                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("countTstrz: ") ) ;
                    {
                    else if( pczValue )
                    }
                        }
                            ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttw ) ;
                            if( bPartial ) ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , (strokeS*)( T(" ... (there are ")+TF2(cbv,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" total bytes)") ) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(psttw) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("blob):\r\n") ) ;
                            ((tinNormalS&)tinP).pEtScratch->strDumpIF( tinP , psttw , postValue , bPartial ? TUCK : cbv , flSTRdUMP_null , 0x20 , 4 , '~' ) ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;

                            }
                                countT foo = 2 ;
                            {
                            if( idIn == 0x18 )

                            countT idIn = 1 + incv02AM( idInLath ) ;
                            static countT idInLath ;

                            boolT bPartial = cbv > TUCK ;
                        {
                        else
                        }
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postValue) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("blob: \"") ) ;
                        {
                        if( bText )

                        }
                            }
                                }
                                    break ;
                                    bText = 0 ;
                                {
                                if( !test || test < 0x20 || test > 0x7f )
                                byteT test = postValue[ offi ] ;
                            {
                            for( countT offi = 0 ; offi < offNull ; offi ++ )
                        {
                        if( bText )
                        byteT  bText = !postValue[ offNull ] ;
                        countT offNull = cbv - 1 ;
                        countT cbv = ((countT*)postValue)[ - 1 ] ;
                    {
                    else if( postValue )
                    }
                        }
                            }
                                ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttJot ) ;
                                ((tinNormalS&)tinP).pEther->fileWriteF( tinP , hFileReportP , tSay , tSay.csF( tinP ) ) ;
                                TN( tSay , "" ) ; tSay = T("\r\n")+T(psttJot) ;

                                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , tb4+T(psttJot) ) ;
                            {
                            else
                            if( POOP ) POOPR
                            ((tinNormalS&)tinP).pEtScratch->strFromIdJotF( tinP , psttJot , *pcValue , cbJotStringDecodePrefixP ) ; ___( psttJot ) ;
                            ZE( strokeS* , psttJot ) ;
                        {
                        if( F(flagsP) & flLISTwALKcHATTER_MAPiDjOTvALUES )

                        ((tinNormalS&)tinP).pEther->fileWriteF( tinP , hFileReportP , tSay , tSay.csF( tinP ) ) ;
                        TN( tSay , "" ) ; tSay = T("\r\n")+T("countT: ")+TF2(*pcValue,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(*pcValue,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("countT: ") ) ;
                    {
                    if( pcValue )

                    }
                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" ") ) ;
                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(cName,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    {
                    else if( cName )
                    }
                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" ") ) ;
                        ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postzName) ) ;
                    {
                    if( postzName )
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postMark) ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" | ") ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(aptListing,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" | a: ") ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2((countT)pListing,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" | p: ") ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(((tinNormalS&)tinP).ta.pushed.u.listWalk.walk.cRecurseP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(" | ") ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(((tinNormalS&)tinP).pPoolUse->postNameF(tinP)) ) ;

                    ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , pstto , 0 , max ) ; ___( pstto ) ;
                    ZE( strokeS* , pstto ) ;
                {
                for( countT max = TOCK ;; max <<= 1 )
                SCOOPS
            {
            IFsCRATCH

            }
                }
                    if( (const byteT*)vspbName ) postzName = (const byteT*)vspbName ;
                    vspbName = listC::dictionaryQueryFromIdIF( tinP , cName ) ;
                {
                else if( bUseDictionary && cName )
                if( postzMap ) postzName = postzMap ;

                }
                    countT foo = 2 ;
                {
                if( postzMap && !thirdC::c_strcmpIF( tinP , postzMap , "ROOTaPPLICATION" ) )

                const osTextT* postzMap = pg3.mapListName( cName ) ;

                cName = pList->nameF() ;
                listC* pList = (listC*)pListing ;
            {
            if( flagsi & fliLISTINGc_MIXINlIST )
            ZE( const byteT* , postzName ) ;
            blobVSP vspbName ;
            ZE( countT   , cName ) ;
    
            ;
                : "listing "
                ? "LIST    "
            osTextT* postMark = flagsi & fliLISTINGc_MIXINlIST
    
            }
                }
                    }
                        default                             : { BLAMMO                                                ; break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =             *(list_listingVSP_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  =    (countT*)*(list_countTstrz_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_blob       : { postValue =         (osTextT*)*(list_blob_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =        (countT*)*(list_countT_C*)pListing ; break ; }
                    {
                    switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                else
                }
                    }
                        default                             : { BLAMMO                                                ; break ; }
                        case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =          *(listing_listingVSP_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  = (countT*)*(listing_countTstrz_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_blob       : { postValue =      (osTextT*)*(listing_blob_C*)pListing ; break ; }
                        case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =     (countT*)*(listing_countT_C*)pListing ; break ; }
                    {
                    switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                {
                if( !( flagsi & fliLISTINGc_MIXINlIST ) )
            {
            if( flagsi & fliLISTINGc_MIXINdATUM )
            flagsT flagsi = pListing->flagsF() ;
    
            listingVSP       vspValue ;
            ZE( countT*  , pczValue ) ;
            ZE( osTextT* , postValue ) ;
            ZE( countT*  , pcValue ) ;
        {
        else
        }
            flrc |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            CONoUTrAW( "EXCEPTION: An apartment was encountered that does not contain a valid listingC object.  quitting\r\n" ) ;
        {
        if( !listingC::bIsListingIF( tinP , aptListing ) )

        aptC aptListing( tinP , pListing ) ;
    {
    if( pListing )
    flagsT flrc = flLISTwALKcALLbACKrETURNcODE_null ;

    }
        }
            }
                }
                    ((tinNormalS&)tinP).pEtScratch->delF( tinP , pstto ) ;
                    POOPR
                {
                else
                }
                    break ;
                    ((tinNormalS&)tinP).pEtScratch->delF( tinP , pstto ) ;
                    ((tinNormalS&)tinP).pEtScratch->traceF( tinP , pstto ) ;
                {
                if( !POOP )

                { puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ; PUSE( tinP , *(byteT**)&pczSquished ) ; }
                ((tinNormalS&)tinP).tlsDelF( *(byteT**)&pczName ) ;
                //{ puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ; PUSE( tinP , *(byteT**)&pczName ) ; }
                }
                    if( pczSquished[ ++ offi ] ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("/") ) ; }

                    }
                        }
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T((const byteT*)vspo) ) ;
                            ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T("\"") ) ;
                        {
                        else            
                        if( !(const byteT*)vspo ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , TF2(pczSquished[offi],flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ; }
            
                        if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tinP , pczSquished[ offi ] ) ;
                        blobVSP vspo ;
                    {
                    else
                    if( postzMap ) { ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(postzMap) ) ; }

                    const osTextT* postzMap = pg3.mapListName( pczSquished[ offi ] ) ;
                {
                while( pczSquished[ offi ] )
                ZE( countT , offi ) ;

                }
                    }
                        ((tinNormalS&)tinP).pEther->fileWriteF( tinP , hFileReportP , tSay , tSay.csF( tinP ) ) ;

                        ) ;

                            "\r\n"
                            "Uri" ":        ")+TF2(idJotUriP      ,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+tUri+T("\r\n"
                            "Container:  ")+TF2(idJotContainerP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+tContainer+T("\r\n"
                            "\r\n"
                            "Access History Report\r\n"
                            "\r\n"
                            "IDEAFARM.COM\r\n"

                        TN( tSay , "" ) ; tSay = T(

                        ((tinNormalS&)tinP).pEther->fileOpenF( tinP , hFileReportP , countTC() , T("///d/web.reports/access/")+tContainer+tSlash+tUri+T(".txt") , ifcOPENaCCESS_W , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeR , flFILEaTTR1_null , flFILEaTTR2_null , 0 , 0 ) ;                    

                        etherC::etRockIF( tinP ).traceF( tinP , T("writing/replacing report file [container,uri]:    ")+tb4+tContainer+tb4+tUri ) ;

                        }
                            ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttWant ) ;
                            tUri = T(psttWant) ;
                            ((tinNormalS&)tinP).pEther->strSubstringF( tinP , psttWant , idf , idl , tUri ) ; ___( psttWant ) ;
                            ZE( countT , idl ) ;
                            countT idf = idHit + tLook.csF( tinP ) ;
                            ZE( strokeS* , psttWant ) ;
                        {
                        if( idHit )
                        countT idHit = ((tinNormalS&)tinP).pEther->strIdF( tinP , tLook , tUri ) ;
                        TN( tLook , ".rackcdn.com/" ) ;

                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttJotUri       ) ;
                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttJotContainer ) ;
                        TN( tUri       , psttJotUri       ) ;
                        TN( tContainer , psttJotContainer ) ;
                    {
                    else
                    }
                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttJotUri       ) ;
                        ((tinNormalS&)tinP).pEtScratch->delF( tinP , psttJotContainer ) ;
                        POOPR
                    {
                    if( POOP )
                    ((tinNormalS&)tinP).pEtScratch->strFromIdJotF( tinP , psttJotUri       , idJotUriP       , cbJotStringDecodePrefixP ) ; ___( psttJotUri       ) ;
                    ((tinNormalS&)tinP).pEtScratch->strFromIdJotF( tinP , psttJotContainer , idJotContainerP , cbJotStringDecodePrefixP ) ; ___( psttJotContainer ) ;
                    ZE( strokeS* , psttJotUri       ) ;
                    ZE( strokeS* , psttJotContainer ) ;

                    if( ~hFileReportP ) hFileReportP.closeIfF() ;
                    idJotUriP       = pczSquished[ 0xd ] ;
                    idJotContainerP = pczSquished[ 0x7 ] ;

                    puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ;
                {                                                                                                                                                     //          0    1               2                                 3                 4        5          6                 7        8          9                 a        b          c                 d        e
                if( pczSquished && 0xe <= thirdC::c_strlenIF( tinP , pczSquished ) && ( idJotContainerP != pczSquished[ 0x7 ] || idJotUriP != pczSquished[ 0xd ] ) )  // EXAMPLE: ROOT/ROOTaPPLICATION/"listAccessEeventsByContainerUri"/STRETCHbEGINcOUNT/d99bfcf8/STRETCHeND/STRETCHbEGINcOUNT/3000000b/STRETCHeND/STRETCHbEGINcOUNT/c945d60d/STRETCHeND/STRETCHbEGINcOUNT/10000008/STRETCHeND/STRETCHbEGINcOUNTsTRZ/acd3b/76054e6d/44494263/STRETCHeND/RECORD/"browser"

                { puseC puseat( tinP , ifcIDpOOL_ADAMtEMP ) ; etherC::strSquishIF( tinP , pczSquished , pczName ) ; ___( pczSquished ) ; }     //U::20240828@1056: THIS OVERLOAD OF strSquishIF NOW RETURNS OUTPUT STRING LENGTH AND OUTPUT STRING CAN NOW CONTAIN NULL VALUES
                ZE( countT* , pczSquished ) ;

                ((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pDadP->nameF( tinP , pczName ) ; // ___( pczName ) ;
                ZE( countT* , pczName ) ;

                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(bUseDictionary?" | ------------------------------------------------------------------------------- ":" | ------------------------------------------------------------------------------- (NO DICTIONARY LOOKUP) ") ) ;
                ((tinNormalS&)tinP).pEtScratch->strFuseF( tinP , pstto , T(((tinNormalS&)tinP).pPoolUse->postNameF(tinP)) ) ;

                ((tinNormalS&)tinP).pEtScratch->strMakeF( tinP , LF , pstto , 0 , max ) ; ___( pstto ) ;
                ZE( strokeS* , pstto ) ;
            {
            for( countT max = TOCK ;; max <<= 1 )
            SCOOPS
        {
        IFsCRATCH
    {
    if( ((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.idCallP == 1 )
    processGlobal4S& pg3 = processGlobal4S::_processGlobal4I_IF() ;

    TN( tSlash , "/" ) ;
    TN( tb4 , "    " ) ;

    THREADmODE4oN( flTHREADmODE4_POOLaLLOCATEfROMhEAP )                         // MY CALLER MIGHT HAVE GRABBED LISTnAMEsYS_ROOT, WHICH COULD DEADLOCK sexC::sexC
    THREADmODE3oN( flTHREADmODE3_ALLOWdICTIONARYwHILEgRABBING )

    ;
        && ( levelOoNameUse != LISTnAMEsYS_ROOTsYSTEM2 || levelReNameUse != LISTnAMEsYS_DICTIONARY )
             levelOoNameUse 
    const boolT bUseDictionary =                                             // 20180508@1624: AVOID DICTIONARY IF SYSTEM1 OR SYSTEM3 (ADDED WITHOUT ANALYSIS TO ELIMINATE DEADLOCK IN ADAM 206 (602_) WHICH USED TO WORK AOK)

    const countT levelReNameUse = levelReNameMe ? levelReNameMe : levelReNameDad ;
    const countT levelOoNameUse = levelOoNameMe ? levelOoNameMe : levelOoNameDad ;

    const countT levelReNameDad = !((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pDadP ? 0 : ((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pDadP->nameF( 3 ) ;
    const countT levelReNameMe  = !pListing                          ? 0 : pListing->nameF( 3 )                          ;

    const countT levelOoNameDad = !((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pDadP ? 0 : ((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pDadP->nameF( 2 ) ;
    const countT levelOoNameMe  = !pListing                          ? 0 : pListing->nameF( 2 )                          ;

    //U::FV( flLISTwALKcHATTER , flagsP ) ;

    handleC&  hFileReportP             = *(handleC*)((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 3 ] ;
    countT&   idJotUriP                =            ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 2 ] ;
    countT&   idJotContainerP          =            ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 1 ] ;
    countT    cbJotStringDecodePrefixP =            ((tinNormalS&)tinP).ta.retained.u.listWalk.util.pcP[ 0 ] ;

    flagsT    flagsP                   =            ((tinNormalS&)tinP).ta.pushed.u.listWalk.util.pcP[ 1 ] ;
    listingC* pListing                 =            ((tinNormalS&)tinP).ta.pushed.u.listWalk.cbf.pListingP ;
{
flagsT listWalkReportAccessEventsCBF( tinNormalS& tinP )


/*1*/WAKEsHOWtEXT( "ifcIDaDAM_ACCESSeVENTS4rEPORT" )/*1*/
/**/
*/
i will eventually report on the contents of the access list (database)
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
