
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

countT cBacklog = myCircle ;

myCircle >> &foo1 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo2 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo3 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo4 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo5 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo6 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo7 ; etThread.traceF( tin0P , T("pulled wo") ) ;
myCircle >> &foo8 ; etThread.traceF( tin0P , T("pulled wo") ) ;

etThread.osThreadF( TaRG1( tmPushF ) , (countT)&myCircle ) ;

circleC myCircle( tin0P , etThread , ether , sizeof foo1 , 8 ) ;

TODO

DONE( tmPushF )
}

    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo8 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo7 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo6 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo5 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo4 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo3 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo2 ;
    ++ s ; etThread.osSleepF( tin0P , TOCK ) ; myCircleP << &foo1 ;

    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

    circleC& myCircleP = *(circleC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmPushF )

fooC foo8 ;
fooC foo7 ;
fooC foo6 ;
fooC foo5 ;
fooC foo4 ;
fooC foo3 ;
fooC foo2 ;
fooC foo1 ;

countT fooC::idMeLath ;

;
}
    }
            pcFoo[ offo ] = idMe ;
        for( countT offo = 0 ; offo < sizeof pcFoo / sizeof pcFoo[ 0 ] ; offo ++ )
        countT idMe = 1 + incv02AM( idMeLath ) ;
    {
    inline fooC( voidT )

    public :

    countT pcFoo[ 4 ] ;

    static countT idMeLath ;
{
class fooC


/*1*/WAKEhIDE( "example.simplest.1snip.150001d1.circleC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
