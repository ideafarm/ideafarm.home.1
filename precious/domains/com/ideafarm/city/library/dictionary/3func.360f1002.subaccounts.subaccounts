
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    __Z( bOk ) ;
    }
        if( POOP ) POOPR

        }
            }
                else       bOk = 1 ;
                if( POOP ) { POOPR ; }

                push_pstt_F( tin0P , pStkEmailPenpalContainsAnd , sIn ) ;
                push_pstt_F( tin0P , pStkEmailPenpalContainsOr  , sIn ) ;
                push_pstt_F( tin0P , pStkEmailPenpalExactOr     , sIn ) ;
                push_pstt_F( tin0P , pStkRecipe                 , sIn ) ;
                push_pstt_F( tin0P , pStkAutoresponse           , sIn ) ;
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYrELAYdRAWINGS ) ) cEmailRelayDrawings = 0 ;
                sIn >> cEmailRelayDrawings ;
                push_pstt_F( tin0P , pStkEmailRelay             , sIn ) ;

    
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYnAMEoUT ) ) PUSE( tin0P , *(byteT**)&psttNameOut ) ;
                sIn >> psttNameOut ; ___( psttNameOut ) ;
    
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYnAMEiN ) ) PUSE( tin0P , *(byteT**)&psttNameIn ) ;
                sIn >> psttNameIn ; ___( psttNameIn ) ;
    
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYtITLE ) ) PUSE( tin0P , *(byteT**)&psttTitle ) ;
                sIn >> psttTitle ; ___( psttTitle ) ;
            
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYfLAGSmEMBERoF ) ) flagsMemberOf = 0 ;
                sIn >> flagsMemberOf ;
    
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYiDmODE ) ) idMode = 0 ;
                sIn >> idMode ;
    
                if( !bAll && !( F(flagsThis) & flSUBACCOUNT_QUERYfLAGSmODE ) ) flagsMode = 0 ;
                sIn >> flagsMode ;
            {
            else
            if( POOP ) { POOPR ; }

            __Z( bSubExists ) ;
            sIn >> bSubExists ;
            ZE( boolT , bSubExists ) ;

            __Z( bAccExists ) ;
            sIn >> bAccExists ;
            ZE( boolT , bAccExists ) ;

            __( idFormat - 1 ) ;
            sIn >> idFormat ;
            ZE( countT , idFormat ) ;
        
            __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
            sIn >> finger ;
            ZE( countT , finger ) ;
        {
        else
        if( POOP ) { POOPR ; }
    
        sock.readF( tin0P , sIn ) ;
        soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tin0P , sOut ) ;
        sOut << idSub ;
        sOut << idAcc ;
        sOut << (countT)ifcIDcMDlISTsERVERiDaCCOUNTdESCRIPTION_QUERYsUBACCOUNTdESCRIPTION ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tin0P , homeS::homeIF().idPortListServerIdAccountDescription ) ;
        socketC sock( tin0P , *((tin123S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;

        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYeMAILpENPALcONTAINSaND ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkEmailPenpalContainsAnd , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalContainsAnd ) ; }
        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYeMAILpENPALcONTAINSoR  ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkEmailPenpalContainsOr  , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalContainsOr  ) ; }
        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYeMAILpENPALeXACToR     ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkEmailPenpalExactOr     , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailPenpalExactOr     ) ; }
        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYrECIPE                 ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkRecipe                 , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkRecipe                 ) ; }
        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYaUTORESPONSE           ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkAutoresponse           , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkAutoresponse           ) ; }
        if( bAll || F(flagsThis) & flSUBACCOUNT_QUERYeMAILrELAY             ) { (*((tin123S&)tin0P).pEtScratch)( tin0P , pStkEmailRelay             , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailRelay             ) ; }

        const boolT bAll = ( flagsThis & ~( F(flSUBACCOUNT_SET) ) ) == flSUBACCOUNT_null ;

        if( POOP ) { POOPR ; }

        SCOOPS
    {
    IFsCRATCH
    ZE( boolT , bOk ) ;

    _IO_

    }
        if( POOP ) return ;
        FV(flSUBACCOUNT,flagsP) ;
        __Z( idSubP ) ;
        __Z( idAccP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    //CONoUTrAWb( "\r\nsubaccountS/ct [idAdam,idThread,idAcc,idSub,flags]: " , ((tin1S&)tin0P).pag1->idAdam , "(" , ((tin123S&)tin0P).glass.idThread , ") " , idAccP , ":" , idSubP , " " , flagsP , "\r\n" ) ; //U::
    //CONoUTrAW( ((tin123S&)tin0P).postThreadName ) ;
{
pStkEmailPenpalContainsAnd( 0 )
pStkEmailPenpalContainsOr( 0 ) ,
pStkEmailPenpalExactOr( 0 ) ,
pStkRecipe( 0 ) ,
pStkAutoresponse( 0 ) ,
pStkEmailRelay( 0 ) ,
psttNameOut( 0 ) ,
psttNameIn( 0 ) ,
psttTitle( 0 ) ,
cEmailRelayDrawings( 0 ) ,
idMode( 0 ) ,
flagsMemberOf( 0 ) ,
flagsMode( 0 ) ,
flagsThis( flagsP ) ,
idSub( idSubP ) ,
idAcc( idAccP ) ,
/*1*/subaccountS::subaccountS( tin0S& tin0P , etherC& etherP , const countT idAccP , countT& idSubP , flagsT flagsP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

