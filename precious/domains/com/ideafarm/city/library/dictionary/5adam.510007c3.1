
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    etThread.traceF( tin0P , T("end") ) ;

    etThread.traceF( tin0P , T("time taken:    ")+TT(timeE1,timeE2) ) ;
    etThread.osTimeSubtractF( tin0P , timeE1 , timeE2 , timeS1 , timeS2 ) ;
    etThread.osTimeNowF( tin0P , timeE1 , timeE2 ) ;
    ZE( sCountT , timeE2 ) ;
    ZE( countT , timeE1 ) ;

    }
        }
            memset( pbw , '@' , cbw ) ;             // THIS LINE ACCOUNTS FOR ALMOST ALL OF THE TIME ELAPSED ; fileWindowsC MAPPING OVERHEAD IS MINIMAL
        {
        else
        if( !pbw || !cbw ) break ;

        fws.getF( tin0P , pbw , cbw ) ;
        ZE( countT , cbw ) ;
        ZE( byteT* , pbw ) ;
    {
    while( !ether && cDo -- )

    etThread.osTimeNowF( tin0P , timeS1 , timeS2 ) ;
    ZE( sCountT , timeS2 ) ;
    ZE( countT , timeS1 ) ;

    etThread.traceF( tin0P , T("start") ) ;
    countT cDo = TUCK >> 0 ;
    TN( tb4 , "    " ) ;

    fileWindowsC fws( tin0P , etThread , tFile , flFILEwINDOW_WRITE ) ;
{

etThread.boxPutF( tin0P , tFile , "X" , 1 ) ;
TN( tFile , "///d/tmp/bitbucket" ) ;

TODO

/*1*/WAKEsHOWtEXT( "doodle.fileWindowsC.writing.speed" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

