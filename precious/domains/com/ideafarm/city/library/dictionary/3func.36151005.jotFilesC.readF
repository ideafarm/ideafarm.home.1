

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
}
    return pageData ;

    if( POOP ) idjBranchP = idjPartP = 0 ;

    ;
        : pageC( tinP , jotNeverChanges )
        ? jotTarget.readF( tinP , idjData )
    pageC pageData = idjData && !POOP

    jotC& jotTarget = F(flagsP) & flJOTfILEScrEAD_FROMcANcHANGE ? jotCanChange : jotNeverChanges ;

    }
        }
            }
                __Z( idjPartP ) ;
                }
                    if( getNegAM( branch.finger ) == FINGERnEG_jotFileBranchC ) idjPartP = branch.idjPart ;
                    const jotFileBranchC& branch = *(const jotFileBranchC*)(const byteT*)pageBranch ;
                {
                if( pageBranch == sizeof( jotFileBranchC ) )
                pageC pageBranch = jotCanChange.readF( tinP , idjBranchP ) ;
            {
            if( !POOP && idjBranchP )

            __NZ( save == idjBranchP ) ;
            }
                }
                    if( getNegAM( branch.finger ) == FINGERnEG_jotFileBranchC ) idjBranchP = branch.idjNext ;
                    const jotFileBranchC& branch = *(const jotFileBranchC*)(const byteT*)pageBranch ;
                {
                if( pageBranch == sizeof( jotFileBranchC ) )
                pageC pageBranch = jotCanChange.readF( tinP , idjBranchP ) ;
            {
            countT save = idjBranchP ;
        {
        if( !idjPartP )

        __Z( idjData ) ;
        }
            }
                }
                    idjPartP = part.idjNext ;
                    idjData  = part.idjData ;
                {
                if( getNegAM( part.finger ) == FINGERnEG_jotFilePartC )
                const jotFilePartC& part = *(const jotFilePartC*)(const byteT*)pagePart ;
            {
            if( pagePart == sizeof( jotFilePartC ) )
            pageC pagePart = jotCanChange.readF( tinP , idjPartP ) ;
        {
    {
    if( !POOP )
    ZE( countT , idjData ) ;

    __Z( idjPartP   ) ;
    __Z( idjBranchP ) ;
    }
        }
            __Z( idjPartP ) ;
            }
                if( getNegAM( branch.finger ) == FINGERnEG_jotFileBranchC ) idjPartP = branch.idjPart ;
                const jotFileBranchC& branch = *(const jotFileBranchC*)(const byteT*)pageBranch ;
            {
            if( pageBranch == sizeof( jotFileBranchC ) )
            pageC pageBranch = jotCanChange.readF( tinP , idjBranchP ) ;
        {
        if( !POOP )

        __Z( idjBranchP ) ;
        }
            }
                }
                    }
                        break ;
                        idjBranchP = soil.idjBranch ;
                    {
                    else
                    if( soil.idjNext ) idjSoilP = soil.idjNext ;
                {
                else
                if( getNegAM( soil.finger ) != FINGERnEG_jotFileSoilC ) break ;
                const jotFileSoilC& soil = *(const jotFileSoilC*)(const byteT*)pageSoil ;
            {
            else
            if( pageSoil != sizeof( jotFileSoilC ) ) break ;
            pageC pageSoil = jotCanChange.readF( tinP , idjSoilP ) ;
        {
        for(;;)
    {
    if( idjSoilP && !idjPartP && !idjBranchP )                                                              // IF WOTH CALL THEN SET idjPartP idjBranchP

    }
        if( POOP ) return pageC( tinP , jotNeverChanges ) ;
        __NZ(  idjPartP &&                 idjSoilP ) ;
        __NZ( !idjPartP &&  idjBranchP              ) ;
        __NZ(  idjPartP && !idjBranchP              ) ;                                                     // ON SUBSEQUENT CALLS, [idjPartP,idjBranchP] IS SPECIFIED BUT NOT idjSoilP
        __NZ( !idjPartP && !idjBranchP && !idjSoilP ) ;                                                     // ON THE WOTH   CALL , idjSoilP              IS SPECIFIED
        if( POOP ) return pageC( tinP , jotNeverChanges ) ;                                                 // [idjPartP,idjBranchP] IS USED LIKE A HANDLE FOR REPEATED CALLS TO READ EACH PART OF EACH BRANCH
    {
    IFbEcAREFUL

    idjSoilP   &= ~NM_HIGH ;
    idjBranchP &= ~NM_HIGH ;
    idjPartP   &= ~NM_HIGH ;
{
/*1*/pageC jotFilesC::readF( tinBaseS& tinP , countT& idjPartP , countT& idjBranchP , countT idjSoilP , flagsT flagsP )/*1*/


/**/

*/
  ignored if idjPartP is not 0
  if woth call for a file, is normally set in order to identify the file to be read
 idjSoilP
  i will update so that the next call obtains the next part
  if woth call for a file, is normally 0 and will obtain the woth part
 idjPartP
parameters
 a part is analogous to an NTFS extent except that each part can be any size that fits within a bookC
i obtain a pageC containing a smartpointer to the requested part of a jotFile
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
