
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmRelayOldPopClientF )
}
    }
        POOPR
        etThread.traceF( tin0P , tWork+T(": probable coding error: still impotent 1") ) ;
    {
    if( POOP )

    }
        if( POOP ) POOPR

        TELL( "tmRelayOldPopClientF: cleaning up" )
    
        DEL( pso ) ;
        }
            POOPR
            etThread.traceF( tin0P , tWork+T(": probable coding error: still impotent 2") ) ;
        {
        if( POOP )

        }
            }
                DEL( psBag ) ;
                TELL( "deleting soul" )
                }
                    }
                        }
                            break ;
                            etThread( tin0P , psBag ) ;
                            bMoreToPop = 1 ;
                            idptServer = 0 ;
                            DEL( pso ) ;
                            }
                                psBag = 0 ;
                                stPop.insertF( tin0P , (countT)psBag , ifcSTACKtYPE_PTR_soulC , 1 ) ;
                            {
                            if( !ether && !bQuitP )
                            etThread.traceF( tin0P , tWork+T(": could not write bag to correct server") ) ;
                            POOPRqUIET
                        {
                        if( POOP )
                        TELL( "reading ok-" )
                        VERIFYrELAY( *pso ) ;
                        TELL( "reading ok+ 5" )
                        pso->writeF( tin0P , *psBag ) ;
                        TELL( "writing bang" )
                        //etThread.traceF( tin0P , tWork+T(": writing [idType]:    ")+TF2(idType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    {
                    if( idType != ifcOLDiDtYPEbAG_CLIENTnULL )
                    countT idType = psBag->cFieldF( tin0P , ifcIDfIELDbAG_IDtYPE ) ;
                {
                if( pso && !ether && !bQuitP && *psBag >= 4 ) //CODEsYNC df40104 df40104
                //P: CLIENTS THAT ARE QUITTING SILENTLY DISCARD ITEMS THAT THEY ARE SUPPOSE TO POP
                stPop >> psBag ;
                ZE( soulC* , psBag ) ;
                TELL( "pulling from stPop" )
            {
            while( stPop )
            //etThread.traceF( tin0P , TF2(idWorkP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(": writing from stPop [stPop]:    ")+TF2(stPop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            
            }
                }
                    relayOldC::idptSelectPeerIF( tin0P , idptServerCorrect , stIdptOpenP , idptP , stIdptGossipP , idWorkP , idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_IMPLODE ? flSELECTpEER_TRACE : flSELECTpEER_null ) ;
                    if( idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_IMPLODE ) etThread.traceF( tin0P , tWork+T(": refreshing idptServerCorrect") ) ;
                {
                if( !ether && !bQuitP )
                idptServerCorrect = 0 ;
                }
                    }
                        etThread.traceF( tin0P , tWork+T(": could not say hello to correct server") ) ;
                        idptServer = 0 ;
                        DEL( pso ) ;
                        POOPRqUIET
                    {
                    if( POOP )
                    TELL( "reading ok-" )
                    VERIFYrELAY( *pso ) ;
                    TELL( "reading ok+ 3" )
                    pso->writeF( tin0P , sBagHello ) ;
                    //etThread.traceF( tin0P , tWork+T(": writing sBagHello to correct server ") ) ;
    
                    sBagHello << idWorkP ;
                    relayOldC::hdrBagIF( tin0P , sBagHello , idptP , idSerialLathHeaderP , flOLDrELAYpOP_null , ifcOLDiDtYPEbAG_CLIENTpOPhELLO ) ;
                    soulC sBagHello( tin0P , TAG( TAGiDnULL ) ) ;
                    TELL( "writing hello" )

                    etThread.traceF( tin0P , tWork+T(": connected aok to correct server ")+tWork+T(" [idptServer port, nn]:    ")+TF2((countT)idptServer,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T((nicNameC&)idptServer) ) ;
                {
                else
                }
                    idptServer = 0 ;
                    etThread.traceF( tin0P , tWork+T(": could not connect to correct server ")+tWork+T(" [idptServer port, nn]:    ")+TF2((countT)idptServer,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T((nicNameC&)idptServer) ) ;
                    DEL( pso ) ;
                    POOPRqUIET
                {
                else if( POOP )
                }
                    idptServer = 0 ;
                    }
                        etThread.traceF( tin0P , tWork+T(": quitting, so am not going to connect to correct server") ) ;
                        POOPRqUIET
                    {
                    if( POOP )
                    DEL( pso ) ;
                    //P: CLIENTS THAT ARE QUITTING ARE RUDE WHEN CLOSING CONNECTION
                {
                if( ether || bQuitP )
                pso->connectF( tin0P , idptServer , (nicNameC&)idptServer ) ;
                TELL( "connecting" )
                idptServer = idptServerCorrect ;
                pso = new( 0 , tin0P , LF ) socketC( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL )/*U:: , 0 , flSOCKETc_TOPsECRET*/ ) ; ___( pso ) ;
                TELL( "looping to write hello" )
            {
            while( !ether && !bQuitP && !pso && idptServerCorrect )
            
            }
                idptServer = 0 ;
                DEL( pso ) ;
                }
                    etThread.traceF( tin0P , tWork+T(": could not say bye to stale (incorrect) server") ) ;
                    POOPRqUIET
                {
                if( POOP )
                TELL( "reading ok-" )
                VERIFYrELAY( *pso ) ;
                TELL( "reading ok+ 2" )
                }
                    }
                        DEL( psBag ) ;
                        pso->writeF( tin0P , *psBag ) ;
                        //etThread.traceF( tin0P , tWork+T(": writing *psBag") ) ;
                        relayOldC::hdrBagIF( tin0P , *psBag , idptP , idSerialLathHeaderP , flOLDrELAYpOP_null , ifcOLDiDtYPEbAG_CLIENTpOPbYE ) ;
                    {
                    if( psBag )
                    soulC* psBag = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ; ___( psBag ) ;
                {
                TELL( "writing bye" )
                //P: CLIENTS THAT ARE NOT QUITTING ARE POLITE WHEN CLOSING CONNECTION
            {
            if( pso && idptServer && idptServer != idptServerCorrect && !bQuitP && !ether )
    
            relayOldC::idptSelectPeerIF( tin0P , idptServerCorrect , stIdptOpenP , idptP , stIdptGossipP , idWorkP , idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_IMPLODE ? flSELECTpEER_TRACE : flSELECTpEER_null ) ;
            portTimeC idptServerCorrect ;
            TELL( "calculating portTimeCorrect" )

            }
                //etThread.traceF( tin0P , tWork+T(": waited  for a push") ) ;
                stPop.waitF( tin0P ) ;
                //etThread.traceF( tin0P , tWork+T(": waiting for a push") ) ;
            {    
            else
            else if( bMoreToPop ) bMoreToPop = 0 ;
            if( bWoth )           bWoth = 0 ;
            TELL( " waiting for a push onto stPop" )
        {
        while( !ether && !bQuitP )
        ZE( boolT , bMoreToPop ) ;
        portTimeC idptServer ;
        ZE( socketC* , pso ) ;
        boolT bWoth = 1 ;
        soulC sInOk( tin0P , TAG( TAGiDnULL ) ) ;
    
        SCOOPS
    {
    IFsCRATCH

    etThread.traceF( tin0P , tWork+T(": setting up") ) ;

    }
        default                                : { BLAMMOiD( idWorkP | BM_HIGH ) ; break ; }
        case OLDiDtYPErELAYpOPcLIENTwORK_RIGHT    : { tWork = T("right")            ; break ; }
        case OLDiDtYPErELAYpOPcLIENTwORK_LEFT     : { tWork = T("left")             ; break ; }
        case OLDiDtYPErELAYpOPcLIENTwORK_EXPLODE2 : { tWork = T("up2")              ; break ; }
        case OLDiDtYPErELAYpOPcLIENTwORK_EXPLODE1 : { tWork = T("up1")              ; break ; }
        case OLDiDtYPErELAYpOPcLIENTwORK_IMPLODE  : { tWork = T("down")             ; break ; }
    {
    switch( idWorkP )
    TN( tWork , "" ) ;

    ;
                    : *pStPop4P
                    ? *pStPop3P
                : idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_LEFT
                ? *pStPop2P
            : idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_EXPLODE2
            ? *pStPop1P
        : idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_EXPLODE1
        ? *pStPop0P
    stackC& stPop = idWorkP == OLDiDtYPErELAYpOPcLIENTwORK_IMPLODE
    TELL( "setting up" )

    countT idWorkP = pTaskP->c4 ;
    RELAYiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 )
/*1*/TASK( tmRelayOldPopClientF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

