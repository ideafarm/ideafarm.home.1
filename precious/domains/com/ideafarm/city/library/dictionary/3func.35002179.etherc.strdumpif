
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        ether.strFuseF( tin0P , psttP , TP("",csttPad)+T(psttRead)+tle ) ;
    {
    if( psttRead && csttFullLineBeforeReadables && cMunchCurrentLine )                                                          // IF I'M WRITING READABLES AND I'VE WRITTEN AT LEAST WO FULL LINE AND HAVE WRITTEN AT LEAST WO MUNCH TO THE LATH LINE

    }
        if( aim ) aim = - aim ;

        }
            }
                ether.strFuseF( tin0P , psttRead , tge ) ;
            {
            if( mPerGrouprP && !( idm % mPerGrouprP ) )
            ether.strFuseF( tin0P , psttP , tge ) ;
        {
        else if( mPerGroupP && !( idm % mPerGroupP ) )
        }
            cMunchCurrentLine = 0 ;
            if( offMunch < cMunch - 1 ) ether.strFuseF( tin0P , psttP , tle ) ;
            }
                ether.strMakeF( tin0P , LF , psttRead , T(" ") , mPerLineP * 2 ) ; ___( psttRead ) ;
                ether.delF( tin0P , psttRead ) ;
                ether.strFuseF( tin0P , psttP , psttRead ) ;

                if( !csttFullLineBeforeReadables ) csttFullLineBeforeReadables = psttP->idAdam ;
            {
            if( psttRead )
        {
        if( mPerLineP  && !( idm % mPerLineP ) )

        }
            ether.strFuseF( tin0P , psttRead , T(post2) ) ;
            osTextT post2[] = { *pbc , 0 } ;
        {
        if( psttRead && !oib )
    
        ether.strFuseF( tin0P , psttP , TF4(vv,flagsUse,1,radix) ) ;
        //ether.traceF( tin0P , TF4(vv,flagsUse,1,radix) ) ;

        vv  &= mask ;
        vv >>= oib  ;

        countT vv        = *(countT*)pbc ;

        countT oib       =       offbMunch % SB   ;      /* "oib" : "offset of bit in byte" */
        const byteT* pbc = pbP + offbMunch / SB   ;
        countT offbMunch = ( offMunch + aim ) * cBitsPerMunch ;

        cMunchCurrentLine ++ ;
        idm               ++ ;
    {
    for( countT offMunch = 0 ; offMunch < cMunch ; offMunch ++ )
    sCountT aim = bForeign ? 1 : 0 ;                                      // IF bForeign THEN I NEVER WANT THE TARGETED MUNCH ; I ALWAYS WANT EITHER THE NEXT HIGHER OR NEXT LOWER NIBBLE
    ZE( countT , cMunchCurrentLine           ) ;
    ZE( countT , csttFullLineBeforeReadables ) ;
    ZE( countT , idm ) ;

    ;
            : 0x10
            ? 0x20
        : F(flagsP) & flSTRdUMP_5bITS
        ? 0x40
    const countT radix = F(flagsP) & flSTRdUMP_6bITS

    const flagsT flagsUse = flFORMAT_UNSIGNED | flFORMAT_NObASE | flFORMAT_FILLzE | flFORMAT_NObIGITvALUES ;

    const boolT bForeign = F(flagsP) & flSTRdUMP_FOREIGN ;

    TN( tp1 , " " ) ;
    TN( tp2 , "  " ) ;
    TN( tge , " " ) ;
    TN( tle , "\r\n" ) ;

    if( bReadableP ) { ether.strMakeF( tin0P , LF , psttRead , T(" ") , ( mPerLineP >> 1 ) + rGroupPerLine ) ; ___( psttRead ) ; }
    ZE( strokeS* , psttRead ) ;

    ) ;                                                                                                                                                                                     // CALLER MUST TAG ___( psttP ) ;
        + !!bReadableP * cLineEnds * ( 1 + ( mPerLineP >> 1 ) )                                                     // IF READABLE THEN FOR EACH LINE, WO STROKE FOR THE SEPARATING BLANK PLUS WO STROKE FOR EACH OO MUNCHES
        + cGrouprEnds                                                                                               // WO STROKE FOR THE BLANK AT THE END OF EACH READABLE GROUP
        + cGroupEnds                                                                                                // WO STROKE FOR THE BLANK AT THE END OF EACH GROUP
        + ( cLineEnds << 1 )                                                                                        // OO STROKES FOR EACH CRLF
        + csttPad                                                                                                   // PAD STROKES AT END OF LATH LINE (BEFORE READABLES, TO ALIGN READABLES), WHICH CONTAINS FEWER MUNCHES
        cMunch                                                                                                      // WO STROKE FOR EACH MUNCH
    ether.strMakeF( tin0P , LF , psttP , T("") ,

    countT rGroupPerLine = cGroupEnds / cLineEnds + ( !!( cGroupEnds % cLineEnds ) ) ;

    ;

                + !!( cMunch % mPerGrouprP )                                                                        // 1 IF EXISTS AN UNFULL READABLE GROUP AT THE END
                cMunch / mPerGrouprP                                                                                // NUMBER OF FULL READABLE GROUPS
            :
            ? 0
        : !mPerGrouprP
        ? 0
    countT cGrouprEnds       = !bReadableP
    countT cGroupEnds        = !mPerGroupP   ? 0 : cMunch / mPerGroupP  + !!( cMunch % mPerGroupP )  - cLineEnds ;
    countT cLineEnds         = !mPerLineP    ? 0 : cMunch / mPerLineP   + !!( cMunch % mPerLineP  ) ;

    countT csttPad = csttFullLine - csttLathLine - 1 ;        // THE "- 1" IS BECAUSE THE READABLES ARE PREFIXED WITH A " "

    }
        if( cFullGroupsLathLine ) csttLathLine += cFullGroupsLathLine - 1 ;
        countT cFullGroupsLathLine = cMunchLathLine / mPerGroupP ;
    {
    if( mPerGroupP )
    countT csttLathLine = cMunchLathLine ;

    }
        if( cFullGroupsPerLine ) csttFullLine += cFullGroupsPerLine - 1 ;
        countT cFullGroupsPerLine = mPerLineP / mPerGroupP ;
    {
    if( mPerGroupP )
    countT csttFullLine = mPerLineP ;

    countT cFullGroupsLathLine = !mPerGroupP ? 0 : cMunchLathLine / mPerGroupP ;
    countT cMunchLathLine      = !mPerLineP  ? 0 : cMunch         / mPerLineP  ;

    if( !mPerLineP ) mPerLineP = cMunch ;

    const countT cMunch = cBitsAll / cBitsPerMunch + !!cCrumb ;

    const countT cCrumb = cBitsAll % cBitsPerMunch            ;

    ;
            : 0xf
            ? 0x1f
        : F(flagsP) & flSTRdUMP_5bITS
        ? 0x3f
    const countT mask = F(flagsP) & flSTRdUMP_6bITS

    ;
            : 4
            ? 5
        : F(flagsP) & flSTRdUMP_5bITS
        ? 6
    const countT cBitsPerMunch = F(flagsP) & flSTRdUMP_6bITS

    const countT cBitsAll = cbP * SB ;

    etherC& ether = *((tin1S&)tin0P).pEther ;

    _IO_
    
    }
        if( POOP ) return ;
        if( F(flagsP) & flSTRdUMP_6bITS && pbP[ cbP ]                    ) { BLAMMOiD( 0x22222222 ) ; }
        if( F(flagsP) & flSTRdUMP_5bITS && pbP[ cbP ]                    ) { BLAMMOiD( 0x11111111 ) ; }
        if( F(flagsP) & flSTRdUMP_6bITS && bReadableP                    ) { __1 } ;
        if( F(flagsP) & flSTRdUMP_5bITS && bReadableP                    ) { __1 } ;
        if( F(flagsP) & flSTRdUMP_6bITS && F(flagsP) & flSTRdUMP_FOREIGN ) { __1 } ;
        if( F(flagsP) & flSTRdUMP_5bITS && F(flagsP) & flSTRdUMP_FOREIGN ) { __1 } ;
        if( F(flagsP) & flSTRdUMP_5bITS && F(flagsP) & flSTRdUMP_6bITS   ) { __1 } ;
        FV(flSTRdUMP,flagsP) ;
        __( !((tin1S&)tin0P).pEther ) ;
        __( bReadableP && ( bReadableP < 0x20 || bReadableP > 0x7f ) ) ;
        __( mPerGrouprP && mPerLineP % mPerGrouprP ) ;
        __( mPerGrouprP && !bReadableP ) ;
        __( mPerGrouprP && !mPerLineP ) ;
        __( mPerGroupP && mPerLineP % mPerGroupP ) ;
        __( mPerGroupP && !mPerLineP ) ;
        __Z( cbP ) ;
        __Z( pbP ) ;
        __NZ( psttP ) ;
        if( POOP ) return ;                                     // "mPer" : "MUNCHES PER" (EACH MUNCH IS A SINGLE STRING OF 4, 5, OR 6 BITS THAT IS REPRESENTED BY A SINGLE OUTPUT STROKE
    {
    IFbEcAREFUL                                                 // ALLOCATIVE CODE ASSUMES THAT A MUNCH IS 4 BITS SO THAT IT TAKES 2 MUNCHES PER INPUT BYTE
{
/*1*/voidT etherC::strDumpIF( tin0S& tin0P , strokeS*& psttP , const byteT* pbP , const countT cbP , const flagsT flagsP , countT mPerLineP , const countT mPerGroupP , const byteT bReadableP , const countT mPerGrouprP )/*1*/

/**/
*/
 bPerGrouprP
   '~'
   '@'
   '*'
   ' '
   '.'
  example values
  must either be 0 or a readable ascii value
  will be displayed in place of a byte value < 0x20 or > 0x7f
 mReadableP
  if not 0 then bPerLineP must be an integral multiple of bPerGroupP
  bytes per group
 mPerGroupP
  if 0 and !bPerLineP then defaults to cbP
   to fix this, double the parameter value
   so old code that calls me will now have shorter output lines that the caller intends
  munches per line (originally, this was bytes per line, where there is 2 munches per byte, but at 20250120@2000, behavior changed so that now these "mPer" parameters refer to munches (nibbles) rather than bytes
 mPerLineP
  flSTRdUMP_6bITS will use the entire IPDOS (tm) base 64_9 bigit sequence, so should not be used when the output will become part of a file name (ntfs file names are case insensitive)
  if flSTRdUMP_5bITS or flSTRdUMP_6bITS then the input must be null terminated, i.e. pbP[ cbP ] must be accessible and contain 0
 flagsP
 cbP
 pbP
 psttP
 tin0P
arguments
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

