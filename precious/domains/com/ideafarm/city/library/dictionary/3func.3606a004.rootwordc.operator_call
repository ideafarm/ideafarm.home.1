
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            break ;
            ether.delF( tin0P , psttw ) ;
            }
                //E.G. POPUPsOIXLoLD(/*5*/osTextT*/*5*/postP)
                //ALT: REQUIRE TYPING INFO TO BE PRESENT IN THE MACRO #define STATEMENT WO'TH TOKEN
                //ISSUE: SHOULD SUPPORT FOR MACRO (SUCH AS POPUP) BE HARDCODED HERE OR GENERATED: CONJ: HANDCODED HERE (THERE IS NO TYPE INFO IN THE MACRO)
                //ISSUE: SHOULD SUPPORT FOR GLOBAL API'S BE HARDCODED HERE OR GENERATED: CONJ: GENERATED AND INCLUDED HERE
                //DO NOT PUT API'S TO CLASSES HERE; DERIVE CLASSES FROM baseSoilXxxxC; SEE etherC AS AN EXAMPLE

                else if( !( F(((tin123S&)tin0P).flagsThreadMode3) & flTHREADmODE3_SOIXLoLDnOpOPUPoNeRROR ) ) { POPUPsOIXLoLD( T("The word \"")+T(psttw)+T("\" is not a root word.") ) ; }
                }
                    }
                        ether.delF( tin0P , psttw ) ;

                        POPUPsOIXLoLD( T(psttw) ) ;
                        //CONoUTrAW( T("POPUP suppressed: \"")+T(psttw)+T("\"\r\n") ) ;

                        slP >> psttw ; ___( psttw ) ; idArgNext ++ ;
                        ZE( strokeS* , psttw ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("POPUP") ) )
                }
                {
                else if( !ether.strCompareF( tin0P , psttw , T("null") ) )
                }
                    }
                        }
                            PUSE( tin0P , *(byteT**)&psttDo ) ;
                            PUSE( tin0P , *(byteT**)&psttExpr ) ;
                        
                            }
                                if( bAbort ) break ;

                                }
                                    }
                                        break ;
                                        slP >> vv ; idArgNext ++ ;
                                        ZE( countT , vv ) ;
                                    {
                                    if( !cExpr )
                                    countT& cExpr = slP.cFieldF( tin0P ) ;
                                    bAbort = 0 ;
                                {
                                else
                                IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                                slP << psttExpr O(*pParser) ;
                                boolT bAbort = 1 ;

                                slP << psttDo O(*pParser) ;
                            {
                            for(;;)
                    
                            slP >> psttDo ; ___( psttDo ) ; idArgNext ++ ;
                            ZE( strokeS* , psttDo ) ;
                        {
                        else
                        IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                
                        slP >> psttExpr ; ___( psttExpr ) ; idArgNext ++ ;
                        ZE( strokeS* , psttExpr ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("dowhile") ) )
                }
                    }
                        }
                            PUSE( tin0P , *(byteT**)&psttDo ) ;
                            PUSE( tin0P , *(byteT**)&psttExpr ) ;
                        
                            }
                                if( bAbort ) break ;

                                }
                                    slP << psttDo O(*pParser) ;
                                    }
                                        break ;
                                        slP >> vv ; idArgNext ++ ;
                                        ZE( countT , vv ) ;
                                    {
                                    if( !cExpr )
                                    countT& cExpr = slP.cFieldF( tin0P ) ;
                                    bAbort = 0 ;
                                {
                                else
                                IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                                slP << psttExpr O(*pParser) ;
                                boolT bAbort = 1 ;
                            {
                            for(;;)
                    
                            slP >> psttDo ; ___( psttDo ) ; idArgNext ++ ;
                            ZE( strokeS* , psttDo ) ;
                        {
                        else
                        IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                
                        slP >> psttExpr ; ___( psttExpr ) ; idArgNext ++ ;
                        ZE( strokeS* , psttExpr ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("whiledo") ) )
                }
                    }
                        }
                            }
                                }
                                    PUSE( tin0P , *(byteT**)&psttEpilog ) ;
                                    PUSE( tin0P , *(byteT**)&psttDo ) ;
                                    PUSE( tin0P , *(byteT**)&psttProlog ) ;
                                    PUSE( tin0P , *(byteT**)&psttExpr ) ;
                        
                                    }
                                        if( bAbort ) break ;
            
                                        }
                                            slP << psttProlog O(*pParser) << psttDo O(*pParser) << psttEpilog O(*pParser) ;
                                            }
                                                break ;
                                                slP >> vv ; idArgNext ++ ;
                                                ZE( countT , vv ) ;
                                            {
                                            if( !cExpr )
                                            countT& cExpr = slP.cFieldF( tin0P ) ;
                                            bAbort = 0 ;
                                        {
                                        else
                                        IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                                        slP << psttExpr O(*pParser) ;
                                        boolT bAbort = 1 ;
                                    {
                                    for(;;)
                    
                                    slP >> psttEpilog ; ___( psttEpilog ) ; idArgNext ++ ;
                                    ZE( strokeS* , psttEpilog ) ;
                                {
                                else
                                IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                    
                                slP >> psttDo ; ___( psttDo ) ; idArgNext ++ ;
                                ZE( strokeS* , psttDo ) ;
                            {
                            else
                            IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                
                            slP >> psttProlog ; ___( psttProlog ) ; idArgNext ++ ;
                            ZE( strokeS* , psttProlog ) ;
                        {
                        else
                        IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                
                        slP >> psttExpr ; ___( psttExpr ) ; idArgNext ++ ;
                        ZE( strokeS* , psttExpr ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("for") ) )
                }
                    }
                        }
                            }
                                slP O(*pParser) ;
                        
                                PUSE( tin0P , *(byteT**)&psttThen ) ;
                                PUSE( tin0P , *(byteT**)&psttElse ) ;
                        
                                else        slP << psttElse ;
                                if( bThen ) slP << psttThen ;
                        
                                slP >> bThen ; idArgNext ++ ;
                                ZE( boolT , bThen ) ;
                            {
                            else
                            IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                    
                            slP >> psttThen ; ___( psttThen ) ; idArgNext ++ ;
                            ZE( strokeS* , psttThen ) ;
                        {
                        else
                        IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                
                        slP >> psttElse ; ___( psttElse ) ; idArgNext ++ ;
                        ZE( strokeS* , psttElse ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_strokeSptr )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("if") ) )
                }
                    }
                        slP << ++ vv ;
                        slP >> vv ; idArgNext ++ ;
                        ZE( countT , vv ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("++") ) )
                }
                    }
                        slP << -- vv ;
                        slP >> vv ; idArgNext ++ ;
                        ZE( countT , vv ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("--") ) )
                }
                    }
                        slP << vv << vv ;
                        slP >> vv ; idArgNext ++ ;
                        ZE( countT , vv ) ;
                    {
                    else
                    IFbADpEEK( slP , psttw , ifcIDtYPEsOULiTEM_countT )
                {
                else if( !ether.strCompareF( tin0P , psttw , T("dup") ) )
                }
                    POPUP( T(postName)+T(": \"?\" received.") ) ;
                {
                if( !ether.strCompareF( tin0P , psttw , T("?") ) )
            
                ZE( countT , cbFieldNext ) ;
                ZE( flagsT , flagsNext ) ;
                ZE( countT , idTypeNext ) ;
                ZE( byteT* , pbFieldNext ) ;
                countT idArgNext = 1 ;
            {
            if( psttw && pParser )

            slP >> *(baseSoilXxxxC**)&pParser ;
            ZE( soixlOldSpaceC* , pParser ) ;

            slP >> psttw ; ___( psttw ) ;
            ZE( strokeS* , psttw ) ;
        {
        case ifcIDcMDbASE_CMDdEFAULT :
        }
            break ;
            slP.flags = save ;
            slP << (baseSoilXxxxC*)this ;
            slP.flags &= ~( F(flSOUL_LIVE) ) ;
            flagsT save = slP.flags ;
        {
        case ifcIDcMDbASE_REFERENCE :
        }
            break ;
        {
        case ifcIDcMDbASE_TOCK :
        }
            break ;
        {
        case ifcIDcMDbASE_TICK :
        }
            break ;
            slP << (strokeS*)T(postName) ;
        {
        case ifcIDcMDbASE_INSTANCEnAME :
        }
            break ;
            slP << (strokeS*)T(((tin123S&)tin0P).pag1->_rootWordC_.postOldClassName) ;
        {
        case ifcIDcMDbASE_CLASSnAME :
    {
    switch( idCmdBase )
    slP >> idCmdBase ;
    ZE( countT , idCmdBase ) ;

    }
        if( pMeI != (baseSoilXxxxC*)this ) { BLAMMO ; }
        slP >> pMeI ;
        ZE( baseSoilXxxxC* , pMeI ) ;
    {
{
/*1*/voidT rootWordC::operator ()( tin0S& tin0P , soulC& slP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

