
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        osTimeAddIF( tinBaseP , time1P , time2P , timeSinceBoot1 , timeSinceBoot2 ) ;
        dosQuerySysInfoTimeSinceBootF( tinBaseP , timeSinceBoot1 , timeSinceBoot2 ) ;
        ZE( sCountT , timeSinceBoot2 ) ;
        ZE( countT , timeSinceBoot1 ) ;
        time2P = ph->timeBoot2 ;
        time1P = ph->timeBoot1 ;
        homeS* ph = (homeS*)(byteT*)processGlobal4I.napHome ;
    {
    else
    }
        osTimeAddIF( tinBaseP , time1P , time2P , timeSince60s1 , timeSince60s2 ) ;
        dosQuerySysInfoTimeSince1960sDecadeF( tinBaseP , timeSince60s1 , timeSince60s2 ) ;
        ZE( sCountT , timeSince60s2 ) ;
        ZE( countT , timeSince60s1 ) ;


        }
            if( y != 1969 ) BLAMMOiD( y - 1969 ) ;
            osTimeToOldTimeF( tinBaseP , ms , ss , mm , hh , d , m , y , dow , time1P , time2P , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
            ZE( countT  , dow ) ;
            ZE( sCountT , y ) ;
            ZE( countT  , m ) ;
            ZE( countT  , d ) ;
            ZE( countT  , hh ) ;
            ZE( countT  , mm ) ;
            ZE( countT  , ss ) ;
            ZE( countT  , ms ) ;
        {

        osTimeFromOldTimeIF( tinBaseP , time1P , time2P , 1969 , 0 , 0 , 0 , 0 , 0 , 0 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
    {
    if( fDoNotUseTimeAtBootP )
    _IO_

    }
        if( POOP ) return ;
        __( time2P ) ;
        __( time1P ) ;
        // THIS CODE IS SUPPRESSED IN ORDER TO OPTIMIZE THE 0010*.*_IO_* MACROS FOR SPEED

        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT thirdC::osTimeNowF( tinBaseS& tinBaseP , countT& time1P , sCountT& time2P , const boolT fDoNotUseTimeAtBootP )/*1*/

/**/
*/
 fDoNotUseTimeAtBootP
 time2P
 time1P
arguments
the actual grainsize depends on the grainsize of the clock on the computer hardware
if fDoNotUseTimeAtBootP == 1, the theoretical grainsize is 1 second
if fDoNotUseTimeAtBootP == 0, the theoretical grainsize is 1 millisecond
a time unit is 1 / ( 256 * 256 * 256 * 256 ) of a day
time1P will be set to the remainder, in time units
time2P will be set to the number of complete days since Jesus's conventional time of birth
  \<A HREF=\"5.eb00104.1.1.0.html\"\>eb00104:  WAKEsHOW( "example.simplest.func.102006c.thirdC.osTimeNowF" )\</A\>
 simplest
examples
\<A HREF=\"5.102006c.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$osTimeNowF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

