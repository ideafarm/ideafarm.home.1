
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    #endif

        }
            }
                }
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "inflateEnd"   ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pInflateEndF   =   (zlib_inflateEndFT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "inflate"      ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pInflateF      =      (zlib_inflateFT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "inflateInit2_") ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pInflateInit2F = (zlib_inflateInit2FT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "inflateInit_" ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pInflateInitF  =  (zlib_inflateInitFT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "deflateEnd"   ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pDeflateEndF   =   (zlib_deflateEndFT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "deflate"      ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pDeflateF      =      (zlib_deflateFT)_brcRaw ; 
                    _brcRaw = 0 ; BOSnOtIN( GetProcAddress( zlib_hModule , "deflateInit_" ) ) ; if( !_brcRaw ) { BLAMMO ; } ; zlib_pDeflateInitF  =  (zlib_deflateInitFT)_brcRaw ; 
                {                                                                
                else
                if( !zlib_hModule ) { BLAMMO ; }

                zlib_hModule = (HMODULE)_brcRaw ;
                BOSnOtIN( LoadLibraryEx( postDllZlib , 0 , 0 ) ) ;
                _brcRaw = 0 ;

                thirdC::c_strcatIF( postDllZlib , "precious\\domains\\com\\ideafarm\\city\\workshop\\zlib\\unzipped.zlib123dll\\dll32\\zlibwapi.dll" ) ;

            {                     // A POLICY OF NEVER LOADING THIRD PARTY LIBRARIES STATICALLY MIGHT BE A GOOD IDEA TO CONSERVE MEMORY AND SPEED UP PROCESS INITIALIZATION ; IF HUNDREDS OR THOUSANDS OF 3RD PARTY MODULES ARE SUPPORTED THEN DYNAMIC, ON DEMAND LOADING BECOMES NECESSARY, SO MIGHT AS WELL DO THEM ALL THAT WAY, JUST IN CASE SUCH A SCENARIO MATERIALIZES
            if( *postDllZlib ) // ZLIB IS LOADED VERY EARLY SO THAT IT CAN BE USED VERY EARLY ; IT IS LOADED DYNAMICALLY MAINLY BECAUSE ZLIB HEADERS ARE NOT COMPATIBLE WITH WATCOM COMPILER

            }
                }
                    else *( ++ postBS ) = 0 ;
                    if( !postBS ) *postDllZlib = 0 ;
                    osTextT* postBS = thirdC::c_strstrIF( postA + sizeof postTestA - 1  , "\\" ) ;
                {
                else
                if( !postA || postA - postDllZlib != 1 ) *postDllZlib = 0 ;

                osTextT* postA = thirdC::c_strstrIF( postDllZlib , postTestA ) ;

                osTextT postTestA[] = ":\\ideafarm.home." ;

                thirdC::c_strcpyIF( postDllZlib , (osTextT*)thirdC::postExeFileNameIF() ) ;
            {
            osTextT postDllZlib[ TUCK << 1 ] ;  // EXAMPLE:  POSThHOMEdRIVE ":\\ideafarm.home.12345678\\"
        {

        ecInfo.ContextRecord   = &cInfo ;
        ecInfo.ExceptionRecord = &eInfo ;

    #if defined( __NT__ )

    if( this != &processGlobal2I ) { BLAMMO ; }
    if( !osTidMain ) { BLAMMO ; }

    osTidMain = _brcRaw ;
    BOSnOtIN( GetCurrentThreadId() )
    ZE( countT , _brcRaw ) ;

    }
        //}
        //    TELLsYSc3( ifcIDtYPEtELLsYS_PROCESSgLOBAL1scT , (byteT*)&ti , sizeof ti )
        //    ti.cGrains      = TOCK >> 1 ;
        //    ti.pbEarlyGrain = pbEarlyGrain ;
        //    ti.osPid        = ((tin1S&)tin0P).osPid ;
        //    tellInfoSysProcessGlobal1S ti ;
        //{
        //U::CAN'T DO THIS EARLY.  DO IT IN processGlobal4S, WHERE THIS CODE WAS BEFORE BEING MOVED HERE

        //#endif
        //
        //    CONoUTrAW5( "processGlobal2I / QueryWorkingSetEx [bOk,rc]:    " , bOk , "    " , rc , "\r\n" ) ;
        //    countT rc = bOk ? 0 : GetLastError() ;
        //
        //    //B:static BOOL bOk = QueryWorkingSetEx( GetCurrentProcess() , pInfoGrain , sizeof pInfoGrain ) ;
        //
        //    static BOOL bOk = QueryWorkingSetEx( GetCurrentProcess() , pInfoGrain , sizeof( PSAPI_WORKING_SET_EX_INFORMATION ) * TOCK / 2 ) ;
        //
        //    }
        //        pInfoGrain[ ++ offg ].VirtualAddress = (voidT*)pbTry ;
        //
        //        //}
        //        //    CONoUTrAW( "\r\n" ) ;
        //        //    idColLath = 0 ;
        //        //{
        //        //if( ++ idColLath == TUCK )
        //        //CONoUTrAW( bOk ? "0" : "." ) ;
        //
        //        //if( bOk ) pbEarlyGrain[ offg / SB ] |= mask ;
        //        //byteT mask = (byteT)( 1 << ( ++ offg ) % SB ) ;
        //        //
        //        //thirdC::dosReadProcessMemoryIF( tin0P , &bIn , 1 , bOk , (voidT*)pbTry , ((tin1S&)tin0P).osPid ) ;
        //        //ZE( byteT , bIn ) ;
        //        //ZE( boolT , bOk ) ;
        //    {
        //    for( byteT* pbTry = 0 ; pbTry < (byteT*)BM_HIGH ; pbTry += cbGrain )
        //    countT offg = -1 ;
        //    ZE( countT , idColLath ) ;
        //    CONoUTrAW3( "[cbGrain]: " , cbGrain , "\r\n" ) ;
        //    if( cbAllocationGrain != cbGrain ) { BLAMMO ; }
        //
        //    }
        //        cbGrain = info.dwAllocationGranularity ;
        //        GetSystemInfo( &info ) ;
        //        SYSTEM_INFO info ;
        //    {
        //    ZE( countT , cbGrain ) ;
        //
        //    CONoUTrAW( "\r\n\r\nAddress Space Usage (ct processGlobal2I):\r\n\r\n" ) ;
        //
        //    PSAPI_WORKING_SET_EX_INFORMATION* pInfoGrain = (PSAPI_WORKING_SET_EX_INFORMATION*)pcInfoGrain ;
        //
        //    }
        //        }
        //            BLAMMO ;
        //            LOGrAW3( "error: unexpected size [sizeof(PSAPI_WORKING_SET_EX_INFORMATION)]: ]: " , sizeof( PSAPI_WORKING_SET_EX_INFORMATION ) , "\r\n" ) ;
        //        {
        //        if( ci != sizeof( count04T ) )
        //        countT ci = sizeof( PSAPI_WORKING_SET_EX_INFORMATION ) ;
        //    {
        //
        //#if defined( __NT__ )
        //
        //TINSL
    {

    putNegAM( *(countT*)( postRptException + sizeof postRptException - sizeof( countT ) ) , FINGERnEG_FOOTc2 ) ;
    putNegAM( *(countT*)  postRptException                                                    , FINGERnEG_FOOTc1 ) ;

    if( this != &processGlobal2I ) { BLAMMO ; }
{
zlib_pInflateEndF( 0 )
zlib_pInflateF( 0 ) ,
zlib_pInflateInit2F( 0 ) ,
zlib_pInflateInitF( 0 ) ,
zlib_pDeflateEndF( 0 ) ,
zlib_pDeflateF( 0 ) ,
zlib_pDeflateInitF( 0 ) ,
zlib_hModule( 0 ) ,
idBlammo( 0 ) ,
idiFileBlammoCt( 0 ) ,
idLineBlammoCt( 0 ) ,
idiFileBlammo( 0 ) ,
idLineBlammo( 0 ) ,
cbAllocationGrain( TOCK ) ,
flagsCpuFeatures( queryCpuFeaturesAM() ) ,
ostLathLog( 0 ) ,
osTidTerminator( 0 ) ,
osTidMain( 0 ) ,
idTrial( 0 ) ,
idPhaseProcess( ifcIDpHASEpROCESS_PROLOGcONSTRUCTINGgLOBALS ) ,
idProcessOld( 0 ) ,
idNumaNode( 0 ) ,
idHome( 1 ) ,
idExceptionEvent( 0 ) ,
flDt( flCTdTg_null ) ,
flCt( flCTdTg_null ) ,
cDebug( 0 ) ,
ccValidFlags( sizeof pcValidFlags / sizeof pcValidFlags[ 0 ] ) ,
ccPrime( sizeof pcPrime / sizeof pcPrime[ 0 ] ) ,
cb_nicNameC_( sizeof( nicNameC ) ) ,
cb_portTimeC_( sizeof( portTimeC ) ) ,
//bGo( 0 ) ,
_tin0S_idTinLath( 0 ) ,
_thirdC_flagsProcessState( flPROCESSsTATE_MAINtHREADiSaLONE ) ,
_thirdC_flagsModeProcess2( flMODEpROCESS2_null ) ,
_thirdC_flagsModeProcess1( flMODEpROCESS1_JOT ) ,
_taskS_idThreadLath( 3 ) , //1:main 2:heart 3:break
_handleC_cInstances( 0 ) ,
_poolC_bQuitFlushing( 0 ) ,
_poolC_idFlushLath( 0 ) ,
_poolC_cBacked( 0 ) ,
_poolC_pPool( 0 ) ,
_grabC_pgw( 0 ) ,
_grabC_cgw( TOCK ) , //GLOBALS WON'T CT WITH LESS THAN TOCK
_displayC_pDisplay( 0 ) ,
/*1*/processGlobal2S::processGlobal2S( voidT ) :/*1*/

byteT processGlobal2S::pbnuTuck[ TUCK ] ;

countT processGlobal2S::pcPrime[] = { 0x11 , 0x13 , 0x17 , 0x1d , 0x1f , 0x25 , 0x29 , 0x2b , 0x2f , 0x35 , 0x3b , 0x3d , 0x43 , 0x47 , 0x49 , 0x4f } ;

osTextT processGlobal2S::postIdHome[ 0x9 ] = { 0 , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' } ;

osTextT processGlobal2S::postIdAdamRoot[ 0x9 ] = { 0 , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' } ;

osTextT processGlobal2S::postIdNumaNode[ 0x9 ] = { 0 , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' , 'b' } ;

;
}
    #include "\ideafarm.home.1\ephemeral\domains\com\ideafarm\city\workshop\snip\1snip.1900000b.genValidFlags.h"
{
flagsT processGlobal2S::pcValidFlags[] =

const osTextT* const processGlobal2S::_handleC_postOldClassName = "handleC" ;

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

