
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

}
    Sleep( 0 ) ;
    //++ s ; ether.osSleepF( tinBaseP , TUCK ) ;
    //sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    //thirdC::osHireThenMonitorIF( tinBaseP , ifcIDaDAM_HIREwITHOUTdEBUGGING , T("ifcIDaDAM_SCRATCH0f") , tArgsGross ) ;
    //THIS LEAKS 2 HANDLES PER CYCLE

    //etThread.ifcHireF( tinBaseP , T("ifcIDaDAM_SCRATCH0f") , ifcIDaDAM_HIREwITHOUTdEBUGGING , T("!hireNow null.exe") , flHIRE_WAIT ) ;
    //THIS DOES NOT LEAK



#endif
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
                    if(  &&  != INVALID_HANDLE_VALUE ) CloseHandle(  ) ;  = 0 ;
#if defined( NEVERdEFINED )

#endif

    }
        bOk = ContinueDebugEvent( event.dwProcessId , event.dwThreadId , DBG_EXCEPTION_NOT_HANDLED ) ;

        }
            }
                default                          : { /*etThread.traceF( tinBaseP , T("unknown"            ) ) ;*/             break ; }
                case RIP_EVENT                   : { /*etThread.traceF( tinBaseP , T("RIP"                ) ) ;*/             break ; }
                case OUTPUT_DEBUG_STRING_EVENT   : { /*etThread.traceF( tinBaseP , T("OUTPUT_DEBUG_STRING") ) ;*/             break ; }
                case UNLOAD_DLL_DEBUG_EVENT      : { /*etThread.traceF( tinBaseP , T("UNLOAD_DLL"         ) ) ;*/             break ; }
                case EXIT_PROCESS_DEBUG_EVENT    : { /*etThread.traceF( tinBaseP , T("EXIT_PROCESS"       ) ) ;*/ bDone = 1 ; break ; }
                case EXIT_THREAD_DEBUG_EVENT     : { /*etThread.traceF( tinBaseP , T("EXIT_THREAD"        ) ) ;*/             break ; }
                }
                    break ;
                    //etThread.traceF( tinBaseP , T("EXCEPTION:    ")+tEvent ) ;

                    }
                        default                                                    : { tEvent += T("unexpected                          ") ; break ; }
                        case STATUS_SXS_INVALID_DEACTIVATION     /* 0xC0150010L */ : { tEvent += T("STATUS_SXS_INVALID_DEACTIVATION     ") ; break ; }
                        case STATUS_SXS_EARLY_DEACTIVATION       /* 0xC015000FL */ : { tEvent += T("STATUS_SXS_EARLY_DEACTIVATION       ") ; break ; }
                        case STATUS_ASSERTION_FAILURE            /* 0xC0000420L */ : { tEvent += T("STATUS_ASSERTION_FAILURE            ") ; break ; }
                        case STATUS_INVALID_CRUNTIME_PARAMETER   /* 0xC0000417L */ : { tEvent += T("STATUS_INVALID_CRUNTIME_PARAMETER   ") ; break ; }
                        case STATUS_STACK_BUFFER_OVERRUN         /* 0xC0000409L */ : { tEvent += T("STATUS_STACK_BUFFER_OVERRUN         ") ; break ; }
                        case STATUS_REG_NAT_CONSUMPTION          /* 0xC00002C9L */ : { tEvent += T("STATUS_REG_NAT_CONSUMPTION          ") ; break ; }
                        case STATUS_FLOAT_MULTIPLE_TRAPS         /* 0xC00002B5L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_TRAPS         ") ; break ; }
                        case STATUS_FLOAT_MULTIPLE_FAULTS        /* 0xC00002B4L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_FAULTS        ") ; break ; }
                        case STATUS_DLL_INIT_FAILED              /* 0xC0000142L */ : { tEvent += T("STATUS_DLL_INIT_FAILED              ") ; break ; }
                        case STATUS_CONTROL_C_EXIT               /* 0xC000013AL */ : { tEvent += T("STATUS_CONTROL_C_EXIT               ") ; break ; }
                        case STATUS_ENTRYPOINT_NOT_FOUND         /* 0xC0000139L */ : { tEvent += T("STATUS_ENTRYPOINT_NOT_FOUND         ") ; break ; }
                        case STATUS_ORDINAL_NOT_FOUND            /* 0xC0000138L */ : { tEvent += T("STATUS_ORDINAL_NOT_FOUND            ") ; break ; }
                        case STATUS_DLL_NOT_FOUND                /* 0xC0000135L */ : { tEvent += T("STATUS_DLL_NOT_FOUND                ") ; break ; }
                        case EXCEPTION_STACK_OVERFLOW            /* 0xC00000FDL */ : { tEvent += T("EXCEPTION_STACK_OVERFLOW            ") ; break ; }
                        case EXCEPTION_PRIV_INSTRUCTION          /* 0xC0000096L */ : { tEvent += T("EXCEPTION_PRIV_INSTRUCTION          ") ; break ; }
                        case EXCEPTION_INT_OVERFLOW              /* 0xC0000095L */ : { tEvent += T("EXCEPTION_INT_OVERFLOW              ") ; break ; }
                        case EXCEPTION_INT_DIVIDE_BY_ZERO        /* 0xC0000094L */ : { tEvent += T("EXCEPTION_INT_DIVIDE_BY_ZERO        ") ; break ; }
                        case EXCEPTION_FLT_UNDERFLOW             /* 0xC0000093L */ : { tEvent += T("EXCEPTION_FLT_UNDERFLOW             ") ; break ; }
                        case EXCEPTION_FLT_STACK_CHECK           /* 0xC0000092L */ : { tEvent += T("EXCEPTION_FLT_STACK_CHECK           ") ; break ; }
                        case EXCEPTION_FLT_OVERFLOW              /* 0xC0000091L */ : { tEvent += T("EXCEPTION_FLT_OVERFLOW              ") ; break ; }
                        case EXCEPTION_FLT_INVALID_OPERATION     /* 0xC0000090L */ : { tEvent += T("EXCEPTION_FLT_INVALID_OPERATION     ") ; break ; }
                        case EXCEPTION_FLT_INEXACT_RESULT        /* 0xC000008FL */ : { tEvent += T("EXCEPTION_FLT_INEXACT_RESULT        ") ; break ; }
                        case EXCEPTION_FLT_DIVIDE_BY_ZERO        /* 0xC000008EL */ : { tEvent += T("EXCEPTION_FLT_DIVIDE_BY_ZERO        ") ; break ; }
                        case EXCEPTION_FLT_DENORMAL_OPERAND      /* 0xC000008DL */ : { tEvent += T("EXCEPTION_FLT_DENORMAL_OPERAND      ") ; break ; }
                        case EXCEPTION_ARRAY_BOUNDS_EXCEEDED     /* 0xC000008CL */ : { tEvent += T("EXCEPTION_ARRAY_BOUNDS_EXCEEDED     ") ; break ; }
                        case EXCEPTION_INVALID_DISPOSITION       /* 0xC0000026L */ : { tEvent += T("EXCEPTION_INVALID_DISPOSITION       ") ; break ; }
                        case EXCEPTION_NONCONTINUABLE_EXCEPTION  /* 0xC0000025L */ : { tEvent += T("EXCEPTION_NONCONTINUABLE_EXCEPTION  ") ; break ; }
                        case EXCEPTION_ILLEGAL_INSTRUCTION       /* 0xC000001DL */ : { tEvent += T("EXCEPTION_ILLEGAL_INSTRUCTION       ") ; break ; }
                        case STATUS_NO_MEMORY                    /* 0xC0000017L */ : { tEvent += T("STATUS_NO_MEMORY                    ") ; break ; }
                        case STATUS_INVALID_PARAMETER            /* 0xC000000DL */ : { tEvent += T("STATUS_INVALID_PARAMETER            ") ; break ; }
                        case EXCEPTION_INVALID_HANDLE            /* 0xC0000008L */ : { tEvent += T("EXCEPTION_INVALID_HANDLE            ") ; break ; }
                        case EXCEPTION_IN_PAGE_ERROR             /* 0xC0000006L */ : { tEvent += T("EXCEPTION_IN_PAGE_ERROR             ") ; break ; }
                        case EXCEPTION_ACCESS_VIOLATION          /* 0xC0000005L */ : { tEvent += T("EXCEPTION_ACCESS_VIOLATION          ") ; break ; }
                        case DBG_EXCEPTION_NOT_HANDLED           /* 0x80010001L */ : { tEvent += T("DBG_EXCEPTION_NOT_HANDLED           ") ; break ; }
                        case STATUS_UNWIND_CONSOLIDATE           /* 0x80000029L */ : { tEvent += T("STATUS_UNWIND_CONSOLIDATE           ") ; break ; }
                        case STATUS_LONGJMP                      /* 0x80000026L */ : { tEvent += T("STATUS_LONGJMP                      ") ; break ; }
                        case EXCEPTION_SINGLE_STEP               /* 0x80000004L */ : { tEvent += T("EXCEPTION_SINGLE_STEP               ") ; break ; }
                        case EXCEPTION_BREAKPOINT                /* 0x80000003L */ : { tEvent += T("EXCEPTION_BREAKPOINT                ") ; break ; }
                        case EXCEPTION_DATATYPE_MISALIGNMENT     /* 0x80000002L */ : { tEvent += T("EXCEPTION_DATATYPE_MISALIGNMENT     ") ; break ; }
                        case EXCEPTION_GUARD_PAGE                /* 0x80000001L */ : { tEvent += T("EXCEPTION_GUARD_PAGE                ") ; break ; }
                        case DBG_COMMAND_EXCEPTION               /* 0x40010009L */ : { tEvent += T("DBG_COMMAND_EXCEPTION               ") ; break ; }
                        case DBG_CONTROL_BREAK                   /* 0x40010008L */ : { tEvent += T("DBG_CONTROL_BREAK                   ") ; break ; }
                        case DBG_RIPEXCEPTION                    /* 0x40010007L */ : { tEvent += T("DBG_RIPEXCEPTION                    ") ; break ; }
                        case DBG_PRINTEXCEPTION_C                /* 0x40010006L */ : { tEvent += T("DBG_PRINTEXCEPTION_C                ") ; break ; }
                        case DBG_CONTROL_C                       /* 0x40010005L */ : { tEvent += T("DBG_CONTROL_C                       ") ; break ; }
                        case DBG_TERMINATE_PROCESS               /* 0x40010004L */ : { tEvent += T("DBG_TERMINATE_PROCESS               ") ; break ; }
                        case DBG_TERMINATE_THREAD                /* 0x40010003L */ : { tEvent += T("DBG_TERMINATE_THREAD                ") ; break ; }
                        case STATUS_SEGMENT_NOTIFICATION         /* 0x40000005L */ : { tEvent += T("STATUS_SEGMENT_NOTIFICATION         ") ; break ; }
                        case DBG_CONTINUE                        /* 0x00010002L */ : { tEvent += T("DBG_CONTINUE                        ") ; break ; }
                        case DBG_EXCEPTION_HANDLED               /* 0x00010001L */ : { tEvent += T("DBG_EXCEPTION_HANDLED               ") ; break ; }
                        case STATUS_PENDING                      /* 0x00000103L */ : { tEvent += T("STATUS_PENDING                      ") ; break ; }
                        case STATUS_TIMEOUT                      /* 0x00000102L */ : { tEvent += T("STATUS_TIMEOUT                      ") ; break ; }
                        case STATUS_USER_APC                     /* 0x000000C0L */ : { tEvent += T("STATUS_USER_APC                     ") ; break ; }
                        case STATUS_ABANDONED_WAIT_0             /* 0x00000080L */ : { tEvent += T("STATUS_ABANDONED_WAIT_0             ") ; break ; }
                        case STATUS_WAIT_0                       /* 0x00000000L */ : { tEvent += T("STATUS_WAIT_0                       ") ; break ; }
                    {
                    switch( event.u.Exception.ExceptionRecord.ExceptionCode )
                    TN( tEvent , "" ) ;
                {
                case EXCEPTION_DEBUG_EVENT       :
                }
                    break ;

                    if( event.u.LoadDll.hFile && event.u.LoadDll.hFile != INVALID_HANDLE_VALUE ) CloseHandle( event.u.LoadDll.hFile ) ; event.u.LoadDll.hFile = 0 ;
                    //etThread.traceF( tinBaseP , T("LOAD_DLL") ) ;
                {
                case LOAD_DLL_DEBUG_EVENT :
                }
                    break ;

                    if( event.u.CreateThread.hThread && event.u.CreateThread.hThread != INVALID_HANDLE_VALUE ) CloseHandle( event.u.CreateThread.hThread ) ; event.u.CreateThread.hThread = 0 ;
                    //etThread.traceF( tinBaseP , T("CREATE_THREAD") ) ;
                {
                case CREATE_THREAD_DEBUG_EVENT :
                }
                    break ;

                    if( event.u.CreateProcessInfo.hThread  && event.u.CreateProcessInfo.hThread  != INVALID_HANDLE_VALUE ) CloseHandle( event.u.CreateProcessInfo.hThread  ) ; event.u.CreateProcessInfo.hThread  = 0 ;
                    if( event.u.CreateProcessInfo.hProcess && event.u.CreateProcessInfo.hProcess != INVALID_HANDLE_VALUE ) CloseHandle( event.u.CreateProcessInfo.hProcess ) ; event.u.CreateProcessInfo.hProcess = 0 ;
                    if( event.u.CreateProcessInfo.hFile    && event.u.CreateProcessInfo.hFile    != INVALID_HANDLE_VALUE ) CloseHandle( event.u.CreateProcessInfo.hFile    ) ; event.u.CreateProcessInfo.hFile    = 0 ;
                    //etThread.traceF( tinBaseP , T("CREATE_PROCESS") ) ;
                {
                case CREATE_PROCESS_DEBUG_EVENT :
            {
            switch( event.dwDebugEventCode )
        {
        else
        }
            else                             { etThread.traceF( tinBaseP , T("called WaitForDebugEvent (failed) [rc]:    "           )+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
            if( rc == ERROR_INVALID_HANDLE ) { etThread.traceF( tinBaseP , T("called WaitForDebugEvent (failed) ERROR_INVALID_HANDLE")                                                  ) ; }
            countT rc = GetLastError() ;
            _IO_
        {
        if( !bOk )

        //etThread.traceF( tinBaseP , T("called  WaitForDebugEvent()") ) ;
        boolT bOk = WaitForDebugEvent( &event , INFINITE ) ;
    {
    while( !bDone )
    ZE( boolT , bDone ) ;
    memset( (char*)&event , 0 , sizeof event ) ;
    DEBUG_EVENT event ;

    CloseHandle( result.hThread  ) ; result.hThread  = 0 ;
    CloseHandle( result.hProcess ) ; result.hProcess = 0 ;

    if( !bOk ) etThread.traceF( tinBaseP , T(bOk?"launched aok":"ERROR could not launch") ) ;
    bOk = CreateProcess( 0 , "null" , 0 , 0 , 0 , DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS , 0 , 0 , &specs , &result ) ;
    //LEAKS?

#else

    CloseHandle( result.hThread  ) ; result.hThread  = 0 ;
    CloseHandle( result.hProcess ) ; result.hProcess = 0 ;

    if( !bOk ) etThread.traceF( tinBaseP , T(bOk?"launched aok":"ERROR could not launch") ) ;
    bOk = CreateProcess( 0 , "null" , 0 , 0 , 0 , 0 , 0 , 0 , &specs , &result ) ;
    //DOES NOT LEAK

#if defined( NEVERdEFINED )

    specs.dwFillAttribute = BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED ;
    specs.dwYCountChars = 0x300 ;
    specs.dwXCountChars = 0x400 ;
    specs.dwY = specs.dwX = 0 ;
    specs.wShowWindow = /*SW_SHOWMAXIMIZED*/ SW_SHOWMINNOACTIVE ;
    specs.dwFlags = STARTF_USESHOWWINDOW | STARTF_USEPOSITION | STARTF_USECOUNTCHARS | STARTF_USEFILLATTRIBUTE ;
    specs.cb                  = sizeof specs                        ;  
    memset( &specs , 0 , sizeof specs ) ;
static    STARTUPINFO specs ;

    memset( &result , 0 , sizeof result ) ;
static    PROCESS_INFORMATION result ;

    //etThread.traceF( tinBaseP , T("monitoring: [idHire,tFile,tArgsGross]:    ")+TF2(++idHire,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tFile+tb4+tArgsGross ) ;
    etThread.traceF( tinBaseP , TF2(++idHire,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cOsHandles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    BOOL bOk = GetProcessHandleCount( GetCurrentProcess() , (DWORD*)&cOsHandles ) ;
    ZE( countT , cOsHandles ) ;
{
while( !ether )

ZE( countT , idHire ) ;
TN( tArgsGross       , ""           ) ; tArgsGross = tArgKeyNameLater+tb+tFile+tb+tArgsNet ;
TN( tArgKeyNameLater , "!hireNow" ) ;
TN( tArgsNet         , ""           ) ;
TN( tFile            , "null.exe"   ) ;
TN( tb4              , "    "       ) ;
TN( tb               , " "          ) ;

TODO

/*1*/WAKEsHOWtEXT( "dut.sameo.within.minute.invalid.handle.tmWatchF.not.analyzed" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
