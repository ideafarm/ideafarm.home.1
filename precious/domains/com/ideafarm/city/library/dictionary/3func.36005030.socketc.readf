
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
        ((tinNormalS&)tinP).pag3->_socketC_.grab.ungrabF( tinP ) ;
        pOdometer->cbWrite += ((tinNormalS&)tinP).odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += ((tinNormalS&)tinP).odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*((tinNormalS&)tinP).pag3->_socketC_.pSwOdometer ;
        ((tinNormalS&)tinP).pag3->_socketC_.nnLever = nnPeer = nicNameP ;
        ((tinNormalS&)tinP).pag3->_socketC_.grab.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        bRead.ungrabF( tinP ) ;
   
        if( idleTimeAllowedRead ) FRESHtIMEaTOMIC( *pEther , timeLathRead.time1 , timeLathRead.time2 )
    
        THREADmODE2rESTORE
        }
            pEther->sockReadF( tinP , soulP , idPortP , nicNameP , handle , time1P , time2P ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is not set") ) ;
        {
        else
        }
            pEther->sockReadF( tinP , soulP , idPortP , nicNameP , handle , time1P , time2P ) ;
            armSslC armMe( tinP , flagsOpenSslFails ) ;
            //etherC::etRockIF( tinP ).traceF( tinP , T("flSOCKETc_CRYPTfOREIGNsSL is     set") ) ;
        {
        if( F(flags) & flSOCKETc_CRYPTfOREIGNsSL )
        THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
    
        }
            }
                __Z( idSlot ) ;
                etherC::sockStkCatchersF( tinP ).sinkF( tinP , idSlot , (countT)this , flSTACKsINK_UNIQUE ) ;
                ZE( countT , idSlot ) ;
                //__( F(((tinNormalS&)tinP).flagsThreadMode4) & flTHREADmODE4_IGNOREmE_tmWatchF_ ) ;
            {
            if( !( F(flags) & flSOCKETc_DOnOTrEGISTERcATCHER ) )
            bCatcher = 1 ;
        {
        if( !bCatcher )

        bRead.grabF( tinP , TAG( TAGiDnULL ) ) ;
    
        const countT _odoSockCbWriteOpen = ((tinNormalS&)tinP).odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = ((tinNormalS&)tinP).odoSockCbRead  ;
    
        _IO_
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )

            __( nicNameP ) ;
            __( idPortP ) ;

            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL    
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/*1*/voidT socketC::readF( tinBaseS& tinP , soulC& soulP , countT& idPortP , nicNameC& nicNameP , const countT time1P , const sCountT time2P )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

