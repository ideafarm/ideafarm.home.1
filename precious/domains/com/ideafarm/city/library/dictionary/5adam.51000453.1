
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

#endif

etThread.osEditF( tin0P , tLogFile ) ;

}
    trialF( tin0P , etThread , ether , 0x40 , 2 , idaDead ) ;
    //etThread.ifcSayF( tin0P , T("idaDead:")+TF1(idaDead)+T("\r\n") , flSAY_APPEND | flSAY_LOG ) ;
    etThread.strokeF( tin0P , T("idaDead:")+TF1(idaDead)+T("\r\n") ) ;
{
//for( countT idaDead = 0 ; idaDead <= 0 ; idaDead ++ )
for( countT idaDead = 0x17 ; idaDead <= 0x17 ; idaDead ++ )
TN( tLogFile , "///d/ideafarm.log." ) ; tLogFile += TF1(DDNUMB) ;

#else

    }
        }
                trialF( tin0P , etThread , ether , cn , cg , idad ) ;
            for( countT cg = cgMin ; cg <= cgMax ; cg ++ )
            //etThread.ifcSayF( tin0P , T("idaDead:")+TF1(idad)+T("\r\n") , flSAY_APPEND | flSAY_LOG ) ;
        {
        countT idad = idaDead ;
        //for( countT idad = 1 ; idad <= cn ; idad ++ )
    {
    for( countT cn = cnMin ; cn <= cnMax ; cn ++ )
    
    //etThread.ifcSayF( tin0P , TPS("cGossip",8,sttDash)+tb+TPS("cSaw",8,sttDash)+tb+TPS("by_cNics",8,sttDash)+tb+TPS("of_cNics",8,sttDash) , flSAY_APPEND | flSAY_LOG ) ;
    TN( tb , " " ) ;
    strokeS sttDash('-') ;
    TN( tLogFile , "///d/ideafarm.log." ) ; tLogFile += TF1(DDNUMB) ;
    
    idaDead = 2 ;
    cgMin = cgMax = 0 ;
    cnMin = cnMax = 0x10 ;
    
    }
        cgMin = cgMax ;
        cnMin = cnMax ;
    {
    if( bExact )
    ZE( countT , cgMin ) ;
    countT cnMin = 1 ;
    
    }
        }
            else if(    idp == 6 ) idaDead = etThread.strDigitsToSCountF( tin0P , psttc1 ) ;
            else if(    idp == 5 ) bExact  = etThread.strDigitsToSCountF( tin0P , psttc1 ) ;
            else if(    idp == 4 ) cgMax   = etThread.strDigitsToSCountF( tin0P , psttc1 ) ;
                 if( ++ idp == 3 ) cnMax   = etThread.strDigitsToSCountF( tin0P , psttc1 ) ;
        {
        FORsTRINGSiN1( pstt1p )
        ZE( countT , idp ) ;
        strokeS* pstt1p = etThread.ether_pstt1_processParametersI_F( tin0P ) ;
    {
    ZE( countT , idaDead ) ;
    ZE( boolT  , bExact ) ;
    ZE( countT , cgMax ) ;
    ZE( countT , cnMax ) ;

#if defined( NEVERdEFINED )

TODO

}
    lnicC::armageddonF( tin0P , etThread , tLogFile ) ;
    //etThread.strokeF( tin0P , T("armageddonF\r\n") ) ;
    //etThread.ifcSayF( tin0P , T("cExplosions: ")+TF1(lnicC::cExplosions)+T("\r\nmExplosionsPerTock: ")+TF1((measureT)lnicC::cExplosions/(idTickTock-1)) , flSAY_APPEND | flSAY_LOG ) ;
    
    }
            if( lnicC::ppln[ uida ] ) lnicC::ppln[ uida ]->tockF( tin0P ) ;
        for( countT uida = 1 ; uida <= lnicC::cpln ; uida ++ )
            if( lnicC::ppln[ uida ] ) lnicC::ppln[ uida ]->tickF( tin0P , idTickTock , uida ) ;
        for( countT uida = 1 ; uida <= lnicC::cpln ; uida ++ )
        //etThread.ifcSayF( tin0P , T("******************************** tock ")+TF1(idTickTock)+T(" ********************************") , flSAY_APPEND | flSAY_LOG ) ;
        etThread.strokeF( tin0P , T("tock ")+TF1(idTickTock)+T("\r\n") ) ;
    {
    while( !ether && ++ idTickTock <= 0x40 )
    //while( !ether && !lnicC::bFlashSeenByAllF( tin0P , etThread ) )
    ZE( countT , idTickTock ) ;
    
    }
        //etThread.strokeF( tin0P , T("\r\n") ) ;
        }
            }
                lnicC::ppln[ ida1 ]->logF( tin0P , tInitialized2 ) ;
                lnicC::ppln[ ida1 ]->freshKnownF( tin0P , 1 ) ;
                lnicC::ppln[ ida1 ]->readNewsF( tin0P ) ;
    
                }
                    if( lnicC::ppln[ ida2 ] ) lnicC::ppln[ ida1 ]->newsNewF( tin0P , lnicC::ppln[ ida2 ]->nicNameMe ) ;
                {
                for( countT ida2 = 1 ; ida2 <= lnicC::cpln ; ida2 ++ )
            {
            if( lnicC::ppln[ ida1 ] )
            //etThread.strokeF( tin0P , T(".") ) ;
        {
        for( countT ida1 = 1 ; !ether && ida1 <= lnicC::cpln ; ida1 ++ )
        TN( tInitialized2 , "init" ) ;
    {
    if( lnicC::ppln )
    //etThread.strokeF( tin0P , T("using newsNewF to tell each (even the dead wo) about all\r\n") ) ;
    
    lnicC::genesisF( tin0P , etThread , cNicP , cGossipP , idaDeadP ) ;
    //etThread.strokeF( tin0P , T("genesisF\r\n") ) ;
    lnicC::setupF( tin0P ) ;

    //etThread.ifcSayF( tin0P , T("******************************** T R I A L ********************************") , flSAY_APPEND | flSAY_LOG ) ;
    TN( tLogFile , "///d/ideafarm.log." ) ; tLogFile += TF1(DDNUMB) ;
{
voidT trialF( tin0S& tin0P , etherC& etThread , etherC& ether , const countT cNicP , const countT cGossipP , const countT idaDeadP )

}
    swDeclareNextTock.freeAllF( tin0P ) ;

    }
        }
            if( swDeclare < swDeclareNextTock ) swDeclare = swDeclareNextTock ;
            souDeclare = *pSouLever ;
        {
        if( pSouLever )
        soulC* pSouLever = (soulC*)swDeclareNextTock.leverF( tin0P , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swDeclareNextTock.cFlavorsF( tin0P ) ;
{
voidT lnicC::tockF( tin0S& tin0P )

}
    swDeclare.freeAllF( tin0P ) ;

    while( stDead ) ;
    }
        }
            }
                }
                    }
                        }
                            }
                                }
                                    }
                                        if( stDead ) idHitDead = 4 ;
                                        if( /*idHitDeadLag <= 4 &&*/ know.pLnicExHit2 && know.pLnicExHit2->shockF( tin0P , souShock4 ) ) stDead << know.pLnicExHit2->nicNameMe ;
                                    {
                                    else
                                    if( stDead ) idHitDead = 3 ;
                                    if( idHitDeadLag <= 3 && know.pLnicExHit1 && know.pLnicExHit1->shockF( tin0P , souShock3 ) ) stDead << know.pLnicExHit1->nicNameMe ;
                                    freshKnownF( tin0P ) ;
                                    souShock4 = souShock3 ;
                                    souShock3 << souDebugNotes ;
                                    souShock3 << souHandlers ;
                                    souShock3 << souNewsOrReplies ;
                                    souShock3 << cGossip ;
                                    souShock3 << nicNameMe ;
                                    souShock3 << ( nicNameAckTo ? nicNameAckTo : nicNameSingularity ) ;
                                    souShock3 << nicNameMe ; // nicNameSingularity
                                    souShock3 << idNewsRef ;
                                    souShock3 << idNewsMe ;
                                    souShock3 << flNews ;
                                    souShock3 << (countT)ifcIDcMDsESSION_NEWS ;
                                    soulC souShock4( tin0P , TAG( TAGiDnULL ) ) ;
                                    soulC souShock3( tin0P , TAG( TAGiDnULL ) ) ;
                                    cSawFlash ++ ;
                                {
                                if( bGossip )
            
                                if( cGossip ) cGossip = 0 ; // PREVENTS GOSSIP FROM BEING GOSSIPPED
                            {
                            else
                            if( stDead ) idHitDead = 2 ;
                            if( idHitDeadLag <= 2 && know.pLnicExHit2 && know.pLnicExHit2->shockF( tin0P , souShock2 ) ) stDead << know.pLnicExHit2->nicNameMe ;
                            if( cGossip ) souShock2.cFieldF( tin0P , 8 ) = 0 ; // SINCE HIT1 WILL GOSSIP, DO NOT TELL HIT2 TO GOSSIP (WANT GOSSIP TO BE LINEAR, NOT EXPLOSIVE, IN cGossip)
                        {
                        else
                        if( stDead ) idHitDead = 1 ;
                        if( idHitDeadLag <= 1 && know.pLnicExHit1 && know.pLnicExHit1->shockF( tin0P , souShock1 ) ) stDead << know.pLnicExHit1->nicNameMe ;
                    {
                    else
                    }
                        }
                            ( (countT&)swDeclare_cImDead ) ++ ; // FOR IMPLOSIONS, WE DO NOT GOSSIP; INSTEAD, WE RETRY, APPLYING A LARGER BIAS EACH TRY
                            idHitDead = 1 ;
                            stDead << know.pLnicImHit->nicNameMe ;
                        {
                        if( idHitDeadLag <= 1 && know.pLnicImHit && know.pLnicImHit->shockF( tin0P , souShock1 ) )
                    {
                    if( bImplode || bDirect )

                    idHitDead = 0 ;
                    countT idHitDeadLag = idHitDead ;

                    freshKnownF( tin0P , stKnow( nicNameSingularity ) , bImplode ? swDeclare_cImDead : 0 , bDirect ) ;
                    if( !bImplode && !bDirect ) souShock2 = souShock1 ;
                    souShock1 << souDebugNotes ;
                    souShock1 << souHandlers ;
                    souShock1 << souNewsOrReplies ;
                    souShock1 << cGossip ;
                    souShock1 << nicNameMe ;
                    souShock1 << nicNameAckTo ;
                    souShock1 << nicNameSingularity ;
                    souShock1 << idNewsRef ;
                    souShock1 << idNewsMe ;
                    souShock1 << flNews ;
                    souShock1 << (countT)ifcIDcMDsESSION_NEWS ;
                    soulC souShock2( tin0P , TAG( TAGiDnULL ) ) ;
                    soulC souShock1( tin0P , TAG( TAGiDnULL ) ) ;
    
                    else if( bGossip ) cGossip -- ;
                    if( bImplode ) cGossip = 0 ;
                    boolT bGossip = !bImplode && !!cGossip && nicNameSingularity != nicNameMe ;
    
                    souDeclare >> souDebugNotes ;
                    soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

                    souDeclare >> souHandlers ;
                    soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;

                    souDeclare >> souNewsOrReplies ;
                    soulC souNewsOrReplies( tin0P , TAG( TAGiDnULL ) ) ;

                    souDeclare >> nicNameAckTo ;
                    nicNameC nicNameAckTo ;

                    souDeclare >> nicNameSingularity ;
                    nicNameC nicNameSingularity ;

                    souDeclare >> idNewsRef ;
                    ZE( countT , idNewsRef ) ;
    
                    souDeclare >> idNewsMe ;
                    ZE( countT , idNewsMe ) ;

                    __( bDirect && bImplode ) ;
                    boolT bDirect  = !!( F(flNews) & flNEWS_DIRECT  ) ;
                    boolT bImplode = !!( F(flNews) & flNEWS_IMPLODE ) ;
                    souDeclare >> flNews ;
                    ZE( flagsT , flNews ) ;

                    countT cGossip = swDeclare ;

                    }
                        }
                            __( *psd != souDeclare ) ;
                           soulC* psd = (soulC*)(countT)swDeclareSent ;
                        {
                        else // I AM RESENDING
                        }
                            }
                                swDeclareSent = (countT)psd ;
                                *psd = souDeclare ;
                            {
                            if( psd )
                            soulC* psd = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ;
                        {
                        if( !swDeclareSent )
                        idNewsAck = souDeclare.cFieldF( tin0P , 2 ) ;
                    {

                    souDeclare = *pSouLever ;
                {
                if( pSouLever )
                soulC* pSouLever = (soulC*)swDeclare.leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = swDeclare.cFlavorsF( tin0P ) ;
    
            freshKnownF( tin0P ) ;
            readNewsF( tin0P ) ;
    
            cExplosions ++ ;
        {
        if( swDeclare.cFlavorsF( tin0P ) )

        }
            }
                swDeclare = cGossipOrdered ;
                souDeclare << souDebugNotes ;
                souDeclare << souHandlers ;
                souDeclare << souNews ;
                souDeclare << nicNameC() ; // nicNameAckTo
                souDeclare << nicNameMe ;
                souDeclare << (countT)0 ; // idNewsRef
                souDeclare << ++ idNewsDeclareLast ;
                souDeclare << (countT)flNEWS_DOnOTaCK ;
                souDeclare.removeAllF( tin0P ) ;

                soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

                souHandlers << nicNameMe ;
                soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;

                souNews << nicNameDead ;
                soulC souNews( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)ifcIDnEWSeX_DEL ) ;
        
                newsDelF( tin0P , nicNameDead ) ;

                //ether.ifcSayF( tin0P , TF1(uidaF(nicNameMe))+T(" is reporting that ")+TF1(uidaDead)+T(" is dead") , flSAY_APPEND | flSAY_LOG ) ;
                //countT uidaDead = uidaF( nicNameDead ) ;
            {
            if( nicNameDead )
            stDead >> nicNameDead ;
            nicNameC nicNameDead ;
        {
        while( stDead )
    {
    do
    ZE( countT , idHitDead ) ;
    ZE( countT , cImDead ) ;
    stackC stDead( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_nicNameC ) ;

    }
        }
            }
                }
                    ether.ifcSayF( tin0P , tEntry , flSAY_APPEND | flSAY_LOG ) ;
    
                    }
                        //KEEP THIS soulC AROUND SO CAN REPORT TIMED OUT NEWS: DEL( (soulC*&)(countT&)swDeclareSent ) ;
                        tEntry += T("**** TIMEOUT ****") ;
                    {
                    else if( !tr )
                    }
                        }
                            tEntry += T("**** 1/2 TIMEOUT: ")+TF1((countT)swsNack)+T(" RIFLE SHOTS DECLARED ****") ;
                            while( !ether && ~hDown ) ;
                            }
                                swDeclare = 0 ;
                                souDeclare.nicNameFieldF( tin0P , 4 ) = *(nicNameC*)&swsNack.downF( tin0P , hDown ) ;

                                //}
                                //    nn = 
                                //    nicNameC& nn = *(nicNameC*)pbnn ;
                                //{
                                //if( pbnn )
                                //__( cbd - 1 - sizeof( nicNameC ) ) ;
                                //__( flags - ( flSOULiTEM_MADEoFcOUNToBJECTS | flSOULiTEM_INCREASINGiNsIGNIFICANCE ) ) ;
                                //__( idType - ifcIDtYPEsOULiTEM_nicNameC ) ;
                                //if( pbnn ) pbnn ++ ;
                                //__Z( pbnn ) ;
                                //const byteT* pbnn = souDeclare.pbFieldF( tin0P , idType , flags , cbd , 4 ) ;
                                //ZE( countT , cbd ) ;
                                //ZE( countT , flags ) ;
                                //ZE( countT , idType ) ;
                                //U:
                            {
                            do
                            handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                            flNews |= (countT)( flNEWS_DIRECT | flNEWS_DOnOThOLD ) ;
                            flNews &= ~(countT)( F(flNEWS_IMPLODE) ) ;

                            __( idNewsMe - idNewsAck ) ;


                            souDeclare.nicNameFieldF( tin0P , 5 ) = nicNameMe ;

                            //}
                            //    nn = nicNameMe ;
                            //    nicNameC& nn = *(nicNameC*)pbnn ;
                            //{
                            //if( pbnn )
                            //__( cbd - 1 - sizeof( nicNameC ) ) ;
                            //__( flags - ( flSOULiTEM_MADEoFcOUNToBJECTS | flSOULiTEM_INCREASINGiNsIGNIFICANCE ) ) ;
                            //__( idType - ifcIDtYPEsOULiTEM_nicNameC ) ;
                            //if( pbnn ) pbnn ++ ;
                            //__Z( pbnn ) ;
                            //const byteT* pbnn = souDeclare.pbFieldF( tin0P , idType , flags , cbd , 5 ) ;
                            //ZE( countT , cbd ) ;
                            //ZE( countT , flags ) ;
                            //ZE( countT , idType ) ;

                            countT& idNewsMe = souDeclare.cFieldF( tin0P , 2 ) ;
                            flagsT& flNews = souDeclare.cFieldF( tin0P , 1 ) ;
                            souDeclare = *psd ;
                        {
                        if( psd )
                        soulC* psd = (soulC*)(countT)swDeclareSent ;
                    {
                    if( tr == TIMEoUT / 2 )
                    tr -- ;
    
                    }
                        while( !ether && ~hDown ) ;
                        }
                            tEntry += TF1(uidaF(*(nicNameC*)&swsNack.downF(tin0P,hDown))) ;
                            if( hDown ) tEntry += T(",") ;
                        {
                        do
                        handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        tEntry += T("*") ;
                    {
                    if( swsNack )
        
                    }
                        while( !ether && ~hDown ) ;
                        }
                            tEntry += TF1(uidaF(*(nicNameC*)&swsAck.downF(tin0P,hDown))) ;
                            if( hDown ) tEntry += T(",") ;
                        {
                        do
                        handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( swsAck )
    
                    }
                        swAckAok = 1 ;
                        tEntry += T(" aok: ") ;
                    {
                    if( swsAck && !swsNack && !swAckAok )
                    TN( tEntry , "" ) ; tEntry = TF1(uidaF(nicNameMe))+T(" swsAck<")+TF1(idNewsAck)+T(">:") ;
                {
                if( !swAckAok && tr )
        
                countT& tr = swNackTimeRemaining ;
                __( idNewsAck - swsNack.leverF( tin0P , idf ) ) ;
                idNewsAck = swsAck.leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavorsAck ; idf ++ )
        {
        if( !ether )
        __( cFlavorsAck - cFlavorsNack ) ;
        countT cFlavorsNack = swsNack.cFlavorsF( tin0P ) ;
        countT cFlavorsAck = swsAck.cFlavorsF( tin0P ) ;
    
        //if( know.uidaMe == 1 ) logKnowF( tin0P ) ;

        }
            }
                swsDebugNotesPending.freeF( tin0P ) ;
                swsRepliesPending.freeF( tin0P ) ;

                swDeclare = 0 ;
                souDeclare << souDebugNotes ;
                souDeclare << souHandlers ;
                souDeclare << souReplies ;
                souDeclare << nicNameC() ; // nicNameAckTo
                souDeclare << nicNameImPending ;
                souDeclare << (countT)0 ; // idNewsRef
                souDeclare << ++ idNewsDeclareLast ;
                souDeclare << flNews ;
                souDeclare.removeAllF( tin0P ) ;

                flNews |= stKnow( nicNameImPending ) ? flNEWS_IMPLODE : flNEWS_DIRECT ;
                flagsT flNews = flNEWS_REPLIES ;
        
                }
                    souDebugNotes << psttn ;
                    swsDebugNotesPending >> psttn ;
                    ZE( strokeS* , psttn ) ;
                {
                while( swsDebugNotesPending )
                soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

                souHandlers << nicNameMe ;
                soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;
        
                souReplies << souReply ;
                souReply << nicNameMe ;
                soulC souReply( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)ifcIDnEWSiM_TIMEOUT ) ;
        
                }
                    if( psour ) souReplies << *psour ;
                    swsRepliesPending >> psour ;
                    ZE( soulC* , psour ) ;
                {
                while( swsRepliesPending )
                soulC souReplies( tin0P , TAG( TAGiDnULL ) ) ;
            {
            if( idTick - swIdTickPending > 8 )
            nicNameImPending = *(nicNameC*)swsRepliesPending.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swsRepliesPending.cFlavorsF( tin0P ) ;
    {
    else
    }
        swDeclare = 0 ;
        souDeclare << souDebugNotes ;
        souDeclare << souHandlers ;
        souDeclare << souReplies ;
        souDeclare << nicNameC() ; // nicNameAckTo
        souDeclare << ppln[ 1 ]->nicNameMe ;
        souDeclare << (countT)0 ; // idNewsRef
        souDeclare << ++ idNewsDeclareLast ; // idNewsMe
        souDeclare << (countT)( flNEWS_IMPLODE | flNEWS_REPLIES ) ;
        souDeclare.removeAllF( tin0P ) ;

        soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

        souHandlers << nicNameMe ;
        soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;

        souReplies << souReply ;
        soulC souReplies( tin0P , TAG( TAGiDnULL ) ) ;

        souReply << nicNameMe ;
        soulC souReply( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)ifcIDnEWSiM_FLASH ) ;

        bIgniter = 1 ;
        ether.strokeF( tin0P , T("ignition ")+TF1(nicNameMe)+T("\r\n") ) ;
    {
    else if( idTickP == 1 && uidaP >= 1 && idFlashMode == ifcIDfLASHmODE_IMPLODE && ppln && ppln[ 1 ] && ppln[ 1 ]->nicNameMe )
    }
        loadNackF( tin0P , idNewsDeclareLast ) ;
        swDeclare = cGossipOrdered ;

        souDeclare << souDebugNotes ;
        souDeclare << souHandlers ;
        souDeclare << souNews ;
        souDeclare << nicNameC() ; // nicNameAckTo
        souDeclare << nicNameMe ;
        souDeclare << (countT)0 ; // idNewsRef
        souDeclare << ++ idNewsDeclareLast ; // idNewsMe
        souDeclare << (countT)flNEWS_null ;
        souDeclare.removeAllF( tin0P ) ;

        soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

        souHandlers << nicNameMe ;
        soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;

        souNews << nicNameMe ;
        soulC souNews( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)ifcIDnEWSeX_FLASH ) ;

        cSawFlash ++ ;
        bIgniter = 1 ;
        ether.strokeF( tin0P , T("ignition\r\n") ) ;
    {
    if( idTickP == 1 && uidaP == 1 && idFlashMode == ifcIDfLASHmODE_EXPLODE )
    ZE( boolT , bIgniter ) ;

    idTick = idTickP ;
{
voidT lnicC::tickF( tin0S& tin0P , const countT idTickP , const countT uidaP )

}
    stNew.sinkF( tin0P , countTC() , nicNameP , flSTACKsINK_UNIQUE ) ;
{
voidT lnicC::newsNewF( tin0S& tin0P , const nicNameC& nicNameP )

}
    stHello.sinkF( tin0P , countTC() , nicNameP , flSTACKsINK_UNIQUE ) ;
{
voidT lnicC::newsHelloF( tin0S& tin0P , const nicNameC& nicNameP )

}
    stFlash.sinkF( tin0P , countTC() , nicNameP , flSTACKsINK_UNIQUE ) ;
    cSawFlash ++ ;
{
voidT lnicC::newsFlashF( tin0S& tin0P , const nicNameC& nicNameP )

}
    }
        stFlash >> nicName ;
        nicNameC nicName ;
    {
    while( stFlash )

    }
        stKnow.sinkF( tin0P , countTC() , nicName , flSTACKsINK_UNIQUE ) ;
        stHello >> nicName ;
        nicNameC nicName ;
    {
    while( stHello )

    }
        stKnow.sinkF( tin0P , countTC() , nicName , flSTACKsINK_UNIQUE ) ;
        stNew >> nicName ;
        nicNameC nicName ;
    {
    while( stNew )

    }
        }
            }
                __( nnd - nicName ) ;
                swsNack.extractF( tin0P , nnd ) ;
                nicNameC nnd ;
            {
            if( swsNack( nicName ) )
            idNewsAck = swsNack.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swsNack.cFlavorsF( tin0P ) ;

        }
            __( nnd - nicName ) ;
            stKnow.extractF( tin0P , nnd ) ;
            nicNameC nnd ;
        {
        if( stKnow( nicName ) )
        stDel >> nicName ;
        nicNameC nicName ;
    {
    while( stDel )
{
voidT lnicC::readNewsF( tin0S& tin0P )

}
    stDel.sinkF( tin0P , countTC() , nicNameP , flSTACKsINK_UNIQUE ) ;
{
voidT lnicC::newsDelF( tin0S& tin0P , const nicNameC& nicNameP )

}

    }
        }
            }
                }
                    else if( ppln[ idn ]->nicNameMe == know.nicNameExHit2 ) know.pLnicExHit2 = ppln[ idn ] ;
                         if( ppln[ idn ]->nicNameMe == know.nicNameExHit1 ) know.pLnicExHit1 = ppln[ idn ] ;
                {
                if( ppln[ idn ] )
            {
            for( countT idn = 1 ; idn <= cpln ; idn ++ )
            know.pLnicExHit2 = know.pLnicExHit1 = 0 ;
            know.nicNameExHit2 = know.idaExHit2 ? *(nicNameC*)&stKnow[ know.idaExHit2 ] : nicNameC() ;
            know.nicNameExHit1 = know.idaExHit1 ? *(nicNameC*)&stKnow[ know.idaExHit1 ] : nicNameC() ;
            know.idaExHit2 = idaF( know.idrExHit2 , know.idaSingularity , know.cKnown ) ;
            know.idaExHit1 = idaF( know.idrExHit1 , know.idaSingularity , know.cKnown ) ;
            if( know.cKnown < know.idrExHit2 ) know.idrExHit2 = 0 ;
            if( know.cKnown < know.idrExHit1 ) know.idrExHit1 = 0 ;
            know.idrExHit2 = know.idrExHit1 + 1 ;
            know.idrExHit1 = cc + 2 * oMe ;
    
            }
                 if( ppln[ idn ] && ppln[ idn ]->nicNameMe == know.nicNameImHit ) know.pLnicImHit = ppln[ idn ] ;
            {
            for( countT idn = 1 ; idn <= cpln ; idn ++ )
            know.pLnicImHit = 0 ;
            know.nicNameImHit = know.idaImHit ? *(nicNameC*)&stKnow[ know.idaImHit ] : nicNameC() ;
            know.idaImHit = idaF( know.idrImHit , know.idaSingularity , know.cKnown ) ;
            if( (sCountT)know.idrImHit < 0 ) know.idrImHit = 0 ;
            know.idrImHit = aa + oMe / 2 - cImDeadP ;
    
            countT oMe = know.idrMe - bb ;  //MY OFFSET AMONG MY PEERS IN RELAYING THIS EXPLOSION
            const countT cc  = bb << 1 ;                //2**(t+1)
            const countT bb  = aa << 1 ;                //2**t
            const countT aa  =  1 << know.exTime - 1 ;  //2**(t-1)
        {
        else
        }
            }
                 if( ppln[ idn ] && ppln[ idn ]->nicNameMe == know.nicNameImHit ) know.pLnicImHit = ppln[ idn ] ;
            {
            for( countT idn = 1 ; idn <= cpln ; idn ++ )
            know.pLnicImHit = 0 ;
            know.nicNameImHit = *(nicNameC*)&stKnow[ idaSingularityP ] ;
        {
        if( bDirectP )
    {
    if( !ether )
    __( know.exTime > 0x1e ) ;
    know.exTime         = know.idrMe ? (countT)((tin12S&)tin0P).brcm04Raw : 0 ;
    BOSmEASURE04( WHATgbo , log2( know.idrMe ) )
    know.idrMe          = idrF( know.idaMe , know.idaSingularity , know.cKnown ) ;
    know.idaSingularity = idaSingularityP ? idaSingularityP : know.idaMe ;

    know.uidaMe         = uidaF( nicNameMe ) ;
    know.idaMe          = stKnow( nicNameMe ) ;
    know.exTimeMax      = know.cKnown ? (countT)((tin12S&)tin0P).brcm04Raw : 0 ;
    BOSmEASURE04( WHATgbo , log2( know.cKnown ) )
    know.cKnown         = stKnow ;

    ether.memSetF( tin0P , (byteT*)&know , sizeof know ) ;

    __( bDirectP && !idaSingularityP ) ;
    __( bDirectP && cImDeadP ) ;

{
voidT lnicC::freshKnownF( tin0S& tin0P , const countT idaSingularityP , const countT cImDeadP , const boolT bDirectP )

}
    __Z( idp ) ;
    stKnow.sinkF( tin0P , idp , nicNameMe , flSTACKsINK_UNIQUE ) ;
    ZE( countT , idp ) ;

    ether.memSetF( tin0P , (byteT*)&know , sizeof know ) ;
    ether.strMakeF( tin0P , LF , psttLogFile , T("///d/ideafarm.log.")+TF1(DDNUMB) ) ; ___( psttLogFile ) ;

    }
        if( ether ) return ;
        __Z( nicNameMe ) ;
        if( ether ) return ;
    {
    IFbEcAREFUL
{
swNackTimeRemaining( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idNewsAck )
swAckAok( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idNewsAck ) ,
swsNack( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idNewsAck , flSTACKc_FIFO , ifcSTACKtYPE_nicNameC ) ,
swsAck( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idNewsAck , flSTACKc_FIFO , ifcSTACKtYPE_nicNameC ) ,
idNewsAck( 0 ) ,
idNewsDeclareLast( 0 ) ,
idTick( 0 ) ,
swIdTickPending( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , nicNameImPending ) ,
swsDebugNotesPending( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , nicNameImPending , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ,
swsRepliesPending( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , nicNameImPending , flSTACKc_FIFO , ifcSTACKtYPE_PTR_soulC ) ,
cSawFlash( 0 ) ,
psttLogFile( 0 ) ,
bOnline( 1 ) ,
swDeclareSent( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idNewsAck ) ,
swDeclare_cImDead( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , souDeclare ) ,
swDeclareNextTock( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , souDeclare ) ,
swDeclare( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , souDeclare ) ,
souDeclare( tin0P , ether ) ,
stDel(          tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ,
stNew(          tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ,
stFlash(        tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ,
stHello(        tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ,
stKnow(         tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ,
nicNameMe( nicNameMeP ) ,
ether( etherP ) ,
lnicC::lnicC( tin0S& tin0P , etherC& etherP , const nicNameC& nicNameMeP ) :

}

    cExplosions = 0 ;
    ppln = 0 ;
    cpln = 0 ;
    cGossipOrdered = 0 ;
{
voidT lnicC::setupF( tin0S& tin0P )

const countT    lnicC::idFlashMode = ifcIDfLASHmODE_EXPLODE ;
countT          lnicC::cExplosions ;
lnicC**         lnicC::ppln ;
countT          lnicC::cpln ;
countT          lnicC::cGossipOrdered ;

}
    ether.delF( tin0P , psttLogFile ) ;

    }
        }
            DEL( (soulC*&)(countT&)swDeclareSent ) ;
            idNewsAck = swDeclareSent.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swDeclareSent.cFlavorsF( tin0P ) ;
    {

    TINSL
{
lnicC::~lnicC( voidT )

NEWdELcLASSb( lnicC )

}
    return bSeen ;

    }
        }
            break ;
            bSeen = 0 ;
        {
        if( ppln[ idn ] && !ppln[ idn ]->cSawFlash )
    {
    for( countT idn = 1 ; idn <= cpln ; idn ++ )
    boolT bSeen = 1 ;

    }
        if( etThreadP ) return 0 ;
        __Z( ppln ) ;
        if( etThreadP ) return 0 ;
    {
    IFbEcAREFUL
{
boolT lnicC::bFlashSeenByAllF( tin0S& tin0P , etherC& etThreadP )

}
    }
        //etThreadP.ifcSayF( tin0P , TF3(cGossipOrdered,flFORMAT_null,8)+tb+TF3(cLever,flFORMAT_null,8)+tb+TF3(swSawFlash,flFORMAT_null,8)+tb+TF3(cpln,flFORMAT_null,8) , flSAY_APPEND | flSAY_LOG ) ;
        etThreadP.ifcSayF( tin0P , T("**** the flash was seen ")+TF1(cLever)+T(" times by ")+TF1(swSawFlash)+T(" nics") , flSAY_APPEND | flSAY_LOG ) ;
        cLever = swSawFlash.leverF( tin0P , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swSawFlash.cFlavorsF( tin0P ) ;
    TN( tb , " " ) ;

    for( countT idn = 1 ; idn <= cpln ; idn ++ ) { DEL( ppln[ idn ] ) ; }

    }
        }
            ++ ( (countT&)swSawFlash ) ;
            cLever = ppln[ idn ]->cSawFlash ;
            etThreadP.ifcSayF( tin0P , T("[")+TF1(idn)+T("] saw the flash ")+TF1(ppln[idn]->cSawFlash)+T(" times")+(ppln[idn]->bOnlineF(tin0P)?T(""):T(" OFFLINE"))+(ppln[idn]->cSawFlash?T(""):T(" BLIND")) , flSAY_APPEND | flSAY_LOG ) ;
        {
        if( ppln[ idn ] )
    {
    for( countT idn = 1 ; idn <= cpln ; idn ++ )
    switchC swSawFlash( tin0P , etThreadP , TAG( TAGiDnULL ) , flSTACKc_null , cLever ) ;
    ZE( countT , cLever ) ;

    }
        if( etThreadP ) return ;
        __Z( ppln ) ;
        if( etThreadP ) return ;
    {
    IFbEcAREFUL
{
voidT lnicC::armageddonF( tin0S& tin0P , etherC& etThreadP , const strokeS* const psttLogFileP )

}
    return !bOnline ;

    }
        }
            }
                else ether.ifcSayF( tin0P , T("[")+TF1(idNewsMe)+tc+TF1(idNewsRef)+T("] i")+TF1(uidaF(nicNameSingularity))+TPS(".",1+know.exTime,S1C('.'))+T("|")+TF1(uidaF(nicNameMe))+T("<")+TF1(uidaF(nicNameFrom))+tb81+tNewsOrReplies+tb81+tHandlers+tb81+tDebugNotes , flSAY_APPEND | flSAY_LOG ) ;
                }
                    if( swDeclareNextTock < cGossip ) swDeclareNextTock = cGossip ;
                    souDeclare << souDebugNotes ;
                    souDeclare << souHandlers ;
                    souDeclare << souReplies ;
                    souDeclare << nicNameC() ; // nicNameAckTo
                    souDeclare << nicNameSingularity ;
                    souDeclare << idNewsRef ;
                    souDeclare << idNewsMe ;
                    souDeclare << flNews ;
                    souDeclare.removeAllF( tin0P ) ;
                    ether.ifcSayF( tin0P , T("[")+TF1(idNewsMe)+tc+TF1(idNewsRef)+T("] i")+TF1(uidaF(nicNameSingularity))+TPS(".",1+know.exTime,S1C('.'))+T("<")+TF1(uidaF(nicNameMe))+T("<")+TF1(uidaF(nicNameFrom))+tb81+tNewsOrReplies+tb81+tHandlers+tb81+tDebugNotes , flSAY_APPEND | flSAY_LOG ) ;
                {
                if( bFlush )
    
                freshKnownF( tin0P , stKnow( nicNameSingularity ) ) ;
        
                }                   // ALL REPLIES THAT I HAVE ARE NOW EITHER IN souReplies OR IN swsRepliesPending (DITTO FOR NOTES)
                    swsDebugNotesPending.freeF( tin0P ) ;
                    }
                        souDebugNotes << psttn ;
                        swsDebugNotesPending >> psttn ;
                        ZE( strokeS* , psttn ) ;
                    {
                    while( swsDebugNotesPending )
    
                    swsRepliesPending.freeF( tin0P ) ;
                    }
                        if( psour ) souReplies << *psour ;
                        swsRepliesPending >> psour ;
                        ZE( soulC* , psour ) ;
                    {
                    while( swsRepliesPending )
                {
                if( bFlush )
    
                swIdTickPending = !bFlush && swsRepliesPending ? idTick : 0 ;
    
                }
                    swsDebugNotesPending << psttn ;
                    souDebugNotes >> psttn ; ___( psttn ) ;
                    ZE( strokeS* , psttn ) ;
                {
                while( souDebugNotes )
    
                }
                    }
                        swsRepliesPending << psour ;
                        souReplies >> *psour ;
                    {
                    if( psour )
                    soulC* psour = new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( souReplies )
    
                boolT bFlush = F(flNews) & flNEWS_DOnOThOLD || !!swsRepliesPending ;

                __( bDirect ) ;
            {
            else
            }
                }
                    }
                        }
                            __1
                            __( idType ) ;
                        {
                        default :
                        }
                            break ;

                            swsAck.sinkF( tin0P , countTC() , nicNameReplier ) ;

                            }
                                __1
                                __( uidaF( nicNameReplier ) ) ;
                                ether.ifcSayF( tin0P , T("unexpected ack received by ")+TF1(uidaF(nicNameMe))+T(" from ")+TF1(uidaF(nicNameReplier)) , flSAY_APPEND | flSAY_LOG ) ;
                            {
                            else if( !swsAck(  nicNameReplier ) )
                            }
                                __( nnd - nicNameReplier ) ;
                                swsNack.extractF( tin0P , nnd ) ;
                                nicNameC nnd ;
                            {
                            if(  swsNack( nicNameReplier ) )

                            idNewsAck = idNewsAcked ;

                            souReply >> idNewsAcked ;
                            ZE( countT , idNewsAcked ) ;

                            souReply >> nicNameReplier ;
                            nicNameC nicNameReplier ;
                        {
                        case ifcIDnEWSiM_ACK :
                        case ifcIDnEWSiM_TIMEOUT : { break ; }
                    {
                    switch( idType )
                    souReply >> idType ;
                    ZE( countT , idType ) ;

                    souReplies >> souReply ;
                    soulC souReply( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( souReplies )

                ether.ifcSayF( tin0P , tEntry , flSAY_APPEND | flSAY_LOG ) ;
                tEntry += T("[")+TF1(idNewsMe)+tc+TF1(idNewsRef)+T("] s")+TF1(uidaF(nicNameMe))+T("<")+TF1(uidaF(nicNameFrom))+tb81+tNewsOrReplies+tb81+tHandlers+tb81+tDebugNotes ;
                TN( tEntry , "" ) ;
            {
            if( nicNameSingularity == nicNameMe )

            soulC& souReplies = souNewsOrReplies ;
        {
        else
        }
            }
                swDeclare = 0 ;
                souDeclare << souDebugNotes ;
                souDeclare << souHandlersA ;
                souDeclare << souReplies ;
                souDeclare << nicNameC() ; // nicNameAckTo
                souDeclare << nicNameImPending ;
                souDeclare << idNewsMe ;
                souDeclare << ++ idNewsDeclareLast ;
                souDeclare << (countT)( bDirect ? flNEWS_DIRECT | flNEWS_REPLIES : flNEWS_IMPLODE | flNEWS_REPLIES ) ;
                souDeclare.removeAllF( tin0P ) ;
                
                souHandlersA << nicNameMe ;
                soulC souHandlersA( tin0P , TAG( TAGiDnULL ) ) ;
                soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;
                
                souReplies << souReply ;
                soulC souReplies( tin0P , TAG( TAGiDnULL ) ) ;
                
                souReply << idNewsMe ;
                souReply << nicNameMe ;
                soulC souReply( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)ifcIDnEWSiM_ACK ) ;
            {
            if( !( F(flNews) & flNEWS_DOnOTaCK ) )

            }
                }
                    break ;
    
                    }
                        if( swDeclareNextTock < cGossip ) swDeclareNextTock = cGossip ;
                        souDeclare << souDebugNotes ;
                        souDeclare << souHandlers ;
                        souDeclare << souNews ;
                        souDeclare << nicNameAckTo ;
                        souDeclare << nicNameSingularity ;
                        souDeclare << idNewsRef ;
                        souDeclare << idNewsMe ;
                        souDeclare << flNews ;
                        souDeclare.removeAllF( tin0P ) ;
    
                        souNews << nicNameData ;
                        soulC souNews( tin0P , TAG( TAGiDnULL ) , flSOUL_null , idNewsType ) ;

                        __( F(flNews) & flNEWS_IMPLODE ) ; //THERE IS CODE FOR IMPLODING REPLIES BUT NOT NEWS
                    {
                    if( !bDirect )
    
                    ether.ifcSayF( tin0P , T("[")+TF1(idNewsMe)+tc+TF1(idNewsRef)+T("] e")+TF1(uidaF(nicNameSingularity))+TPS(".",1+know.exTime,S1C('.'))+TF1(uidaF(nicNameFrom))+T(">")+TF1(uidaF(nicNameMe))+T(";")+TF1(idNewsType)+tc+TF1(cGossip)+tc+TF1(uidaF(nicNameData))+tb81+tNewsOrReplies+tb81+tHandlers+tb81+tDebugNotes , flSAY_APPEND | flSAY_LOG ) ;
                    freshKnownF( tin0P , stKnow( nicNameSingularity ) ) ;
    
                    }
                        case ifcIDnEWSeX_DEL   : { newsDelF(   tin0P , nicNameData ) ; break ; }
                        case ifcIDnEWSeX_FLASH : { newsFlashF( tin0P , nicNameData ) ; break ; }
                        case ifcIDnEWSeX_HELLO : { newsHelloF( tin0P , nicNameData ) ; break ; }
                    {
                    switch( idNewsType )
    
                    souNews >> nicNameData ;
                    nicNameC nicNameData ;
                {
                case ifcIDnEWSeX_DEL   :
                case ifcIDnEWSeX_FLASH :
                case ifcIDnEWSeX_HELLO :
            {
            switch( idNewsType )
            souNews >> idNewsType ;
            ZE( countT , idNewsType ) ;

            soulC& souNews = souNewsOrReplies ;
        {
        if( !( F(flNews) & flNEWS_REPLIES ) )
        boolT bDirect = !!( F(flNews) & flNEWS_DIRECT ) ;

        }
            if( tDebugNotes.csF( tin0P ) ) tDebugNotes += T("|") ;
            }
                }
                    tDebugNotes += T(psttNote) ;
                    else                           tDebugNotes += tc ;
                    if( !tDebugNotes.csF( tin0P ) ) tDebugNotes = ti ;
    
                    __( cb - 1 - sizeof( strokeS ) * ( psttNote->idAdam + CSpREFIX ) ) ;
                    __( idType - ifcIDtYPEsOULiTEM_strokeSptr ) ;
                {
                if( 1 < (countT)psttNote )

                const strokeS* const psttNote = (strokeS*)( 1 + souDebugNotes.pbFieldF( tin0P , idType , flags , cb , idn ) ) ;
                ZE( countT , cb ) ;
                ZE( flagsT , flags ) ;
                ZE( countT , idType ) ;
            {
            for( countT idn = 1 ; idn <= cNotes ; idn ++ )
            const countT cNotes = souDebugNotes ;
            TN( ti , "|" ) ;
        {
        TN( tDebugNotes , "" ) ;
    
        }
            if( tHandlers.csF( tin0P ) ) tHandlers += T("}") ;
            }
                tHandlers += TF1(uidaF(souHandlers.nicNameFieldF(tin0P,idh))) ;

                //}
                //    tHandlers += T(uidaF(nn)) ;
                //    nicNameC& nn = *(nicNameC*)pbnn ;
                //{
                //if( pbnn )
                //__( cbd - 1 - sizeof( nicNameC ) ) ;
                //__( flags - ( flSOULiTEM_MADEoFcOUNToBJECTS | flSOULiTEM_INCREASINGiNsIGNIFICANCE ) ) ;
                //__( idType - ifcIDtYPEsOULiTEM_nicNameC ) ;
                //if( pbnn ) pbnn ++ ;
                //__Z( pbnn ) ;
                //const byteT* pbnn = souHandlers.pbFieldF( tin0P , idType , flags , cbd , idh ) ;
                //ZE( countT , cbd ) ;
                //ZE( countT , flags ) ;
                //ZE( countT , idType ) ;
                //U:

                else                         tHandlers += tc ;
                if( !tHandlers.csF( tin0P ) ) tHandlers = ti ;
            {
            for( countT idh = 1 ; idh <= cHandlers ; idh ++ )
            const countT cHandlers = souHandlers ;
            TN( ti , "{" ) ;
        {
        TN( tHandlers , "" ) ;
    
        }
            //if( tNewsOrReplies.csF( tin0P ) ) tNewsOrReplies += T(".") ;
            }
                }
                    }
                        __1
                        __( idType ) ;
                    {
                    default :
                    }
                        break ;

                        tNewsOrReplies += TF1(uidaF(souNewsOrReplies.nicNameFieldF(tin0P,2))) ;

                        //}
                        //    tNewsOrReplies += TF1(uidaF(nn)) ;
                        //    nicNameC& nn = *(nicNameC*)pbnn ;
                        //{
                        //if( pbnn )
                        //__( cbd - 1 - sizeof( nicNameC ) ) ;
                        //__( flags - ( flSOULiTEM_MADEoFcOUNToBJECTS | flSOULiTEM_INCREASINGiNsIGNIFICANCE ) ) ;
                        //__( idType - ifcIDtYPEsOULiTEM_nicNameC ) ;
                        //if( pbnn ) pbnn ++ ;
                        //__Z( pbnn ) ;
                        //const byteT* pbnn = souNewsOrReplies.pbFieldF( tin0P , idType , flags , cbd , 2 ) ;
                        //ZE( countT , cbd ) ;
                        //ZE( countT , flags ) ;
                        //ZE( countT , idType ) ;
                        //U:

                        }
                            case ifcIDnEWSeX_DEL   : { tNewsOrReplies += T("d:") ; break ; }
                            case ifcIDnEWSeX_FLASH : { tNewsOrReplies += T("f:") ; break ; }
                            case ifcIDnEWSeX_HELLO : { tNewsOrReplies += T("d:") ; break ; }
                        {
                        switch( idType )
                    {
                    case ifcIDnEWSeX_DEL   :
                    case ifcIDnEWSeX_FLASH :
                    case ifcIDnEWSeX_HELLO :
                {
                switch( idType )
                countT idType = souNewsOrReplies.cFieldF( tin0P , 1 ) ;
                //tNewsOrReplies = ti ;
            {
            else
            }
                }
                    }
                        }
                            }
                                break ;
                                tNewsOrReplies += (idType==ifcIDnEWSiM_ACK?T("a")+T("-")+TF1(uidaF(nicNameImPending))+T(".")+TF1(idNewsAcked):T("t"))+T(":")+TF1(uidaF(nicNameReplier)) ;
                                else                              tNewsOrReplies += tc ;
                                if( !tNewsOrReplies.csF( tin0P ) ) /*tNewsOrReplies  = ti*/ ;

                                if( idType == ifcIDnEWSiM_ACK ) souReply >> idNewsAcked ;
                                ZE( countT , idNewsAcked ) ;

                                souReply >> nicNameReplier ;
                                nicNameC nicNameReplier ;
                            {
                            case ifcIDnEWSiM_ACK :
                            case ifcIDnEWSiM_TIMEOUT : flNews |= flNEWS_DOnOThOLD ;
                        {
                        switch( idType )
                        souReply >> idType ;
                        ZE( countT , idType ) ;
                        soulC souReply( tin0P , TAG( TAGiDnULL ) , pbs , flSOUL_null , 0 , 0 , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;
                        __( idType - ifcIDtYPEsOULiTEM_soulC ) ;
                    {
                    if( pbs )
                    const byteT* pbs = souNewsOrReplies.pbFieldF( tin0P , idType , flags , cb , idr ) ;
                    ZE( countT , cb ) ;
                    ZE( flagsT , flags ) ;
                    ZE( countT , idType ) ;
                {
                for( countT idr = 1 ; idr <= cReplies ; idr ++ )
                const countT cReplies = souNewsOrReplies ;
            {
            if( F(flNews) & flNEWS_REPLIES )
            //TN( ti , "." ) ;
        {
        TN( tNewsOrReplies , "" ) ;
        TN( tb81 , "" ) ; tb81 = TP("",0x18) ;
        TN( tc , "," ) ;
    
        soulP >> souDebugNotes ;
        soulC souDebugNotes( tin0P , TAG( TAGiDnULL ) ) ;

        souHandlers << nicNameMe ;
        soulP >> souHandlers ;
        soulC souHandlers( tin0P , TAG( TAGiDnULL ) ) ;

        soulP >> souNewsOrReplies ;
        soulC souNewsOrReplies( tin0P , TAG( TAGiDnULL ) ) ;

        soulP >> cGossip ;
        ZE( countT , cGossip ) ;

        soulP >> nicNameFrom ;
        nicNameC nicNameFrom ;

        nicNameImPending = nicNameAckTo ? nicNameAckTo : nicNameSingularity ;

        soulP >> nicNameAckTo ;
        nicNameC nicNameAckTo ;

        soulP >> nicNameSingularity ;
        nicNameC nicNameSingularity ;

        soulP >> idNewsRef ;
        ZE( countT , idNewsRef ) ;

        soulP >> idNewsMe ;
        ZE( countT , idNewsMe ) ;

        soulP >> flNews ;
        ZE( flagsT , flNews ) ;

        __( idCmdCatch - ifcIDcMDsESSION_NEWS ) ;
        soulP >> idCmdCatch ;
        ZE( countT , idCmdCatch ) ;
    {
    if( bOnline && soulP )
{
boolT lnicC::shockF( tin0S& tin0P , soulC& soulP )

}
    }
        if( idaDeadP && idaDeadP <= cpln && ppln[ idaDeadP ] ) ppln[ idaDeadP ]->bOnlineF( tin0P , 0 ) ;

        for( countT idn = 1 ; idn <= cpln ; idn ++ ) ppln[ idn ] = new( 0 , tin0P , LF ) lnicC( tin0P , etThreadP , *(nicNameC*)&stLNNA[ idn ] ) ;
        *ppln = 0 ;                                             // CONSTRUCT THE LOGICAL NIC HARDWARE
    {
    if( ppln )
    etThreadP.newF( tin0P , LF , (countT*&)ppln , 1 + cpln ) ; ___( ppln ) ;
    
    cpln = stLNNA ;
    }
        }
            while( !idp ) stLNNA.sinkF( tin0P , idp , nicNameC( 1 + ru , 1 + ru , 1 + ru , 1 + ru ) , flSTACKsINK_UNIQUE ) ;
            ZE( countT , idp ) ;
        {
        while( !etPrime && cTries -- )
        countT cTries = cLNicsP ;
        ranUniC ru( 0xffffffff , - 1 ) ;
        etherC& etPrime = etThreadP.etPrimeIF( tin0P ) ;
    {
    stackC stLNNA( tin0P , etThreadP , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ; // GENERATE A LIST OF ASSIGNED nicNameC VALUES

    TN( tp , "pushing " ) ;
    TN( td , "." ) ;
    TN( tb , " " ) ;
    TN( te , "\r\n" ) ;                                         // GENERALLY USEFUL STACK OBJECTS

    cGossipOrdered = cGossipP ;

    }
        if( etThreadP ) return ;
        __NZ( ppln ) ;
        if( etThreadP ) return ;
    {
    IFbEcAREFUL
{
voidT lnicC::genesisF( tin0S& tin0P , etherC& etThreadP , const countT cLNicsP , const countT cGossipP , const countT idaDeadP )

}
    //ether.ifcSayF( tin0P , tEntry , flSAY_APPEND | flSAY_LOG ) ;

    ;

        +tb+ta+tc+TF3(know.idaExHit2    ,flFORMAT_null,3)
        +tb+t9+tc+TF3(know.idaExHit1    ,flFORMAT_null,3)
        +tb+t8+tc+TF3(know.idrExHit2    ,flFORMAT_null,3)
        +tb+t7+tc+TF3(know.idrExHit1    ,flFORMAT_null,3)
        +tb+t6+tc+TF3(know.exTime      ,flFORMAT_null,3)
        +tb+t5+tc+TF3(know.idrMe      ,flFORMAT_null,3)
        +tb+t4+tc+TF3(know.idaSingularity,flFORMAT_null,3)
        +tb+t3+tc+TF3(know.idaMe      ,flFORMAT_null,3)
        +tb+t2+tc+TF3(know.cKnown     ,flFORMAT_null,3)
        +tb+t1+tc+T(nicNameMe)

    TN( tEntry , "" ) ; tEntry = T(psttTitleP)+T(":")

    TN( ta , "idaExHit2" ) ;
    TN( t9 , "idaExHit1" ) ;
    TN( t8 , "idrExHit2" ) ;
    TN( t7 , "idrExHit1" ) ;
    TN( t6 , "exTime" ) ;
    TN( t5 , "idrMe" ) ;
    TN( t4 , "idaSingularity" ) ;
    TN( t3 , "idaMe" ) ;
    TN( t2 , "cKnown" ) ;
    TN( t1 , "nicNameMe" ) ;
    TN( te , "\r\n" ) ;
    TN( tc , ":" ) ;
    TN( tb , " " ) ;
{
voidT lnicC::logF( tin0S& tin0P , const strokeS* const psttTitleP )

}
    }
        logF( tin0P , bOnline ? T("DATA CABLE FIXED") : T("DATA CABLE KICKED OUT OF WALL SOCKET") ) ;
        bOnline = !!bOnlineP ;
    {
    if( !!bOnlineP - !!bOnline )
{
voidT lnicC::bOnlineF( tin0S& tin0P , const boolT bOnlineP )

}
    return bOnline ;
{
boolT lnicC::bOnlineF( tin0S& tin0P )

}
    return uida ;

    }
        }
            break ;
            uida = idn ;
        {
        if( ppln[ idn ] && ppln[ idn ]->nicNameMe == nicNameP )
    {
    for( countT idn = 1 ; idn <= cpln ; idn ++ )
    ZE( countT , uida ) ;
{
countT lnicC::uidaF( const nicNameC& nicNameP )

}
    //if( tEntry.csF( tin0P ) ) ether.ifcSayF( tin0P , tEntry , flSAY_APPEND | flSAY_LOG ) ;

    }
        while( !ether && ~hDown ) ;
        }
            }
                tEntry += TF1(uidaF(nicName)) ;
                else                      tEntry += T(",") ;
                if( !tEntry.csF( tin0P ) ) tEntry = TF1(uidaF(nicNameMe))+T(" loading swsNack: ") ;

                swsNack.sinkF( tin0P , countTC() , nicName , flSTACKsINK_UNIQUE ) ;
            {
            if( nicName != nicNameMe )
            nicNameC nicName = *(nicNameC*)&stKnow.downF( tin0P , hDown ) ;
        {
        do
        handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        swNackTimeRemaining = TIMEoUT ;

        }
            swsAck >> nnb ;
            swsAck.sinkF( tin0P , countTC() , nnb ) ; // TO ENSURE THAT ALL FLAVORS IN swsNack ARE ALSO IN swsAck
            nicNameC nnb ;
            __( swsAck ) ;
        {
        idNewsAck = idNewsDeclareP ;
    {
    if( stKnow )
    TN( tEntry , "" ) ;
{
voidT lnicC::loadNackF( tin0S& tin0P , const countT idNewsDeclareP )

}
    ether.ifcSayF( tin0P , tEntry , flSAY_APPEND | flSAY_LOG ) ;

    }
        while( !ether && ~hDown ) ;
        }
            tEntry += TF1(uidaF(nicName)) ;
            else                      tEntry += T(",") ;
            if( !tEntry.csF( tin0P ) ) tEntry = TF1(uidaF(nicNameMe))+T(" knows: ") ;
            nicNameC nicName = *(nicNameC*)&stKnow.downF( tin0P , hDown ) ;
        {
        do
        handleC hDown( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
    {
    if( stKnow )
    TN( tEntry , "" ) ;
{
voidT lnicC::logKnowF( tin0S& tin0P )

;
}
    voidT                       logKnowF( tin0S& tin0P ) ;
    voidT                       loadNackF( tin0S& tin0P , const countT idNewsDeclareP ) ;
    boolT                       shockF( tin0S& tin0P , soulC& soulP ) ;
    boolT                       bOnlineF( tin0S& tin0P ) ;
    voidT                       bOnlineF( tin0S& tin0P , const boolT bOnlineP ) ;
    voidT                       tockF( tin0S& tin0P ) ;
    voidT                       tickF( tin0S& tin0P , const countT idTickP , const countT uidaP ) ;
    voidT                       readNewsF( tin0S& tin0P ) ;
    voidT                       logF( tin0S& tin0P , const strokeS* const psttTitleP ) ;
    voidT                       freshKnownF( tin0S& tin0P , const countT idaSingularityP = 0 , const countT cImDeadP = 0 , const boolT bDirectP = 0 ) ;
    voidT                       newsDelF( tin0S& tin0P , const nicNameC& nicNameP ) ;
    voidT                       newsNewF( tin0S& tin0P , const nicNameC& nicNameP ) ;
    voidT                       newsFlashF( tin0S& tin0P , const nicNameC& nicNameP ) ;
    voidT                       newsHelloF( tin0S& tin0P , const nicNameC& nicNameP ) ;
                                lnicC( tin0S& tin0P , etherC& etherP , const nicNameC& nicNameMeP ) ;
                                ~lnicC( voidT ) ;
                                NEWdELcLASSpROTOS( lnicC , etherC , thirdC )

    nicNameC                    nicNameMe ;

    public :

    switchC                     swNackTimeRemaining ;
    switchC                     swAckAok ;
    switchStackC                swsAck ;
    switchStackC                swsNack ;
    countT                      idNewsDeclareLast ;
    countT                      idTick ;
    switchC                     swIdTickPending ;
    switchStackC                swsDebugNotesPending ;
    switchStackC                swsRepliesPending ;
    nicNameC                    nicNameImPending ;
    countT                      cSawFlash ;
    switchC                     swDeclareSent ;
    switchC                     swDeclare_cImDead ;
    switchC                     swDeclareNextTock ;
    switchC                     swDeclare ;
    countT                      idNewsAck ;
    soulC                       souDeclare ;
    boolT                       bOnline ;
    strokeS*                    psttLogFile ;
    knowS                       know ;
    stackC                      stFlash ;
    stackC                      stDel ;
    stackC                      stNew ;
    stackC                      stHello ;
    stackC                      stKnow ; // "NICNAMES KNOWN TO ME"
    etherC&                     ether ;

    private :

    static countT               uidaF( const nicNameC& nicNameP ) ;
    static voidT                setupF( tin0S& tin0P ) ;
    static boolT                bFlashSeenByAllF( tin0S& tin0P , etherC& etThreadP ) ;
    static voidT                armageddonF( tin0S& tin0P , etherC& etThreadP , const strokeS* const psttLogFileP ) ;
    static voidT                genesisF( tin0S& tin0P , etherC& etThreadP , const countT cLNicsP , const countT cGossipP , const countT idaDeadP ) ;

    static countT               cExplosions ;
    static countT               cpln ;
    static lnicC**              ppln ;

    public :

    static const countT         idFlashMode ;
    static countT               cGossipOrdered ;
{
class lnicC // "LOGICAL NETWORK INTERFACE CARD"

;
}
    lnicC*                      pLnicExHit2 ;
    lnicC*                      pLnicExHit1 ;
    lnicC*                      pLnicImHit ;
    nicNameC                    nicNameExHit2 ;
    nicNameC                    nicNameExHit1 ;
    nicNameC                    nicNameImHit ;
    countT                      idaExHit2 ;
    countT                      idaExHit1 ;
    countT                      idaImHit ;
    countT                      idrExHit2 ;
    countT                      idrExHit1 ;
    countT                      idrImHit ;
    countT                      exTime ; //RELATIVE TIME IN THE EXPLOSION SEQUENCE; exTime 0 REFERS TO WHEN 1 EXPLODES, HITTING 2 3
    countT                      idrMe ; //MY RELATIVE ID IF THE SINGULARITY IS RELATIVE ID 1
    countT                      idaSingularity ;
    countT                      idaMe ;
    countT                      exTimeMax ; //RELATIVE TIME IN THE EXPLOSION SEQUENCE WHEN THE LA'TH NIC WOULD EXPLODE
    countT                      cKnown ;
    countT                      uidaMe ;
{
struct knowS

class lnicC ;

#define ifcIDnEWSiM_FLASH         6
#define ifcIDnEWSiM_TIMEOUT       5
#define ifcIDnEWSiM_ACK           4

#define ifcIDnEWSeX_DEL           3
#define ifcIDnEWSeX_FLASH         2
#define ifcIDnEWSeX_HELLO         1

#define ifcIDfLASHmODE_IMPLODE         2
#define ifcIDfLASHmODE_EXPLODE         1

#define TIMEoUT 0x30

#endif

    }
        }
            //etThread.strokeF( tin0P , te ) ;
            }
                __( ida - idaF( idr , id1 , 8 ) ) ;
                //etThread.strokeF( tin0P , TF3(idr,flFORMAT_null,9) ) ;
                countT idr = idrF(ida,id1,8) ;
            {
            for( countT ida = 1 ; ida <= 8 ; ida ++ )
            //etThread.strokeF( tin0P , TF3(id1,flFORMAT_null,8)+tv ) ;
        {
        for( countT id1 = 1 ; id1 <= 8 ; id1 ++ )
        TN( tv , "|" ) ;                                            // GENERALLY USEFUL STACK OBJECTS
        TN( te , "\r\n" ) ;                                         // GENERALLY USEFUL STACK OBJECTS
    {
    // TEST idaF AND idrF (PUT THIS CODE INTO TODO

#if defined( NEVERdEFINED )

/*1*/WAKEhIDE( "simulator.2.power.explosive.communication" )/*1*/
/**/
*/
a nic with N names must behave exactly as if it was a set of N nics on N distinct hosts
i think only of logical nics, never of nics
 each nic is associated with ze or mo lnic
 every lnic is associated with exactly wo nic
def "logical nic": an imaginary device identified by a single, unique, nicNameC value
 4 billion participating nic cards will be supported
a cardinal name in the problem domain, and for me, is a countT value
for me, an actual name is a countT value
an actual name in the problem domain is a nicNameC value
i exemplify obtaining cardinal names from actual names
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

