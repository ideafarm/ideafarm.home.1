
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
#endif
    etThread.traceF( tinP , T("noteFromStripeCBF [bGot,bValid]:    ")+TF2(bGot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(bValid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    //}
    //    }
    //        LOGrAW( tSay ) ;
    //        TN( tSay , "" ) ; tSay = T("keyValue: \"")+tKey+T("\" = \"")+tValue+T("\"\r\n") ;
    //
    //        tValue = T(psttv) ;
    //        tKey   = T(psttLeverKVP) ;
    //
    //        strokeS* psttv = (strokeS*)(countT)swKVP ;
    //        psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
    //    {
    //    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    //    countT cFlavors = swKVP.cFlavorsF( tinP ) ;
    //    TN( tValue , "" ) ;
    //    TN( tKey   , "" ) ;
    //{

    LOGrAW( "\r\n---- psttKVReportP (END) -----------------------------------------------------------------\r\n" ) ;
    LOGrAW( T(psttKVReportP) ) ;
    LOGrAW( "\r\n---- psttKVReportP (BEGIN) -----------------------------------------------------------------\r\n" ) ;
    LOGrAW3( "noteFromStripeCBF [bValid]:    " , bValid , "\r\n" ) ;

    }
        }
            THREADmODE2rESTORE

            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/b42/smtp/")+tHost+T("@ideafarm.com/")+tToUse+T("//wo@ideafarm.com/ideafarm.factory.reports@gmail.com") , tBody ) ;

            ;
                : tValueStripePayerEmail
                ? tEmailSandboxMe
            textC& tToUse = bSandbox
            TN( tEmailSandboxMe , "ideafarmcity@gmail.com" ) ;

            tBody += T("time:  ")+tTime+T("\r\n") ;
            tBody += T("\r\nreference:  ")+tShort+T("\r\n") ;

            }
                tBody += T("Keep this secret and use it to prove your identity:  ")+tSecret+T("\r\n") ;
                tBody += T("Give this link to others:  https://ideafarm.com?")+tIdSubscriber+T("\r\n\r\n") ;
                tBody += T("subscriber id:  ")+tIdSubscriber+T("\r\n\r\n") ;
                tBody += T("country:  ")+tValueAddressCountry+T("\r\n") ;
                tBody += T("postal code:  ")+tValueAddressZip+T("\r\n") ;

                TN( tSecret       , "" ) ; tSecret       = TF4((countT)secret      ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
                TN( tIdSubscriber , "" ) ; tIdSubscriber = TF4((countT)idSubscriber,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;
            {
            if( !bDelete )

            tBody += T("email:  ")+tValueStripePayerEmail+T("\r\n") ;

            ) ;

                    "\r\n"
                    "The following information has been registered:\r\n"
                    "Thank you for deciding to participate in Wo'O's Table.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email is now registered.\r\n"
                :    
                    "\r\n"
                    "Sorry to see you go!  If you change your mind, just register again.\r\n"
                    "\r\n"
                    "Subject: Wo'O's Table:  Your email has been unregistered, effective immediately.\r\n"
                ?
                bDelete

            TN( tBody ,

            textC tTime( ifcIDtEXTgEN_TIMEnOWfOREIGN , tinP , TAG( TAGiDnULL ) ) ;

            }
                etThread.delF( tinP , psttFile ) ;
                }
                    }
                        etThread.delF( tinP , psttShort ) ;
                        etThread.delF( tinP , psttnu ) ;
                        tShort = T(psttShort) ;
                        etThread.strBisectF( tinP , psttnu , psttShort , psttFile , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                        ZE( strokeS* , psttShort ) ;
                        ZE( strokeS* , psttnu ) ;
                    {
                    if( !tShort.csF( tinP ) )

                    etThread.traceF( tinP , T("wrote   ")+T(psttc1) ) ;
                {
                FORsTRINGSiN1( psttFile )
                etThread.boxPutUniqueF( tinP , psttFile , tListSubscriptionFileLong , WS( rec ) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;

                }
                    TlISTlOAD( tListSubscriptionFileLong , meP.tListFactoryF() , tSuffix ) ;
                    TN( tSuffix , "" ) ; tSuffix = T("d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/subscriptions/subscription.table")+T(bSandbox?".sandbox.@1@.":".live.@1@.")+T(nnPeerP)+T(".")+tIdSubscriber+T(".")+tHost ;
                {
                TlIST( tListSubscriptionFileLong ) ;
            {
            TN( tShort , "" ) ;

            }
                if( !tHost.csF( tinP ) ) tHost = T("factories") ;
                etThread.delF( tinP , psttHost ) ;
                else            tHost = T(psttHost) ;
                if( !psttHost ) etThread.traceF( tinP , T("error: reverse DNS lookup on myself failed 105") ) ;
                etThread.sockPsttHostF( tinP , psttHost ) ; ___( psttHost ) ;
                ZE( strokeS* , psttHost ) ;
            {
            TN( tHost , "" ) ;

            THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

            rec << (strokeS*)tValueAddressStatus      ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressZip         ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressCountry     ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressCountryCode ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressState       ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressCity        ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressStreet      ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueAddressName        ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueLastName           ; //ADDED IN FORMAT 6
            rec << (strokeS*)tValueFirstName          ; //ADDED IN FORMAT 5
            rec << (countT)secret                     ; //ADDED IN FORMAT 7
            rec << ((countT*)&idSubscriber)[ 1 ]      ; //ADDED IN FORMAT 5
            rec << ((countT*)&idSubscriber)[ 0 ]      ; //ADDED IN FORMAT 5
            rec << (strokeS*)tValueTransId            ;
            rec << (strokeS*)tValueTransType          ;
            rec << (strokeS*)tValueRewardBox          ;
            rec << (strokeS*)tValueRewardBoxHidden    ;
            rec << (strokeS*)tZipUse                  ;
            rec << (strokeS*)tValueStripePayerEmail   ;
            rec << (strokeS*)T(nnPeerP)               ;
            rec << (strokeS*)tAction                  ;
            rec << (countT)timeN2                     ; //ADDED IN FORMAT 5
            rec << (countT)timeN1                     ; //ADDED IN FORMAT 5
            rec << (countT)7                          ; // IDfORMAT
            rec << finger                             ;
            soulC rec( tinP , TAG( TAGiDnULL ) ) ;

            if( !tZipUse.csF( tinP ) ) tZipUse = tValueAddressCity ;
            TN( tZipUse , (strokeS*)tValueAddressZip ) ;

            etThread.osTimeNowF( tinP , timeN1 , timeN2 ) ;
            ZE( sCountT , timeN2 ) ;
            ZE( countT , timeN1 ) ;

            }
                secret = ru ;
                ranUniC ru( tinP , (measure04T)MAXcOUNTT + 1 ) ;
            {
            if( !bDelete )
            ZE( countT , secret ) ;

            TN( tIdSubscriber , "" ) ; tIdSubscriber = TF4((countT)idSubscriber,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x3e) ;

            count04T idSubscriber = bDelete ? 0 : etThread.etherDispenseSerialNumberF( tinP , T(bSandbox?"////"postCRAFTWORKfACTORY"/d/tmp/idSubscriberLath":"////"postCRAFTWORKfACTORY"/d/ideafarm.home.101/ephemeral/backed.up.daily/domains/com/ideafarm/wo.o.s.table/idSubscriberLath") ) ;
            // SO THIS IS NOT A SPF EVEN THOUGH IT REQUIRES factory1, SINCE IT WILL BLOCK UNTIL IT SUCCEEDS
            // THIS WILL BLOCK UNTIL IT CAN OPEN THE SERIAL NUMBER FILE, WHICH MIGHT TAKE A TICK IF factory1 IS REBOOTING

            boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;

            etThread.traceF( tinP , T("stripe subscription [tAction]: ")+tAction ) ;

            TN( tAction , bDelete ? "unregister" : "register" ) ;
            boolT bDelete = !etThread.strCompareF( tinP , tValueTransType , T("subscr_cancel") ) ;

            putNegAM( *(countT*)&finger , FINGERnEG_WOtABLEcONFIRMEDeMAIL ) ;
            ZE( countT , finger ) ;
        {
        )
            )
               || !etThread.strCompareF( tinP , tValueTransType  , T("subscr_cancel") )
                  !etThread.strCompareF( tinP , tValueTransType  , T("subscr_signup") )
            (
            &&
            !etThread.strCompareF( tinP , tValueItemNumber , T("20200604") )
        (
        if

        // item_name: "Wo'O's Table Registration and Subscription"<BR>
        // item_number: "20200604"<BR>
        // payment_status: "Completed"<BR>
        // txn_type: "subscr_payment"<BR>
        //
        // PROCESS IF:

        // ---- psttKVReportP (BEGIN) -----------------------------------------------------------------
        // verify_sign: "A6Wl-dV.Rl9HlgUaUiaylqrnaEu-A-m.2EaCOFABnQmIlQVYHSVWnUsE"<BR>
        // txn_type: "subscr_signup"<BR>
        // test_ipn: "1"<BR>
        // subscr_id: "I-40KPDG5ERKE8"<BR>
        // subscr_date: "13:30:53 Jun 30, 2020 PDT"<BR>
        // residence_country: "US"<BR>
        // recurring: "1"<BR>
        // receiver_email: "sb-znjve1276155@business.example.com"<BR>
        // reattempt: "1"<BR>
        // period3: "1 D"<BR>
        // payer_status: "verified"<BR>
        // payer_id: "4QLHUR4EYW37J"<BR>
        // payer_email: "sb-prtxq883780@personal.example.com"<BR>
        // notify_version: "3.9"<BR>
        // mc_currency: "USD"<BR>
        // mc_amount3: "20.91"<BR>
        // last_name: "Doe"<BR>
        // item_number: "20200604"<BR>
        // item_name: "Wo'O's Table Registration and Subscription"<BR>
        // ipn_track_id: "b74bafb2990bf"<BR>
        // first_name: "John"<BR>
        // charset: "windows-1252"<BR>
        // business: "sb-znjve1276155@business.example.com"<BR>
        // btn_id: "4125553"<BR>
        // amount3: "20.91"<BR>
        // address_zip: "95131"<BR>
        // address_street: "1 Main St"<BR>
        // address_status: "confirmed"<BR>
        // address_state: "CA"<BR>
        // address_name: "John Doe"<BR>
        // address_country_code: "US"<BR>
        // address_country: "United States"<BR>
        // address_city: "San Jose"<BR>
        // ---- psttKVReportP (END) -----------------------------------------------------------------


        // 20200604@1905:  REGISTER THE PURCHASER FOR WO'O'S TABLE

        #endif

            }
                }
                    }
                        }
                            }
                                sessionsP.baton.ungrabF( tinP ) ;
                                }
                                    if( idAcc == session.getIdAccountF( tinP ) ) session.privilegesF( tinP , session.privilegesF( tinP ) | flSESSIONpRIVILEGE_FULLhEADER ) ;
                                    sessionC& session = *(sessionC*)(countT)sessionsP.swSession ;
                                    sessionsP.nnLever_peer = *(nicNameC*)sessionsP.swSession.leverF( tinP , idf ) ;
                                {
                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                countT cFlavors = sessionsP.swSession.cFlavorsF( tinP ) ;
                                sessionsP.baton.grabF( tinP , TAG( TAGiDnULL ) ) ;
                            {

                            }
                                etThread.delF( tinP , psttEmail ) ;
                                etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                                ) ;

                                    "  The organizer will respond to payout requests as quickly as he can."
                                    "  Please allow several days for the organizer to make the payout."
                                    "  Contact the organizer to request a payout."
                                    "  Your commission on this sale will be paid to you on demand, via Stripe (tm)."
                                    "A sale of ")+TF2(moneyT1,flFORMAT_NObIGITvALUES)+T(" mEx (tm), worth $")+TF4(dollars,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(".")+TF4(cents,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T(", has just been booked, and you are the sales worker of record for that sale!"
                                    "\r\n"
                                    "Subject: You've just been paid a commission!\r\n"

                                TN( tSay , "" ) ; tSay = T(

                                countT dollars = moneyT1 / 100 ;
                                countT cents   = moneyT1 % 100 ;

                                queryEmailFromIdAccountF( tinP , psttEmail , idAccCommission ) ; ___( psttEmail ) ;
                                ZE( strokeS* , psttEmail ) ;
                            {
                            if( idAccCommission )

                            }
                                etThread.delF( tinP , psttEmail ) ;
                                etThread.boxPutF( tinP , T("//smtp/" ifcEMAIL_AUTOrESPONDERbANKtELLER "/")+T(psttEmail) , tSay , tSay.csF( tinP ) ) ;

                                ) ;

                                    "  Sales workers are not asked to return their commission."
                                    "  This is because 7/8 of your purchase price is paid as a commission to sales workers."
                                    "IdeaFarm " "(tm) Operations must make 8 sales of the same size to recover from each refund."
                                    "\r\n"
                                    "  Please do not request a refund unless you really feel entitled to one.\r\n"
                                    "  It is an honor system."
                                    "  Instead of asking you to trust us, we do business in a way that requires that we trust you!"
                                    "  This is an example of the trust reversal policy of IdeaFarm " "(tm) Operations."
                                    "  However, if you feel that you are entitled to a refund, you will be given one, no questions asked."
                                    "This is a nonrefundable purchase."
                                    "\r\n"
                                    "  You can view the details of this payment by logging into your Stripe (tm) account.\r\n"
                                    "This is a notification that your Stripe (tm) account has been used to make a purchase at IDEAFARM.COM."
                                    "\r\n"
                                    "Subject: Thank you for your deposit!\r\n"

                                TN( tSay , "" ) ; tSay = T(

                                queryEmailFromIdAccountF( tinP , psttEmail , idAcc ) ; ___( psttEmail ) ;
                                ZE( strokeS* , psttEmail ) ;
                            {

                            { depositS info( tinP , 1/*idAccBucketOwner*/ , 1/*idBucket*/ , 1/*idProduct*/ , idAcc/*Depositor*/ , 0/*pczNote*/ , timeN1 , timeN2 , 1/*idDeposit*/ , idAccCommission , moneyT1 , moneyT2 ) ; }
                            count8S c8n( 6 , 7 , 8 , 9 ) ;

                            //U::CONoUTrAW7( "deposit: [moneyT1,idAcc,idAccCommission]: " , moneyT1 , " " , idAcc , " " , idAccCommission , "\r\n" ) ;
                        
                            etThread.osTimeNowUniqueF( tinP , timeN1 , timeN2 ) ;
                            ZE( sCountT , timeN2 ) ;
                            ZE( countT  , timeN1 ) ;
            
                            else                        etThread.osTimeSubtractF( tinP , moneyT1 , moneyT2 , - cMoneyIn , 0 ) ;
                            if( (sCountT)cMoneyIn > 0 ) moneyT1 = cMoneyIn ;
                            ZE( sCountT , moneyT2 ) ;
                            ZE( countT  , moneyT1 ) ;
                        {

                        }
                            etThread.delF( tinP , pstt1w ) ;
                            }
                                etThread.delF( tinP , pstt2w ) ;
                                }



                                    }
                                        }
                                            break ;
                                            if( !etThread.strCompareF( tinP , psttc2 , tCustomKeyIdAccCommission ) ) idArm = 1 ;
                                        {
                                        default :
                                        }
                                            break ;
                                            idAccCommission = etThread.strDigitsToSCountF( tinP , psttc2 , 36 ) ;
                                        {
                                        case 1 :
                                    {
                                    switch( idArm )
                                {
                                FORsTRINGSiN2( pstt2w )
                                ZE( countT , idArm ) ;
                                etThread.strWordsOldF( tinP , pstt2w , psttc1 , sttq , T(TbLACK)+T(":") ) ; ___( pstt2w ) ;
                                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                                ZE( strokeS* , pstt2w ) ;
                            {
                            FORsTRINGSiN1( pstt1w )
                            etThread.strWordsOldF( tinP , pstt1w , tValueStripeCustom , sttq , T(TbLACK)+T(";") ) ; ___( pstt1w ) ;
                            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            ZE( strokeS* , pstt1w ) ;

                            TN( tCustomKeyIdAccCommission , "idAccCommission" ) ;
                        {
                        if( tValueStripeCustom.csF( tinP ) )
                        ZE( countT , idAccCommission ) ;

                    {
                    if( cMoneyIn )
        
                    countT cMoneyIn = cMoneyGross - cMoneyFee ;

                    countT cMoneyFee   = cMoneyF( tinP , etThread , tValueStripePaymentFee   ) ;
                    countT cMoneyGross = cMoneyF( tinP , etThread , tValueStripePaymentGross ) ;
                {
                )
                    )
                        !etThread.strCompareF( tinP , tValueStripePaymentStatus , T("Refunded" ) )
                        !etThread.strCompareF( tinP , tValueStripePaymentStatus , T("Completed") ) ||
                    (
                    !POOP &&
                (
                if

                }
                    }
                        }
                            //U::CONoUTrAW( T("updating account description NEW [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                            if( pptValue[ offo ]->csF( tinP ) ) { etThread.strMakeF( tinP , LF , pstto , *pptValue[ offo ] ) ; ___( pstto ) ; }
                            if( pstto ) { PUSE( tinP , *(byteT**)&pstto ) ; }
                            //U::CONoUTrAW( T("updating account description OLD [")+*pptKey[offo]+T("]: \"")+T(pstto)+T("\"\r\n") ) ;
                            strokeS*& pstto = *pppstto[ offo ] ;
                        {
                        for( countT offo = 0 ; offo < cField ; offo ++ )
                    {
                    if( !POOP )

                    }
                        __( cField - cKey + 5 ) ; //CS:B
                        __( cValue - cKey ) ;
                        countT cValue = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    {
                    countT cField = sizeof pppstto  / sizeof pppstto[  0 ] ;
                    countT cKey   = sizeof pptKey   / sizeof pptKey[   0 ] ;

                    } ;
                        &info.psttResidenceCountry              ,
                        &info.psttStripeProtectionEligibility   ,
                        &info.psttStripePayerStatus             ,
                        &info.psttStripePayerId                 ,
                        &info.psttStripePayerEmail              ,
                        &info.psttLastName                      ,
                        &info.psttFirstName                     ,
                        &info.psttCharset                       ,
                        &info.psttAddressZip                    ,
                        &info.psttAddressStreet                 ,
                        &info.psttAddressStatus                 ,
                        &info.psttAddressState                  ,
                        &info.psttAddressName                   ,
                        &info.psttAddressCountryCode            ,
                        &info.psttAddressCountry                ,
                        &info.psttAddressCity                   ,
                        //CS:CODEsYNC: 1d20005 1d20005 1d20005

                        //20200622@1031: NO LONGER KEPT IN SYNC BECAUSE AM NOT USING THIS ACCOUNTING SYSTEM
                    {
                    strokeS** pppstto[] =

                    if( F(info.flagsThis1) & flACCOUNT1_FYIdOESnOTeXIST ) info.flagsMode = fliACCOUNTmODE_LISTmEdIRECTORY | fliACCOUNTmODE_OWNERcONFIRMED ;

                    accountS info( tinP , etThread , idAcc , flACCOUNT1_SET , flACCOUNT2_QUERYfLAGSmODE | flACCOUNT2_QUERYzIPaT ) ; //MUST QUERY FOR ALL FIELDS THAT ARE CAPTURED FROM ACCOUNT OWNER OR FROM ANOTHER SOURCE OTHER THAN STRIPE
                {
            {
            if( idAcc )

            const countT idAcc = queryIdAccountFromEmailF( tinP , tValueStripePayerEmail ) ;

        #if defined( NEVERdEFINED )
        //U:: 20120905: COMMENTED OUT TO BRING UP HTTP SERVER WITH NO DATABASE FUNCTIONALITY; ALL DATABASE FUNCTIONALITY CODE NEEDS TO BE MIGRATED TO THE NEW LIST SUPPORT IN poolC

        const countT idTest = !tValueIdTest.csF( tinP ) ? 0 : etThread.strDigitsToSCountF( tinP , tValueIdTest ) ;

        }
            }
                if( !etThread.strCompareF( tinP , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
            {
            for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

            psttLeverKVP = (strokeS*)swKVP.leverF( tinP , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swKVP.cFlavorsF( tinP ) ;

        } ;
            &tValueItemNumber                    ,
            &tValueTransId                       ,
            &tValueTransType                     ,

            &tValueRewardBox                     ,
            &tValueRewardBoxHidden               ,

            &tValueIdTest                        ,
            &tValueStripeCustom                  ,
            &tValueStripePaymentStatus           ,
            &tValueStripePaymentGross            ,
            &tValueStripePaymentFee              ,
            //CS:B

            &tValueResidenceCountry              ,
            &tValueStripeProtectionEligibility   ,
            &tValueStripePayerStatus             ,
            &tValueStripePayerId                 ,
            &tValueStripePayerEmail              ,
            &tValueLastName                      ,
            &tValueFirstName                     ,
            &tValueCharset                       ,
            &tValueAddressZip                    ,
            &tValueAddressStreet                 ,
            &tValueAddressStatus                 ,
            &tValueAddressState                  ,
            &tValueAddressName                   ,
            &tValueAddressCountryCode            ,
            &tValueAddressCountry                ,
            &tValueAddressCity                   ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptValue[] =

        } ;
            &tKeyItemNumber                     ,
            &tKeyTransId                        ,
            &tKeyTransType                      ,

            &tKeyRewardBox                      ,
            &tKeyRewardBoxHidden                ,

            &tKeyIdTest                         ,
            &tKeyStripeCustom                   ,
            &tKeyStripePaymentStatus            ,
            &tKeyStripePaymentGross             ,
            &tKeyStripePaymentFee               ,
            //CS:B

            &tKeyResidenceCountry               ,
            &tKeyStripeProtectionEligibility    ,
            &tKeyStripePayerStatus              ,
            &tKeyStripePayerId                  ,
            &tKeyStripePayerEmail               ,
            &tKeyLastName                       ,
            &tKeyFirstName                      ,
            &tKeyCharset                        ,
            &tKeyAddressZip                     ,
            &tKeyAddressStreet                  ,
            &tKeyAddressStatus                  ,
            &tKeyAddressState                   ,
            &tKeyAddressName                    ,
            &tKeyAddressCountryCode             ,
            &tKeyAddressCountry                 ,
            &tKeyAddressCity                    ,
            //CS:CODEsYNC: 1d20005 1d20005 1d20005
        {
        textC* pptKey[] =

        TN( tValueItemNumber                    , "" ) ;
        TN( tValueTransId                       , "" ) ;
        TN( tValueTransType                     , "" ) ;

        TN( tValueRewardBox                     , "" ) ;
        TN( tValueRewardBoxHidden               , "" ) ;

        TN( tValueIdTest                        , "" ) ;
        TN( tValueStripeCustom                  , "" ) ;
        TN( tValueStripePaymentStatus           , "" ) ;
        TN( tValueStripePaymentGross            , "" ) ;
        TN( tValueStripePaymentFee              , "" ) ;

        TN( tValueResidenceCountry              , "" ) ;
        TN( tValueStripeProtectionEligibility   , "" ) ;
        TN( tValueStripePayerStatus             , "" ) ;
        TN( tValueStripePayerId                 , "" ) ;
        TN( tValueStripePayerEmail              , "" ) ;
        TN( tValueLastName                      , "" ) ;
        TN( tValueFirstName                     , "" ) ;
        TN( tValueCharset                       , "" ) ;
        TN( tValueAddressZip                    , "" ) ;
        TN( tValueAddressStreet                 , "" ) ;
        TN( tValueAddressStatus                 , "" ) ;
        TN( tValueAddressState                  , "" ) ;
        TN( tValueAddressName                   , "" ) ;
        TN( tValueAddressCountryCode            , "" ) ;
        TN( tValueAddressCountry                , "" ) ;
        TN( tValueAddressCity                   , "" ) ;

        TN( tKeyItemNumber                      , "item_number"            ) ;
        TN( tKeyTransId                         , "txn_id"                 ) ;
        TN( tKeyTransType                       , "txn_type"               ) ;

        TN( tKeyRewardBox                       , "option_selection1"      ) ;
        TN( tKeyRewardBoxHidden                 , "option_selection2"      ) ;

        TN( tKeyIdTest                          , "ifcidtest"              ) ;
        TN( tKeyStripeCustom                    , "custom"                 ) ;
        TN( tKeyStripePaymentStatus             , "payment_status"         ) ;
        TN( tKeyStripePaymentGross              , "payment_gross"          ) ;
        TN( tKeyStripePaymentFee                , "payment_fee"            ) ;

        TN( tKeyResidenceCountry                , "residence_country"      ) ;
        TN( tKeyStripeProtectionEligibility     , "protection_eligibility" ) ;
        TN( tKeyStripePayerStatus               , "payer_status"           ) ;
        TN( tKeyStripePayerId                   , "payer_id"               ) ;
        TN( tKeyStripePayerEmail                , "payer_email"            ) ;
        TN( tKeyLastName                        , "last_name"              ) ;
        TN( tKeyFirstName                       , "first_name"             ) ;
        TN( tKeyCharset                         , "charset"                ) ;
        TN( tKeyAddressZip                      , "address_zip"            ) ;
        TN( tKeyAddressStreet                   , "address_street"         ) ;
        TN( tKeyAddressStatus                   , "address_status"         ) ;
        TN( tKeyAddressState                    , "address_state"          ) ;
        TN( tKeyAddressName                     , "address_name"           ) ;
        TN( tKeyAddressCountryCode              , "address_country_code"   ) ;
        TN( tKeyAddressCountry                  , "address_country"        ) ;
        TN( tKeyAddressCity                     , "address_city"           ) ;

        LOGrAW( "\r\n---- tValidationReply GOOD (END) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( tValidationReply ) ;
        LOGrAW( "\r\n---- tValidationReply GOOD (BEGIN) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( "\r\n---- tValidationRequest GOOD (END) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( tValidationRequest ) ;
        LOGrAW( "\r\n---- tValidationRequest GOOD (BEGIN) -----------------------------------------------------------------\r\n" ) ;
        //U::COMMENT THIS OUT IN PRODUCTION AFTER CONFIDENT IN PROD FUNCTION
    {
    else
    }
        LOGrAW( "\r\n---- tValidationReply BAD (END) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( tValidationReply ) ;
        LOGrAW( "\r\n---- tValidationReply BAD (BEGIN) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( "\r\n---- tValidationRequest BAD (END) -----------------------------------------------------------------\r\n" ) ;
        LOGrAW( tValidationRequest ) ;
        LOGrAW( "\r\n---- tValidationRequest BAD (BEGIN) -----------------------------------------------------------------\r\n" ) ;
    {
    if( !( bValid /*|| idTest == ifcIDtESTpASSCODE*/ ) )
    //ifcIDtESTpASSCODE IS USED BY THE TOOL THAT ALLOWS ME TO MANUALLY SIMULATE PAYMENTS  //ARBITRARY SECRET PASSWORD; DISABLE THE TEST ACCEPTANCE EXCEPT WHEN TESTING
#if defined( NEVERdEFINED )


    }
#endif
        }
            if( POOP ) POOPR

            }
                etThread.delF( tinP , psttBuffer ) ;
                if( psttBuffer && psttBuffer->idAdam ) tValidationReply += T(psttBuffer) ;

                }
                    ++ s ; etThread.osSleepF( tinP , TOCK ) ;
                    etThread.traceF( tinP , TF2(cTries,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(": napping because did not receive a valid reply from www.stripe.com to confirm that the ipn is valid") ) ;
                {
                if( !bGot && cTries )

                if( POOP ) POOPR

                bGot = 1 ;
                bValid = ostVerdict == 'V' ;
                etThread.traceF( tinP , T("verdict:    ")+T(postVerdict) ) ;
                osTextT postVerdict[ 2 ] = { ostVerdict , 0 } ;

                }
                    LOGrAW( "\r\n---- validation response debug (END) -----------------------------------------------------------------\r\n" ) ;
                    }
                        }
                            bArmed = 1 ;
                        {
                        )
                            && post5[ ( cIn - 4 ) % sizeof post5 ] == '\r'
                            && post5[ ( cIn - 3 ) % sizeof post5 ] == '\n'
                            && post5[ ( cIn - 2 ) % sizeof post5 ] == '\r'
                            && post5[ ( cIn - 1 ) % sizeof post5 ] == '\n'
                            cIn >= 4
                        (
                        else if
                        }
                            break ;
                            ;
                                : 'I'
                                ? 'V'
                            ostVerdict = ostNow == 'V'
                        {
                        if( bArmed )

                        }
                            etThread.strFuseF( tinP , psttBuffer , T(post2) ) ;
                            LOGrAW( post2 ) ;                                       //U:: THIS IS REDUNDANT AND SHOULD BE REMOVED
                            osTextT post2[] = { ostNow , 0 } ;
                        {

                        if( !psttBuffer ) { etThread.strMakeF( tinP , LF , psttBuffer , 0 , TUCK << 2 ) ; ___( psttBuffer ) ; }

                        }
                            etThread.delF( tinP , psttBuffer ) ;
                            tValidationReply += T(psttBuffer) ;
                        {
                        if( psttBuffer && !psttBuffer[ 2 ].idAdam )

                        osTextT ostNow = post5[ ( cIn - 1 ) % sizeof post5 ] ;

                        sock.readF( tinP , post5 + ( cIn ++ ) % sizeof post5 , 1 ) ;
                    {
                    while( !POOP )
                    ZE( countT , cIn ) ;
                    osTextT post5[ 5 ] = { 0 , 0 , 0 , 0 , 0 } ;
                    ZE( boolT , bArmed ) ;
                    LOGrAW( "\r\n---- validation response debug (BEGIN) -----------------------------------------------------------------\r\n" ) ;
                {
                ZE( osTextT , ostVerdict ) ;
                ZE( strokeS* , psttBuffer ) ;
                tValidationReply = T("") ;

                sock.writeF( tinP , (osTextT*)tValidationRequest , tValidationRequest.csF( tinP ) ) ;
                sock.connectF( tinP , 443 , nnStripe ) ;
                socketC sock( tinP , *tinP.pEtScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_STREAM , flSOCKETc_CRYPTfOREIGNsSL ) ;
            {
            if( nnStripe ) while( !bGot && cTries -- )
            sleepC s( tinP , TAG( TAGiDnULL ) ) ;
            countT cTries = TUCK >> 4 ;

            nicNameC nnStripe = socketC::nicNameIF( tinP , *tinP.pEtScratch , T(bSandbox?"www.sandbox.stripe.com":"www.stripe.com") ) ;
        
            SCOOPS
        {
        IFsCRATCH

        }
            tValidationRequest = tSay1+TF4(costBodyAll,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+tSay2+tSayCmd+tSayBody ;

            countT costBodyAll = tSayCmd.csF( tinP ) + tSayBody.csF( tinP ) ;

            TN( tSayBody , postBodyP ) ;
            TN( tSayCmd , "cmd=_notify-validate&" ) ;
            TN( tSay2 , "\r\nConnection: close\r\n\r\n" ) ;

            ) ;

                "Content-Length: "
                ".stripe.com\r\n"

            tSay1 += T(

            if( bSandbox ) tSay1 += T(".sandbox") ;

            ) ;

                "Host: www"
                "Content-Type: application/x-www-form-urlencoded\r\n"
                "POST /cgi-bin/webscr HTTP/1.1\r\n"

            TN( tSay1 ,
        {
#if defined( NEVERdEFINED )

        }
            etThread.traceF( tinP , T("!exception / could not parse stripe notice [postBodyP]:\r\n")+T(postBodyP) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
            etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/1d1/smtp/factories@admin.ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Notification from Stripe\r\n\r\nCould not parse. [tBody]:\r\n")+T(postBodyP)+T("\r\n") ) ;
        {
        else
        }
            }
                etThread.delF( tinP , pstto ) ;
                etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/1d1/smtp/factories@admin.ideafarm.com/")+tValueEmail /* + T("///bcc@ideafarm.com") */ , T(pstto) ) ;

                etThread.delF( tinP , psttKey2 ) ;
                etThread.delF( tinP , psttKey1 ) ;

                etThread.strFuseF( tinP , pstto , T(posto4) ) ;
                etThread.strFuseF( tinP , pstto , psttKey2 ) ;
                etThread.strFuseF( tinP , pstto , T(posto3) ) ;
                etThread.strFuseF( tinP , pstto , psttKey1 ) ;
                etThread.strFuseF( tinP , pstto , T(posto2) ) ;
                etThread.strFuseF( tinP , pstto , TF2(idgWight&~NM_HIGH,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                etThread.strFuseF( tinP , pstto , T(posto1) ) ;
                etThread.strMakeF( tinP , LF , pstto , 0 , TUCK << 4 ) ; ___( pstto ) ;
                ZE( strokeS* , pstto ) ;

                ;

                    "\r\n"
                    "Follow the instructions on https://github.com/ideafarm/ipdos to install the above active key into your production IPDOS (tm) home(s)."
                    "\r\n\r\n"
                    "  Best practice is to do this immediately so that you know that it works and how to do it, and then periodically, such as every other quarter."
                    "If the backup key is ever used, the active key will be immediately disabled, the backup key will become the active key, and a new backup key will be immediately dispensed."
                    "\r\n\r\n"
                    "  The backup key should be stored securely both on paper and on a thumb drive that is not used for any other purpose and is NEVER connected to a computer."
                    "  You can have multiple wight identities, and multiple wight identities can use each IPDOS (tm) home."
                    "Your wight's active key is to be stored electronically on wo or more IPDOS (tm) homes on wo or more computers, as a setting for each home."
                    "\r\n\r\n"
                    "  To access the BAN, you must use wo or more activated IPDOS (tm) Homes that is/are installed on wo or more personal computers (or servers)."
                    "An IDEAFARM.COM \"wight\" is an identity through which you can participate on the BAN (Best Americans Network)."
                    "\r\n\r\n"
                    "Instructions:"
                    "\r\n\r\n"

                const osTextT* posto4 =

                ;

                    "\r\n\r\n"
                    "Backup key:"
                    "\r\n\r\n"

                const osTextT* posto3 =

                ;

                    "\r\n\r\n"
                    "Active key:"
                    "\r\n\r\n"

                const osTextT* posto2 =

                ;

                    "Global Wight Id:    "
                    "\r\n\r\n"
                    "  For maximum security, delete this message after storing the keys; do not retain this message in your email archive."
                    "  There is no record of these keys in the global IPDOS (tm) system and, if you do not save them right now, they cannot be recovered."
                    "  This is your only opportunity to copy and paste these instructions and the following id and keys to secure storage."
                    "WARNING:"
                    "Subject: Confidential Notification from IDEAFARM.COM (delivery of wight identification keys)\r\n\r\n"

                const osTextT* posto1 =

                // IF BOTH KEYS ARE LOST, THERE IS NO WAY TO RECOVER ACCESS TO THE WIGHT'S IDENTITY IN THE SYSTEM AND, TO CONTINUE TO USE THE WIGHT, A NEW WIGHT IDENTITY MUST BE PURCHASED
                // IF PUBLIC KEY 2 IS EVER USED, IT WILL IMMEDIATELY DISABLE PUBLIC KEY 1, WILL BECOME THE ACTIVE KEY, AND A NEW BACKUP KEY WILL BE IMMEDIATELY DISPENSED
                // PUBLIC KEY 2 IS THE BACKUP KEY ; IT IS NEVER TO BE USED AND SHOULD BE SECURED SO THAT IT IS NEVER DISCLOSED
                // PUBLIC KEY 1 IS THE ACTIVE KEY AND IS USED BY PRESENTING THE IDGhOME VALUE AND THE KEY
                // THESE BINARY KEYS ARE DISPENSED TO THE PURCHASER IN BASE64 ENCODED TEXT
                //
                // USAGE SCENARIO

                //U: NOTIFY THE PURCHASER OF THESE PUBLIC KEYS HERE ; ONCE I DELETE THESE BLOBS, THERE IS NO WAY TO RECOVER THEM (THEY ARE NOT STORED ANYWHERE)

                etThread.traceF( tinP , T("[idjWightIdg]:    ")+TF2(idgWight&~NM_HIGH,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                etThread.delF( tinP , pbPublicKey2 ) ;
                etThread.strEncodeBlobToRFC4648F( tinP , psttKey2 , pbPublicKey2 , cbPublicKey2 ) ; ___( psttKey2 ) ;
                ZE( strokeS* , psttKey2 ) ;

                etThread.delF( tinP , pbPublicKey1 ) ;
                etThread.strEncodeBlobToRFC4648F( tinP , psttKey1 , pbPublicKey1 , cbPublicKey1 ) ; ___( psttKey1 ) ;
                ZE( strokeS* , psttKey1 ) ;

                etThread.ifcCreateNewWightF( tinP , idgWight , pbPublicKey1 , cbPublicKey1 , pbPublicKey2 , cbPublicKey2 ) ;
                ZE( countT , cbPublicKey2  ) ;
                ZE( byteT* , pbPublicKey2  ) ;
                ZE( countT , cbPublicKey1  ) ;
                ZE( byteT* , pbPublicKey1  ) ;
                ZE( countT , idgWight ) ;

                etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/1d1/smtp/factories@admin.ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Notification from Stripe\r\n\r\nPayment for wight creation received from [email]:    ")+tValueEmail+T("\r\n") ) ;
            {
            else
            }
                etThread.delF( tinP , pstto ) ;
                etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/1d1/smtp/factories@admin.ideafarm.com/")+tValueEmail /* + T("///bcc@ideafarm.com") */ , T(pstto) ) ;

                etThread.delF( tinP , psttKey2 ) ;
                etThread.delF( tinP , psttKey1 ) ;

                etThread.strFuseF( tinP , pstto , T(posto4) ) ;
                etThread.strFuseF( tinP , pstto , psttKey2 ) ;
                etThread.strFuseF( tinP , pstto , T(posto3) ) ;
                etThread.strFuseF( tinP , pstto , psttKey1 ) ;
                etThread.strFuseF( tinP , pstto , T(posto2) ) ;
                etThread.strFuseF( tinP , pstto , TF2(idgHome&~NM_HIGH,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                etThread.strFuseF( tinP , pstto , T(posto1) ) ;
                etThread.strMakeF( tinP , LF , pstto , 0 , TUCK << 4 ) ; ___( pstto ) ;
                ZE( strokeS* , pstto ) ;

                ;

                    "\r\n"
                    "Follow the instructions on https://github.com/ideafarm/ipdos to install the above active key into your production IPDOS (tm) home."
                    "\r\n\r\n"
                    "  Best practice is to do this immediately so that you know that it works and how to do it, and then periodically, such as every other quarter."
                    "If the backup key is ever used, the active key will be immediately disabled, the backup key will become the active key, and a new backup key will be immediately dispensed."
                    "\r\n\r\n"
                    "  The backup key should be stored securely both on paper and on a thumb drive that is not used for any other purpose and is NEVER connected to a computer."
                    "The active key is to be stored electronically within the home as a setting."
                    "\r\n\r\n"
                    "In a typical installation of IPDOS (tm), there will be an unpaid or paid craftwork home, \"X:\\ideafarm.home.1\", and wo or more paid production homes, such as \"X:\\ideafarm.home.101\" and \"X:\\ideafarm.home.102\"."
                    "\r\n\r\n"
                    "  (On an unpaid home, all functions that require a key are disabled.)"
                    "  Each paid home has a globally unique idgHome, is activated, and is associated with an active key and a backup key."
                    "  If a computer has more than one such folder, each such home is either \"paid\" or \"unpaid\"."
                    "An IPDOS (tm) \"home\" is a folder, such as \"c:\\ideafarm.home.101\", on a personal computer's or server's disk or SSD storage."
                    "\r\n\r\n"
                    "Instructions:"
                    "\r\n\r\n"

                const osTextT* posto4 =

                ;

                    "\r\n\r\n"
                    "Backup key:"
                    "\r\n\r\n"

                const osTextT* posto3 =

                ;

                    "\r\n\r\n"
                    "Active key:"
                    "\r\n\r\n"

                const osTextT* posto2 =

                ;

                    "Global Home Id:    "
                    "\r\n\r\n"
                    "  For maximum security, delete this message after storing the keys; do not retain this message in your email archive."
                    "  There is no record of these keys in the global IPDOS (tm) system and, if you do not save them right now, they cannot be recovered."
                    "  This is your only opportunity to copy and paste these instructions and the following id and keys to secure storage."
                    "WARNING:"
                    "Subject: Confidential Notification from IDEAFARM.COM (delivery of keys to activate your IPDOS (tm) home)\r\n\r\n"

                const osTextT* posto1 =

                // IF BOTH KEYS ARE LOST, THERE IS NO WAY TO RECOVER ACCESS TO THE HOME'S IDENTITY IN THE SYSTEM AND, TO CONTINUE TO USE THE HOME, A NEW HOME IDENTITY MUST BE PURCHASED
                // IF PUBLIC KEY 2 IS EVER USED, IT WILL IMMEDIATELY DISABLE PUBLIC KEY 1, WILL BECOME THE ACTIVE KEY, AND A NEW BACKUP KEY WILL BE IMMEDIATELY DISPENSED
                // PUBLIC KEY 2 IS THE BACKUP KEY ; IT IS NEVER TO BE USED AND SHOULD BE SECURED SO THAT IT IS NEVER DISCLOSED
                // PUBLIC KEY 1 IS THE ACTIVE KEY AND IS USED BY PRESENTING THE IDGhOME VALUE AND THE KEY
                // THESE BINARY KEYS ARE DISPENSED TO THE PURCHASER IN BASE64 ENCODED TEXT
                //
                // USAGE SCENARIO

                //U: NOTIFY THE PURCHASER OF THESE PUBLIC KEYS HERE ; ONCE I DELETE THESE BLOBS, THERE IS NO WAY TO RECOVER THEM (THEY ARE NOT STORED ANYWHERE)

                etThread.traceF( tinP , T("[idjHomeIdg]:    ")+TF2(idgHome&~NM_HIGH,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                etThread.delF( tinP , pbPublicKey2 ) ;
                etThread.strEncodeBlobToRFC4648F( tinP , psttKey2 , pbPublicKey2 , cbPublicKey2 ) ; ___( psttKey2 ) ;
                ZE( strokeS* , psttKey2 ) ;

                etThread.delF( tinP , pbPublicKey1 ) ;
                etThread.strEncodeBlobToRFC4648F( tinP , psttKey1 , pbPublicKey1 , cbPublicKey1 ) ; ___( psttKey1 ) ;
                ZE( strokeS* , psttKey1 ) ;

                etThread.ifcCreateNewHomeF( tinP , idgHome , pbPublicKey1 , cbPublicKey1 , pbPublicKey2 , cbPublicKey2 ) ;
                ZE( countT , cbPublicKey2  ) ;
                ZE( byteT* , pbPublicKey2  ) ;
                ZE( countT , cbPublicKey1  ) ;
                ZE( byteT* , pbPublicKey1  ) ;
                ZE( countT , idgHome ) ;

                etThread.boxPutF( tinP , T("smtp.mailgun.org[admin]/1d1/smtp/factories@admin.ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Notification from Stripe\r\n\r\nPayment for home activation received from [email]:    ")+tValueEmail+T("\r\n") ) ;
            {
            if( bHome )

            boolT bHome = !etThread.strCompareF( tinP , tValueAmount , T("100") ) ;     //U:: 20240215@2015: THIS IS A WORKAROUND ; AWAITING ADVICE FROM STRIPE REGARDING HOW TO IDENTIFY THE PRODUCT PURCHASED
        {
        )
            && !etThread.strCompareF( tinP , tValueStatus , T("succeeded") )
            && !etThread.strCompareF( tinP , tValueObject , T("charge") )
            && !etThread.strCompareF( tinP , tValuePaid , T("true") )
            && !etThread.strCompareF( tinP , tValueCaptured , T("true") )
            && !etThread.strCompareF( tinP , tValueDescriptor , T("IDEAFARM.COM") )
            )
                !etThread.strCompareF( tinP , tValueAmount , T("200") )
                ||
                !etThread.strCompareF( tinP , tValueAmount , T("100") )
            (
            &&
            && !etThread.strCompareF( tinP , tValueAmount , tValueAmountCaptured )
            && !etThread.strCompareF( tinP , tValueType , T("charge.succeeded") )
               !etThread.strCompareF( tinP , tValueVersion , T("2023-10-16") )
        (
        if
        
        DEL( pSwPathValue ) ;
        
        }
            }
                etThread.delF( tinP , psttValue ) ;
        
                }
                    }
                        etThread.traceF( tinP , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                        *pptValue[ offe ] = T(psttValue) ;
                    {
                    if( !etThread.strCompareF( tinP , psttPath , *pptPath[ offe ] ) )
                {
                for( countT offe = 0 ; offe < cPaths ; offe ++ )
        
                if( cPaths - cValues ) { BLAMMO ; }
                countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
        
                etThread.traceF( tinP , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                etThread.traceF( tinP , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        
                strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                psttPath = (strokeS*)pSwPathValue->leverF( tinP , idf ) ;
        
                _IO_
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = pSwPathValue->cFlavorsF( tinP ) ;
        {
        if( !POOP )
        
        ;
        }
            &tPathType           ,
            &tPathLiveMode2      ,
            &tPathStatus         ,
            &tPathReceiptUrl     ,
            &tPathPaid           ,
            &tPathObject         ,
            &tPathLiveMode1      ,
            &tPathCurrency       ,
            &tPathCaptured       ,
            &tPathDescriptor     ,
            &tPathEmail          ,
            &tPathAmountCaptured ,
            &tPathAmount         ,
            &tPathVersion        ,
        {
        textC* pptPath[] =
        
        TN( tPathType           , "\"type\"/"                                                ) ;
        TN( tPathLiveMode2      , "\"livemode\"/"                                            ) ;
        TN( tPathStatus         , "\"data\"/\"object\"/\"status\"/"                          ) ;
        TN( tPathReceiptUrl     , "\"data\"/\"object\"/\"receipt_url\"/"                     ) ;
        TN( tPathPaid           , "\"data\"/\"object\"/\"paid\"/"                            ) ;
        TN( tPathObject         , "\"data\"/\"object\"/\"object\"/"                          ) ;
        TN( tPathLiveMode1      , "\"data\"/\"object\"/\"livemode\"/"                        ) ;
        TN( tPathCurrency       , "\"data\"/\"object\"/\"currency\"/"                        ) ;
        TN( tPathCaptured       , "\"data\"/\"object\"/\"captured\"/"                        ) ;
        TN( tPathDescriptor     , "\"data\"/\"object\"/\"calculated_statement_descriptor\"/" ) ;
        TN( tPathEmail          , "\"data\"/\"object\"/\"billing_details\"/\"email\"/"       ) ;
        TN( tPathAmountCaptured , "\"data\"/\"object\"/\"amount_captured\"/"                 ) ;
        TN( tPathAmount         , "\"data\"/\"object\"/\"amount\"/"                          ) ;
        TN( tPathVersion        , "\"api_version\"/"                                         ) ;
        
        ;
        }
            &tValueType           ,
            &tValueLiveMode2      ,
            &tValueStatus         ,
            &tValueReceiptUrl     ,
            &tValuePaid           ,
            &tValueObject         ,
            &tValueLiveMode1      ,
            &tValueCurrency       ,
            &tValueCaptured       ,
            &tValueDescriptor     ,
            &tValueEmail          ,
            &tValueAmountCaptured ,
            &tValueAmount         ,
            &tValueVersion        ,
        {
        textC* pptValue[] =
        
        TN( tValueType           , "" ) ;
        TN( tValueLiveMode2      , "" ) ;
        TN( tValueStatus         , "" ) ;
        TN( tValueReceiptUrl     , "" ) ;
        TN( tValuePaid           , "" ) ;
        TN( tValueObject         , "" ) ;
        TN( tValueLiveMode1      , "" ) ;
        TN( tValueCurrency       , "" ) ;
        TN( tValueCaptured       , "" ) ;
        TN( tValueDescriptor     , "" ) ;
        TN( tValueEmail          , "" ) ;
        TN( tValueAmountCaptured , "" ) ;
        TN( tValueAmount         , "" ) ;
        TN( tValueVersion        , "" ) ;
        
        __Z( pSwPathValue ) ;
        etThread.strParseJsonF( tinP , pSwPathValue , psttPath , (osTextT*)postBodyP , flSTACKc_null ) ;
        ZE( switchC* , pSwPathValue ) ;
        ZE( strokeS* , psttPath     ) ;

        etThread.traceF( tinP , T("\r\n---- postBodyP (END) -------------------------------------------------------------------\r\n") , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tinP , T(postBodyP)                                                                                          , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        etThread.traceF( tinP , T("\r\n---- postBodyP (BEGIN) -----------------------------------------------------------------\r\n") , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

        //THIS WORKS IN FIREFOX BROWSER: https://www.sandbox.stripe.com:443/cgi-bin/webscr?cmd=_notify-validate&mc_gross=1.00&protection_eligibility=Eligible&address_status=confirmed&payer_id=4QLHUR4EYW37J&address_street=1+Main+St&payment_date=15%3A55%3A04+Jun+04%2C+2020+PDT&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=John&mc_fee=0.33&address_country_code=US&address_name=John+Doe&notify_version=3.9&subscr_id=I-DEKU4NNTHS0H&payer_status=verified&business=sb-znjve1276155%40business.example.com&address_country=United+States&address_city=San+Jose&verify_sign=AS.sXmO3SZlbZsuBgmx57wrfjxyDAk855hu6vdRmhFRd0mqr2l3hMU7l&payer_email=sb-prtxq883780%40personal.example.com&txn_id=5W609239EF681420H&payment_type=instant&btn_id=4125335&last_name=Doe&address_state=CA&receiver_email=sb-znjve1276155%40business.example.com&payment_fee=0.33&receiver_id=755UKLGFJ8XU2&txn_type=subscr_payment&item_name=Wo'O's+Table+Registration+and+Subscription&mc_currency=USD&item_number=20200604&residence_country=US&test_ipn=1&transaction_subject=Wo'O's+Table+Registration+and+Subscription&payment_gross=1.00&ipn_track_id=5075e5b427054 HTTP/1.1
        //OLD FORMAT: GET /cgi-bin/webscr?cmd=_notify-validate&mc_gross=1.00&protection_eligibility=Eligible&address_status=confirmed&payer_id=4QLHUR4EYW37J&address_street=1+Main+St&payment_date=17%3A04%3A06+Jun+04%2C+2020+PDT&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=John&mc_fee=0.33&address_country_code=US&address_name=John+Doe&notify_version=3.9&subscr_id=I-1CXF383WH8P0&payer_status=verified&business=sb-znjve1276155%40business.example.com&address_country=United+States&address_city=San+Jose&verify_sign=AEHpL6M1JS9Z4r02TsvVIey5ocFqAgLcANkEe9kVFcJG4kqTWCtTJprq&payer_email=sb-prtxq883780%40personal.example.com&txn_id=1XX85736SF014420R&payment_type=instant&btn_id=4125335&last_name=Doe&address_state=CA&receiver_email=sb-znjve1276155%40business.example.com&payment_fee=0.33&receiver_id=755UKLGFJ8XU2&txn_type=subscr_payment&item_name=Wo%27O%27s+Table+Registration+and+Subscription&mc_currency=USD&item_number=20200604&residence_country=US&test_ipn=1&transaction_subject=Wo%27O%27s+Table+Registration+and+Subscription&payment_gross=1.00&ipn_track_id=92fb2ec1f693b HTTP/1.1
        //20200731@1556: CHANGED FROM HTTP/1.0 TO HTTP/1.1 WITHOUT ANALYSIS
    {
    boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;
    TN( tValidationReply   , "" ) ;
    TN( tValidationRequest , "" ) ;
    ZE( boolT , bGot ) ;
    ZE( boolT , bValid ) ;
{
/*1*/voidT noteFromStripeCBF( tinS& tinP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//

