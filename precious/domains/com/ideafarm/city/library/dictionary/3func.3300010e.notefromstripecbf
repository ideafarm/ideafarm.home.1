
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    }
        }
            etThread.traceF( tin0P , T("noteFromStripeCBF / booked  [nnPeer,costaBody]:    ")+T(nnPeerP)+T("    ")+TF2(costaBody,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            bksWebHookNoticesP.writeF( tin0P , (byteT*)pcHeader , sizeof pcHeader , postBodyP , costaBody , flBOOKScwRITE_ALLOWoDDlENGTH | flBOOKScwRITE_ALLoRnONE , 0 ) ;

            *(nicNameC*)&pcHeader[ 4 ] = nnPeerP ;
            putNegAM( pcHeader[ 0 ] , FINGERnEG_WEBhOOKnOTICES ) ;
            count02T pcHeader[] = { 0 , 1 , costaBody , fliWEBhOOKnOTICE_NEW , 0 , 0 , 0 , 0 } ;

            booksC& bksWebHookNoticesP = *(booksC*)((count8S*)cArgP)->c6 ;
            //etThread.traceF( tin0P , T("noteFromStripeCBF / booking [nnPeer,costaBody]:    ")+T(nnPeerP)+T("    ")+TF2(costaBody,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

            }
                }
                    }
                        etThread.traceF( tin0P , T("noteFromStripeCBF / [webHookNoticeType]:    ")+tType ) ;

                        *poste = ostSave ;
                        TN( tType , postv ) ;
                        *poste = 0 ;
                        osTextT ostSave = *poste ;
                    {
                    if( poste )
                    osTextT* poste = thirdC::c_strstrIF( tin0P , postv , "\"" ) ;
                    osTextT* postv = ++ postc ;                                                                         // THE 'c' AT THE BEGINNING OF "checkout.session.completed\""
                {
                if( postc = thirdC::c_strstrIF( tin0P , ++ postc , "\"" ) , postc )                                     // THE '"' AT THE BEGINNING OF "\"checkout.session.completed\""
            {
            if( postc = thirdC::c_strstrIF( tin0P , postc , "\"" ) , postc )                                            // THE '"' AT THE END OF "\"type\""
            postc = postTypeKeyLath ;

            // postTypeKeyLath NOW POINTS TO THE 't' IN THE LATH OCCURRANCE OF "\"type\":"
            while( postc = thirdC::c_strstrIF( tin0P , postc , "\"type\":" ) , postc ) postTypeKeyLath = ++ postc ;
            postc = postBodyP ;
            ZE( osTextT* , postTypeKeyLath ) ;

            //   |   },
            //   |   "type": "checkout.session.completed"
            //   | }

            }
                etThread.traceF( tin0P , T("noteFromStripeCBF / found an invoice number [nnPeer,costaBody,tInvoice]:    ")+T(nnPeerP)+tb4+TF2(costaBody,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tInvoice ) ;
                }
                    }
                        *poste = ostSave ;
                        tInvoice = T(postc) ;
                                          *poste = 0 ;
                        osTextT ostSave = *poste ;
                    {
                    if( poste ) ;
                    osTextT* poste = thirdC::c_strstrIF( tin0P , postc , "\"" ) ;
                {
                TN( tInvoice , "" ) ;
                postc ++ ;
                TN( tb4 , "    " ) ;
            {
            if( postc = thirdC::c_strstrIF( tin0P , postBodyP , "\"in_" ) , postc )
        {
        else
        }
            //etThread.traceF( tin0P , T("noteFromStripeCBF / claims to be gorilla [nnPeer,costaBody,tInvoice]:    ")+T(nnPeerP)+tb4+TF2(costaBody,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tInvoice ) ;
            }
                }
                    *poste = ostSave ;
                    tInvoice = T(postc) ;
                                      *poste = 0 ;
                    osTextT ostSave = *poste ;
                {
                if( poste ) ;
                osTextT* poste = thirdC::c_strstrIF( tin0P , postc , "\"" ) ;
            {
            TN( tInvoice , "" ) ;
            postc ++ ;
            TN( tb4 , "    " ) ;
        {
        else if( postc = thirdC::c_strstrIF( tin0P , postBodyP , "\"inv_gorilla_" ) , postc )
        else if( costaBody > ( TUCK << 6 )                                                  ) ;//etThread.traceF( tin0P , T("noteFromStripeCBF / body is too large [nnPeer,costaBody]:    "   )+T(nnPeerP)+T("    ")+TF2(costaBody,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
             if( !costaBody                                                                 ) ;//etThread.traceF( tin0P , T("noteFromStripeCBF / body is null length [nnPeer]:    "           )+T(nnPeerP)                                                                   ) ;
        ZE( osTextT* , postc ) ;

        const countT costaBody = 1 + thirdC::c_strlenIF( tin0P , postBodyP ) ;
    {
    else
    if( !postBodyP ) ;//etThread.traceF( tin0P , T("noteFromStripeCBF / no body [nnPeer]:    ")+T(nnPeerP) ) ;
{
/*1*/voidT noteFromStripeCBF( tin0S& tin0P , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , osTextT*& postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
