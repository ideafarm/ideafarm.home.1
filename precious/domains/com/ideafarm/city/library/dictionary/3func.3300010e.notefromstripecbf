
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    }
        //etThread.delF( tin0P , psttFile ) ;
        //etThread.boxPutUniqueF( tin0P , psttFile , tFolderRawIncoming+T("note.json") , postBodyP ) ;
        //ZE( strokeS* , psttFile ) ;
        //TN( tFolderRawIncoming , "" ) ; tFolderRawIncoming = T("///z/ideafarm.shared/precious/")+TfORsTRING(ifcIDaDAM_EATiNCOMINGoRDERS)+T("/raw.notices.1.incoming/") ;
        //U:: DELETE THIS AFTER TESTING

        bksWebHookNoticesP.writeF( tin0P , (byteT*)&c3s , sizeof c3s , postBodyP , costaBody , flBOOKScwRITE_ALLOWoDDlENGTH , 0 ) ;

        putNegAM( c3s.c1 , FINGERnEG_WEBhOOKnOTICES ) ;
        count3S c3s( 0 , 1 , costaBody ) ;

        booksC& bksWebHookNoticesP = *(booksC*)((count8S*)cArgP)->c6 ;
    {
    if( postBodyP && costaBody )
    const countT costaBody = !postBodyP ? 0 : 1 + thirdC::c_strlenIF( tin0P , postBodyP ) ;
{
/*1*/voidT noteFromStripeCBF( tin0S& tin0P , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , osTextT*& postBodyP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
