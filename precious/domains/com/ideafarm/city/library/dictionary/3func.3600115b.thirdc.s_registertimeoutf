
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return pks ;
    ((tin1S&)tin0P).pag1->_thirdC_.pSwKillSocket->ungrabF( tin0P ) ;
    }
        }
            pks->timeExpire2 = timeEN2 ;
            pks->timeExpire1 = timeEN1 ;
        {
        if( timeEN2 < pks->timeExpire2 || ( timeEN2 == pks->timeExpire2 && timeEN1 < pks->timeExpire1 ) )
        osTimeSubtractF( tin0P , timeEN1 , timeEN2 , pks->timeExpire1 , pks->timeExpire2 ) ;
        sCountT timeD2 = timeEN2 ;
        countT  timeD1 = timeEN1 ;
        osTimeAddIF( tin0P , timeEN1 , timeEN2 , time1P , time2P ) ;
        osTimeNowF(  tin0P , timeEN1 , timeEN2                   ) ;
        ZE( sCountT , timeEN2 ) ;
        ZE( countT  , timeEN1 ) ; //"en": "expire new"
    {
    else
    }
        osTimeAddIF( tin0P , pks->timeExpire1 , pks->timeExpire2 , time1P , time2P ) ;
        osTimeNowF(  tin0P , pks->timeExpire1 , pks->timeExpire2                   ) ;
    {
    if( !incv02AM( pks->cRef ) )
    pks = (killSocketS*)&(countT&)*((tin1S&)tin0P).pag1->_thirdC_.pSwKillSocket ;
    ((tin1S&)tin0P).pag1->_thirdC_.cLever_pSwKillSocket = (countT)&handleP ;
    ((tin1S&)tin0P).pag1->_thirdC_.pSwKillSocket->grabF( tin0P , TAG( TAGiDnULL ) ) ;
    ZE( killSocketS* , pks ) ;
    SCOOP
{
/*1*/killSocketS* thirdC::s_registerTimeoutF( tin0S& tin0P , const handleC& handleP , const countT time1P , const sCountT time2P )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

