
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.traceF( tin0P , T("bye") ) ;
etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

etThread.delF( tin0P , psttOut ) ;
etThread.traceF( tin0P , psttOut , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

    etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn ,                  flSTRdUMP_5bITS   , 0x20 , 8 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn ,                  flSTRdUMP_5bITS   , 0x20 , 8 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn ,                  flSTRdUMP_6bITS   , 8 , 4 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn ,                  flSTRdUMP_5bITS   , 8 , 4 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 8 , 4 , '@' , 2 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 8 , 4 , '@' , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 8 , 0 , '@' , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 0 , 0 , '@' , 0 ) ; ___( psttOut ) ;
//B:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 4 , 2 , '@' , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 4 , 2 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 4 , 0 , 0   , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 0 , 0 , '@' , 0 ) ; ___( psttOut ) ;
//G:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 0 , 0 , 0   , 0 ) ; ___( psttOut ) ;
//B:etThread.strDumpIF( tin0P , psttOut , postzIn , costzIn , flSTRdUMP_null /*flSTRdUMP_5bITS*/ , 8 , 4 , '@' , 0 ) ; ___( psttOut ) ;

ZE( strokeS* , psttOut ) ;

etThread.traceF( tin0P , tIn ) ;

countT   costzIn = tIn.csF( tin0P ) ;
osTextT* postzIn = tIn ;
//TN( tIn , "abcde" ) ;
TN( tIn , "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz" ) ;

TODO

/*1*/WAKEsHOWtEXT( "example.other.3func.35002179.etherc.strdumpif.encoding.blob.into.filename.string" )/*1*/
/**/

*/
 for applications where case is significant, strDumpIF, with the flSTRdUMP_6bITS flag, can produce a shorter encoding
 since this encoding is guaranteed to only contain digits and lower case alphabetics, it can be used in file names and for other case insensitive applications (which require that upper case be avoided)
i demonstrate how strDumpIF() can be used to obtain a radix 36_9 [0-9,a-z] encoding of an arbitrary blob
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
