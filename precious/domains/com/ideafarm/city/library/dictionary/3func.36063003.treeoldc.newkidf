
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    grab.ungrabF( tin0P ) ;

    }
        }
            ether.delF( tin0P , *(byteT**)&pKid ) ;
            hdr.pSwsKids->insertF( tin0P , (countT)pKid , ifcSTACKtYPE_BLOB , 0 , bLeftP ) ;
            psttLeverKidsShared = pCursor->psttLeverKids ;
            if( !pCursor->psttLeverKids ) wifeF( tin0P ) ;
            SET_psttLeverKids( pCursor )
            }
                }
                    }
                        ether.delF( tin0P , pKid->psttLeverKids ) ;
                        *pSoulP >> pKid->psttLeverKids ; //U::ELIMINATE THIS
                    {
                    if( F(flagsTreeWrite) & flTREEwRITE_psttLeverKids )

                    }
                        pKid->cLeverWife = save ;
        
                        }
                            }
                                *pSoulP >> *(strokeS**)&(countT&)*pKid->pSw_psttWife ;
                                cLeverWifeShared = pKid->cLeverWife ;
                                *pSoulP >> pKid->cLeverWife ;
                                pKid->cLeverWife = 0 ;
                            {
                            while( cFlavors -- )
        
                            *pSoulP >> cFlavors ;
                            ZE( countT , cFlavors ) ;
                        {
                        if( pKid->pSw_psttWife )
                        ether( tin0P , pKid->pSw_psttWife , TAG( TAGiDnULL ) , flagsSwitch , cLeverWifeShared , sw_pCursor.pLeverLathRefF( tin0P ) ) ;
        
                        const countT save = pKid->cLeverWife ;
                    {
                    if( F(flagsTreeWrite) & flTREEwRITE_pSw_psttWife )
        
                    }
                        *pSoulP >> pKid->cLeverWife ;
                    {
                    if( F(flagsTreeWrite) & flTREEwRITE_cLeverWife )
        
                    *pSoulP >> flagsTreeWrite ;
                    ZE( flagsT , flagsTreeWrite ) ;
                {
                if( pSoulP )
    
                (*pBranchDefinitionCBF)( tin0P , ether , ifcIDtYPEtREEbRANCHdEFINITIONoLDcb_NEW , flTREEwALK_null , handle , (byteT*)( pKid + 1 ) , cbd , cArg ) ;

                handle.osF( ifcIDtYPEhANDLE_TREEwALK , (countT)pKid ) ;
                handleC handle( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_TREEwALK ) ;

                countT cArg = (countT)psttP ;
                new( 0 , tin0P , (byteT*)pKid , sizeof( branchHeaderOldS ) ) branchHeaderOldS( &hdr ) ;
            {
            if( pKid )
            ether.newF( tin0P , LF , *(byteT**)&pKid , sizeof( branchHeaderOldS ) + cbd ) ; ___( pKid ) ;
            ZE( branchHeaderOldS* , pKid ) ;
        {
        if( hdr.pSwsKids && hdr.pSw_psttWife && hdr.pSw_idKidLathHugged )

        if( !hdr.pSwsKids            ) { ether( tin0P , hdr.pSwsKids            , TAG( TAGiDnULL ) , flagsSwitch , psttLeverKidsShared , flagsStack | flSTACKc_BLOB , sizeof( branchHeaderOldS ) + cbd , sw_pCursor.pLeverLathRefF( tin0P ) ) ; }
        if( !hdr.pSw_idKidLathHugged ) { ether( tin0P , hdr.pSw_idKidLathHugged , TAG( TAGiDnULL ) , flagsSwitch , psttLeverKidsShared , sw_pCursor.pLeverLathRefF( tin0P ) ) ; }
        if( !hdr.pSw_psttWife        ) { ether( tin0P , hdr.pSw_psttWife        , TAG( TAGiDnULL ) , flagsSwitch , cLeverWifeShared    , sw_pCursor.pLeverLathRefF( tin0P ) ) ; }
        branchHeaderOldS& hdr = *pCursor ;
    {
    else
    }
        }
            }
                }
                    ether.delF( tin0P , pRoot->psttLeverKids ) ;
                    *pSoulP >> pRoot->psttLeverKids ; //U::ELIMINATE THIS
                {
                if( F(flagsTreeWrite) & flTREEwRITE_psttLeverKids )

                }
                    pRoot->cLeverWife = save ;

                    }
                        }
                            *pSoulP >> *(strokeS**)&(countT&)*pRoot->pSw_psttWife ;
                            cLeverWifeShared = pRoot->cLeverWife ;
                            *pSoulP >> pRoot->cLeverWife ;
                            pRoot->cLeverWife = 0 ;
                        {
                        while( cFlavors -- )

                        *pSoulP >> cFlavors ;
                        ZE( countT , cFlavors ) ;
                    {
                    if( pRoot->pSw_psttWife )
                    ether( tin0P , pRoot->pSw_psttWife , TAG( TAGiDnULL ) , flagsSwitch , cLeverWifeShared , sw_pCursor.pLeverLathRefF( tin0P ) ) ;

                    const countT save = pRoot->cLeverWife ;
                {
                if( F(flagsTreeWrite) & flTREEwRITE_pSw_psttWife )

                }
                    *pSoulP >> pRoot->cLeverWife ;
                {
                if( F(flagsTreeWrite) & flTREEwRITE_cLeverWife )

                *pSoulP >> flagsTreeWrite ;
                ZE( flagsT , flagsTreeWrite ) ;
            {
            if( pSoulP )
    
            (*pBranchDefinitionCBF)( tin0P , ether , ifcIDtYPEtREEbRANCHdEFINITIONoLDcb_NEW , flTREEwALK_null , handle , (byteT*)( pRoot + 1 ) , cbd , cArg ) ;
            countT cArg = (countT)(strokeS*)tRoot ;

            handle.osF( ifcIDtYPEhANDLE_TREEwALK , (countT)pRoot ) ;
            handleC handle( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_TREEwALK ) ;
    
            TN( tRoot , "" ) ; tRoot = T(psttP) ;

            new( 0 , tin0P , (byteT*)pRoot , sizeof( branchHeaderOldS ) ) branchHeaderOldS( 0 ) ;
            PcURSOR
        {
        if( pRoot )
        ether.newF( tin0P , LF , *(byteT**)&pRoot , sizeof( branchHeaderOldS ) + cbd ) ; ___( pRoot ) ;
    {
    if( !pCursor )
    PcURSOR

    *sw_pCursor.pLeverLathRefF( tin0P ) = cLeverCursor ;
    grab.grabF( tin0P , TAG( TAGiDnULL ) ) ;
{
/*1*/voidT treeOldC::newKidF( tin0S& tin0P , const strokeS* const psttP , soulC* pSoulP , const boolT bLeftP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

