
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    }
        }
            ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        if( !cIn )
        TELL( "taking my cycle nap" ) ;

        }
            etThread.delF( tinBaseP , pstt1m ) ;
            }
                etThread.osThreadF( tinBaseP , countTC() , tmSuperF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)psttFile , ++ idFile , (countT)&bFace ) ;
                etThread.diskMoveFileOrDirF( tinBaseP , psttFile , psttc1 ) ;
                etThread.strMakeF( tinBaseP , LF , psttFile , tStage2+TI(ifcIDtEXTgEN_UNIQUE) ) ; ___( psttFile ) ;
                ZE( strokeS* , psttFile ) ;
            {
            FORsTRINGSiN1( pstt1m )
            etThread.boxMenuF( tinBaseP , soul1m , tStage1+tStar ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        TELL( "promoting each stage 1 file to stage 2 and launching a supervisor thread for it" ) ;

        }
            etThread.delF( tinBaseP , pstt1m ) ;
            FORsTRINGSiN1( pstt1m ) etThread.diskMoveFileOrDirF( tinBaseP , tStage1+TI(ifcIDtEXTgEN_UNIQUE) , psttc1 ) ;
            cIn = etThread.boxMenuF( tinBaseP , soul1m , tIn+tStar ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;
        {
        ZE( countT , cIn ) ;
        TELL( "moving new job files into the stage 1 directory" ) ;

        bFace.ungrabF( tinBaseP ) ;
        etThread.strokeF( tinBaseP , T("\r")+TT(timeN1,timeN2) ) ;
        bFace.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
        TN( tStage2  , "" ) ; tStage2 = T("///ideafarm/ephemeral/domains/com/ideafarm/")+T(DDNUMB)+T("/2/") ;
        TN( tStage1  , "" ) ; tStage1 = T("///ideafarm/ephemeral/domains/com/ideafarm/")+T(DDNUMB)+T("/1/") ;
        etThread.osTimeNowF( tinBaseP , timeN1 , timeN2 ) ;
        ZE( sCountT , timeN2 ) ;
        ZE( countT , timeN1 ) ;
    {
    while( !ether && !etThread )
    TN( tIn , "" ) ; tIn = T("///ideafarm/ephemeral/domains/com/ideafarm/")+T(DDNUMB)+T("/in/" ) ;
    strokeS sttr('-') ;
    TN( tStar    , "*" ) ;
    ZE( countT , idFile ) ;

    boxC boxDebug( tinBaseP , etThread , T("///ideafarm/ephemeral/domains/com/ideafarm/debug/")+TF1(DDNUMB) ) ; //U::WORKAROUND TO PREVENT LOCKUP
    stateS state( tinBaseP , etThread ) ;
    TELL( "setting up" )
{
batonC bFace( tinBaseP , TAG( TAGiDnULL ) ) ;

//U::HIRE( T("mail.out") , 0 , 0x1000000 , 0 , 0x1000000 )
//{ countT idAdam = 0x40104c5 ; etThread.ifcHireF( tinBaseP , T("port..expireTime") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
//{ countT idAdam = 0x40104b8 ; etThread.ifcHireF( tinBaseP , T("port..expireTime") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
HIRE( T("mail.out") , 0x4010418 , 0x1000000 , 0 , 0x1000000 )
//ENABLE WHEN WANT GORILLA TESTERS TO BE ACTIVE

//{ countT idAdam = 0x401048c ; etThread.ifcHireF( tinBaseP , T("port..expireTime") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
//ENABLE WHEN AM EDITING THE SITE OR THE DICTIONARY

TELL( "preparing for work" ) ;
etThread.winSetTitleF( tinBaseP , TF1(DDNUMB) ) ; //U::
TODO

DONE( tmSuperF )
}
    doWoF( tinBaseP , etThread , psttFile , idFile , bFace ) ;

    batonC&  bFace    = *(batonC*)pTaskP->c3 ;
    countT   idFile   =           pTaskP->c2 ;
    strokeS* psttFile = (strokeS*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmSuperF )

}
    etThread.delF( tinBaseP , psttFileP ) ;
    etThread = 0 ;
    etThread.boxZapF( tinBaseP , psttFileP ) ;
    TELL( "deleting a new job file" ) ;

    etThread.delF( tinBaseP , posti ) ;
    etThread.delF( tinBaseP , psttu ) ;
    etThread.boxPutUniqueF( tinBaseP , psttu , T("///ideafarm/ephemeral/domains/com/ideafarm/")+T(DDNUMB)+T(bFail?"/tryLater":"/aok")+T("/item") , posti , costi ) ;
    ZE( strokeS* , psttu ) ;
    TELL( "archiving a new job file to aok" )

    etThread.strokeF( tinBaseP , T("\r\n")+TF1(idFileP)+T("| ")+T(psttFileP)+T(bFail?": TRYlATER\r\n":": AOK\r\n") ) ;
    boolT bFail = mailItemF( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , T(posti) ) ;
    TELL( "handling a new job file" )

    etThread.boxGetShadowF( tinBaseP , posti , costi , psttFileP ) ; ___( posti ) ;
    ZE( countT   , costi ) ;
    ZE( osTextT* , posti ) ;
    bFaceP.ungrabF( tinBaseP ) ;
    etThread.strokeF( tinBaseP , T("\r\n")+TF1(idFileP)+T("| ")+T(psttFileP)+T(": BEGUN\r\n") ) ;
    bFaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    TELL( "reading a new job file" ) ;
{
voidT doWoF( tin0S& tinBaseP , etherC& etThread , strokeS* psttFileP , const countT idFileP , batonC& bFaceP )

}
    return bFail ;
    if( bFail ) *((tin9S&)tinBaseP).zEtScratch = 0 ;
    boolT bFail = !!*((tin9S&)tinBaseP).zEtScratch ;
    //((tin9S&)tinBaseP).zEtScratch->ifcSayF( tinBaseP , TF1(DDNUMB)+T("/hired ")+TF1(ifcIDaDAMoLD_MAILcLERK)+T(" to do a !mailOut job") , flSAY_APPEND | flSAY_LOG ) ;
    ((tin9S&)tinBaseP).zEtScratch->ifcJobF( tinBaseP , stCourses , ifcIDaDAMoLD_MAILcLERK , sOrder , stOrders , TF1(DDNUMB)+T("mail.out/!mailOut/")+TF1((countT)st_psttTo) , 1 ) ;
    //((tin9S&)tinBaseP).zEtScratch->ifcSayF( tinBaseP , TF1(DDNUMB)+T("/hiring ")+TF1(ifcIDaDAMoLD_MAILcLERK)+T(" to do a !mailOut job") , flSAY_APPEND | flSAY_LOG ) ;
    stOrders << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
    stackC stOrders(  tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
    stackC stCourses( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;

    ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttBody ) ;
    sOrder << psttBody ;

    }
        ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttTo ) ;
        sOrder << psttTo ;
        st_psttTo >> psttTo ;
        ZE( strokeS* , psttTo ) ;
    {
    while( st_psttTo )
    sOrder << (countT)st_psttTo ;

    sOrder << (countT)1 ;
    sOrder << (strokeS*)tJob ;
    soulC sOrder( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_NAMED ) ;

    TN( tJob , "!mailOut" ) ;

    ((tin9S&)tinBaseP).zEtScratch->strConcatenateF( tinBaseP , psttBody , st_psttLines , T("\r\n") ) ; ___( psttBody ) ;
    ZE( strokeS* , psttBody ) ;

    }
        }
            ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttw1 ) ;
            else                                                ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttl ) ;
            if( ((tin9S&)tinBaseP).zEtScratch->strCompareF( tinBaseP , psttw1 , tBcc ) ) st_psttLines << psttl ;

            }
                else                                                                       ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttw2 ) ;
                if( psttw2 && psttw2->idAdam && ((tin9S&)tinBaseP).zEtScratch->strIdF( tinBaseP , sttAt , psttw2 ) ) st_psttTo << psttw2 ;
                ((tin9S&)tinBaseP).zEtScratch->strTrimF( tinBaseP , psttw2 , 0 , T(TbLACKnEWlINE) , T(" ") ) ; ___( psttw2 ) ;                                  // "abc@foobar.com"

                }
                    psttw2 = psttw3 ;
                    ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttw2 ) ;
                    ((tin9S&)tinBaseP).zEtScratch->strSubstringF( tinBaseP , psttw3 , idf3 , sttq3 , sttGT , psttw2 ) ; ___( psttw3 ) ;         // " abc@foobar.com "
                    ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttw3 ) ;
                    ((tin9S&)tinBaseP).zEtScratch->strSubstringF( tinBaseP , psttw3 , idf3 , sttq3 , sttLT , psttw2 ) ; ___( psttw3 ) ;         // " \"Anthony B. Cullen\" "
                    ZE( strokeS* , psttw3 ) ;
                    strokeS sttq3( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf3 = 1 ;
                {
                if( idLT && idLT < idGT )
                countT idGT = ((tin9S&)tinBaseP).zEtScratch->strIdF( tinBaseP , sttGT , psttw2 ) ;
                countT idLT = ((tin9S&)tinBaseP).zEtScratch->strIdF( tinBaseP , sttLT , psttw2 ) ;
                ((tin9S&)tinBaseP).zEtScratch->strWordF( tinBaseP , psttw2 , psttl , sttq , sttColon , 2 ) ; ___( psttw2 ) ;                    // " \"Anthony B. Cullen\" < abc@foobar.com > "
                ZE( strokeS* , psttw2 ) ;
                //sttq = ze ;
            {
            if( !((tin9S&)tinBaseP).zEtScratch->strCompareF( tinBaseP , psttw1 , tTo ) || !((tin9S&)tinBaseP).zEtScratch->strCompareF( tinBaseP , psttw1 , tBcc ) || !((tin9S&)tinBaseP).zEtScratch->strCompareF( tinBaseP , psttw1 , tCc ) )

            ((tin9S&)tinBaseP).zEtScratch->strConvertToLowerCaseF( tinBaseP , psttw1 ) ; ___( psttw1 ) ;                                     // "to"
            ((tin9S&)tinBaseP).zEtScratch->strTrimF( tinBaseP , psttw1 , 0 , T(TbLACKnEWlINE) , T(" ") ) ; ___( psttw1 ) ;                                  // "TO"
            ((tin9S&)tinBaseP).zEtScratch->strWordF( tinBaseP , psttw1 , psttl , sttq , sttColon , 1 ) ; ___( psttw1 ) ;                    // " TO "
            ZE( strokeS* , psttw1 ) ;
            //sttq = ze ;

            if( !psttl ) break ;
            ((tin9S&)tinBaseP).zEtScratch->strSubstringLineF( tinBaseP , psttl , idf , sttq , psttP ) ; ___( psttl ) ;
            ZE( strokeS* , psttl ) ;
        {
        while( !*((tin9S&)tinBaseP).zEtScratch && idf )
        countT idf = 1 ;
        TN( tBcc , "bcc" ) ;
        TN( tCc  , "cc" ) ;
        TN( tTo  , "to" ) ;
        strokeS sttGT('>') ;
        strokeS sttLT('<') ;
        strokeS sttAt('@') ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        strokeS sttColon(':') ;

        }
            st_psttLines << psttl ;

            }
                psttl = psttOldC( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , T("from: \"Oo'o Ideafarm\" <" ifcEMAIL_OLDfROM ">") ) ; ___( psttl ) ;
                ((tin9S&)tinBaseP).zEtScratch->delF( tinBaseP , psttl ) ;
            {
            if( ((tin9S&)tinBaseP).zEtScratch->diskIdF( tinBaseP , T("///c") ) == 0x2c1f032d )

            strokeS* psttl = psttOldC( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , T("from: \"Wo'O Ideafarm\" <" ifcEMAIL_OLDfROM ">") ) ; ___( psttl ) ;
        {
    {
    stackC st_psttLines( tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    stackC st_psttTo(    tinBaseP , *((tin9S&)tinBaseP).zEtScratch , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
{
boolT mailItemF( tin0S& tinBaseP , const strokeS* const psttP )

}
{
stateC( tinBaseP , etherP , sizeof *this , 0 , translateStateF )
stateS::stateS( tin0S& tinBaseP , etherC& etherP ) :

TRANSLATEsTATE_END
    state.idMe ++ ;
TRANSLATEsTATE_MIDDLE
               state.idTransLast = stateOther.idTransLast ; }
    case 1 : { state.idMe        = stateOther.idMe        ;
TRANSLATEsTATE_BEGIN( stateS , 1 )

;
}
    stateS( tin0S& tinBaseP , etherC& etherP ) ;

    countT idTransLast ;
    countT idMe ;
    countT idVersion ;
{
struct stateS : public stateC

    "i am 1440104, made by Wo'O Ideafarm.  i am now on the job\r\n"
    "\r\n"                                                                                                                          \
    "subject: 1440104 has been hired to handle your outgoing mail\r\n"                                                              \
    "to: " ifcEMAIL_OLDfROM "\r\n"                                                                                                        \
                                                                                                                                    \
#define postSEASONtHEpAN                                                                                                            \

/*1*/WAKEhIDE( "mail.out" )/*1*/
/**/
*/
   f340104/smtp   : delivers text item to smtp server via telnet
  f340104/f340104 : initiate and supervise jobs that each specify the recipients for wo smtp server
 1440104/f340104  : initiate and supervise a job that specifies all recipients
 human/1440104    : places text file into a new file with an arbitrary name into "///ideafarm/ephemeral/backed.up.daily/mailOut/new/"
pseudocode for how an outgoing mail item destined for nnn@i deafarm.com is handled
i am hardcoded to work only for " ifcEMAIL_OLDfROM "
i mail out each file that appears
i continuously watch for the appearance of files in a particular directory
i mail out email
\<A HREF=\"5.1440104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

