
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        cbP = 0 ;
        ether.delF( tin0P , pbP ) ;
    {
    if( POOP )

    else __1
    }
        else __1
        }
            }
                ether.memCopyF( tin0P , pbP , pbNapkin , cbP ) ;
                ether.newF( tin0P , LF , pbP , cbP ) ; ___( pbP ) ;
                if( !POOP ) cbP = cbNapkin ;
                __( cbP ) ;
                countT cbNapkin = *(countT*)( pbNapkin - sizeof(countT) ) ;
            {
            if( pbNapkin )
        {
        else if( !ether.strCompareF( tin0P , psttType , T("napkin.make") ) || !ether.strCompareF( tin0P , psttType , T("napkin") ) )
        }
            if( !ether && pHoseProcessError ) { pHoseProcessError->getF( tin0P , pbP , cbP ) ; ___( pbP ) ; }
        {
        else if( !ether.strCompareF( tin0P , psttType , T("process.error") ) )
        }
            if( !ether && pHoseProcessOut ) { pHoseProcessOut->getF( tin0P , pbP , cbP ) ; ___( pbP ) ; }
        {
        else if( !ether.strCompareF( tin0P , psttType , T("process.out") ) )
        }
        {
        else if( !ether.strCompareF( tin0P , psttType , T("process.in") ) )
        }
        {
        else if( !ether.strCompareF( tin0P , psttType , T("process") ) )
        }
            #endif
                }
                    else break ;
                    }
                        }
                            ++ s ; ether.osSleepF( tin0P ) ;
                            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                        {
                        ether = 0 ;
                    {
                    if( POOP )
                    pBatHPC->ungrabF( tin0P ) ;
                    ether.fileReadF( tin0P , pbP , cbP , hHoseCommand ) ;
                    pBatHPC->grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( !ether )
                if( !POOP ) pbP[ cbP ] = 0 ;
                ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
                }
                    else break ;
                    }
                        }
                            ++ s ; ether.osSleepF( tin0P ) ;
                            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                        {
                        ether = 0 ;
                    {
                    if( POOP )
                    pBatHPC->ungrabF( tin0P ) ;
                    ether.fileReadF( tin0P , (byteT*)&cbP , cb1 , hHoseCommand ) ;
                    countT cb1 = sizeof cbP ;
                    pBatHPC->grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( !ether )
                //U:ASSUME: MESSAGES ARE SMALL ENOUGH THAT FILE POINTER WILL NEVER BE MOVED UNLESS THE ENTIRE MESSAGE CAN BE READ
                //U:NT: ENHANCE THIS CODE TO IMPLEMENT cbP == -1 I.E. CLIENT DOES NOT KNOW HOW MANY BYTES IT WILL WRITE TO THIS HOSE
            #elif defined( __NT__ )
                ether.fileReadF( tin0P , pbP , cbP , handle , fStupidClient ) ;
                }
                    else                pbP[ cbP ] = 0 ;
                    if( fStupidClient ) ether.memSetF( tin0P , pbP , cbP + 1 ) , *pbP = '\xDB' ;
                {
                if( !ether && pbP )
                ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
                if( cbP == - 1 ) fStupidClient = 1 , cbP = CBlIMITfROMsTUPIDcLIENT ;
                ether.fileReadF( tin0P , (byteT*)&cbP , cb1 , handle ) ;
                countT cb1 = sizeof cbP ;
                ZE( boolT , fStupidClient ) ;
            #ifdef __OS2__
            _IO_
        {
        else if( !ether.strCompareF( tin0P , psttType , T("tap") ) )
        }
            #endif
                }
                    else break ;
                    }
                        }
                            ++ s ; ether.osSleepF( tin0P ) ;
                            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                        {
                        ether = 0 ;
                    {
                    if( POOP )
                    pBatHPR->ungrabF( tin0P ) ;
                    ether.fileReadF( tin0P , pbP , cbP , hHoseReply ) ;
                    pBatHPR->grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( !ether )
                if( !POOP ) pbP[ cbP ] = 0 ;
                ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
                }
                    else break ;
                    }
                        }
                            ++ s ; ether.osSleepF( tin0P ) ;
                            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                        {
                        ether = 0 ;
                    {
                    if( POOP )
                    pBatHPR->ungrabF( tin0P ) ;
                    ether.fileReadF( tin0P , (byteT*)&cbP , cb1 , hHoseReply ) ;
                    countT cb1 = sizeof cbP ;
                    pBatHPR->grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                while( !ether )
                //U:ASSUME: MESSAGES ARE SMALL ENOUGH THAT FILE POINTER WILL NEVER BE MOVED UNLESS THE ENTIRE MESSAGE CAN BE READ
            #elif defined( __NT__ )
                ether.fileReadF( tin0P , pbP , cbP , handle ) ;
                if( !POOP ) pbP[ cbP ] = 0 ;
                ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
                ether.fileReadF( tin0P , (byteT*)&cbP , cb1 , handle ) ;
                countT cb1 = sizeof cbP ;
            #ifdef __OS2__
        {
        else if( !ether.strCompareF( tin0P , psttType , T("hose") ) )
        }
            }
                }
                    cbP = 0 ;
                    ether.delF( tin0P , pbP ) ;
                {
                if( POOP )

                ether.fileReadF( tin0P , pbP , cbP , handle ) ;
                }
                    }
                        ether.delF( tin0P , psttMapped ) ;
                        _IO_
                    {
                    ether.fileOpenF( tin0P , handle , flagsResult , psttMapped , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_FAIL | flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , 0 , 0 , 0 , cOpenTries ) ;
                    ether.diskMakeDirIfNeededF( tin0P , psttMapped ) ;
                    ZE( countT , flagsResult ) ;
                    ether.diskMapFileNameF( tin0P , psttMapped , psttAll ) ; ___( psttMapped ) ;
                    ZE( strokeS* , psttMapped ) ;
                {
                if( !handle )
                _IO_
            {
            if( cbP )
            if( pbP ) pbP[ cbP ] = 0 ;
            if( !POOP ) { ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ; }
            cbP = cbFileF( tin0P ) ;
        {
        if( psttType && !psttType->idAdam )
        __NZ( cbP ) ;
        _IO_
    {
    else if( !psttHost->idAdam )
    }
        so.writeF( tin0P , soulo2 ) ;
        soulC soulo2( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_BYE ) ;

        souli.shiftRightF( tin0P , pbP , cbP , ifcIDtYPEsOULiTEM_byteTptr ) ; ___( pbP ) ;
        __( idCmd - ifcIDcMDsESSION_GETfYLErEPLY ) ;
        souli >> idCmd ;
        ZE( countT , idCmd ) ;
        so.readF( tin0P , souli ) ;
        soulC souli( tin0P , TAG( TAGiDnULL ) ) ;

        so.writeF( tin0P , soulo ) ;
        so.connectF( tin0P , ifcPORToLD2_CHAT , socketC::nicNameIF( tin0P , ether , T(WWWiDEAFARMcOM) ) ) ;
        socketC so( tin0P , ether , TAG( TAGiDnULL ) ) ;

        soulo << psttName ;
        soulC soulo( tin0P , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDsESSION_GETfYLE ) ;
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttType , T("fyle") ) )
    }
        }
            }
                }
                    ether.delF( tin0P , pstti ) ;
                    _IO_
                {
                cbP = ether.strMakeF( tin0P , LF , pbP , pstti ) ; ___( pbP ) ;
                pSControl->readWoMultilineF( tin0P , pstti , T(".") , 0x10000 ) ; ___( pbP ) ; //U: csttEstimateP
                ZE( strokeS* , pstti ) ;
            {
            if( !POOP )
            //U: info.fZombie = 0 ;
            verifyReplyF( tin0P , 215 ) ;
            pSControl->writeF( tin0P , (osTextT*)T("list newsgroups\r\n") ) ;

            //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
            infoBoxGetPutS info( tin0P , ether , *pSControl ) ;

            __( cbP ) ;
            _IO_
        {
        else
        }
            }
                }
                    ether.delF( tin0P , pstti ) ;
                    _IO_
                {
                cbP = ether.strMakeF( tin0P , LF , pbP , pstti ) ; ___( pbP ) ;
                pSControl->readWoMultilineF( tin0P , pstti , T(".") , 0x10000 ) ; ___( pbP ) ; //U: csttEstimateP
                ZE( strokeS* , pstti ) ;
                _IO_
            {
            if( !POOP )
            //U: info.fZombie = 0 ;
            verifyReplyF( tin0P , 220 ) ;
            }
                ether.delF( tin0P , psttIdWanted ) ;
                _IO_
            {
            { textC txt = T("article ")+T(psttIdWanted)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }

            //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
            infoBoxGetPutS info( tin0P , ether , *pSControl ) ;

            }
                ether.strFromF( tin0P , psttIdWanted , idWanted , flFORMAT_NObASE|flFORMAT_FOREIGN , 0 , 10 ) ; ___( psttIdWanted ) ;
                cbP = 0 ;
                __Z( idWanted ) ;
                sCountT idWanted = cbP ;
                _IO_
            {
            ZE( strokeS* , psttIdWanted ) ;
            _IO_
        {
        if( psttName && psttName->idAdam )
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttType , T("news") ) && pSControl )
    }
        }
            }
                ether.delF( tin0P , pstti ) ;
                _IO_
            {
            cbP = ether.strMakeF( tin0P , LF , pbP , pstti ) ; ___( pbP ) ;
            pSControl->readWoMultilineF( tin0P , pstti , T(".") , 0x10000 ) ; ___( pbP ) ; //U: csttEstimateP
            ZE( strokeS* , pstti ) ;
            _IO_
        {
        if( !POOP )

        //U: info.fZombie = 0 ;
        verifyReplyF( tin0P ) ;
        }
            ether.delF( tin0P , psttIdWanted ) ;
            _IO_
        {
        else { textC txt = T("retr ") + T(psttIdWanted) + T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
        }
            }
                ether.delF( tin0P , psttTop ) ;
                _IO_
            {
            { textC txt = T("top ") + T(psttIdWanted) + T(" ") + T(psttTop) + T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
            _IO_
        {
        if( psttTop )
        //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
        infoBoxGetPutS info( tin0P , ether , *pSControl ) ;

        }
            ether.strFromF( tin0P , psttIdWanted , idWanted , flFORMAT_NObASE|flFORMAT_FOREIGN , 0 , 10 ) ; ___( psttIdWanted ) ;
            cbP = 0 ;
            __Z( idWanted ) ;
            }
                ether.strMakeF( tin0P , LF , psttTop , T("200") ) ; ___( psttTop ) ;
                idWanted = - idWanted ;
            {
            if( idWanted < 0 )
            sCountT idWanted = cbP ;
        {
        ZE( strokeS* , psttTop ) ;
        ZE( strokeS* , psttIdWanted ) ;
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttType , T("pop") ) && pSControl )
    }
        //THREADmODE4rESTORE
        }
            __( bFail ) ;
            }
                }
                    bFail = 1 ;
                    POOPR
                {
                if( POOP )

                while( !ether && ( bNoQuitEarly || ( cTries && -- cTries ) ) ) ; // thirdC::thPrimeIF( tin0P ) IS NOT CHECKED HERE BECAUSE IT WOULD HANG IF I AM CALLED DURING TERMINATION, AFTER thPrimeIF HAS BEEN DESTROYED
                }
                    TESTsCRATCH //U:: TO FIND A BUG
                    }
                        }
                            ++ s ; ether.osSleepF( tin0P ) ;
                            ether.traceF( tin0P , T("boxC::getF / napping for a wink") ) ;
                        {
                        if( bNoQuitEarly || cTries > 1 )

                        }
                            ether.traceF( tin0P , T("boxC::getF / could not replace socket and connect") ) ;
                            POOPRqUIET
                        {
                        if( POOP )

                        }
                            pSControl->connectF( tin0P , /*port 80*/idPort , hidIfo , cOpenTries ) ;
                            nicNameC hidIfo = socketC::nicNameIF( tin0P , ether , psttHost->idAdam ? psttHost : 0 ) ;
                        {
                        if( !POOP )

                        pSControl->etherF( tin0P , *((tin1S&)tin0P).pEtScratch ) ;

                        __Z( pSControl ) ;
                        pSControl = new( 0 , tin0P , LF ) socketC( tin0P , ether , TAG( TAGiDnULL ) , 0 , bHttps ? flSOCKETc_CRYPTfOREIGNsSL : flSOCKETc_null , 0 , countTC( timeAllowed1 ) , countTC( timeAllowed1 ) , countTC( timeAllowed1 ) ) ; ___( pSControl ) ;
                        //PSEUDOdUPLICATEcODE: 36007001 36007005

                        DEL( pSControl ) ;

                        pSControl->etherF( tin0P , etSave ) ;

                        POOPRqUIET
                        _IO_
                    {
                    else
                    }
                        break ;
                        pSControl->etherF( tin0P , etSave ) ;
                    {
                    if( !POOP && !bFail )

                    ether.delF( tin0P , postHeadPlus ) ;
                    }
                        TESTsCRATCH //U:: TO FIND A BUG

                        //ether.traceF( tin0P , T("getF [name]:    ")+T(psttNameP) , flTRACE_null , ifcIDtRACEdIVERT_7 ) ; //U:: TO FIND A BUG

                        }
                            }
                                if( pbP ) pbP[ costBody ] = 0 ;

                                }

                                    }
                                        #endif

                                            }
                                                }
                                                    }
                                                        if( !pSControl->readF( tin0P , &ostWo , 1 ) ) { BLAMMO ; } ; // '\n'
                                                        if( !pSControl->readF( tin0P , &ostWo , 1 ) ) { BLAMMO ; } ; // '\r'

                                                        }
                                                            }
                                                                costDo   -= costGot ;
                                                                cbP += costGot ;
                                                            {
                                                            if( !POOP )

                                                            __Z( costGot ) ;
                                                            countT costGot = pSControl->readF( tin0P , pbP + cbP , costDo ) ;
                                                        {
                                                        while( costDo && !POOP )

                                                        if( !pSControl->readF( tin0P , &ostWo , 1 ) ) { BLAMMO ; } ; // '\n'
                                                        osTextT ostWo ;
                                                    {
                                                    else
                                                    if( !costDo ) break ;

                                                    offl = - 1 ;
                                                    countT costDo = ether.strDigitsToSCountF( tin0P , T(postLengthBuffer) , 0 , 1 ) ;
                                                    thirdC::c_strlwrIF( tin0P , postLengthBuffer) ;
                                                    postLengthBuffer[ offl ] = 0 ;
                                                {
                                                if( postLengthBuffer[ offl ] == '\r' )

                                                if( !pSControl->readF( tin0P , postLengthBuffer + offl , 1 ) ) { BLAMMO ; } ;
                                            {
                                            for( countT offl = 0 ; offl < sizeof postLengthBuffer - 1 ; offl ++ )
                                            osTextT postLengthBuffer[ TUCK ] = { 0 } ;
                                            ZE( countT , cbe ) ;

                                        #if defined( NEVERdEFINED )
                                        //U:: REWRITE TO SUPPORT CHUNKS WHILE AVOIDING SINGLE BYTE READS

                                        BLAMMO ;
                                    {
                                    else
                                    }
                                        }
                                            }
                                                else costToDo -= costGot ;
                                                }
                                                    }
                                                        ether.delF( tin0P , pbP ) ;
                                                        ether.traceF( tin0P , T("getF: could not read socket 175 [costToDo]:    ")+TF2(costToDo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                        bFail = 1 ;
                                                        POOPR
                                                    {
                                                    else
                                                    }
                                                        break ;
                                                        cbP = costGotBodyAll ;
                                                        costToDo -= costGot ;
                                                        POOPRqUIET
                                                    {
                                                    if( bStillHungryIsOk )
                                                {
                                                if( POOP )
                                                costGotBodyAll += costGot ;
                                                countT costGot = pSControl->readF( tin0P , postc , costToDo ) ;
                                                SCOOPS
                                            {
                                            IFsCRATCHoK
                                        {
                                        while( costToDo )
                                        countT costToDo = costBody - costzBodySome ;

                                        countT costGotBodyAll = costzBodySome ;
                                        if( costzBodySome ) { ether.memCopyF( tin0P , postc , postzBodySome , costzBodySome ) ; postc += costzBodySome ; }
                                        osTextT* postc = pbP ;

                                    {
                                    if( !bChunked )
                                {
                                if( costBody )
                            {
                            if( pbP )
                            ether.newF( tin0P , LF , pbP , costBody + 1 ) ; ___( pbP ) ;
                            cbP = costBody ;

                            if( !costBody ) costBody = TOCK ;                   //20250119@1528: ADDED W/O ANALYSIS TO COPE WITH JSON REPLY THAT DOES NOT HAVE A Content-Length HEADER
                            const boolT bStillHungryIsOk = !costBody ;          //20250119@1528: ADDED W/O ANALYSIS TO COPE WITH JSON REPLY THAT DOES NOT HAVE A Content-Length HEADER

                            _IO_
                        {
                        if( !bFail )

                        }
                            }
                                ether.delF( tin0P , pstt1Line ) ;
                                _IO_
                            {
                            }
                                }
                                    ether.delF( tin0P , psttl ) ;
                                    _IO_
                                {
                                }
                                    }
                                        ether.delF( tin0P , psttValue ) ;
                                        _IO_
                                    {
                                    }
                                        ether.delF( tin0P , psttKey ) ;
                                        _IO_
                                    {
                                
                                    }
                                        }
                                            bChunked = !ether.strCompareF( tin0P , psttValue , tChunked ) ;
                                        {
                                        else if( !ether.strCompareF( tin0P , psttKey , tTransferEncoding ) )
                                        }
                                            bLengthSet = 1 ;
                                            costBody = ether.strDigitsToSCountF( tin0P , psttValue , 0xa , 1 ) ;
                                        {
                                        if( !ether.strCompareF( tin0P , psttKey , tKeyContentLength ) )
                                    
                                        ether.strTrimF( tin0P , psttValue , 0 , T(TbLACKnEWlINE) ) ; ___( psttValue ) ;
                                        ether.strSubstringF( tin0P , psttValue , idf , countTC() , psttl ) ; ___( psttValue ) ;
                                    {
                                    if( idf )
                                    ether.strConvertToLowerCaseF( tin0P , psttKey ) ; ___( psttKey ) ;
                                    ether.strSubstringF( tin0P , psttKey , idf , sttq , tColonWhite , psttl , 1 ) ; ___( psttKey ) ;
                                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                    countT idf = 1 ;
                                    ZE( strokeS* , psttValue ) ;
                                    ZE( strokeS* , psttKey ) ;
                                {
                                else  // HEADER LINE ASSUMED TO BE OF THE FORM, FOR EXAMPLE,  "Content-Length:1234"
                                }
                                    }
                                        }
                                            ether.delF( tin0P , pstt1w ) ;
                                            _IO_
                                        {
                                        }
                                            break ;
                                            if( ether.strCompareF( tin0P , psttc1 , t200 ) && ether.strCompareF( tin0P , psttc1 , t307 ) ) { bFail = 1 ; } ;
                                            if( ++ idWord == 1 ) continue ;
                                        {
                                        FORsTRINGSiN1( pstt1w )
                                        ZE( countT , idWord ) ;
                                        ether.strWordsF( tin0P , pstt1w , psttl , sttq ) ; ___( pstt1w ) ;
                                        ZE( strokeS* , pstt1w ) ;
                                    {
                                    if( !POOP )                        
                                    if( psttl->idAdam > TUCK ) { bFail = 1 ; } // DEFENSIVE

                                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                    countT idf = 1 ;

                                    //ether.traceF( tin0P , psttl , flTRACE_NOpREFIX ) ;

                                    bWoth = 0 ;
                                {
                                if( bWoth )

                                ether.strConvertToLowerCaseF( tin0P , psttl , psttc1 ) ; ___( psttl ) ;
                                ZE( strokeS* , psttl ) ;
                                _IO_
                            {
                            FORsTRINGSiN1( pstt1Line )
                            boolT bWoth = 1 ;

                            }
                                ether.strWordsF( tin0P , pstt1Line , T(postHeadPlus) , sttq , T("\r\n") ) ; ___( pstt1Line ) ;
                                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            {
                            ZE( strokeS* , pstt1Line ) ;
                            _IO_
                        {
                        ZE( boolT , bLengthSet ) ;
                        ZE( boolT , bChunked ) ;
                        TN( tChunked          , "chunked"            ) ;
                        TN( tTransferEncoding , "transfer-encoding:" ) ;
                        TN( tKeyConnection    , "connection"         ) ;
                        TN( tKeyUserAgent     , "user-agent"         ) ;
                        TN( tKeyContentLength , "content-length"     ) ;
                        TN( tColonWhite , ": " ) ;
                        ZE( strokeS* , psttAction ) ;
                        ZE( countT , costBody ) ;

                        }
                            costzBodySome = costHeadPlus - costHead - 4 ;
                            postzBodySome = postHeadPlus + costHead + 4 ;
                        {
                        if( costHeadPlus - costHead > 4 )
                        ZE( countT   , costzBodySome ) ;
                        ZE( osTextT* , postzBodySome ) ;
                        _IO_
                    {
                    if( !bFail )

                    //etherC::etRockIF( tin0P ).traceF( tin0P , T(postHeadPlus) , flTRACE_KEEPcRlF | flTRACE_NOpREFIX ) ;

                    TESTsCRATCH //U:: TO FIND A BUG
                    }
                        TESTsCRATCH //U:: TO FIND A BUG
                        }
                            TESTsCRATCH //U:: TO FIND A BUG
                            //CONoUTrAW( "\r\n" USCORE127 "\r\n" ) ;
                            }
                                TESTsCRATCH //U:: TO FIND A BUG
                                }
                                    //CONoUTrAW( postc ) ;

                                    costHead += delta ;

                                    }
                                        *poste = 0 ;
                                        delta = poste - postcWas ;
                                        bEnd = 1 ;
                                    {
                                    if( poste )

                                    costRemain   -= delta ;
                                    postc        += delta ;
                                    costHeadPlus += delta ;

                                    osTextT* postcWas = postc ;
                                    osTextT* poste = !bFound ? 0 : postc + offFound ;

                                    }
                                        }
                                            break ;
                                            offFound = offi ;
                                            bFound = 1 ;
                                        {
                                        )
                                            && postc[ offi + 3 ] == '\n'
                                            && postc[ offi + 2 ] == '\r'
                                            && postc[ offi + 1 ] == '\n'
                                               postc[ offi     ] == '\r'
                                        (
                                        if
                                    {
                                    for( countT offi = 0 ; offi <= offMax ; offi ++ )
                                    countT offMax = delta - 4 ;
                                    ZE( countT , offFound ) ;
                                    ZE( boolT , bFound ) ;
                                    _IO_
                                {
                                else
                                if( !delta ) break ;
                                TESTsCRATCH //U:: TO FIND A BUG

                                }
                                    }
                                        break ;
                                        bFail = 1 ;
                                        ether.traceF( tin0P , T("getF: could not read socket 175") ) ;
                                        POOPRqUIET
                                    {
                                    if( POOP )
                                    delta = pSControl->readF( tin0P , postc , costRemain , flSOCKETcrEAD_JUSToNEmOUTHFUL | flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
                                    SCOOPS
                                {
                                IFsCRATCHoK
                                ZE( countT , delta ) ;
                                TESTsCRATCH //U:: TO FIND A BUG
                                _IO_
                            {
                            while( !bEnd && costRemain )
                            ZE( boolT , bEnd ) ;
                            countT   costRemain = costaHeadPlus ;        
                            osTextT* postc      = postHeadPlus  ;
                            //CONoUTrAW( "\r\n" USCORE127 "\r\n" ) ;

                            //ether.memSetF( tin0P , postHeadPlus , costaHeadPlus ) ;
                            TESTsCRATCH //U:: TO FIND A BUG
                            _IO_
                        {
                        if( postHeadPlus )
                        ether.newF( tin0P , LF , postHeadPlus , costaHeadPlus ) ; ___( postHeadPlus ) ;
                        const countT costaHeadPlus = TOCK >> 2 ;
                        TESTsCRATCH //U:: TO FIND A BUG
                        _IO_
                    {
                    if( !bFail )
                    ZE( countT   , costHead     ) ;
                    ZE( countT   , costHeadPlus ) ;
                    ZE( osTextT* , postHeadPlus ) ;
                    TESTsCRATCH //U:: TO FIND A BUG

                    }
                        }
                            bFail = 1 ;
                            ether.traceF( tin0P , T("getF: could not write socket 640") ) ;
                            POOPRqUIET
                        {
                        if( POOP )

                        //etherC::etRockIF( tin0P ).traceF( tin0P , tRequest , flTRACE_KEEPcRlF | flTRACE_NOpREFIX ) ;
                        pSControl->writeF( tin0P , postRequest , costRequest ) ;

                        ether.delF( tin0P , psttnu ) ;
                        ether.boxPutUniqueF( tin0P , psttnu , T("///ideafarm/tmp/getF/request") , postRequest , costRequest , 0 , flOPENdETAILS_null ) ; ___( psttnu ) ;
                        ZE( strokeS* , psttnu ) ;

                        const countT   costRequest = tRequest.csF( tin0P ) ;
                        const osTextT* postRequest = tRequest ;

                        }
                            if( postBodyP ) tRequest += T(postBodyP) ;

                            tRequest += T("\r\n\r\n") ;

                            }
                                if( costBodyP  ) tRequest += T("\r\nContent-Length: ")+TF4(costBodyP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa) ;
                                if( !costBodyP ) costBodyP = thirdC::c_strlenIF( tin0P , postBodyP ) ;
                            {
                            if( postBodyP )
                            tRequest = T(F(flagsP)&flBOXcgETf_HTTPpOST?"POST /":"GET /")+T(psttName)+T(" HTTP/1.1\r\nHost: ")+T(psttHost)+T("\r\nConnection: close") ;
                        {
                        else
                        if( F(flagsP) & flBOXcgETf_HTTPdOnOTpREPENDhEADER ) tRequest = T(postBodyP) ;
                        TN( tRequest , "" ) ;
                    {

                    pSControl->etherF( tin0P , *((tin1S&)tin0P).pEtScratch ) ;
                    TESTsCRATCH //U:: TO FIND A BUG
                    _IO_
                {
                do
                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                countT cTries = cOpenTries ;
                TN( t307 , "307" ) ; //U:: 20190817@1559: EDIT TO FULLY SUPPORT TEMPORARY AND PERMANENT REDIRECTS (SILENTLY FOLLOW REDIRECTS UNLESS CALLER TELLS ME NOT TO)
                TN( t200 , "200" ) ;

                __NZ( &etSave != &ether ) ;
                etherC& etSave = pSControl->etherF( tin0P ) ;
                TESTsCRATCH //U:: TO FIND A BUG

                SCOOPS
            {
            IFsCRATCHoK

            ZE( boolT , bFail ) ;
            boolT bNoQuitEarly = !cOpenTries ;
            _IO_
        {
        if( !POOP )

        }
            if( psttName->idAdam ) { __( psttName[ CSpREFIX ].idAdam == ' ' ) ; } //U: GOAL IS TO ENSURE THAT THERE ARE NO BLANKS ANYWHERE IN psttName
            //20190818@1037: COMMENTED OUT WITHOUT ANALYSIS: __( !psttName->idAdam ) ;
        {
        if( psttName )
        __( cbP ) ;
        __Z( pSControl ) ;
        //THREADmODE4oN( flTHREADmODE4_INoUTfRAMEfORCEcOLLECTaPPtELEMETRY )

        const boolT bHttps = !ether.strCompareF( tin0P , psttType , T("https") ) ;

        _IO_
    {
    else if( ( !ether.strCompareF( tin0P , psttType , T("http") ) || !ether.strCompareF( tin0P , psttType , T("https") ) ) )
    }
        else         ether.delF( tin0P , pbP ) ;
        if( !POOP ) cbP = cbFile ;
        DEL( pso ) ;
        verifyReplyF( tin0P , 0xe2 ) ; // 226

        }
            }
                pso->readF( tin0P , pbP , cbFile ) ;
                pbP[ cbFile ] = 0 ;
                ether.newF( tin0P , LF , pbP , cbFile + 1 ) ; ___( pbP ) ;
            {
            if( cbFile ) //THIS WILL HANG FOREVER IF THE REMOTE HOST FAILS TO SEND ENOUGH BYTES
            _IO_
        {
        if( !POOP )

        verifyReplyF( tin0P , 0x96 ) ; // 150
        __Z( pso ) ;
        __( bRefuse ) ;
        sData.acceptF( tin0P , pso , idPortPeer , nnPeer , bRefuse ) ;
        ZE( boolT , bRefuse ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        ZE( socketC* , pso ) ;

        { textC txt = T("retr ")+T(psttName)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }

        verifyReplyF( tin0P , 200 ) ;
        }
            ether.delF( tin0P , pstthp ) ;
            _IO_
        {
        { textC txt = T("port ")+T(pstthp)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
        ether.strFromIdPortNicNameF( tin0P , pstthp , idPort , nicName ) ; ___( pstthp ) ;
        ZE( strokeS* , pstthp ) ;
        { nicNameC nicNamenu ; sData.myNameF( tin0P , idPort , nicNamenu ) ; }
        ZE( countT , idPort ) ;
        { ZE( countT , idpnu ) ; pSControl->myNameF( tin0P , idpnu , nicName ) ; }
        nicNameC nicName ;
        sData.listenF( tin0P ) ;
        sData.bindF( tin0P ) ;
        socketC sData( tin0P , ether , TAG( TAGiDnULL ) ) ;

        //U: info.fZombie = 0 ;
        }
            __( rc != 213 && rc != 211 ) ;
            }
                ether.delF( tin0P , psttReply ) ;
                _IO_
            {
            cbFile = cbFileF( tin0P , psttReply ) ;
            countT rc = pSControl->readWoReplyF( tin0P , psttReply ) ; ___( psttReply ) ;
            ZE( strokeS* , psttReply ) ;
            _IO_
        {
        if( !POOP )
        ZE( sCountT , cbFile ) ;

        { textC txt = T("stat ")+T(psttName)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
        __NZ( cbP ) ;

        //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
        infoBoxGetPutS info( tin0P , ether , *pSControl ) ;
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttType , T("ftp") ) && pSControl )
    }
        }
            cbP = 0 ;
            ether.delF( tin0P , pbP ) ;
        {
        if( POOP )
        //U: info.fZombie = 0 ;

        pSControl->readF( tin0P , pbP , cbP ) ;
        ether.newF( tin0P , LF , pbP , cbP ) ; ___( pbP ) ;
        cbP = 2 * sizeof( countT ) ;

        //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
        infoBoxGetPutS info( tin0P , ether , *pSControl ) ;
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttHost , T(WWWiDEAFARMcOM) ) && !ether.strCompareF( tin0P , psttType , T("dispatcher") ) && pSControl )
    }
        }
            cbP = 0 ;
            ether.delF( tin0P , pbP ) ;
        {
        if( POOP )
        //U: info.fZombie = 0 ;

        pSControl->readF( tin0P , pbP , cbP ) ;
        ether.newF( tin0P , LF , pbP , cbP ) ; ___( pbP ) ;
        cbP = sizeof( sCountT ) + sizeof( countT ) ;

        //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
        infoBoxGetPutS info( tin0P , ether , *pSControl ) ;
        _IO_
    {
    else if( !ether.strCompareF( tin0P , psttHost , T(WWWiDEAFARMcOM) ) && !ether.strCompareF( tin0P , psttType , T("time") ) && pSControl )
    }
        }
            }
                cbP = 0 ;
                ether.delF( tin0P , pbP ) ;
            {
            if( POOP )

            }
                if( cbP ) pSControl->readF( tin0P , pbP , cbP ) ;
                if( pbP ) pbP[ cbP ] = 0 ;
                ether.newF( tin0P , LF , pbP , cbP + 1 ) ; ___( pbP ) ;
                __( cbAll - sizeof( countT ) - cbP ) ;
                pSControl->readF( tin0P , (byteT*)&cbP , sizeof cbP ) ;
            {
            else
            }
                pSControl->readF( tin0P , pbP , cbP ) ;
                ether.newF( tin0P , LF , pbP , cbP ) ; ___( pbP ) ;
                cbP = cbAll ;
            {
            if( !!ether.strIdF( tin0P , idf , sttq , S1C(' ') , psttName ) )
            _IO_
        {
        if( !POOP )
        }
            __1
            if( !( F(ether.flagsMode) & flTHIRDmODE_IMPOTENCEeXPECTED ) ) ether.traceF( tin0P , psttName ) ;
        {
        if( !cbAll )
        //U: info.fZombie = 0 ;
        pSControl->readF( tin0P , (byteT*)&cbAll , sizeof cbAll ) ;
        ZE( countT , cbAll ) ;
        { textC txt = T(psttName)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;

        //U:{ ZE( countT , tnu ) ; ether.osThreadF( tin0P , tnu , tmBoxGetPutDeadmanF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&info ) ; }
        infoBoxGetPutS info( tin0P , ether , *pSControl ) ;
        _IO_
    {
    if( !ether.strCompareF( tin0P , psttType , T("box.server") ) || !ether.strCompareF( tin0P , psttType , T("box.server.adam") ) || !ether.strCompareF( tin0P , psttType , T("box.server.deputy") ) && pSControl )
    // GET THE BACKING FILE BYTES
    _IO_

    }
        if( POOP ) return ;
        //U::FV( flBOXcgET , flagsP ) ;
        __Z( psttName ) ;
        __Z( psttType ) ;
        __Z( psttHost ) ;
        __NZ( pbP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT boxC::getF( tin0S& tin0P , byteT*& pbP , countT& cbP , const flagsT flagsP , const osTextT* const postBodyP , countT costBodyP )/*1*/

/**/
*/
 cbP
 pbP
arguments
pbP and cbP must be ze, except where noted otherwise
 /napkin: get bytes from a napkin
 /napkin.make: get bytes from a napkin
  assumption:  messages are small enough to fit entirely within an internal buffer
 /tap/name: gets a message from a tap
  assumption:  messages are small enough to fit entirely within an internal buffer
 /hose/name: gets a message from a hose
 //name: gets the bytes of a local file
 host/news: retrieves the mail item whose id is specified in cbP (which must be nonze)
 host/pop: retrieves the mail item whose id is specified in cbP (which must be nonze)
 host/http: gets the remote file's bytes
 host/ftp: gets the remote file's bytes
  the time is returned in an timeS structure
 www.ideafarm.com/time: gets reference time from city center
gets all bytes contained in this box
  \<A HREF=\"5.6120104.1.1.0.html\"\>6120104:  WAKEsHOW( "example.simplest.func.1090005.boxC.getF" )\</A\>
 simplest
examples
\<A HREF=\"5.1090005.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$getF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

