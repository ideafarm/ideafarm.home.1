
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
;
}
    voidT  traceRangeF( byteT* pbP , countT cbP , strokeS* psttSayP ) ;
    voidT  sortF( tinBaseS& tinBaseP ) ;
    sortaC( tinBaseS& tinBaseP , etherC& etherP , const boolT& bQuitP , byteT* const pbArrayP , const countT cbArrayP , const countT cbSuffixP , const countT cbPrefixP , const countT cbKeyP , const countT moduloP = 1 , const countT remainderP = 0 , const flagsT flagsP = flSORTAc_null , const countT idWorkerP = 1 ) ;
    ~sortaC( voidT ) ;

    public :

    byteT*          verifySortF( byteT* pbP , countT cbP , const countT shiftP ) ;
    voidT           traceRangeIsSortedF( byteT* pbP , countT cbP , const countT shiftP ) ;
    voidT           traceMarkSelectedElementsF( const strokeS& sttMarkP , byteT** ppbP , countT cpbP ) ;
    voidT           doBitF( byteT* pbP , countT cbP , countT shiftP ) ;

    static countT swapRsEpilogIF(       recursionSimulatorC& rsP ) ;
    static countT swapRsCallEpilogIF(   recursionSimulatorC& rsP ) ;
    static countT swapRsCallPopIF(      recursionSimulatorC& rsP ) ;
    static countT swapRsCallIF(         recursionSimulatorC& rsP ) ;
    static countT swapRsCallPushIF(     recursionSimulatorC& rsP ) ;
    static countT swapRsCallPrologIF(   recursionSimulatorC& rsP ) ;
    static countT swapRsPrologIF(       recursionSimulatorC& rsP ) ;

    recursionSimulatorC rs                  ;
    swapPadS            sp                  ;
    byteT               pbScratch[ TUCK ]   ;

    countT              idError             ;
    const countT        idWorker            ;
    const countT        remainder           ;
    const countT        modulo              ;
    const countT        cElts               ;
    const countT        cbElt               ;
    const countT        cbKey               ;
    const countT        cbPrefix            ;    
    const countT        cbSuffix            ;    
    const countT        cbArray             ;
    byteT* const        pbArray             ;
    const flagsT        flagsCt             ;
    static sortaC*      ppMe[ TUCK ]        ;

    ;
    }
        inline swapPadS( voidT ) : shift( 0 ) , idNest( 0 ) , pbHighs( 0 ) , remainderUseRoot( 0 ) {}

        countT  cbRangeLathCall             ;
        byteT*  pbRangeLathCall             ;
        countT  cbInner                     ;
        byteT*  pbInner                     ;
        byteT*  pbDn                        ;
        byteT*  pbUp                        ;
        byteT*  pbe                         ;
        byteT*  pbc                         ;
        sCountT sregH                       ;
        sCountT sregG                       ;
        sCountT sregF                       ;
        sCountT sregE                       ;
        sCountT sregD                       ;
        sCountT sregC                       ;
        sCountT sregB                       ;
        sCountT sregA                       ;
        countT  regH                        ;
        countT  regG                        ;
        countT  regF                        ;
        countT  regE                        ;
        countT  regD                        ;
        countT  regC                        ;
        countT  regB                        ;
        countT  regA                        ;
        // REGISTERS: LOCAL VARIABLES NOT PRESERVED ACROSS THE RECURSIVE CALL ; INTENTIONALLY NOT INITIALIZED BECAUSE CODE MUST INITIALIZE BEFORE USE

        countT remainderUseRoot ;                   // swapIF LOCAL VARIABLE USED ONLY WHEN idNest == 1
        byteT* ret_pbHighs ;                        // swapIF RETURN VALUE (NEW)
        byteT* pbHighs ;                            // swapIF RETURN VALUE (OBSOLETE)
        countT idNest ;                             // swapIF PARAMETER
        countT shift ;                              // swapIF PARAMETER
    {
    struct swapPadS
{
/*1*/class _export sortaC/*1*/


/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//


