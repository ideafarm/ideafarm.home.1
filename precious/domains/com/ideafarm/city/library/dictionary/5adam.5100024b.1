
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinBaseP , T("press the enter key now\r\n") ) ;

sDone.waitF( tinBaseP ) ;
}
    sock.writeF( tinBaseP , &bCmd , 1 ) ;
    sock.connectF( tinBaseP , idPort , etThread.sockNicNameF( tinBaseP ) ) ;
    socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;
{
bCmd = 'q' ;
}
    etThread.delF( tinBaseP , psttLine ) ;
    etThread.strokeF( tinBaseP , T(psttLine)+T("\r\n") ) ;
    sock.readWoLineF( tinBaseP , psttLine , 0x100 ) ;
    ZE( strokeS* , psttLine ) ;
    sock.writeF( tinBaseP , &bCmd , 1 ) ;
    sock.connectF( tinBaseP , idPort , etThread.sockNicNameF( tinBaseP ) ) ;
    socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;
{
while( cTries -- )
countT cTries = 0x8 ;
byteT bCmd = 't' ;

sReady.waitF( tinBaseP ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tmPushNumbersF , &sDone , flTHREADlAUNCH_null , 0 , 0 , (countT)&idPort , (countT)&sReady ) ; }
ZE( countT , idPort ) ;
signC sDone(  tinBaseP , TAG( TAGiDnULL ) ) ;
signC sReady(  tinBaseP , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmPushNumbersF )

}
    }
        }
            if( bCmd == 'q' ) break ;
            DEL( pso ) ;
            if( bCmd == 't' ) pso->writeF( tinBaseP , (osTextT*)T("this text will be sent through the sockets\r\n") ) ;
            pso->readF( tinBaseP , &bCmd , 1 ) ;
            ZE( byteT , bCmd ) ;
            cPrevious ++ ;
        {
        if( pso )
        sock.acceptF( tinBaseP , pso , idPortPeer , nnPeer , countTC() ) ; ___( pso ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        ZE( socketC* , pso ) ;
    {
    while( !ether )
    ZE( countT , cPrevious ) ;

    ++ sReady ;
    sock.listenF( tinBaseP ) ;
    idPort = sock.bindF( tinBaseP ) ;
    sock.etherF( tinBaseP , ether ) ;
    socketC sock( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;

    signC&  sReady = *psReady ;
    countT& idPort = *pcIdPort ;
{
if( pcIdPort && psReady )

__Z( psReady ) ;
__Z( pcIdPort ) ;
DEL( pTaskP ) ;
psReady  = pTaskP ?  (signC*)pTaskP->c2 : 0 ;
pcIdPort = pTaskP ? (countT*)pTaskP->c1 : 0 ;
ZE( signC* , psReady ) ;
ZE( countT* , pcIdPort ) ;

TASK( tmPushNumbersF )

/*1*/WAKEhIDE( "example.simplest.func.1070014.socketC.etherF" )/*1*/
/**/
*/
\<A HREF=\"5.d420104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

