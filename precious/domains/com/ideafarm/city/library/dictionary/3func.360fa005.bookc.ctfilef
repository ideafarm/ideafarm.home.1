
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    *(flagsT*)&flagsCt |= flBOOKc_FILEiScONSTRUCTED ;

    THREADmODE2rESTORE
    new( 0 , tin0P , pbFile , sizeof pbFile ) fileC( tin0P , ostoName , access , share , flagsDetails , how , flFILEaTTR1_null , flFILEaTTR2_null , F(flagsCt) & flBOOKc_DELETE ? flFILEc_DELETE : flFILEc_null ) ;
    THREADmODE2oN( flTHREADmODE2_DISALLOWpUSE )

    /*if( F(flagsCt) & ( flBOOKc_DOnOTuSEpUSE | flBOOKc_DOnOTrEGISTERfILE ) )*/ flagsDetails |= flOPENdETAILS_DOnOTrEGISTER ;    
    flagsT flagsDetails = flOPENdETAILS_DOnOTvALIDATE | flOPENdETAILS_LOCsEQ | flOPENdETAILS_NOcACHE ;
    countT how          = F(flagsCt) & flBOOKc_WRITER ? ifcOPENhOW_nCeO : ifcOPENhOW_nFeO ;
    countT share        = ifcOPENsHARE_WR ;
    countT access       = ifcOPENaCCESS_WR ; //CANNOT SPECIFY READ ONLY HERE BECAUSE napkinC MIGHT NEED TO FORMAT ITSELF EVEN IF I AM ONLY GOING TO READ THE DATA SECTION OF THE NAPKIN

    //}
    //    OStEXTA( ostoName , osName ) ;
    //
    //    ether.delF( tin0P , psttm ) ;
    //    osFileNameC osName( tin0P , ether , T(psttm) ) ;
    //    ether.diskMapFileNameF( tin0P , psttm , tName ) ; ___( psttm ) ;
    //    ZE( strokeS* , psttm ) ;
    //    etherC& ether = *((tin123S&)tin0P).pEther ;
    //
    //    ctFileNameIF( tin0P , tName , postShortP , postPathP , idStateSpaceP , idMemorySpaceP , flagsCt ) ;
    //    TN( tName , "" ) ;
    //{
    //else
    //20171113@0847: TO ELIMINATE NONMONOTONIC GRABBING, ELIMINATE ALL USE OF poolC BY booksC bookC
    }
        }
            ((tin123S&)tin0P).pEther->diskMakeDirIfNeededF( tin0P , T(iffn) ) ;  //DO THIS ONLY IF EXPLICIT PATH, WHICH SHOULD AVOID NONMONOTONIC GRABBING SINCE IT WILL AVOID bksTelemetry AND bksTrace* booksC FILES
            ifFileNameC iffn( tin0P , *((tin123S&)tin0P).pEther , ostoName ) ;

            OStEXTAK( ostoName , ".bookC" ) ;
            OStEXTA(  ostoName , postShortP ) ;
            }
                OStEXTAK( ostoName , "." ) ;
                OStEXTCF( ostoName , idStateSpaceP , '0' ) ;
                OStEXTAK( ostoName , "." ) ;
                OStEXTCF( ostoName , idMemorySpaceP ? idMemorySpaceP : ((tin1S&)tin0P).pag1->idMemorySpace , '0' ) ;
                OStEXTAK( ostoName , "." ) ;
                OStEXTA(  ostoName , thirdC::postUserNameIF() ) ;
            {
            if( !( F(flagsCt) & flBOOKc_NOsHORTfILENAMEpREFIX ) )
            OStEXTA(  ostoName , postPathP ) ;

            if( POOP ) { BLAMMO ; }

            SCOOP
            poopC poop ;
        {
        else
        }
            OStEXTAK( ostoName , ".bookC" ) ;
            OStEXTA(  ostoName , postShortP ) ;
            OStEXTAK( ostoName , "\\" ) ;
            OStEXTCF( ostoName , idStateSpaceP , '0' ) ;                                                            thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\" ) ;
            OStEXTAK( ostoName , "\\stateSpaces" ) ;                                                                thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTCF( ostoName , idMemorySpaceP ? idMemorySpaceP : ((tin1S&)tin0P).pag1->idMemorySpace , '0' ) ;               thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\" ) ;
            OStEXTA(  ostoName , thirdC::postUserNameIF() ) ;                                                       thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\" ) ;
            OStEXTAK( ostoName , "\\memorySpaces" ) ;                                                               thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\ipdos" ) ;                                                                      thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\ideafarm" ) ;                                                                   thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\com" ) ;                                                                        thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\domains" ) ;                                                                    thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\backed.up.daily" ) ;                                                            thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTAK( ostoName , "\\ephemeral" ) ;                                                                  thirdC::dosCreateDirIF( tin0P , ostoName ) ;
            OStEXTA(  ostoName , postHome ) ;                                                                       thirdC::dosCreateDirIF( tin0P , ostoName ) ;

            if( POOP ) { BLAMMO ; }
            thirdC::diskFindHomeIF( tin0P , postHome , sizeof postHome , "ideafarm" ) ;
            osTextT postHome[ TUCK << 1 ] ;

            SCOOP
            poopC poop ;
        {
        if( !postPathP )
        //CS:CODEsYNC: 350fa004 360fa005 360fb012
    {
    //if( F(flagsCt) & ( flBOOKc_DOnOTuSEpUSE ) )
    OStEXT( ostoName , TUCK << 2 )

    _IO_

    }
        if( POOP ) return ;
        __( idMemorySpaceP && !( F(((tin123S&)tin0P).flagsThreadMode3) & flTHREADmODE3_ALLOWeXPLICITmEMORYsPACE ) && thirdC::third_idPhaseAdam_IF( tin0P ) >= ifcIDpHASEaDAM_EXEpROLOGaDAMmAIN1 && thirdC::third_idPhaseAdam_IF( tin0P ) < ifcIDpHASEaDAM_EXEePILOGaDAMmAINa1 ) ;
        __Z( idStateSpaceP ) ;
        __Z( postShortP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    

    //if( !idMemorySpaceP ) idMemorySpaceP = ((tin1S&)tin0P).pag1->idMemorySpace ;
    //20200417@1855: KEEP idMemorySpaceP NULL SO THAT CALLER DOES NOT HAVE TO SET flTHREADmODE3_ALLOWeXPLICITmEMORYsPACE
{
/*1*/voidT bookC::ctFileF( tin0S& tin0P , const osTextT* const postShortP , const osTextT* const postPathP , const countT idStateSpaceP , countT idMemorySpaceP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

