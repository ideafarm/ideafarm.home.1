
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        inc02AM( pcTallyOut[ offs ] ) ;
        }
            /**/ pGrabNewElt[ offs ].ungrabF( tinBaseP ) ;
            /**/ 
            /**/ THREADmODE2rESTORE
            /**/ }
            /**/     }
            /**/         ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ;                                                        // NAP A WINK
            /**/ 
            /**/         else if( setIfZeAM( *(countT*)( ppSex + offs ) , (countT)psDoomed ) ) { BLAMMO ; }             // SHOW THIS sexC (BLAMMO SHOULD BE IMPOSSIBLE)
            /**/         }
            /**/             break ;                                                                                    // BREAK
            /**/             DELzOMBIE( psDoomed ) ;                                                                    // DESTROY THIS sexC
            /**/
            /**/             }
            /**/                 }
            /**/                    pc = pc->pSexLifoConstructed ;
            /**/
            /**/                    }
            /**/                        break ;
            /**/                        pc->pSexLifoConstructed = psDoomed->pSexLifoConstructed ; 
            /**/                    {
            /**/                    if( pc->pSexLifoConstructed == psDoomed )
            /**/                 {
            /**/                 while( pc )
            /**/                 sexC* pc = pPoolContainsMe->pSexLifoConstructed ;
            /**/             {
            /**/             else
            /**/             if( pPoolContainsMe->pSexLifoConstructed == psDoomed ) pPoolContainsMe->pSexLifoConstructed = psDoomed->pSexLifoConstructed ; // DEREGISTER FROM DELETION LIST
            /**/
            /**/             if( !!*psDoomed ) { BLAMMO ; }                                                             // BLAMMO IF NOT EMPTY (SHOULD BE IMPOSSIBLE)
            /**/         {
            /**/         if( tallyIn == pcTallyIn[ offs ] && tallyOut == pcTallyOut[ offs ] )                           // IF NO OTHER THREADS HAVE BEGUN ACCESSING
            /**/ 
            /**/         if( psDoomed != pszSnap ) { BLAMMO ; } //SHOULD BE IMPOSSIBLE
            /**/         sexC* psDoomed = (sexC*)setIfEqualsAM( *(countT*)( ppSex + offs ) , 0 , (countT)pszSnap ) ;    // HIDE THIS sexC
            /**/         sexC* pszSnap = ppSex[ offs ] ;
            /**/     {
            /**/     if( tallyIn - 1 == tallyOut )                                                                      // IF NO OTHER THREADS WERE ACCESSING
            /**/ 
            /**/     if( !!*ppSex[ offs ] ) break ;                                                                     // IF sexC IS NO LONGER EMPTY THEN ABORT
            /**/ 
            /**/     countT tallyOut = pcTallyOut[ offs ] ;
            /**/     countT tallyIn  = pcTallyIn[  offs ] ; // ENTRIES AND EXITS OF ALL CODE THAT ACCESSES THIS sexC
            /**/ {
            /**/ for(;;)                                                                                                // FOREVER
            /**/ sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
            /**/ THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
            /**/ 
            /**/ pGrabNewElt[ offs ].grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            /**/ 
            /**/ // SERIALIZATION IS ONLY USED WHEN CONSTRUCTING OR DESTROYING sexC INSTANCES (WHICH ARE REGISTERED IN ppSex[])
            /**/ // FOR SPEED, SERIALIZATION IS NOT USED FOR NORMAL POOL DROP NEW/DEL OPERATIONS
            /**/ // THIS CODE IS INTENDED TO ACHIEVE THREAD SAFETY WITHOUT REQUIRING SERIALIZATION WITH THREADS THAT WANT TO NEW/DEL A POOL DROP USING ppSex[ offs ]
            /**/ // DELETE ppSex[ offs ] IF IT IS STILL EMPTY
            /**/ 
            /**/ //CS:CODEsYNC: DUPLICATE CODE: 360e1005 360e100f
        {
        if( ppSex[ offs ] && !*ppSex[ offs ] && !bDeletedRecently )
        inc02AM( pcTallyIn[ offs ] ) ;

        }
            bDeletedRecently = !! ( pReg->pbSexDeletedBits[ offSexByte ] & maskSexByte ) ;

            const byteT  maskSexByte = (byteT)( 1 << ( offSexBit % SB ) ) ;
            const countT offSexByte  =                 offSexBit / SB     ;
            const countT offSexBit   = expCbDrop * CsLOTeXTENTS + offs    ;
        {
        if( pReg )
        ZE( boolT , bDeletedRecently ) ;
    {
    for( countT offs = expSlotsMin ; offs < sizeof ppSex / sizeof ppSex[ 0 ] ; offs ++ )

    }
        __( !pReg ) ;
        }
            }
                break ;
                inc02AM( pReg->cRefPoolReg ) ;
                pReg = pRegs + offr ;
            {
            if( !thirdC::c_strcmpIF( tinBaseP , pRegs[ offr ].postPoolName , postPoolName ) && !pReg )
            grabitC grabx( tinBaseP , TAG( TAGiDnULL ) , (byteT*)&pRegs[ offr ].flagsi , ifcIDgRABITbIT_00 , *(grabitC*)0 , 0 , 0 , 0 , flGRABITc_null , 0 , ifcIDgRABlAYER_9POOLlAYER2) ;
        {
        for( countT offr = 0 ; offr < CpOOLrEGISTRATIONSmAX ; offr ++ )

        grabitC grabx( tinBaseP , TAG( TAGiDnULL ) , (byteT*)&home.fliGrab , ifcIDgRABITbIT_00 , *(grabitC*)0 , 0 , 0 , 0 , flGRABITc_null , 0 , ifcIDgRABlAYER_9POOLlAYER1 ) ;

        const osTextT* postPoolName = pPoolContainsMe->postNameF( tinBaseP ) ;
        poolRegistrationS* pRegs = (poolRegistrationS*)home.pb_pPoolReg ;
        homeS& home = homeS::homeIF() ;
        POOPIE
    {
    if( pPoolContainsMe )
    ZE( poolRegistrationS* , pReg ) ;                                       //U:: ENSURE THAT THIS RECORD CANNOT BE DELETED WHILE i HAVE A POINTER TO IT ; ALT: SMART POINTER

    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    // SET pReg TO THE REGISTRATION RECORD FOR *pPoolContainsMe
    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //20170706@1617: ENABLED BECAUSE AM SEEING POOL EXHAUSTION
    //20170412@1618: U::COMMENTED OUT TO FIND A BUG; IF NOW CNR NEED MORE TESTING (MULTITHREADED)

    if( F(flagsCt) & flSLOTSc_READoNLY ) { BLAMMO ; }

    _IO_
{
/*1*/voidT slotsC::deleteEmptiesIfF( tin0S& tinBaseP )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

