
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    delF( tinP , postArgs2 ) ;
    delF( tinP , postArgs1 ) ;

    __Z( bDone ) ;

    }
        }
            }
                tinP.pEtScratch->traceF( tinP , T("could not zip using bundled infozip zip.exe ; i give up" ) ) ;

                delF( tinP , postDir ) ;
                tinP.pEtScratch->traceF( tinP , T("called pkzipc.exe [postArgs]:    ")+T(postArgs1) ) ;
                tinP.pEtScratch->traceF( tinP , T("[postDir]:    ")+T(postDir) ) ;
                dosGetCurrentDirF( tinP , postDir ) ; ___( postDir ) ;
                ZE( osTextT* , postDir ) ;
            {
            if( !bDone )

            else bDone = 1 ;
            }
                __( idDeathType ) ;
                __( value ) ;
                tinP.pEtScratch->traceF( tinP , T("bundled infozip zipc.exe failed [value,idDeathType]:    ")+TF2(value,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idDeathType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            else if( value || idDeathType )
            }
                tinP.pEtScratch->traceF( tinP , T("could not hire bundled infozip zip.exe [POOP]:    ")+TF2(idPoop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                POOPRqUIET
                countT idPoop = POOP ;
            {
            if( POOP )

            pEtherContainsMe->strokeF( tinP , T("\r\n") ) ;
            ((thirdC&)*tinP.pEtScratch).dosExecPgmF( tinP , countTC() , countTC() , value , idDeathType , "\\ideafarm.home.1\\precious\\domains\\com\\ideafarm\\city\\workshop\\infozip\\zip.exe\\zip.exe"  , postArgs2 ) ;
            pEtherContainsMe->strokeF( tinP , T("\r\n") ) ;
            SCOOPS
        {
        IFsCRATCH

        idDeathType = value = 0 ;
    {
    if( !bDone && ( !idZipperP || idZipperP == ifcIDzIPPER_INFOZIP ) )

    }
        }
            }
                }
                    pEtherContainsMe->traceF( tinP , T("!exception: kid process failed [value,rc,name]:    ")+TF2(value,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+T(postRc) ) ;
                    TN( tb4 , "    " ) ;
                    const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                    POOPRqUIET
                    countT rc = POOP ;
                {
                else
                if( !POOP ) bDone = 1 ;

                }
                    __1
                    __( value ) ;
                {
                if( value != ifcEXITcODE_EXITpROCESSaOK )

                tinP.pEtScratch->osProcessWaitF( tinP , value , countTC() , osTid , osPid ) ;
                ZE( countT , value ) ;

                SCOOPS
                _IO_
            {
            IFsCRATCH
        {
        else
        if( !osPid ) pEtherContainsMe->traceF( tinP , T("!exception: could not launch ifcIDaDAM_HIREwITHOUTdEBUGGING") ) ;

        }
            c4Result = pEtherContainsMe->ifcHireF( tinP , T("ifcIDaDAM_HEALaRCHIVES") , ifcIDaDAM_HIREwITHOUTdEBUGGING , tArgs , flHIRE_DISPLAYaUTO , 0 , 0 , 1 , nicNameC() ) ;
            TN( tArgs , "" ) ; tArgs = T("!ignore [comment can go here] !maxValue 0 !hireLater pkzipc.exe ")+T(postArgs1) ;
            _IO_
        {
        countT& osPid = c4Result.c2 ;
        countT& osTid = c4Result.c1 ;
        count4S c4Result ;
    {
    if( bHireNoMonitor )

    }
        }
            }
                tinP.pEtScratch->traceF( tinP , T(bHireNoMonitor?"could not hire pkzipc.exe directly ; will try hiring pkzipc.exe indirectly":"could not zip using pkzipc.exe ; will try the bundled infozip zip.exe" ) ) ;

                delF( tinP , postDir ) ;
                tinP.pEtScratch->traceF( tinP , T("called pkzipc.exe [postArgs]:    ")+T(postArgs1) ) ;
                tinP.pEtScratch->traceF( tinP , T("[postDir]:    ")+T(postDir) ) ;
                dosGetCurrentDirF( tinP , postDir ) ; ___( postDir ) ;
                ZE( osTextT* , postDir ) ;
            {
            if( !bDone )

            else bDone = 1 ;
            }
                __( idDeathType ) ;
                __( value ) ;
                tinP.pEtScratch->traceF( tinP , T("pczipc.exe failed [value,idDeathType]:    ")+TF2(value,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idDeathType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            else if( value || idDeathType )
            }
                tinP.pEtScratch->traceF( tinP , T("could not hire pczipc.exe [POOP]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc) ) ;
                POOPRqUIET
                const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                bHireNoMonitor = rc == ifcIDiMPOTENCEbASEeRRORcODE_NOTsUPPORTED ;
                countT rc = POOP ;
            {
            if( POOP )

            pEtherContainsMe->strokeF( tinP , T("\r\n") ) ;
            ((thirdC&)*tinP.pEtScratch).dosExecPgmF( tinP , countTC() , countTC() , value , idDeathType , "pkzipc.exe" , postArgs1 ) ;
            pEtherContainsMe->strokeF( tinP , T("\r\n") ) ;
            SCOOPS
        {
        IFsCRATCH
    {
    if( !idZipperP || idZipperP == ifcIDzIPPER_PKZIPC )
    ZE( boolT , bHireNoMonitor ) ;
    ZE( countT , idDeathType ) ;
    ZE( countT , value ) ;
    ZE( boolT , bDone ) ;

    pEtherContainsMe->traceF( tinP , T("[postArgs2]:    ")+T(postArgs2) ) ;
    pEtherContainsMe->traceF( tinP , T("[postArgs1]:    ")+T(postArgs1) ) ;

    }
        pEtherContainsMe->strMakeF( tinP , LF , postArgs2 , tArgs2 ) ; ___( postArgs2 ) ;
        pEtherContainsMe->strMakeF( tinP , LF , postArgs1 , tArgs1 ) ; ___( postArgs1 ) ;

        tArgs2 += T(postSpecsInfoZipP)+tb+T(postToP)+tb+T(postWildListP) ;
        tArgs1 += T(postSpecsPKZipP  )+tb+T(postToP)+tb+T(postWildListP) ;
        if( tArgs2.csF( tinP ) ) tArgs2 += tb ;
        if( tArgs1.csF( tinP ) ) tArgs1 += tb ;

        }
            tArgs2 += T(" -x "      )   +T(postWildListExcludeP)+tba ;
            tArgs1 += T(" -exclude ")+tq+T(postWildListExcludeP)+tq  ;
        {
        if( postWildListExcludeP )

        }
            tArgs2 += T(" -i "      )   +T(postWildListIncludeP)+tba ;
            tArgs1 += T(" -include ")+tq+T(postWildListIncludeP)+tq  ;
        {
        if( postWildListIncludeP )

        TN( tArgs2 , "" ) ;
        TN( tArgs1 , "-add" ) ;
        TN( tq , "\""  ) ;
        TN( tb , " "   ) ;
        TN( tba , " @" ) ;
    {
    ZE( osTextT* , postArgs2 ) ;
    ZE( osTextT* , postArgs1 ) ;

    if( postSpecsInfoZipP    ) costAll += thirdC::c_strlenIF( tinP , postSpecsInfoZipP    ) ;
    if( postSpecsPKZipP      ) costAll += thirdC::c_strlenIF( tinP , postSpecsPKZipP      ) ;   // REALLY ONLY NEED THE MAXIMUM LENGTH SINCE ONLY WO SPEC IS USED AT A TIME; DONE THIS WAY FOR SIMPLICITY (SPECS ARE SHORT)
    if( postWildListExcludeP ) costAll += thirdC::c_strlenIF( tinP , postWildListExcludeP ) ;
    if( postWildListIncludeP ) costAll += thirdC::c_strlenIF( tinP , postWildListIncludeP ) ;
    countT                     costAll  = thirdC::c_strlenIF( tinP , postToP ) + thirdC::c_strlenIF( tinP , postWildListP ) + TUCK ;

    pEtherContainsMe->traceF( tinP , T("[postSpecsInfoZipP   ]:    ")+T(postSpecsInfoZipP)    ) ;
    pEtherContainsMe->traceF( tinP , T("[postSpecsPKZipP     ]:    ")+T(postSpecsPKZipP)      ) ;
    pEtherContainsMe->traceF( tinP , T("[postWildListExcludeP]:    ")+T(postWildListExcludeP) ) ;
    pEtherContainsMe->traceF( tinP , T("[postWildListIncludeP]:    ")+T(postWildListIncludeP) ) ;
    pEtherContainsMe->traceF( tinP , T("[postWildListP       ]:    ")+T(postWildListP)        ) ;
    pEtherContainsMe->traceF( tinP , T("[postToP             ]:    ")+T(postToP)              ) ;

    _IO_

    }
        if( POOP ) return ;
        __Z( pEtherContainsMe )
        __Z( postWildListP ) ;
        __Z( postToP       ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT thirdC::diskZipF( tinS& tinP , const osTextT* const postToP , const osTextT* const postWildListP , const osTextT* const postWildListIncludeP , const osTextT* const postWildListExcludeP , const osTextT* const postSpecsPKZipP , const osTextT* const postSpecsInfoZipP , const countT idZipperP )/*1*/

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
