
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cUngrabsDone ;

    //if( ((tin123S&)tin0P).pc Utility[ 0 ] ) { CONoUTrAW3( "\r\n" , this , " - - - - \r\n" ) ; }

    //if( (countT)this == etherC::ether_cUtility_IF( tin0P , 0 ) ) { LOGrAWtID( "U-" ) ; }

    //}
    //    CONoUTrAW( os ) ;
    //
    //    OStEXTAK(  os , "\r\n" ) ;
    //    }
    //        if( offi % 5 == 3 ) { OStEXTAK(  os , "]" ) ; }
    //        OStEXTC(   os , ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ offi ] , 0 ) ;
    //        else { OStEXTAK(  os , "," ) ; }
    //        }
    //            else { OStEXTAK(  os , " [" ) ; }
    //            }
    //                continue ;
    //                offi += 4 ;
    //            {
    //            if( !((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ offi ] )
    //        {
    //        if( !( offi % 5 ) )
    //    {
    //    for( countT offi = 0 ; offi < sizeof ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel / sizeof ((tin123S&)tin0P).pPanLifiRecurseGrabbedLevel[ 0 ] ; offi ++ )
    //
    //    OStEXTAK( os , "} ----" ) ;
    //    OStEXTC(  os , idiFileCt , 0 ) ;
    //    OStEXTAK( os , "," ) ;
    //    OStEXTC(  os , idLineCt , 0 ) ;
    //    OStEXTAK( os , "," ) ;
    //    OStEXTC(  os , this , 0 ) ;
    //    OStEXTAK( os , " | {" ) ;
    //    OStEXTA(  os , ((tin123S&)tin0P).postThreadName ) ;
    //    OStEXTAK( os , " " ) ;
    //    OStEXTC(  os , ((tin123S&)tin0P).glass.idThread , 0 ) ;
    //    OStEXTAK( os , " | " ) ;
    //    OStEXTC9( os , ((tin123S&)tin0P).osTid ) ;
    //    OStEXTAK( os , "         | " ) ;
    //    OStEXT(   os , TUCK << 2 ) ;
    //{
    //if( ((tin1S&)tin0P).pag1->idAdam == 0x4010501 )

    }
        THREADmODE1rESTORE
    
        }
            }
                if( !bFound && F(flagsP) & flGRABcUNGRABf_DEPOSITkISSiF ) inc02AM( stat.cKissBank ) ;

                thirdC::dosPriorityIF( tin0P , idDesireSave ) ;

                ((tin123S&)tin0P).cYield = 0 ;
                }
                    if( !bWoth && ogw < processGlobal2I._grabC_cgw ) break ;
        
                    }
                        }
                            break ;

                            bFound = 1 ;
                            thirdC::dosResumeThreadIF( tin0P , hThreadWant , 1 ) ;
        
                            }
                                thirdC::dosWriteStdOutIF( ostoBuf ) ;
                                OStEXTA( ostoBuf , ")\r\n" ) ;
                                if( tin0P.idTypeTin == ifcIDtYPEtIN_123 ) OStEXTA( ostoBuf , ((tin123S&)tin0P).postThreadName ) ;
                                OStEXTA( ostoBuf , " " ) ;
                                OStEXTC( ostoBuf , ((tin123S&)tin0P).glass.idThread , 0 ) ;
                                OStEXTA( ostoBuf , " (heater: " ) ;
                                OStEXTC( ostoBuf , processGlobal2I._grabC_pgw[ ogw ].idThread , 0 ) ;
                                OStEXTA( ostoBuf , "heatin " ) ;
                                OStEXT( ostoBuf , 0x140 )
                            {
                            if( F(processGlobal2I._grabC_pgw[ogw].flags) & flGRABwANT_CHATTERrESUME )
        
                            thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) ) ; //THIS WILL GIVE THE WANTER TIME TO GET TO SLEEP
                        
                            if( !hThreadWant ) { BLAMMO ; }
                            hThreadWant.cloneF( processGlobal2I._grabC_pgw[ ogw ].hThread , osPidIF( tin0P ) , hProcessMe , hProcessWant ) ;
                            handleC hThreadWant( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_THREAD ) ;
        
                            if( !hProcessWant ) { BLAMMO ; }
                            handleC hProcessWant = hProcessF( tin0P , processGlobal2I._grabC_pgw[ ogw ].osPid , osPidIF( tin0P ) ) ;
        
                            hProcessMe.osF( ifcIDtYPEhANDLE_PROCESS , (countT)thirdC::osOpenProcessIF() ) ;
                            handleC hProcessMe( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_PROCESS ) ;
                            //U:O: if processGlobal2I._grabC_pgw[ ogw ].osPid == ((tin123S&)tin0P).osPid THEN JUST USE PSEUDOHANDLE FOR hProcessWant
                            //U:O: USE ((tin123S&)tin0P).osPid
        
                            if( !processGlobal2I._grabC_pgw[ ogw ].hThread ) { BLAMMO ; }

                            }
                                if( processGlobal2I._grabC_pgw[ ogw ].idGrab != idMe || processGlobal2I._grabC_pgw[ ogw ].idGrabber != idGrabberKiss ) continue ;

                                ((tin123S&)tin0P).cYield = save ;
                                while( processGlobal2I._grabC_pgw[ ogw ].bDirty ) thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) ) ;
                                              ((tin123S&)tin0P).cYield = 0 ;
                                countT save = ((tin123S&)tin0P).cYield ;
                                ZE( countT , idCycle2 ) ;
                            {
                            if( processGlobal2I._grabC_pgw[ ogw ].bDirty ) //SOME DIRTY ENTRIES ARE TENTATIVE AND WILL DISAPPEAR (E.G. IF WANTER IS WILLING TO WITHDRAW FROM KISS BANK)
                        {
                        if( processGlobal2I._grabC_pgw[ ogw ].idGrab == idMe && processGlobal2I._grabC_pgw[ ogw ].idGrabber == idGrabberKiss )
                    {
                    for( ; ogw < processGlobal2I._grabC_cgw ; ogw ++ )
                    ZE( countT , ogw ) ;

                    else        thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) ) ;
                    if( bWoth ) bWoth = 0 ;
                {
                while( !cGrabbed && idGrabberOk == idGrabberKiss && (sCountT)( idGrabberHigh - idGrabberKiss ) >= 0 )
                //while( !cGrabbed && idGrabberOk == idGrabberKiss && idGrabberKiss <= idGrabberHigh )
                ZE( countT , idCycle ) ;
                ZE( boolT  , bFound ) ;
                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                boolT bWoth = 1 ; //ALSO USED TO INDICATE "bKissChanged"

                countT idGrabberKiss = 1 + incv02AM( idGrabberOk ) ;

                thirdC::dosPriorityIF( tin0P , ifcTHREADpRIORITY_SPINLOCK ) ;
                const countT idDesireSave = thirdC::dosPriorityIF( tin0P ) ;
        
                osTid = idDesireGrabber = 0 ;
                ((tin123S&)tin0P).cYield = 0 ;
            {
            if( bKiss )
    
            }
                cUngrabsDone = cDone ;
                
                }
                    if( (sCountT)prior <= 1 ) break ;
    
                    if( prior == 1 ) bKiss = 1 ;
                    countT prior = decv02AM( cGrabbed ) ;
                    cDone ++ ;
                    unregisterF( tin0P ) ;
                {
                for(;;)
                ZE( countT , cDone ) ;
    
                if( osTid != ((tin123S&)tin0P).osTid ) { BLAMMO ; } //CATCH PROBABLE APPLICATION CODE ERROR
            {
            else
            }
                if( 1 == decv02AM( cGrabbed ) ) bKiss = 1 ;
                unregisterF( tin0P ) ;
            {
            if( !( F(flagsP) & flGRABcUNGRABf_ALLrECURSIONS ) )
            ZE( boolT , bKiss ) ;
        {
        if( cUngrabsDone )
        //CODE SYNCH: 1700002 17f0006
    
        }
            }
                ++ s ; thirdC::dosSleepRawIF( tin0P , 0x20 ) ;
    
                if( !cIgnore || !( -- cIgnore ) ) { BLAMMO ; } ;
            {
            while( !cGrabbed )
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
            countT cIgnore = 0x80 ;
        {
        else //U::EDIT TO NOT BLOCK IF flGRABcUNGRABf_ALLrECURSIONS IS SPECIFIED
        }
            if( !cGrabbed ) cUngrabsDone = 0 ;
        {
        if( F(flagsP) & flGRABcUNGRABf_IF )
        _IO_
    
        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
    
        }
            if( POOP ) { BLAMMO ; }
            FV(flGRABcUNGRABf,flagsP)
            POOPIE
        {
        if( F(((tin1S&)tin0P).pag1->_thirdC_.flagsModeAdam1) & flADAMmODE1_DISALLOWgRABoFiNTERPROCESSgRABs && F(flags) & flGRABc_INTERpROCESS ) { BLAMMO ; }
        if( F(((tin123S&)tin0P).flagsThreadMode1     ) &   flTHREADmODE1_DISALLOWgRABoFiNTERPROCESSgRABs && F(flags) & flGRABc_INTERpROCESS ) { BLAMMO ; }
        if( F(flags) & flGRABc_DISABLED ) { BLAMMO ; }
    {
    else
    if( this == &((tin123S&)tin0P).grabPseudo ) cGrabbed -- ;
    countT cUngrabsDone = 1 ;

    SCOOP
{
/*1*/countT grabC::ungrabF( tin0S& tin0P , const flagsT flagsP )/*1*/

/**/
*/
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.0010393.flUNGRAB!||
 flagsP
 tin0P
arguments
i evaluate to the number of ungrabs i did, which will always be 1 if flagsP is flGRABcUNGRABf_null
excess calls to me will block
 U::conj: this is no longer true; the current code is rock solid w.r.t. racing ungrabbers
 it is illegal to rely upon this code, which will fail if the asynchronous excess call occurs at a particular time
 i contain code that will USUALLY detect excess ungrabs and block
the caller must ensure that i am not called too many times
multiple threads can call me
any thread may call me
\<A HREF=\"5.17f0006.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ungrabF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

