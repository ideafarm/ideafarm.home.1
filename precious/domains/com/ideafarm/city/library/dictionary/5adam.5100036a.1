
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

#endif

HEAReNTER( ether )
etThread.strokeF( tinBaseP , T("\r\n\r\npress the enter key") ) ;

etThread.delF( tinBaseP , pstt1mGifs ) ;

}
    }
        etThread.delF( tinBaseP , postr ) ;
        etThread.boxPutF( tinBaseP , tReplies+T("window") , postr , costr ) ;
        }
            etThread.delF( tinBaseP , pbBody ) ;
            costr = etThread.strMakeF( tinBaseP , LF , postr , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(cbBody,flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+T(pbBody) ) ; ___( postr ) ;
            etThread.boxGetShadowF( tinBaseP , pbBody , cbBody , T("///ideafarm/ephemeral/domains/com/ideafarm/c630104/campaigns/definitions/")+t_idCampaign+T("/window") ) ; ___( pbBody ) ;
            ZE( countT , cbBody ) ;
            ZE( byteT* , pbBody ) ;    
        {
        ZE( countT   , costr ) ;
        ZE( osTextT* , postr ) ;
    {

    }
        etThread.delF( tinBaseP , postr ) ;
        etThread.boxPutF( tinBaseP , tReplies+T("face") , postr , costr ) ;
        }
            etThread.delF( tinBaseP , pbBody ) ;
            costr = etThread.strMakeF( tinBaseP , LF , postr , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(cbBody,flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+T(pbBody) ) ; ___( postr ) ;
            etThread.boxGetShadowF( tinBaseP , pbBody , cbBody , T("///ideafarm/ephemeral/domains/com/ideafarm/c630104/campaigns/definitions/")+t_idCampaign+T("/face") ) ; ___( pbBody ) ;
            ZE( countT , cbBody ) ;
            ZE( byteT* , pbBody ) ;    
        {
        ZE( countT   , costr ) ;
        ZE( osTextT* , postr ) ;
    {

    etThread.strokeF( tinBaseP , T("\r" BLANK79 "\rAll gif files have been processed.\r\n") ) ;
    }
        etThread.delF( tinBaseP , pbr ) ;
        etThread.boxPutF( tinBaseP , tReplies+T("images/")+TF3(++idImage,flFORMAT_FILLzE,8) , pbr , cbr ) ;

        }
            etThread.delF( tinBaseP , pbImage ) ;
            etThread.delF( tinBaseP , postr ) ;

            etThread.memCopyF( tinBaseP , pbr + costr , pbImage , cbImage ) ;
            etThread.memCopyF( tinBaseP , pbr         , postr   , costr   ) ;
            etThread.newF( tinBaseP , LF , pbr , cbr ) ; ___( pbr ) ;
            cbr = costr + cbImage ;

            countT costr = etThread.strMakeF( tinBaseP , LF , postr , T("HTTP/1.0 200\r\nContent-Type: image/gif\r\nContent-Length: ")+TF4(cbImage,flFORMAT_NObASE,0,0xa)+T("\r\n\r\n") ) ;
            ZE( osTextT* , postr ) ;

            etThread.boxGetShadowF( tinBaseP , pbImage , cbImage , psttc1 ) ; ___( pbImage ) ;
            ZE( countT , cbImage ) ;
            ZE( byteT* , pbImage ) ;
        {
        ZE( countT , cbr ) ;
        ZE( byteT* , pbr ) ;

        etThread.strokeF( tinBaseP , T("\rProcessing gif files now.  (")+TF4(cGifs--,flFORMAT_NObASE,0,0xa)+T(" remaining.)") ) ;
    {
    FORsTRINGSiN1( pstt1mGifs )
    ZE( countT , idImage ) ;

    }
        etThread.delF( tinBaseP , pstt1mOld ) ;
        }
            }
                etThread.diskFileOrDirDeleteF( tinBaseP , psttc2 ) ;
            {
            FORsTRINGSiN2( pstt1mOld )
            etThread.strokeF( tinBaseP , T("Deleting ")+TF4(cOld,flFORMAT_NObASE,0,0xa)+T(" replies. (I am -not- deleting your gif files!)\r\n") ) ;
        {
        if( cOld )
        countT cOld = etThread.boxMenuF( tinBaseP , soul1mOld , tReplies+T("images/*") ) ; ___( pstt1mOld ) ;
        ZE( strokeS* , pstt1mOld ) ;
    {

    etThread.strokeF( tinBaseP , T("After I am finished, campaign ")+TF1(idCampaign)+T(" will consist of ")+TF4(cGifs,flFORMAT_NObASE,0,0xa)+T(" images.\r\n") ) ;
{
else
if( !cGifs ) etThread.strokeF( tinBaseP , T("I am quitting because there are no default gifs either!\r\n") ) ;
}
    cGifs = etThread.boxMenuF( tinBaseP , soul1mGifs , tGifsDflt+T("*.gif") ) ;
    etThread.delF( tinBaseP , pstt1mGifs ) ;
    etThread.strokeF( tinBaseP , T("No one has put any gif files into\r\n\r\n    \"")+tGifs+T("\"\r\n\r\nyet.  The default campaign gifs in\r\n\r\n    \"")+tGifsDflt+T("\"\r\n\r\nwill be used.\r\n") ) ;
{
if( !cGifs )
countT cGifs = etThread.boxMenuF( tinBaseP , soul1mGifs , tGifs+T("*.gif") ) ;
ZE( strokeS* , pstt1mGifs )

etThread.strokeF( tinBaseP , T("I will now (re)define campaign ")+TF1(idCampaign)+T(" by reading the following sets of files,\r\nwhich presumably have changed:\r\n\r\n    ")+tGifs+T("\r\n\r\n") ) ;

textC tReplies = T("///ideafarm/ephemeral/domains/com/ideafarm/c630104/campaigns/gen/")+t_idCampaign+T("/")+T("replies/") ;
textC tGifs = T("///ideafarm/ephemeral/domains/com/ideafarm/c630104/campaigns/definitions/")+t_idCampaign+T("/")+T("gifs/") ;
TN( tGifsDflt    , "///ideafarm/ephemeral/domains/com/ideafarm/c630104/campaigns/definitions/00000000/gifs/" ) ;
TN( t_idCampaign , (strokeS*)TF3(idCampaign,flFORMAT_FILLzE,8) ) ;

}
    etThread.boxPutF( tinBaseP , t_idCampaignLast , (byteT*)&idCampaign , sizeof idCampaign ) ;
    }
        idCampaign ++ ;
        etThread.delF( tinBaseP , pbi ) ;
        etThread.memCopyF( tinBaseP , (byteT*)&idCampaign , pbi , sizeof idCampaign ) ;
    {
    else
    if( !pbi ) idCampaign = 1 ;
    }
        cbi = 0 ;
        etThread.delF( tinBaseP , pbi ) ;
    {
    if( pbi && cbi != sizeof( countT ) )
    etThread = 0 ;
    etThread.boxGetShadowF( tinBaseP , pbi , cbi , t_idCampaignLast , 1 ) ; ___( pbi ) ;
    ZE( countT , cbi ) ;
    ZE( byteT* , pbi ) ;

    TN( t_idCampaignLast , "///ideafarm/ephemeral/domains/com/ideafarm/c630104/idCampaignLast" ) ;
{
if( !idCampaign )

etThread.delF( tinBaseP , pstth ) ;
countT idCampaign = etThread.strDigitsToSCountF( tinBaseP , pstth , 0xa , 1 ) ;
etThread.faceHearF( tinBaseP , pstth ) ; ___( pstth ) ;
ZE( strokeS* , pstth ) ;
etThread.strokeF( tinBaseP , T("MediaPlex, Incorporated\r\nhttp://www.mediaplex.com\r\n\r\nAdvertising Campaign Definer\r\n\r\nEach citizen of this class works with the user to define or modify\r\na single advertising campaign.\r\n\r\nPlease enter the campaign id to edit (optional): ") ) ;

#if defined( NEVERdEFINED )

TODO

/*1*/WAKEhIDE( "mediaplex.campaign.definer" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

