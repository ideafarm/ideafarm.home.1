
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    ether.delF( tin0P , psttAll ) ;
    ether.strSubstringF( tin0P , psttMe , idf , sttq , S1C('.') , psttAll ) ; ___( psttMe ) ;
    ether.delF( tin0P , psttw ) ;
    ether.strSubstringF( tin0P , psttw , idf , sttq , S1C('.') , psttAll ) ; ___( psttw ) ;
    }
        ether.delF( tin0P , psttw ) ;
        ether.strSubstringF( tin0P , psttw , idf , sttq , T("/dictionary/") , psttAll ) ; ___( psttw ) ;
    {
    if( postP[ 1 ] == ':' ) //U: VERIFY THAT THIS IS A CORRECT TEST OF WHETHER THE NAME IS QUATAG( TAGiDnULL )ED
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    ZE( strokeS* , psttw ) ;

    ether.delF( tin0P , postMe ) ;
    ether.strMakeF( tin0P , LF , psttAll , T(iffn) ) ; ___( psttAll ) ;
    ifFileNameC iffn( tin0P , ether , postMe ) ;
    ether.delF( tin0P , psttMe ) ;
    ether.strMakeF( tin0P , LF , postMe , psttMe ) ; ___( postMe ) ;
    ZE( osTextT* , postMe ) ;
    ZE( strokeS* , psttAll ) ;
    _IO_

    }
        if( ether ) return ;
        __Z( psttMe ) ;
        if( ether ) return ;
    {
    IFbEcAREFUL
{
textC( tin0P , TAG( TAGiDnULL ) , flTEXTc_null , postP )
/*1*/textIdFileC::textIdFileC( tin0S& tin0P , const osTextT* const postP )/*1*/ :
/**/
*/
 postP
 etherP
arguments
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1170001.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

