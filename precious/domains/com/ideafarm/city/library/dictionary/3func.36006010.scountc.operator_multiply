
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cResult ;
    sCountC cResult( acc ) ;
    // RETURN THE RESULT AS A TEMPORARY sCountC OBJECT

    ether.delF( tinBaseP , pcr ) ;
    }
        if( fNeg1 != fNeg2 ) acc = - acc ;
        }
            }
                }
                    acc += sCountC( tinBaseP , ether , pcr , cbitn ) ;
                    setBitF( tinBaseP , pcr , boff1 + boff2 , 1 ) ;
                    ether.memSetF( tinBaseP , (byteT*)pcr , cWords * (SC/SB) ) ;
                    countT one = 1 ;
                {
                if( bitF( tinBaseP , pc1 , boff1 ) && bitF( tinBaseP , pc2 , boff2 ) )
            {
            for( countT boff2 = 0 ; boff2 < boffSign2 ; boff2 ++ )
        {
        for( countT boff1 = 0 ; boff1 < boffSign1 ; boff1 ++ )
        countT boffSign2 = cbit2 - 1 ;
        countT boffSign1 = cbit1 - 1 ;
    {
    if( !ether )
    sCountC acc( tinBaseP , ether , (countT)0 ) ;
    // PERFORM THE MULTIPLICATION

    ether.memSetF( tinBaseP , (byteT*)pcr , cWords * (SC/SB) ) ;
    ether.newF( tinBaseP , LF , pcr , cWords ) ; ___( pcr ) ;
    countT cWords = 1 + cbitn / SC ;
    countT cbitn = cbit1 + cbit2 ;
    pc2 = c2 ;
    pc1 = c1 ;
    ZE( countT* , pcr ) ;
    ZE( countT* , pc2 ) ;
    ZE( countT* , pc1 ) ;
    cbit2 = c2 ;
    cbit1 = c1 ;
    c2.growBitsToF( tinBaseP , cbit2 + 1 ) ;
    c1.growBitsToF( tinBaseP , cbit1 + 1 ) ;
    countT cbit2 = c2 ;
    countT cbit1 = c1 ;
    if( fNeg2 ) c2 = - c2 ;
    if( fNeg1 ) c1 = - c1 ;
    boolT fNeg2 = c2.fNegativeF( tinBaseP ) ;
    boolT fNeg1 = c1.fNegativeF( tinBaseP ) ;
    sCountC c2( cP ) ;
    sCountC c1( *this ) ;
    _IO_

    // BY DEFINING AND THEN USING A << SHIFT OPERATOR
    // OPTIMIZATION: THIS FUNCTION COULD BE OPTIMIZED SIGNIFICANTLY
    //
    // THE MOST SIGNIFICANT BIT OF EACH OPERAND IS TREATED AS A SIGN BIT
    //
    // OF ALL BIT-PAIR MULTIPLICATIONS
    // THIS FUNCTION DOES NOT USE EXPANSION.  IT ACCUMULATES THE SUM
    //
    // 4. REPLACE VALUE OF THIS OBJECT WITH OPERAND 1
    // 3. CONTRACT OPERAND 1
    // 2. PROCESS EACH BIT POSITION, PLACING RESULT IN OPERAND 1
    // 1. EXPAND EACH NUMBER
    // THIS FUNCTION MULTIPLIES TWO BINARY NUMBERS OF ARBITRARY LENGTH

    }
        if( ether ) return sCountC( tinBaseP , ether ) ;
    {
    IFbEcAREFUL

    TINSL
{
/**//*1*/sCountC sCountC::operator *( const sCountC& cP ) const/*1*/
*/
 cP
arguments
evaluates to this object's value times cP
  \<A HREF=\"5.d220104.1.1.0.html\"\>d220104:  WAKEsHOW( "example.simplest.func.1080011.sCountC.operator_multiply" )\</A\>
 simplest
examples
\<A HREF=\"5.1080011.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

