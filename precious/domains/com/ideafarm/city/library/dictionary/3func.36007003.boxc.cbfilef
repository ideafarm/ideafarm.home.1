
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cbFile ;
    DEL( pInfoFile ) ;
    if( !ether && pInfoFile ) cbFile = pInfoFile->cbUsed ;
    ZE( countT , cbFile ) ;
    ether.diskFileQueryF( tinP , pInfoFile , handle ) ; ___( pInfoFile ) ;
    }
        ether.delF( tinP , psttMapped ) ;
        ether.fileOpenF( tinP , handle , flagsResult , psttMapped , ifcOPENaCCESS_R , ifcOPENsHARE_WR , flOPENdETAILS_FAIL | flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , 0 , 0 , cOpenTries ) ; //20230604@1409: ifcOPENsHARE_WR <- ifcOPENsHARE_R W/O ANALYSIS SO CAN INPUT A bookC FILE ; WITH THIS CHANGE, CALLER IS REPONSIBLE FOR HANDLING A FILE WITH VOLATILE CONTENT OR LENGTH
        ether.diskMakeDirIfNeededF( tinP , psttMapped ) ;
        ZE( countT , flagsResult ) ;
        ether.diskMapFileNameF( tinP , psttMapped , psttAll ) ; ___( psttMapped ) ;
        ZE( strokeS* , psttMapped ) ;
    {
    if( !handle )
    ZE( infoFileS* , pInfoFile ) ;
    _IO_

    }
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/countT boxC::cbFileF( tinS& tinP )/*1*/

/**/
*/
used only for local file boxes
evaluates to the number of bytes in the file
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1090003.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$cbFileF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

