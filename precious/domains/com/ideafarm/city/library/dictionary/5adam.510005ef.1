
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

}
    if( bDelete ) PUSE( tinBaseP , *(byteT**)&pbi ) ;
    }
        CONoUTrAW( "\r\n" ) ;
        CONoUTrAW( pbi ) ;
    {
    if( pbi )
    boolT bDelete = books.readF( tinBaseP , pbi , cbi , hRead ) ;
    countT cbi = 0x10 ;
    ZE( const byteT* , pbi ) ;

    handleC hRead( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKS ) ;

    booksC books( tinBaseP , etThread , TAG( TAGiDnULL ) , "varying.size" , ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) ) ;
{

}
    PUSE( tinBaseP , *(byteT**)&pcpIdApt ) ;
    books.writeF( tinBaseP , pcpIdApt , pbo , cbo ) ; ___( pcpIdApt ) ;
    ZE( countT* , pcpIdApt ) ;
    countT cbo = thirdC::c_strlenIF( tinBaseP , pbo ) ;
    byteT* pbo = "89abcdef" ;

    booksC books( tinBaseP , etThread , TAG( TAGiDnULL ) , "varying.size" , ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) , flBOOKSc_WRITER , 8 ) ;
{

}
    PUSE( tinBaseP , *(byteT**)&pcpIdApt ) ;
    books.writeF( tinBaseP , pcpIdApt , pbo , cbo ) ; ___( pcpIdApt ) ;
    ZE( countT* , pcpIdApt ) ;
    countT cbo = thirdC::c_strlenIF( tinBaseP , pbo ) ;
    byteT* pbo = "01234567" ;

    booksC books( tinBaseP , etThread , TAG( TAGiDnULL ) , "varying.size" , ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) , flBOOKSc_WRITER | flBOOKSc_PURGEoNcT , 1 ) ;
{

TODO

/*1*/WAKEsHOWtEXT( "example.other.snip.0030176.booksC.varying.size.books" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

