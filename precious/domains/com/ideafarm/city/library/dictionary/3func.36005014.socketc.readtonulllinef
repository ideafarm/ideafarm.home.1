
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
    
        ((tin1S&)tin0P).pag3->_socketC_.grab.ungrabF( tin0P ) ;
        pOdometer->cbWrite += ((tin123S&)tin0P).odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += ((tin123S&)tin0P).odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*((tin1S&)tin0P).pag3->_socketC_.pSwOdometer ;
        ((tin1S&)tin0P).pag3->_socketC_.nnLever = nnPeer ;
        ((tin1S&)tin0P).pag3->_socketC_.grab.grabF( tin0P , TAG( TAGiDnULL ) ) ;
    
        bRead.ungrabF( tin0P ) ;
    
        if( idleTimeAllowedRead ) FRESHtIMEaTOMIC( *pEther , timeLathRead.time1 , timeLathRead.time2 )
    
        pEther->delF( tin0P , pbb ) ;
        if( !psttP ) { pEther->strMakeF( tin0P , LF , psttP , T("") ) ; ___( psttP ) ; }
    
        }
            if( idp ) break ;
            pEther->delF( tin0P , psttw ) ;
            pEther->strFuseF( tin0P , psttP , psttw , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ csttEstimateP ) ; ___( psttP ) ;
            if( !*pEther && idp ) psttw[ CSpREFIX - 1 + idp ] = S1C( 0 ) ;
            if( !idp ) idp = pEther->strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , T("\r\n\r\n") , psttw ) ;
            if( psttw[ CSpREFIX ] == S1C('\r') && psttw[ CSpREFIX + 1 ] == S1C('\n') ) idp = 1 ;
            ZE( countT , idp ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
            pEther->strMakeF( tin0P , LF , psttw , T(pbb) , csttEstimateP ) ; ___( psttw ) ;
            ZE( strokeS* , psttw ) ;
    
            if( !cba ) break ;
            pbb[ cba ] = 0 ;
            countT cba = readF( tin0P , pbb , CBlIMITfROMsTUPIDcLIENT , flSOCKETcrEAD_STILLhUNGRYiSoK | flSOCKETcrEAD_JUSToNEmOUTHFUL ) ;
        {
        while( !*pEther )
    
        pEther->newF( tin0P , LF , pbb , CBlIMITfROMsTUPIDcLIENT + 1 ) ; ___( pbb ) ;
        ZE( byteT* , pbb ) ;
        if( !csttEstimateP ) csttEstimateP = 0x100 ;
        _IO_
        bRead.grabF( tin0P , TAG( TAGiDnULL ) ) ;
    
        const countT _odoSockCbWriteOpen = ((tin123S&)tin0P).odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = ((tin123S&)tin0P).odoSockCbRead  ;
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/**//*1*/voidT socketC::readToNullLineF( tin0S& tin0P , strokeS*& psttP , countT csttEstimateP )/*1*/
*/
  if the actual line input is longer than this, no error will occur but bad coding style warnings will be generated
  if 0 then 100 is implied
  can be 0
 csttEstimateP
 fConPutP
 psttP
arguments
assumption: the multiline message is no more than CBlIMITfROMsTUPIDcLIENT bytes long
 it should only be used for convenience, when the messages are short
this overload is less efficient than the one that returns a string of osTextT's
the terminating "\r\n\r\n" is excluded from the returned string
the end of the message is marked by a line containing no characters
gets one multiline message from the peer
 this function will, in general, read more than it should from the peer socket
U: do not use this function; it does not work correctly
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.1070016.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$readToNullLineF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

