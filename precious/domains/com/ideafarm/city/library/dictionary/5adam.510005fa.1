
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                    
REST

etThread.strokeF( tin0P , T("deleted foo (aok)\r\n") ) ;
}
    etThread.strokeF( tin0P , T("deleting foo\r\n") ) ;
    etThread.osThreadF( TaRG1( tmRefF ) , (countT)new( 0 , tin0P , LF ) refC( foo ) ) ;
    
    fooC foo( 0x11111111 ) ;
{

TODO

DONE( tmRefF )
}
    DEL( pRefP ) ;
    CONoUTrAW( "tmRefF: deleting the reference object\r\n" ) ;

    etherC::loafIF( tin0P ) ;
    CONoUTrAW( "tmRefF: sleeping until i am fired\r\n" ) ;

    REFfOO.sayF() ;

    refC* pRefP = (refC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmRefF )

}
    CONoUTrAW3( "hello from fooC [value]: " , value , "\r\n" ) ;
{
voidT fooC::sayF( voidT )

}
{
value( valueP )
refCounterC( cRef ) ,
fooC::fooC( countT valueP ) :

}
    value = 0 ;
    cRef.waitF( tin0P ) ;
    TINSL
{
fooC::~fooC( voidT )

;
}
    voidT fooC::sayF( voidT ) ;
    fooC( countT valueP ) ;
    ~fooC( voidT ) ;

    public :

    countT value ;
{
class fooC : public refCounterC

#define REFfOO REF( fooC , *pRefP )

/*1*/WAKEsHOWtEXT( "example.simplest.snip.?.refCounterC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

