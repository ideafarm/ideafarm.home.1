
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

}
    ether.loafIF( tin0P ) ;

    etThread.osThreadF( TaRG1( tmLookF ) , (countT)&lever_idThread , (countT)&swsGot ) ;

    while( cToDo -- ) etThread.osThreadF( TaRG1( tmReadF ) , (countT)&qh , (countT)&lever_idThread , (countT)&swsGot ) ;
    cToDo = 0x10 ;
    switchStackC swsGot( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , lever_idThread , flSTACKc_DOnOTsERIALIZE|flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ;
    ZE( countT , lever_idThread ) ;

    while( cToDo -- ) etThread.osThreadF( TaRG1( tmWriteF ) , (countT)&qh ) ;
    countT cToDo = 0x10 ;
    queueHeaderOldC& qh = *(queueHeaderOldC*)(byteT*)napQueue ;

    }
        }
            __( cbQueue - CBqUEUE ) ;
            cbQueue = cbNapkin - sizeof( queueHeaderOldC ) ;
            pbQueue = pbNapkin + sizeof( queueHeaderOldC ) ;
        {
        if( pbNapkin && cbNapkin > sizeof( queueHeaderOldC ) )
        }
            napQueue.formattingIsDoneF( tin0P ) ;
            new( 0 , tin0P , pbNapkin , sizeof( queueHeaderOldC ) ) queueHeaderOldC( tin0P , CBqUEUE ) ;
        {
        if( pbNapkin && !napQueue.bFormattedF() )
        countT cbNapkin = napQueue ;
        byteT* pbNapkin = napQueue ;
    {
    ZE( countT , cbQueue ) ;
    ZE( byteT* , pbQueue ) ;
    napkinC napQueue( tin0P , TAG( TAGiDnULL ) , "napQueuePlaycraft" , 0 , sizeof( queueHeaderOldC ) + CBqUEUE ) ;
{

TODO

DONE( tmLookF )
}
    }
        ++ s ; ether.osSleepF( tin0P , TOCK ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        swsGotP.ungrabF( tin0P ) ;
        }
            }
                //CONoUTrAW( "." ) ;
                swsGotP >> swLath ;
                swLath = 0 ;
            {
            while( swsGotP && swsGotP[ 1 ] - 1 == swLath )

            }
                CONoUTrAW3( "cPlatesMax: " , cPlatesMax , "\r\n" )
                cPlatesMax = swsGotP ;
            {
            if( cPlatesMax < swsGotP )

            lever_idThreadP = swsGotP.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swsGotP.cFlavorsF( tin0P ) ;
        swsGotP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
    {
    while( !ether )
    ZE( countT , cPlatesMax ) ;

    switchC swLath( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , lever_idThreadP ) ;

    switchStackC& swsGotP         = *(switchStackC*)pTaskP->c2 ;
    countT&       lever_idThreadP =       *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmLookF )

DONE( tmReadF )
}
    }
        swsGotP.ungrabF( tin0P ) ;
        swsGotP.sinkF( tin0P , countTC() , pc3[ 1 ] , flSTACKsINK_UNIQUE ) ;
        lever_idThreadP = pc3[ 0 ] ;
        swsGotP.grabF( tin0P , TAG( TAGiDnULL ) ) ;

        if( !( pc3[ 1 ] % TOCK ) ) { CONoUTrAW( T("received: ")+TF2(pc3[0],flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+TF2(pc3[1],flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n") ) ; }
        qhP.readF( tin0P , (byteT*)pc3 , sizeof pc3 ) ;
        countT pc3[ 3 ] ;
    {
    while( !ether )

    switchStackC& swsGotP         = *(switchStackC*)pTaskP->c3 ;
    countT&       lever_idThreadP =       *(countT*)pTaskP->c2 ;
    queueHeaderOldC& qhP             = *(queueHeaderOldC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TASK( tmReadF )

#define CBqUEUE ( TUCK  )

DONE( tmWriteF )
}
    }
        OSsLEEPf( 0 ) ; //BASE DOES NOT SUPPORT YIELDING LIKE THIS
        qhP.writeF( tin0P , (byteT*)pc3 , sizeof pc3 ) ;

        countT pc3[] = { ((tin9S&)tin0P).monitor.idThread , ++ idCycle , 1/*TO CAUSE WRAP*/ } ;
    {
    while( !ether )
    ZE( countT , idCycle ) ;

    queueHeaderOldC& qhP = *(queueHeaderOldC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWriteF )

*/
/*

/*1*/WAKEsHOWtEXT( "gorilla.snip.003014f.queueHeaderOldC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

