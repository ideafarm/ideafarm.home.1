
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        delF( tin0P , pcRemoteFileTimes ) ;
        delF( tin0P , pfWanted ) ;
        delF( tin0P , psttRemoteWanted ) ;
        if( !pstt1NotRefreshedP ) { strFuseF( tin0P , pstt1NotRefreshedP , T("") ) ; ___( pstt1NotRefreshedP ) ; }
    
        }
            delF( tin0P , pba ) ;
    
            }
                off ++ ;
    
                }
                    pbac += sizeof( countT ) + ( pbac ? *(countT*)pbac : 0 ) ;
                    if( !fAggregate ) break ;
                    }
                        strFuseSeparateF( tin0P , pstt1NotRefreshedP , psttc1 , 0 , 0 , 0 , 0 , /*U::SOUL?*/ 0x100000 ) ;
                        SCOOPSdEL
                        POOPR
                    {
                    else
                    if( !POOP ) SCOOPSdEL
                    ((tin123S&)tin0P).pEtScratch->boxPutF( tin0P , T(psttc1)+T(".time") , (byteT*)&pcRemoteFileTimes[ 2 * off ] , 2 * sizeof( countT ) ) ;
                    else             ((tin123S&)tin0P).pEtScratch->boxPutF( tin0P , psttc1 , pbac                    , cba            ) ;
                    if( fAggregate ) ((tin123S&)tin0P).pEtScratch->boxPutF( tin0P , psttc1 , pbac + sizeof( countT ) , pbac ? *(countT*)pbac : 0 ) ;
                    SCOOPSnEW
                {
                if( pfWanted[ off ] )
                if( POOP ) break ;
            {
            FORsTRINGSiN1( (strokeS*)pstt1LocalP )
            pbac = pba ;
            ZE( byteT* , pbac ) ;
            ZE( countT , off ) ;
            // WRITE THE IMAGES TO THE LOCAL DISK
    
            __Z( cba ) ;
            __Z( pba ) ;
            boxGetShadowF( tin0P , pba , cba , psttRemoteWanted ) ; ___( pba ) ;
            ZE( countT , cba ) ;
            ZE( byteT* , pba ) ;
            // GET THE AGGREGATE IMAGE FOR THE REMOTE FILES
        {
        if( pcRemoteFileTimes && strCompareF( tin0P , psttRemoteWanted , psttRemotePrefixP ) )
    
        delF( tin0P , pcLocalFileTimes ) ;
    
        }
            }
                off ++ ;
    
                }
                    fPrior = 1 ;
                    strFuseF( tin0P , psttRemoteWanted , psttc1 ) ; ___( psttRemoteWanted ) ;
                    if( fPrior ) { fAggregate = 1 ; strFuseF( tin0P , psttRemoteWanted , T(" ") ) ; ___( psttRemoteWanted ) ; }
                    pfWanted[ off ] = 1 ;
                {
                if( memCompareF( tin0P , (byteT*)&pcRemoteFileTimes[ 2 * off ] , (byteT*)&pcLocalFileTimes[ 2 * off ] , 2 * sizeof( countT ) ) )
                if( POOP ) break ;
            {
            FORsTRINGSiN1( (strokeS*)pstt1RemoteP )
            ZE( boolT , fPrior ) ;
            strFuseF( tin0P , psttRemoteWanted , psttRemotePrefixP , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ 2 * ( pstt1RemoteP ? pstt1RemoteP->idAdam : 0 ) ) ; ___( psttRemoteWanted ) ;
            ZE( countT , off ) ;
        {
        if( pcRemoteFileTimes )
        ZE( boolT , fAggregate ) ;
        ZE( strokeS* , psttRemoteWanted ) ;
        // SELECT THE REMOTE FILES WANTED
    
        }
            }
                off ++ ;
    
                delF( tin0P , pblt ) ;
                }
                    pcLocalFileTimes[ 2 * off + 1 ] = ((countT*)pblt)[ 1 ] ;
                    pcLocalFileTimes[ 2 * off     ] = ((countT*)pblt)[ 0 ] ;
    
                    __( cblt - 2 * sizeof( countT ) ) ;
                    __Z( pblt ) ;
                    SCOOPSdEL
                {
                else
                }
                    pcLocalFileTimes[ 2 * off + 1 ] = 0 ;
                    pcLocalFileTimes[ 2 * off     ] = 0 ;
                    __NZ( pblt ) ;
                    SCOOPSdEL
                    POOPR
                {
                if( POOP )
                delF( tin0P , psttl ) ;
                ((tin123S&)tin0P).pEtScratch->boxGetShadowF( tin0P , pblt , cblt , psttl , 1 ) ; ___( pblt ) ;
                SCOOPSnEW
                ZE( countT , cblt ) ;
                ZE( byteT* , pblt ) ;
    
                strFuseF( tin0P , psttl , T(psttc1)+T(".time") ) ; ___( psttl ) ;
                ZE( strokeS* , psttl ) ;
                if( POOP ) break ;
            {
            FORsTRINGSiN1( (strokeS*)pstt1LocalP )
            ZE( countT , off ) ;
        {
        if( pcLocalFileTimes )
        // GET THE LOCAL FILE TIMES
    
        }
            delF( tin0P , pba ) ;
            }
                }
                    }
                        pcRemoteFileTimes[ 2 * off + 1 ] = ((countT*)pba)[ 3 * off + 2 ] ;
                        pcRemoteFileTimes[ 2 * off     ] = ((countT*)pba)[ 3 * off + 1 ] ;
                        __( ((countT*)pba)[ 3 * off ] - 2 * sizeof( countT ) ) ;
                    {
                    else
                    }
                        pcRemoteFileTimes[ 2 * off + 1 ] = ((countT*)pba)[ 2 * off + 1 ] ;
                        pcRemoteFileTimes[ 2 * off     ] = ((countT*)pba)[ 2 * off     ] ;
                    {
                    if( cFiles == 1 )
                {
                for( countT off = 0 ; !POOP && off < cFiles ; off ++ )
            {
            if( !POOP && pba )
    
            delF( tin0P , pstta ) ;
            else              { __( cba != cFiles * 3 * sizeof( countT ) ) ; }
            if( cFiles == 1 ) { __( cba != cFiles * 2 * sizeof( countT ) ) ; }
            __Z( pba ) ;
            boxGetShadowF( tin0P , pba , cba , pstta ) ; ___( pba ) ;
            ZE( countT , cba ) ;
            ZE( byteT* , pba ) ;
    
            }
                if( psttc1 + CSpREFIX + psttc1->idAdam < pstte1 ) { strFuseF( tin0P , pstta , T(" ") ) ; ___( pstta ) ; }
                strFuseF( tin0P , pstta , T(psttc1)+tTime ) ; ___( pstta ) ;
                if( POOP ) break ;
            {
            FORsTRINGSiN1( (strokeS*)pstt1RemoteP )
            strMakeF( tin0P , LF , pstta , psttRemotePrefixP , ( pstt1RemoteP ? pstt1RemoteP->idAdam : 0 ) + cFiles * ( 1 + tTime.csF( tin0P ) ) ) ; ___( pstta ) ;
            ZE( strokeS* , pstta ) ;
            TN( tTime , ".time" ) ;
        {
        if( !POOP )
        // GET THE REMOTE FILE TIMES
    
        memSetF( tin0P , (byteT*)pfWanted , cFiles * sizeof( boolT ) ) ;
        newF( tin0P , LF , pfWanted  , cFiles ) ; ___( pfWanted ) ;
        newF( tin0P , LF , pcLocalFileTimes  , cFiles * 2 ) ; ___( pcLocalFileTimes ) ;
        newF( tin0P , LF , pcRemoteFileTimes , cFiles * 2 ) ; ___( pcRemoteFileTimes ) ;
        ZE( boolT* , pfWanted ) ;
        ZE( countT* , pcLocalFileTimes ) ;
        ZE( countT* , pcRemoteFileTimes ) ;
    
        }
            if( !POOP ) cFiles = cLocal ;
            __( cLocal - cRemote ) ;
            { FORsTRINGSiN1( (strokeS*)pstt1RemoteP ) cRemote ++ ; }
            { FORsTRINGSiN1( (strokeS*)pstt1LocalP  ) cLocal ++ ;  }
            ZE( countT , cRemote ) ;
            ZE( countT , cLocal ) ;
        {
        ZE( countT , cFiles ) ;
        // COUNT THE FILES
    {
    IFsCRATCH
    _IO_

    }
        if( POOP ) return ;
        __Z( psttRemotePrefixP ) ;
        __Z( pstt1RemoteP ) ;
        __Z( pstt1LocalP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::diskFileRefreshF( tin0S& tin0P , strokeS*& pstt1NotRefreshedP , const strokeS* const pstt1LocalP , const strokeS* const pstt1RemoteP , const strokeS* const psttRemotePrefixP )/*1*/
*/
 psttRemotePrefixP
 pstt1RemoteP
 pstt1LocalP
  will contain a string of strings; use FORsTRINGSiN1 to access them
 pstt1NotRefreshedP
arguments
 strFuseSeparateF
this function can fail due to hardcoded capacity limits
it is illegal to refer to this symbol in the definition of an adam
  \<A HREF=\"5.7210104.1.1.0.html\"\>7210104:  WAKEsHOW( "example.simplest.func.1030017.etherC.diskFileRefreshF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030017.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$diskFileRefreshF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

