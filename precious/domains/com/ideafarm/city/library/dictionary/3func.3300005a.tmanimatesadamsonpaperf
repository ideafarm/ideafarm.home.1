
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#undef MSsLEEPmIN

DONE( tmAnimateSadamsOnPaperF )
}
    }
        if( POOP ) POOPR

        paperOldC::obeyAnimateCbfStrokesIF( tinBaseP , etThread , 0 , ether ) ;

        }
            if( !( idCycle % cyclesPerSleep ) ) { ++ s ; thirdC::dosSleepRawIF( tinBaseP , msSleep ) ; }
            if( F(paperOldC::flagsModeIF( tinBaseP )) & flPAPERmODEi_ANIMATIONtHREADfIRED ) break ;

#endif
            }
                }
                    pRootI->letRefF() ;
                    }

                        paperOldC::ungrabIF( tinBaseP ) ;
                        paper.flushF( tinBaseP ) ;
                        paperOldC& paper = (paperOldC&)pRootI->selectPaperF(tinBaseP,ifcIDcMDpAPERsELECT_QUERYsHOW) ;
                        //paperOldC& paper = (paperOldC&)pRootI->selectPaperF( tinBaseP , ifcIDcMDpAPERsELECT_QUERYrENDER ) ;

                        }
                            sadamsC::pSadamsIF( tinBaseP )->tabFreshF( tinBaseP , etThread ) ;
                            //LOGrAWtID( "calling tabFreshF" ) ;
                        {
                        if( paperOldC::queryResetTabFreshIF( tinBaseP ) || !( idCycle % TUCK ) )
                        //LOGrAWtID( T("[idCycle]: ")+TF1(idCycle) ) ;
            
                        }
                            sadamsC::pSadamsIF( tinBaseP )->highlightIfF( tinBaseP ) ;
                            paperOldC::freshVolatileTextIF( tinBaseP , etThread , pcNotes , idCycle ) ;
                            paperOldC::obeyAnimateCbfStrokesIF( tinBaseP , etThread , idCycle , ether ) ;
                            paperOldC::beforeAnimatingIF( tinBaseP , etThread , idCycle ) ;
                        {
                        if( !( F(paperOldC::flagsModeIF( tinBaseP )) & flPAPERmODEi_SUPPRESSaNIMATION ) && !( F(paperOldC::flagsModeIF( tinBaseP )) & flPAPERmODEi_ANIMATIONtHREADfIRED ) )
                        paperOldC::grabIF( tinBaseP , TAG( TAGiDnULL ) ) ;

                        }
                            etThread.osTimeNowF( tinBaseP , timeL1 , timeL2 ) ;
                            timeL2 = timeL1 = 0 ;
            
                            }
                                //LOGrAW5( "too slow [cyclesPerSleep,msSleep]: " , cyclesPerSleep , " " , msSleep , "\r\n" ) ; //U::
                                if( bLathUp ) bLathUp = 0 ;
                                bLathUpLag = bLathUp ;
            
                                }
                                    if( !bLathUp && !bJump ) bJump = 1 ;
            
                                    msStep = msPowerAbove >= 0x10 ? msPowerAbove >> 4 : 1 ;
                                    msPowerAbove >>= 1 ;
                                    msPowerBelow >>= 1 ;
                                {
                                if( msSleep == msPowerBelow )
            
                                }
                                    if( !( cyclesPerSleep & BM_HIGH ) ) cyclesPerSleep <<= 1 ;
                                    msSleep = MSsLEEPmIN ;
                                {
                                if( msSleep < MSsLEEPmIN )
            
                                else         msSleep = msPowerBelow ;
                                if( !bJump ) msSleep -= msStep ;
            
                                if( bLathUp && bJump && idCycle != 0x20 ) bJump = 0 ;
            
                                if( !bJump && bLathUp && !bLathUpLag && msStep < ( msPowerAbove >> 4 ) ) msStep <<= 1 ;
                            {
                            else if( timeE1 > timeTarget1 )
                            }
                                //LOGrAW5( "too fast [cyclesPerSleep,msSleep]: " , cyclesPerSleep , " " , msSleep , "\r\n" ) ; //U::
                                if( !bLathUp ) bLathUp = 1 ;
                                bLathUpLag = bLathUp ;
            
                                }
                                    }
                                        if( bLathUp && !bJump ) bJump = 1 ;
                
                                        msStep = msPowerAbove >> 4 ;
                                        msPowerAbove <<= 1 ;
                                        msPowerBelow <<= 1 ;
                                    {
                                    if( msSleep == msPowerAbove )
                
                                    else         msSleep = msPowerAbove ;
                                    if( !bJump ) msSleep += msStep ;
            
                                    if( !bJump && !bLathUp && bLathUpLag && msStep > 1 ) msStep >>= 1 ;
                                {
                                else
                                if( cyclesPerSleep > 1 ) cyclesPerSleep >>= 1 ;
            
                                if( !bLathUp && bJump && idCycle != 0x20 ) bJump = 0 ;
                            {
                            if( timeE1 < timeTarget1 )
            
                            etThread.osTimeSubtractF( tinBaseP , timeE1 , timeE2 , timeL1 , timeL2 ) ;
                            etThread.osTimeNowF( tinBaseP , timeE1 , timeE2 ) ;
                            ZE( sCountT , timeE2 ) ;
                            ZE( countT , timeE1 ) ; //U::MOVE ALL OF THIS ADJUSTMENT LOGIC INTO BASE LIBRARY
                        {
                        if( !( idCycle % 0x20 ) )

                        //LOGrAW3( "back is reportedly not absent [idCycle]: " , idCycle , "\r\n" ) ;
                    {
                    if( !pRootI->backAbsentF() )
                {
                if( pRootI )
                windowOldC* pRootI = windowOldC::getRefIF( tinBaseP ) ;
            {
            
            backOldC::freshJoyIfIF( tinBaseP , etThread ) ;

            //SPECIAL APPLICATIONS SUCH AS SCREEN CAPTURE CAN SET flPAPERbACKmODE_POLLjOYeVENwHENcONSOLEhIDDEN TEMPORARILY
            //JOYSTICK IS NORMALLY NOT POLLED WHEN CONSOLE IS NOT ACTIVE (HENCE NOT VISIBLE); THIS IS TO MINIMIZE CPU LOAD WHEN OPERATOR IS NOT INTERACTING WITH CONSOLE
#if defined( NEVERdEFINED )

            if( !( ++ pcNotes[ 2 ] ) ) ++ pcNotes[ 3 ] ;
            if( !( ++ idCycle ) ) ++ idCycle ;
        {
        while( !( F(paperOldC::flagsModeIF( tinBaseP )) & flPAPERmODEi_ANIMATIONtHREADfIRED ) )
        ZE( sCountT , timeTarget2 ) ;
        countT msStep = msPowerAbove >> 4 ;
        ZE( boolT , bLathUpLag ) ;
        ZE( boolT , bLathUp ) ;
        countT timeTarget1 = TOCK << 0 ;
        countT bJump = 1 ; // 0=SINGLEsTEP 1=POWERoF2
        countT msPowerAbove = 0x80 ;
        countT msSleep = 0x40 ; //NOT ALLOWED TO GO BELOW 8
        countT msPowerBelow = 0x20 ;
        countT cyclesPerSleep = 1 ;
        TN( tb , " " ) ;
        TN( tcr , "\r\n" ) ;
        etThread.osTimeNowF( tinBaseP , timeL1 , timeL2 ) ;
        ZE( sCountT , timeL2 ) ;
        ZE( countT , timeL1 ) ;
        ZE( countT , idCycle ) ;
        countT pcNotes[ 5 ] = { 1 , 2 , 0 , 0 , 0 } ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

        SCOOPS
    {
    IFsCRATCH

    ((tinNormalS&)tinBaseP).tell_tmWatchF_toIgnoreMeF() ;

    thirdC::dosPriorityIF( tinBaseP , ifcTHREADpRIORITY_LAZIEST ) ;
{
if( pTaskP )
/*1*/TASK( tmAnimateSadamsOnPaperF )/*1*/

//#define MSsLEEPmIN 8
#define MSsLEEPmIN 1

/**/
*/
i also poll the joysticks
my main job is to animate
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

