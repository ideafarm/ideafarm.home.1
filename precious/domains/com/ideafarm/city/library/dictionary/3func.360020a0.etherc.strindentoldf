
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    delF( tin0P , psttOld ) ;
    delF( tin0P , psttDelimiter ) ;

    }
        if( idd ) { strFuseF( tin0P , psttP , psttDelimiter ) ; ___( psttP ) ; }

        delF( tin0P , psttw ) ;
        strFuseF( tin0P , psttP , psttw ) ; ___( psttP ) ;

        strSubstringF( tin0P , psttw , idf , sttq , psttDelimiter , psttOld , 0 ) ; ___( psttw ) ;
        { countT idf1 = idf ; strokeS sttq1 = sttq ; idd = strIdF( tin0P , 0 , flSTRmATCH_null , idf1 , sttq1 , psttDelimiter , psttOld ) ; }
        ZE( countT , idd ) ;

        }
            delF( tin0P , psttw ) ;
            strFuseF( tin0P , psttP , psttw ) ; ___( psttP ) ;
            strResizeF( tin0P , psttw , csttP , stti , 0 ) ; ___( psttw ) ;
            strMakeF( tin0P , LF , psttw , T("") , csttP ) ;
        {
        if( idf != 1 )

        ZE( strokeS* , psttw ) ;
    {
    while( !POOP && idf )
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;

    strFuseF( tin0P , psttP , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ psttOld->idAdam + cLines * csttP ) ; // CALLER MUST TAG

    }
        while( idf1 && strIdF( tin0P , 0 , flSTRmATCH_null , idf1 , sttq1 , psttDelimiter , psttOld ) ) cLines ++ ;
        strokeS sttq1( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf1 = 1 ;
    {
    if( psttOld->idAdam )
    countT cLines = 1 ;

    __NZ( psttP ) ;
    }
        psttP = 0 ;
        psttOld = psttP ;
    {
    else
    if( psttOldP ) { strFuseF( tin0P , psttOld , psttOldP ) ; ___( psttOld ) ; }
    ZE( strokeS* , psttOld ) ;

    else                 { strMakeF( tin0P , LF , psttDelimiter , T("\r\n")      ) ; ___( psttDelimiter ) ; }
    if( psttDelimiterP ) { strMakeF( tin0P , LF , psttDelimiter , psttDelimiterP ) ; ___( psttDelimiter ) ; }
    ZE( strokeS* , psttDelimiter ) ;

    if( (countT)sttP ) stti = sttP ;
    strokeS stti = S1C(' ') ;

    _IO_

    }
        if( POOP ) return ;
        __Z( csttP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL

    // THIS FUNCTION DOES NOT INDENT THE FIRST DELIMITED, SINCE IT IS EASY FOR THE CALLER TO DO SO
    SCOOP
{
/**//*1*/voidT etherC::strIndentOldF( tin0S& tin0P , strokeS*& psttP , const countT csttP , const strokeS sttP , const strokeS* const psttOldP , const strokeS* const psttDelimiterP )/*1*/
*/
  if 0, then T("\r\n") is used
  line delimiter
 psttDelimiterP
  can be 0
 psttOldP
  if 0 then S1C(' ') is used
  stroke value to use in indentation
 sttP
  number of columns to indent
  can be 0
 csttP
 psttP
arguments
indents all lines after the first
  \<A HREF=\"5.ca10104.1.1.0.html\"\>ca10104:  WAKEsHOW( "example.simplest.func.10300b3.etherC.strIndentOldF" )\</A\>
 simplest
examples
\<A HREF=\"5.10300b3.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strIndentOldF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

