
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.delF( tinBaseP , postReply ) ;

etThread.boxPutF( tinBaseP , T("///ideafarm/ephemeral/tmp/sprint.txt") , postReply , costReply ) ;

etThread.strokeF( tinBaseP , T(postReply) ) ;

}
    etThread.delF( tinBaseP , psttRaw ) ;
    }
        etThread.delF( tinBaseP , psttw ) ;
        costReply = etThread.strMakeF( tinBaseP , LF , postReply , psttw ) ; ___( postReply ) ;
        etThread.strSubstringF( tinBaseP , psttw , idf , idl , psttRaw ) ; ___( psttw ) ;
        ZE( countT , idl ) ;
        etThread.delF( tinBaseP , psttw ) ;
        etThread.strSubstringF( tinBaseP , psttw , idf , sttq , T("\r\n\r\n") , psttRaw ) ; ___( psttw ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        ZE( strokeS* , psttw ) ;
    {
    else
    if( bOld ) { costReply = etThread.strMakeF( tinBaseP , LF , postReply , psttRaw ) ; ___( postReply ) ; }

    }
        bOld = !etThread.strIdF( tinBaseP , idfn , sttqn , T("\r\n\r\n") , psttRaw ) ;
        //sttqn = ze ;
        idfn = 1 ;
        }
            if( !etThread.strIdF( tinBaseP , idfn , sttqn , T("\r\n") , psttRaw ) ) etThread.strReplaceF( tinBaseP , psttRaw , 0 , T("\r") , T("\r\n") ) ;
            //sttqn = ze ;
            idfn = 1 ;
            etThread.strReplaceF( tinBaseP , psttRaw , 0 , T("\n") , T("\r\n") ) ;
        {
        if( !etThread.strIdF( tinBaseP , idfn , sttqn , T("\r\n") , psttRaw ) )
        strokeS sttqn( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idfn = 1 ;
    {
    ZE( boolT , bOld ) ;

    etThread.delF( tinBaseP , postRaw ) ;
    etThread.strMakeF( tinBaseP , LF , psttRaw , T(postRaw) ) ; ___( psttRaw ) ;
    ZE( strokeS* , psttRaw ) ;
{
if( postRaw )
ZE( osTextT* , postReply ) ;

}
    costReply = 0 ;
    etThread.delF( tinBaseP , postRaw ) ;
{
if( ether && postRaw )
__( costReply == cbLimit ) ;

countT costReply = sock.readF( tinBaseP , postRaw , cbLimit , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
etThread.newF( tinBaseP , LF , postRaw , cbLimit ) ; ___( postRaw ) ;
ZE( osTextT* , postRaw ) ;
countT cbLimit = CBlIMITfROMsTUPIDcLIENT ;
etThread.delF( tinBaseP , postRequest ) ;
sock.writeF( tinBaseP , postRequest ) ;

etThread.strokeF( tinBaseP , T(USCORE79"\r\n\r\nSENDING REQUEST\r\n" USCORE79 "\r\n\r\n") ) ;
etThread.delF( tinBaseP , pstth ) ;
etThread.faceHearF( tinBaseP , pstth ) ; ___( pstth ) ;
ZE( strokeS* , pstth ) ;
etThread.strokeF( tinBaseP , T(postRequest) ) ;

etThread.strMakeF( tinBaseP , LF , postRequest , T("POST /cgi-bin/tophone.cgi HTTP/1.0\r\nContent-Length: ")+TF4(psttb->idAdam,flFORMAT_NObASE,0,10)+T("\r\n\r\n")+T(psttb) ) ; ___( postRequest ) ;

etThread.strMakeF( tinBaseP , LF , psttb , T("npa_rpn=650&nxx_rpn=533&xxxx_rpn=8096&npa_cbn=650&nxx_cbn=123&xxxx_cbn=4567&message=word1+word2&counter=11&java=no") ) ; ___( psttb ) ;
ZE( strokeS* , psttb ) ;


//U:G: etThread.strMakeF( tinBaseP , LF , postRequest , T("GET ")+T("/")+T(" HTTP/1.0\r\n\r\n") ) ; ___( postRequest ) ;
//U:G: etThread.strMakeF( tinBaseP , LF , postRequest , T("GET ")+T("/")+T(" HTTP/1.0\r\n\r\n") ) ; ___( postRequest ) ;
ZE( osTextT* , postRequest ) ;

sock.connectF( tinBaseP , 80 , socketC::nicNameIF( tinBaseP , ether , T("www.messaging.sprintpcs.com") ) ) ;
socketC sock( tinBaseP , ether , TAG( TAGiDnULL ) ) ;

TODO

/*1*/WAKEhIDE( "text2phone" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

