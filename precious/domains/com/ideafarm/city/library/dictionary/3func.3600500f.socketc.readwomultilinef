
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    dec02AM( cFunctionsPending ) ;
    }
    
        ((tinNormalS&)tinBaseP).pag3->_socketC_.grab.ungrabF( tinBaseP ) ;
        pOdometer->cbWrite += ((tinNormalS&)tinBaseP).odoSockCbWrite - _odoSockCbWriteOpen ;
        pOdometer->cbRead  += ((tinNormalS&)tinBaseP).odoSockCbRead  - _odoSockCbReadOpen  ;
        pOdometer = (sockOdometerS*)&(countT&)*((tinNormalS&)tinBaseP).pag3->_socketC_.pSwOdometer ;
        ((tinNormalS&)tinBaseP).pag3->_socketC_.nnLever = nnPeer ;
        ((tinNormalS&)tinBaseP).pag3->_socketC_.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    
        bRead.ungrabF( tinBaseP ) ;
    
        if( idleTimeAllowedRead ) FRESHtIMEaTOMIC( *pEther , timeLathRead.time1 , timeLathRead.time2 )
    
        if( !psttP ) { pEther->strMakeF( tinBaseP , LF , psttP , T("") ) ; ___( psttP ) ; }
    
        pEther->delF( tinBaseP , psttDelimiter ) ;    
        }
            }
                pEther->delF( tinBaseP , psttl ) ;
                pEther->strFuseF( tinBaseP , psttP , tCRLF ) ; ___( psttP ) ;
                pEther->strFuseF( tinBaseP , psttP , psttl , 0 , 0 , strokeS() , 0 , 0 ,/*U::SOUL?*/ csttEstimateP ) ; ___( psttP ) ;
            {
            else
            }
                break ;
                pEther->delF( tinBaseP , psttl ) ;
            {
            if( !pEther->strCompareF( tinBaseP , psttl , psttDelimiter ) )
            readWoLineF( tinBaseP , psttl , csttEstimateP ) ; ___( psttl ) ;
            ZE( strokeS* , psttl ) ;
        {
        while( !*pEther )
        TN( tCRLF , "\r\n" ) ;
    
        if( !csttEstimateP ) csttEstimateP = 0x100 ;
        else                 { pEther->strMakeF( tinBaseP , LF , psttDelimiter , T("")          ) ; ___( psttDelimiter ) ; }
        if( psttDelimiterP ) { pEther->strMakeF( tinBaseP , LF , psttDelimiter , psttDelimiterP ) ; ___( psttDelimiter ) ; }
        ZE( strokeS* , psttDelimiter ) ;
        _IO_
        bRead.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    
        const countT _odoSockCbWriteOpen = ((tinNormalS&)tinBaseP).odoSockCbWrite ;
        const countT _odoSockCbReadOpen  = ((tinNormalS&)tinBaseP).odoSockCbRead  ;
    
        }
            }
                return ;
                dec02AM( cFunctionsPending ) ;
            {
            if( *pEther )
        {
        IFbEcAREFUL
        SCOOPP
    {
    inc02AM( cFunctionsPending ) ;
{
/*1*/voidT socketC::readWoMultilineF( tinBaseS& tinBaseP , strokeS*& psttP , const strokeS* const psttDelimiterP , countT csttEstimateP )/*1*/

/**/
*/
  if 0 then 100 is implied
  can be 0
 csttEstimateP
   reading will stop when a null length line is encountered
  if 0 then T("") is used
  can be 0
  the delimiting line is excluded from the value returned in psttP
   in this example, reading will stop when a line consisting exactly of "stop here" is encountered
  example: T("stop here")
  value of the line to be used as the delimiting line
 psttDelimiterP
  after evaluation, will contain the lines read
 psttP
arguments
else psttP will contain a line, followed by "\r\n", for each line read, excluding the terminating line
if only the terminating line is read, psttP will be a null length string
the terminating line that equals the delimiter string is excluded from the returned string
the end of the message is marked by a line that is equal to psttDelimiterP
gets one multiline message from the peer
  \<A HREF=\"5.8430104.1.1.0.html\"\>8430104:  WAKEsHOW( "example.simplest.func.1070010.socketC.readWoMultilineF" )\</A\>
 simplest
examples
\<A HREF=\"5.1070010.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$readWoMultilineF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

