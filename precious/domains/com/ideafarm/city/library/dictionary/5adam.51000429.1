
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.delF( tinBaseP , postxNotFound ) ;

etThread.ifcDrivenServerF( tinBaseP , i1 , i2 ) ;
serverInfo2S i2( 0x50 , flSOCKETc_null , TF2(thirdC::third_idAdamRootI_IF( tinBaseP ),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) , 0 , (countT)&c8p , 0 , - 1 , 1 , sizeof( stateS ) , translateStateF ) ;
serverInfo1S i1( &pbdVarying , b_pbdVarying , bHandedOff , sgnIdPortReplaced , tmcF , countTC() , ether ) ;

c8p.c5 = (countT)&costxNotFound ;
c8p.c4 = (countT)&postxNotFound ;
c8p.c2 = (countT)&b_pbdVarying ;
c8p.c1 = (countT)&pbdVarying ;
count8S c8p ;

}
    costxNotFound = etThread.strMakeF( tinBaseP , LF , postxNotFound , t0+tnf ) ; ___( postxNotFound ) ;

    ;

        "\r\n")
        "Content-Length: ")+TF4(tnf.csF(tinBaseP),flFORMAT_FILLzE|flFORMAT_NObASE|flFORMAT_FOREIGN,8,0xa)+T("\r\n"
        "Content-Type: text/html\r\n"
        "Set-Cookie: key1 = value1 ; Comment = \"this is comment1\" , key2 = value2 ; Domain = .ideafarm.com ; Path = /1.2 , key3 = value3 ; Max-Age = 86000 ; Secure , key4 = value4 ; Version = 1 \r\n"
        T("HTTP/1.0 200 OK\r\n"

    textC t0 = 

    TN( tnf , postHTML_LOGINfORM ) ;
{
ZE( countT   , costxNotFound ) ;
ZE( osTextT* , postxNotFound ) ;

ZE( boolT , bHandedOff ) ;
batonC b_pbdVarying( tinBaseP , TAG( TAGiDnULL ) ) ;
ZE( byteT* , pbdVarying ) ;
signC sgnIdPortReplaced( tinBaseP , TAG( TAGiDnULL ) ) ;

TODO

DONEdRIVENsERVER( tmcF )

}
    }
        etThread.delF( tinBaseP , posti ) ;
        pso->readF( tinBaseP , posti , COSTiN , flSOCKETcrEAD_STILLhUNGRYiSoK ) ;
        etThread.newF( tinBaseP , LF , posti , COSTiN ) ; ___( posti ) ;
        ZE( osTextT* , posti ) ;

        thirdC::logIF( tinBaseP , "\\log.monggo.port.05" , nicNamePeer , 4 , count5S( 1 , 2 , 3 , 4 ) , (countT)&stPhrases , 1 ) ;

        stPhrases << postOldC( tinBaseP , etThread , T(" notFound") ) ;
        pso->writeF( tinBaseP , postxNotFound , costxNotFound ) ;

        !tblKeyValue ;
        etThread.delF( tinBaseP , psttPeer ) ;
        stPhrases << postOldC( tinBaseP , etThread , T("peer: ")+T(nicNamePeer)+T("\r\n") ) ;
        stPhrases << postOldC( tinBaseP , etThread , T("peer: \"")+T(psttPeer)+T("\"\r\n") ) ;
    {
    if( !*((tinNormalS&)tinBaseP).zEtScratch )
    readRequestF( tinBaseP , etThread , *((tinNormalS&)tinBaseP).zEtScratch , *pso , stPhrases , tblKeyValue , std_pstt , psttPeer , nicNamePeer ) ;
    stackC std_pstt( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_strokeS ) ;
    ZE( strokeS* , psttPeer ) ;

    tblKeyValue.newColF( tinBaseP , T("value") ) ;
    tblKeyValue.newColF( tinBaseP , T("key") ) ;
    tableC tblKeyValue( tinBaseP , etThread , T("keyValue") ) ;

    b_pbdVarying.ungrabF( tinBaseP ) ;
    }
        TN( t_cHamburgers , "" ) ; t_cHamburgers = TF3(++state.cHamburgers,0,8) ;
        TN( t_idMe        , "" ) ; t_idMe        = TF3(state.idMe,0,8) ;
        stateS& state = *(stateS*)pbdVarying ;
    {
    if( pbdVarying )
    b_pbdVarying.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    nicNameC nicNamePeer ;
    stackC stPhrases( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;

    countT&      costxNotFound =      *(countT*)c8p.c5 ;
    osTextT*&    postxNotFound =    *(osTextT**)c8p.c4 ;
    batonC&      b_pbdVarying  =      *(batonC*)c8p.c2 ;
    byteT*&      pbdVarying    =      *(byteT**)c8p.c1 ;
    count8S&     c8p           =     *(count8S*)cArg ;
{
if( cArg )
TASKdRIVENsERVER( tmcF )

TRANSLATEsTATEdRIVENsERVER_END
    state.idMe ++ ;
TRANSLATEsTATEdRIVENsERVER_MIDDLE
    case 1 : { state.idMe        = stateOther.idMe        ; }
    case 2 : { state.cHamburgers = stateOther.cHamburgers ; }
TRANSLATEsTATEdRIVENsERVER_BEGIN( stateS , 2 )

}
    etThread.delF( tinBaseP , psttName ) ;
    etThread.delF( tinBaseP , psttAction ) ;
    stPhrasesP << postOldC( tinBaseP , etThread , T("BODY END---------------------\r\n") ) ;
    }
        etThread.delF( tinBaseP , pstt1e ) ;
        }
            tblKeyValueP.newObjectF( tinBaseP , psttv ) ;
            tblKeyValueP.newObjectF( tinBaseP , psttk ) ;
            tblKeyValueP.newEventF( tinBaseP ) ;

            std_psttP << psttv ;
            std_psttP << psttk ;

            etThread.strFromUrlF( tinBaseP , psttv ) ; ___( psttv ) ;
            etThread.strFromUrlF( tinBaseP , psttk ) ; ___( psttk ) ;

            etThread.strSubstringF( tinBaseP , psttv , idf , sttq , sttEq , psttc1 ) ; ___( psttv ) ;
            etThread.strSubstringF( tinBaseP , psttk , idf , sttq , sttEq , psttc1 ) ; ___( psttk ) ;
            ZE( strokeS* , psttv ) ;
            ZE( strokeS* , psttk ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            countT idf = 1 ;
        {
        FORsTRINGSiN1( pstt1e )
        strokeS sttEq( '=' ) ;
        etThread.delF( tinBaseP , psttBody ) ;
        etThread.strWordsOldF( tinBaseP , pstt1e , psttBody , sttq , T("&") ) ; ___( pstt1e ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        ZE( strokeS* , pstt1e ) ;
        stPhrasesP << postOldC( tinBaseP , etThread , T("BODY BEGIN-------------------\r\n")+T(psttBody)+T("\r\n") ) ;
        etThread.delF( tinBaseP , postBody ) ;
        etThread.strMakeF( tinBaseP , LF , psttBody , T(postBody) ) ; ___( psttBody ) ; //ASSUME: psttBody IS OF FORM T("aaaa=1111&bbbb=2222&cccc=3333&dddd=4444")
        ZE( strokeS* , psttBody ) ;

        if( postBody ) postBody[ costBody ] = 0 ;
        if( *((tinNormalS&)tinBaseP).zEtScratch ) break ;
        sInP.readF( tinBaseP , postBody , costBody ) ;
        etThread.newF( tinBaseP , LF , postBody , costBody + 1 ) ; ___( postBody ) ;
        ZE( osTextT* , postBody ) ;
    {
    if( !*((tinNormalS&)tinBaseP).zEtScratch && costBody )

    }
        ((tinNormalS&)tinBaseP).zEtScratch->delF( tinBaseP , psttl ) ;
        }
            break ;
            ((tinNormalS&)tinBaseP).zEtScratch->delF( tinBaseP , psttl ) ;
        {
        else
        }
            ((tinNormalS&)tinBaseP).zEtScratch->delF( tinBaseP , psttValue ) ;
            ((tinNormalS&)tinBaseP).zEtScratch->delF( tinBaseP , psttKey ) ;
            if( !((tinNormalS&)tinBaseP).zEtScratch->strCompareF( tinBaseP , tContentLength , psttKey ) ) costBody = ((tinNormalS&)tinBaseP).zEtScratch->strDigitsToSCountF( tinBaseP , psttValue , 0xa , 1 ) ;
            ((tinNormalS&)tinBaseP).zEtScratch->strSubstringF( tinBaseP , psttValue , idf , idl , psttl ) ; ___( psttValue ) ;
            ZE( countT , idl ) ;
            ((tinNormalS&)tinBaseP).zEtScratch->strConvertToLowerCaseF( tinBaseP , psttKey ) ; ___( psttKey ) ;
            ((tinNormalS&)tinBaseP).zEtScratch->strSubstringF( tinBaseP , psttKey , idf , sttq , tColonWhite , psttl , 1 ) ; ___( psttKey ) ;
            countT idf = 1 ;
            ZE( strokeS* , psttValue ) ;
            ZE( strokeS* , psttKey ) ;
        {
        else if( psttl && psttl->idAdam )
        }
            ((tinNormalS&)tinBaseP).zEtScratch->strWordF( tinBaseP , psttName , psttl , sttq , sttb , 2 ) ; ___( psttName ) ;
            //sttq = ze ;

            ((tinNormalS&)tinBaseP).zEtScratch->strConvertToLowerCaseF( tinBaseP , psttl ) ; ___( psttl ) ;
            ((tinNormalS&)tinBaseP).zEtScratch->strWordF( tinBaseP , psttAction , psttl , sttq , sttb , 1 ) ; ___( psttAction ) ;
        {
        if( !psttAction )
        stPhrasesP << postOldC( tinBaseP , etThread , T("HEADER: \"")+T(psttl)+T("\"\r\n") ) ;

        if( *((tinNormalS&)tinBaseP).zEtScratch ) break ;
        sInP.readWoLineF( tinBaseP , psttl , 0x200 ) ; ___( psttl ) ;
        ZE( strokeS* , psttl ) ;
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    {
    while( !*((tinNormalS&)tinBaseP).zEtScratch && !etThread )
    ZE( countT , costBody ) ;
    ZE( strokeS* , psttName ) ;
    ZE( strokeS* , psttAction ) ;
    strokeS sttSlash( '/' ) ;
    strokeS sttb( ' ' ) ;
    TN( tContentLength , "content-length" ) ;
    TN( tColonWhite , ": " ) ;

    ((tinNormalS&)tinBaseP).zEtScratch->sockPsttHostF( tinBaseP , psttPeerP , nicNamePeerP ) ; ___( psttPeerP ) ;
    { ZE( countT , idp ) ; sInP.peerNameF( tinBaseP , idp , nicNamePeerP ) ; }
{
voidT readRequestF( tinBaseS& tinBaseP , etherC& etThread , socketC& sInP , stackC& stPhrasesP , tableC& tblKeyValueP , stackC& std_psttP , strokeS*& psttPeerP , nicNameC& nicNamePeerP )
*/
/*

    "</form>\r\n"
    "    </div>\r\n"                                                                                                                                                \
    "        </font>\r\n"                                                                                                                                           \
    "            <input type=submit name=\"enter\" value=\"Login\" alt=\"Login to Monggo.com\" width=\"85\" height=\"17\" border=\"0\">\r\n"                        \
    "            <br>\r\n"                                                                                                                                          \
    "        <font color=\"#333399\">\r\n"                                                                                                                          \
    "        <br>\r\n"                                                                                                                                              \
    "        </font>\r\n"                                                                                                                                           \
    "            <input type=\"password\" name=\"Password\" maxlength=\"15\" size=\"20\" value=\"1111\">\r\n"                                                       \
    "            <br>\r\n"                                                                                                                                          \
    "            </b>\r\n"                                                                                                                                          \
    "                Password:\r\n"                                                                                                                                 \
    "                <br>\r\n"                                                                                                                                      \
    "            <b>\r\n"                                                                                                                                           \
    "            <input type=\"text\" name=\"Email\" size=\"20\" maxlength=\"64\" value=\"christrees@yahoo.com\">\r\n"                                              \
    "            <br>\r\n"                                                                                                                                          \
    "        <font face=\"Arial, Helvetica, sans-serif\" size=\"2\"> \r\n"                                                                                          \
    "        </font>\r\n"                                                                                                                                           \
    "            </b>\r\n"                                                                                                                                          \
    "                </font>\r\n"                                                                                                                                   \
    "                    Email:\r\n"                                                                                                                                \
    "                <font size=\"2\" face=\"Arial, Helvetica, sans-serif\">\r\n"                                                                                   \
    "            <b>\r\n"                                                                                                                                           \
    "        <font size=\"1\">\r\n"                                                                                                                                 \
    "        <input type=\"hidden\" name=\"n\" value=9078>\r\n"                                                                                                     \
    "        <input type=\"hidden\" name=\"Lang\" value=0>\r\n"                                                                                                     \
    "    <div align=\"left\">\r\n"                                                                                                                                  \
    "<form method=\"POST\" id=Login name=Login>\r\n"                                                                                                                \
                                                                                                                                                                    \
#define postHTML_LOGINfORM                                                                                                                                          \

#define COSTiN 0x1000

;
}
    countT cHamburgers ;
    countT idMe ;
    countT idVersion ;
{
struct stateS

//Monggo descriptive name: "port 80 server for internal development use"

/*1*/WAKEhIDE( "monggo.port05.1" )/*1*/
/**/
*/
size: 189_9 source code lines
 string handling, including parsing
 support for manipulation of relational data
 ability to apply an update without interrupting service
objective 3: demonstrate some capabities of the current ifc system
objective 2: serve as a baseline for ad hoc http servers for internal development use
objective 1: logs incoming requests in raw and in parsed form
not intended for serving requests from the public
simple http server for internal software developer use
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

