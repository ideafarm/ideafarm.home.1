
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    }
        //etherC::loafIF( tin0P ) ; //TO FIND A BUG
        etThread.traceF( tin0P , T("I am Adam, and now that Eve has made her babies, I'm outahere.") ) ;
        ether.ifcHireF( tin0P , T("ifcIDaDAM_ADAM") , ifcIDaDAM_EVE , T("")        , flHIRE_WAIT                ) ;
        //ether.ifcHireF( tin0P , T("ifcIDaDAM_ADAM") , ifcIDaDAM_EVE , T("!debug ") , flHIRE_WAIT | flHIRE_DEBUG ) ;
        etThread.traceF( tin0P , T("We need helpers.  Let's make babies!") ) ;
        etThread.traceF( tin0P , T("I shall call you \"Eve\", my helpmate and companion!") ) ;
        etThread.traceF( tin0P , T("You are so beautiful.") ) ;
    {
    if( bEveMade )

    }
        }
            etherC::loafIF( tin0P ) ;
            etThread.traceF( tin0P , T("errors were found, so i am loafing.") ) ;
        {
        else
        if( !cErrors ) bEveMade = 1 ;

        }
            DEL( ps ) ;

            etThread.delF( tin0P , psttNote ) ;
            etThread.delF( tin0P , psttLine ) ;

            etThread.strokeF( tin0P , TF2(idLine,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("(")+TF2(idCol,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("): ")+T(psttLine)+tcri2+T(psttNote)+tcr ) ;
            *ps >> psttNote ; ___( psttNote ) ;
            ZE( strokeS* , psttNote ) ;

            *ps >> psttLine ; ___( psttLine ) ;
            ZE( strokeS* , psttLine ) ;

            *ps >> idCol ;
            ZE( countT , idCol ) ;    

            *ps >> idLine ;
            ZE( countT , idLine ) ;    

            stErrors >> ps ; ___( ps ) ;
            ZE( soulC* , ps ) ;
        {
        while( stErrors )
        countT cErrors = stErrors ;

        TN( tcri2 , "\r\n  " ) ;
        TN( tcr , "\r\n" ) ;

        etThread.traceF( tin0P , T("made Eve") ) ;
        etThread.osMakeF( tin0P , stErrors , ifcIDaDAM_EVE , flMAKE_DEBUG | flMAKE_ENABLEtHIRDpARTIES ) ;
        etThread.traceF( tin0P , T("making Eve") ) ;

        stackC stErrors( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_PTR_soulC ) ;
    {
    ZE( boolT , bEveMade ) ;

    etThread.traceF( tin0P , T("4 of 4 done.  Yeeouch!  That's my rib!  What the fuck???.") ) ;
    etThread.osMakeHoverFileF( tin0P , ifcIDaDAM_ADAM ) ; //MYSELF //A:ASSUME: I AM LOADED FROM THE master FOLDER, NOT THE hover FOLDER
    etThread.traceF( tin0P , T("3 of 4 done.") ) ;
    etThread.osMakeHoverFileF( tin0P , 0x41000003 ) ;
    etThread.traceF( tin0P , T("2 of 4 done.") ) ;
    etThread.osMakeHoverFileF( tin0P , 0x41000002 ) ;
    etThread.traceF( tin0P , T("1 of 4 done.") ) ;
    etThread.osMakeHoverFileF( tin0P , 0x81000001 ) ;
    etThread.traceF( tin0P , T("I am Adam, and I am building the hover files, beginning with the huge base.dll.") ) ;
{
if( pTaskP )
TASK( tmWorkF )

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_ADAM.build.hover.files" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

