
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

while( ~hFindDir && !ether && !POOP ) ;
}
    DEL( pInfoDir ) ;

    }
        }
            flushTimeGroupF( tinBaseP , etThread , stSortKeyShortRoot ,tPathDirTo+tShortDir , tPathDirFrom+tShortDir ) ;
            etThread.traceF( tinBaseP , T("flushing time group: ")+tTimeGroupLath ) ;
            while( ~hFindFile && !ether && !POOP ) ;
            }
                DEL( pInfoFile ) ;

                }
                    }
                        }
                            // }
                            //     //boolT bOk = CreateSymbolicLink( tOsNameTo , tOsNameFrom , 0 ) ;
                            // 
                            //     }
                            //         etThread.traceF( tinBaseP , T("        to: ")+tOsNameTo   ) ;
                            //         etThread.traceF( tinBaseP , T("      from: ")+tOsNameFrom ) ;
                            //         etThread.traceF( tinBaseP , T("name: ")+tName  ) ;
                            //     {
                            //     if( bSay ) 
                            // {
                            // else
                            // }
                            //     etThread.traceF( tinBaseP , T("destination file exists [tIfNameTo]: ")+tIfNameTo ) ;
                            // {
                            // if( etThread.diskFileExistsF( tinBaseP , tIfNameTo ) )
                            // 
                            // TN( tOsNameTo   , "" ) ; tOsNameTo   = T( osFileNameC( tinBaseP , etThread , tIfNameTo ) ) ;
                            // TN( tIfNameTo   , "" ) ; tIfNameTo   = tPathDirTo+tShortDir+TF3(++idFile,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+tDot+tName ;
                            // TN( tOsNameFrom , "" ) ; tOsNameFrom = T( osFileNameC( tinBaseP , etThread , tIfoName                                                                                                                     ) ) ;
                            // etThread.diskMakeDirIfNeededF( tinBaseP , tPathDirTo+tShortDir ) ;
                            // 
                            // //etThread.diskMoveFileOrDirF( tinBaseP , tPathDirFrom+tShortDir+TF3(idFile,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+tDot+tName , tIfoName ) ;

                            }
                                stSortKeyShortRoot.sinkF( tinBaseP , countTC() , pstt1KeyRoot , flSTACKsINK_null , 0 , 1 ) ;
                                etThread.strFuseSeparateF( tinBaseP , pstt1KeyRoot , tShortRoot ) ;
                                etThread.strFuseSeparateF( tinBaseP , pstt1KeyRoot , tName      , 0 , 0 , 0 , 0 , CSpREFIX + tShortRoot.csF( tinBaseP ) ) ; ___( pstt1KeyRoot ) ;
                                ZE( strokeS* , pstt1KeyRoot ) ;

                                //etThread.traceF( tinBaseP , tb8+tName+tb8+tShortRoot ) ;

                                etThread.delF( tinBaseP , psttTimeGroup ) ;
                                }
                                    flushTimeGroupF( tinBaseP , etThread , stSortKeyShortRoot ,tPathDirTo+tShortDir ,tPathDirFrom+tShortDir ) ;

                                    tTimeGroupLath = T(psttTimeGroup) ;
                                    etThread.traceF( tinBaseP , T("flushing time group: ")+tTimeGroupLath ) ;
                                {
                                if( etThread.strCompareF( tinBaseP , tTimeGroupLath , psttTimeGroup ) )

                                etThread.strSubstringF( tinBaseP , psttTimeGroup , idf , idl , tShortRoot ) ; ___( psttTimeGroup ) ;
                                ZE( strokeS* , psttTimeGroup ) ;
                                countT idl = 0x28 ;
                                countT idf = 1 ;

                                // !ideafarm.8.2.00000000.00000001.20100908@1008.20100909@0645.001.
                                // 123456789abcdef0123456789abcdef0123456789abc
                                // 0              1               2 
                            {
                            if( tShortRoot.csF( tinBaseP ) && tName.csF( tinBaseP ) )

                            }
                                }
                                    etThread.delF( tinBaseP , postName ) ;
                                    tName = T(postName) ;
                                    etThread.boxGetShadowF( tinBaseP , postName , costName , tFileMetaNameLong ) ; ___( postName ) ;
                                    ZE( countT   , costName ) ;
                                    ZE( osTextT* , postName ) ;
                                {
                                else
                                if( !etThread.diskFileExistsF( tinBaseP , tFileMetaNameLong ) ) etThread.traceF( tinBaseP , T("error / file does not exist: ")+tFileMetaNameLong ) ;

                                TN( tFileMetaNameLong , "" ) ; tFileMetaNameLong = tPathDirFrom+tShortDir+tShortRoot+tMetaDotCurrentName ;
                            {
                            TN( tName , "" ) ;

                            }
                                etThread.delF( tinBaseP , psttShortRoot ) ;
                                tShortRoot = T(psttShortRoot) ;
                                etThread.strSubstringF( tinBaseP , psttShortRoot , idf , idHit , tShortFile ) ; ___( psttShortRoot ) ;
                                countT idf = 1 ;
                                ZE( strokeS* , psttShortRoot ) ;
                            {
                            TN( tShortRoot , "" ) ;
                        {
                        if( idHit )
                        countT idHit = etThread.strIdF( tinBaseP , tDotDataDot , tShortFile ) ;

                        boolT bSay = 1 /* !( ++ idFile % TUCK ) || idFile == 1 */ ;
                    {
                    if( !bDir )

                    }
                        etThread.delF( tinBaseP , psttShortFile ) ;
                        tShortFile = T(psttShortFile) ;
                        etThread.delF( tinBaseP , psttnu ) ;
                        etThread.strBisectF( tinBaseP , psttnu , psttShortFile , pInfoFile->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortFile ) ;
                        ZE( strokeS* , psttShortFile ) ;
                        ZE( strokeS* , psttnu ) ;
                    {
                    TN( tShortFile , "" ) ;

                    const boolT bDir = pInfoFile->psttIfoName[ CSpREFIX - 1 + pInfoFile->psttIfoName->idAdam ].idAdam == '/' ;
                    TN( tIfoName , pInfoFile->psttIfoName ) ;
                {
                else
                }
                    break ;
                    DEL( pInfoFile ) ;
                {
                if( !pInfoFile || !pInfoFile->psttIfoName )

                etThread.diskFindFileOrDirOldF( tinBaseP , pInfoFile , hFindFile , tPathDirFrom+tShortDir+tLikeFile ) ; ___( pInfoFile ) ;
                ZE( infoFileS* , pInfoFile ) ;
            {
            do
            handleC hFindFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
            stackC stSortKeyShortRoot( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
            ZE( countT , idFile ) ;
            TN( tTimeGroupLath , "" ) ;

            etThread.traceF( tinBaseP , tShortDir ) ;
        {
        if( bDir && etThread.strCompareF( tinBaseP , tDotSlash , tShortDir ) && etThread.strCompareF( tinBaseP , tDotDotSlash , tShortDir ) )

        }
            etThread.delF( tinBaseP , psttShortDir ) ;
            tShortDir = T(psttShortDir) ;
            etThread.delF( tinBaseP , psttnu ) ;
            etThread.strBisectF( tinBaseP , psttnu , psttShortDir , pInfoDir->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortDir ) ;
            ZE( strokeS* , psttShortDir ) ;
            ZE( strokeS* , psttnu ) ;
        {
        TN( tShortDir , "" ) ;

        const boolT bDir = pInfoDir->psttIfoName[ CSpREFIX - 1 + pInfoDir->psttIfoName->idAdam ].idAdam == '/' ;
        TN( tIfoName , pInfoDir->psttIfoName ) ;
    {
    else
    }
        break ;
        DEL( pInfoDir ) ;
    {
    if( !pInfoDir || !pInfoDir->psttIfoName )

    etThread.diskFindFileOrDirOldF( tinBaseP , pInfoDir , hFindDir , tPathDirFrom+tLikeDir ) ; ___( pInfoDir ) ;
    ZE( infoFileS* , pInfoDir ) ;
{
do
handleC hFindDir( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

TN( tDot , "." ) ;
TN( tDotDotSlash , "../" ) ;
TN( tDotSlash , "./" ) ;
TN( tb8 , "        " ) ;
TN( tb , " " ) ;
TN( tMetaDotStar , "meta.*" ) ;
TN( tMetaDotCurrentName , "meta.currentname" ) ;
TN( tDotDataDot , ".data." ) ;
TN( tSlash , "/" ) ;
TN( tLikeFile , "!ideafarm.8.2.00000000.00000001.*.data.*" ) ;
TN( tLikeDir , "*" ) ;
TN( tPathDirTo , "///d/archive.sorted/" ) ;
TN( tPathDirFrom      , "///d/archive/" ) ;

TODO

}
    }
        etherP.delF( tinBaseP , pstt1KeyRoot ) ;

        }
            while( ~hFindFile && !POOP ) ;
            }
                DEL( pInfoFile ) ;

                }
                    }
                        etherP.delF( tinBaseP , psttShortNew ) ;
                        etherP.diskMoveFileOrDirF( tinBaseP , tFolderTo+T(psttShortNew) , tFolderFrom+tShortFile ) ;

                        //etherP.traceF( tinBaseP , T("moving from: ")+tShortFile ) ;
                        //etherP.traceF( tinBaseP , T("moving to  : ")+T(psttShortNew)   ) ;
                        //etherP.traceF( tinBaseP , T("        ")+tShortFile ) ;

                        //etherP.traceF( tinBaseP , T("[psttShortNew]: ")+T(psttShortNew) ) ;
            
                        }
                            }
                                psttShortNew[ CSpREFIX - 1 + 0x2b ] = psttzNewDigits[ CSpREFIX - 1 + 3 ] ;
                                psttShortNew[ CSpREFIX - 1 + 0x2a ] = psttzNewDigits[ CSpREFIX - 1 + 2 ] ;
                                psttShortNew[ CSpREFIX - 1 + 0x29 ] = psttzNewDigits[ CSpREFIX - 1 + 1 ] ;
                            {
                            if( psttzNewDigits )
                            strokeS* psttzNewDigits = tIdFile ;
                        {
            
                        // !ideafarm.8.2.00000000.00000001.20100908@1008.20100909@0645.001.
                        // 123456789abcdef0123456789abcdef0123456789abc
                        // 0              1               2 
            
                        etherP.strMakeF( tinBaseP , LF , psttShortNew , tShortFile ) ; ___( psttShortNew ) ;
                        ZE( strokeS* , psttShortNew ) ;

                        }
                            etherP.delF( tinBaseP , psttShortFile ) ;
                            tShortFile = T(psttShortFile) ;
                            etherP.delF( tinBaseP , psttnu ) ;
                            etherP.strBisectF( tinBaseP , psttnu , psttShortFile , pInfoFile->psttIfoName , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShortFile ) ;
                            ZE( strokeS* , psttShortFile ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShortFile , "" ) ;
                    {
                    if( !bDir )

                    const boolT bDir = pInfoFile->psttIfoName[ CSpREFIX - 1 + pInfoFile->psttIfoName->idAdam ].idAdam == '/' ;
                    TN( tIfoName , pInfoFile->psttIfoName ) ;
                {
                else
                }
                    break ;
                    DEL( pInfoFile ) ;
                {
                if( !pInfoFile || !pInfoFile->psttIfoName )

                etherP.diskFindFileOrDirOldF( tinBaseP , pInfoFile , hFindFile , tFolderFrom+tLikeFile ) ; ___( pInfoFile ) ;
                ZE( infoFileS* , pInfoFile ) ;
            {
            do
            handleC hFindFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            TN( tLikeFile , "" ) ; tLikeFile = T(psttzRoot)+T("*") ;
        {
        )
            psttzRoot[ CSpREFIX - 1 + 0x2c ].idAdam == '.'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x28 ].idAdam == '.'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x23 ].idAdam == '@'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x1a ].idAdam == '.'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x15 ].idAdam == '@'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x0c ].idAdam == '.'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x0a ].idAdam == '.'
            &&
            psttzRoot[ CSpREFIX - 1 + 0x01 ].idAdam == '!'
            &&
            psttzRoot
        (
        if

        }
            else if( !psttzRoot ) psttzRoot = psttc1 ;
                 if( !psttzKey  ) psttzKey  = psttc1 ;

            //etherP.traceF( tinBaseP , T("    ")+T(psttc1) ) ;
        {
        FORsTRINGSiN1( pstt1KeyRoot )
        ZE( strokeS* , psttzRoot ) ;
        ZE( strokeS* , psttzKey ) ;
        //etherP.traceF( tinBaseP , T("[idDataFileInGroupLathP]: ")+tIdFile ) ;
        textC tIdFile( tinBaseP , TAG( TAGiDnULL ) , flTEXTc_null , ++idFile , flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE|flFORMAT_NObASE , 3 , 0xa ) ;

        stSortKeyShortRootP >> pstt1KeyRoot ;
        ZE( strokeS* , pstt1KeyRoot ) ;
    {
    while( stSortKeyShortRootP )
    TN( tSlash , "/" ) ;
    ZE( countT , idFile ) ;

    TN( tFolderFrom , psttFolderFromP ) ;
    TN( tFolderTo   , psttFolderToP   ) ;
{
voidT flushTimeGroupF( tin0S& tinBaseP , etherC& etherP , stackC& stSortKeyShortRootP , const strokeS* const psttFolderToP , const strokeS* const psttFolderFromP )


/*1*/WAKEsHOWtEXT( "tool.archive.sort.by.name.within.timestamp" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

