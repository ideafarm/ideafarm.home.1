
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmRelayOldTeatAcceptorF )
}
    //LOGrAW7( "tit acceptor ending (ether,etThread.bQuitP): " , ether , " " , etThread , " " , bQuitP , "\r\n" ) ; //U::
    //CONoUTrAW7( "tit acceptor ending (ether,etThread.bQuitP): " , ether , " " , etThread , " " , bQuitP , "\r\n" ) ; //U::
    }
        home.idpTeat = portC() ;

        }
            else                 { DEL( pso ) ; }
            if( !bQuitP && pso ) etThread.osThreadF( tin0P , countTC() , tmRelayOldTeatServerF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , RELAYiNFOaRGcOUNTS , (countT)pso ) ;
            TELL( "launching tmRelayOldTeatServerF" )
    
            __( bRefuse ) ;
            sListen.acceptF( tin0P , pso , idPortPeer , nnPeer , bRefuse ) ;
            ZE( boolT , bRefuse ) ;
            ZE( countT , idPortPeer ) ;
            nicNameC nnPeer ;
            TELL( "waiting for a client to connect" )
            ZE( socketC* , pso ) ;
        {
        while( !etThread && !bQuitP )
    {
    if( home.idpTeat )

    sListen.listenF( tin0P ) ;
    (countT&)home.idpTeat = sListen.bindF( tin0P ) ;
    home.idpTeat = socketC::nicNameIF( tin0P , etThread ) ;

    socketC sListen( tin0P , etThread , TAG( TAGiDnULL ) ) ;

    homeS& home = homeS::homeIF() ;

    RELAYiNFOtm
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
/*1*/TASK( tmRelayOldTeatAcceptorF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

