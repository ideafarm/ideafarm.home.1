
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( !POOP ) etherP.strMakeF( tinP , LF , psttNameP , tName ) ; ___( psttNameP ) ;

    __( bFail ) ;
    }
        DEL( pJotOutP ) ;
        pJotOutP->flagsCtRefF() |= flJOTc_PATCHbOOKSfLAGStOpURGEoNdT ;
    {
    if( bFail || bQuitP  )

    }
        DEL( pJot1 ) ;
        if( bFail || bQuitP  ) pJot1->flagsCtRefF() |= flJOTc_PATCHbOOKSfLAGStOpURGEoNdT ;
    {
    if( pJot1 != &jotInP )

    }
        }
            pJotOutP = new( 0 , tinP , LF ) jotC(   tinP , tName , (flagsJotP) | ( bFinal ? flJOTc_null : flJOTc_DELETE ) | flJOTc_WRITE | flJOTc_PURGEoNcT , cKeepInactive , cbDataPerBookP , cIndexEntriesBookP ) ;
            tName = T(psttPrefixP)+(bFinal?T(""):T(".")+TF3(++idJotSet,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8)) ;
            pJot1 = pJotOutP ; pJotOutP = 0 ;
            if( pJot1 != &jotInP ) DEL( pJot1 ) ;
        {

        if( F(flagsResult) & flSORTERcrESULT_FULLYsORTED ) bFinal = 1 ;     //U::O:OPTIMIZATION: INSTEAD OF SORTING WO FINAL TIME, JUST RENAME THE INDEX AND DATA BOOK FILES ; RENAMING FILES IS MORE COMPLICATED AND MUST BE DONE CAREFULLY BUT WILL ELIMINATE A SORTING PASS

        //etherP.traceF( tinP , T("mySorter [flagsResult]:    ")+TF2(flagsResult,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        if( bQuitP || bFail || bFinal /*|| bDebug*/ ) break ;

        //USE FOR TESTING TO VERIFY THAT NAMES ARE PURGED (FILE IS DELETED) ON DT: boolT bDebug = bFinal ? 1 : 0 ;
        //P:PERSONALITY:  IF bQuitP THEN OUTPUT FILE IS INCOMPLETE AND WILL BE FLAGGED FOR DELETION ON DT, BUT THE INCOMPLETENESS IS OTHERWISE SILENT, SO CALLER IS RESPONSIBLE FOR DETECTING bQuitP

        }
            }
                bFail = 1 ;
                etherP.traceF( tinP , T("exception: mySorter failed") ) ;
                POOPR
            {
            else
            if( !POOP ) flagsResult = mySorter ;
            sorterC mySorter( tinP , *tinP.pEtScratch , bQuitP , *pJotOutP , *pJot1 , cSortingSlotsP , flagsModeP , cEstimateOutP , cbIgnoreP ) ;
            SCOOPS
        {
        IFsCRATCH
        ZE( flagsT , flagsResult ) ;
    {
    while( !bQuitP )
    ZE( boolT , bFinal ) ;
    ZE( boolT , bFail ) ;

    pJotOutP = new( 0 , tinP , LF ) jotC(   tinP , tName , (flagsJotP) | flJOTc_DELETE | flJOTc_WRITE | flJOTc_PURGEoNcT , cKeepInactive , cbDataPerBookP , cIndexEntriesBookP ) ;
    TN( tName , "" ) ; tName = T(psttPrefixP)+T(".")+TF3(++idJotSet,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_FILLzE,8) ;
    ZE( countT , idJotSet ) ;

    jotC* pJot1 = &jotInP ;

    const countT cKeepInactive = jotInP.cKeepInactiveF() ;

    SCOOPO( (const poopC&)etherP ) ;
{
/*1*/voidT _export sortF( tinS& tinP , etherC& etherP , const boolT& bQuitP , jotC*& pJotOutP , jotC& jotInP , strokeS*& psttNameP , const strokeS* const psttPrefixP , countT cbDataPerBookP , const countT cIndexEntriesBookP , countT cSortingSlotsP , flagsT flagsModeP , flagsT flagsJotP , countT cEstimateOutP , countT cbIgnoreP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ipdos for permitted uses.
//

