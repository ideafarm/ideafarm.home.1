
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return POOP ? 0 : diff ;

    }
        __( idFail ) ;

        }
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_COMPARE0 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_COMPARE0 ;
            {
            else
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_COMPARE2 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_COMPARE2 ;
            {
            else if( pb2P <= pbHit && pbHit < pb2P + cbP )
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_COMPARE1 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_COMPARE1 ;
            {
            else if( pb1P <= pbHit && pbHit < pb1P + cbP )
            }
                diff = _brcRaw ;
                BOSnOtIN( memcmp( pb1P , pb2P , cbP ) )
                ZE( countT , _brcRaw ) ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;

            RESTARTiFqUERY( bAcceptEvent_c_memcmpIF_F , (countT*)&pbHit )
            ZE( byteT* , pbHit ) ;

            //_IO_
        {
        if( !idFail )

        }
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_LATHbYTE2 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_LATHbYTE2 ;
            {
            else
            }
                byteT bTest = pb2P[ cbP - 1 ] ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;

            RESTARTiFqUERY( bAcceptEvent_c_memcmpIF_F , (countT*)&pbHit )
            ZE( byteT* , pbHit ) ;

            //_IO_
        {
        if( !idFail )

        }
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_LATHbYTE1 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_LATHbYTE1 ;
            {
            else
            }
                byteT bTest = pb1P[ cbP - 1 ] ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;

            RESTARTiFqUERY( bAcceptEvent_c_memcmpIF_F , (countT*)&pbHit )
            ZE( byteT* , pbHit ) ;

            //_IO_
        {
        if( !idFail )

        }
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_WOTHbYTE2 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_WOTHbYTE2 ;
            {
            else
            }
                byteT bTest = *pb2P ;
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;

            RESTARTiFqUERY( bAcceptEvent_c_memcmpIF_F , (countT*)&pbHit )
            ZE( byteT* , pbHit ) ;

            //_IO_
        {
        if( !idFail )

        }
            }
                etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: ifcIDiMPOTENCEmEMcMP_WOTHbYTE1 [pbHit,pb1P,pb1P+cbP,pb2P,pb2P+cbP]:     ")+TF3((countT)pbHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb1P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb1P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)pb2P,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF3((countT)(pb2P+cbP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
                idFail = ifcIDiMPOTENCEmEMcMP_WOTHbYTE1 ;
            {
            else
            }
                byteT bTest = *pb1P ;

                //}
                //    }
                //        RaiseException( EXCEPTION_IN_PAGE_ERROR , 0 , 0 , 0 ) ; //TO FIND A BUG
                //    {
                //    if( !( idIn % TUCK ) )
                //    countT idIn = 1 + incv02AM( idInLath ) ;
                //    static countT idInLath ;
                //{
                //if( ((tin9S&)tin0P).pc Utility[ 0 ] )
            {
            if( !_restart )
            _restart.flags |= flRESTARTc_QUIET ;

            RESTARTiFqUERY( bAcceptEvent_c_memcmpIF_F , (countT*)&pbHit )
            ZE( byteT* , pbHit ) ;

            //_IO_
        {
        ZE( countT , idFail ) ;

        //_IO_
    {
    if( cbP )
    ZE( sCountT , diff ) ;

    //_IO_
    //ALL OF THESE ARE COMMENTED OUT ONLY FOR SPEED; THEY WORK

    //}
    //    if( POOP ) return 0 ;
    //    __Z( pb2P ) ;
    //    __Z( pb1P ) ;
    //    if( POOP ) return 0 ;
    //{
    //IFbEcAREFUL
    //COMMENTED OUT ONLY FOR SPEED; IT WORKS
{
/*1*/sCountT thirdC::c_memcmpIF( tin0S& tin0P , const byteT* const pb1P , const byteT* const pb2P , const countT cbP )/*1*/

}
    return 1 ;

    }
        etherC::etRockIF( tin0P ).traceF( tin0P , tSay ) ;

        }
            tSay += tb4+TF2(infoP.pcInfo[offi],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
        {
        for( countT offi = 0 ; offi < infoP.ccInfo ; offi ++ )

        ;

            +tb4+TF2(infoP.ccInfo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
            +tb4+tException
            T("!exception [exception,ccInfo,pcInfo[]]:")

        TN( tSay , "" ) ; tSay =
        TN( tb4 , "    " ) ;

        ;
            : TF2(infoP.idException,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
            ? T(postException)
        TN( tException , "" ) ; tException = postException

        const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapExceptionType( infoP.idException ) ;
    {
    else
    }
        else                                                                    etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: c_memcmpIF INpAGEeRROR "  "[pbHitP,ntErrorCode]:     ")+TF3((countT)pbHitP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("    ")+TF2(infoP.pcInfo[2],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        if( infoP.idException == ifcIDeVENTeXCEPTIONmONITORED_ACCESSvIOLATION ) etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: c_memcmpIF ACCESSvIOLATION [pbHitP]:"          "     ")+TF3((countT)pbHitP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
        if( infoP.ccInfo > 1 ) pbHitP = (byteT*)infoP.pcInfo[ 1 ] ;
    {
    )
        || infoP.idException == ifcIDeVENTeXCEPTIONmONITORED_INpAGEeRROR
           infoP.idException == ifcIDeVENTeXCEPTIONmONITORED_ACCESSvIOLATION
    (
    if

    //if( infoP.idException == ifcIDeVENTeXCEPTIONmONITORED_ACCESSvIOLATION ) etherC::etRockIF( tin0P ).traceF( tin0P , T("!exception: [bWrite,pvTarget]:     ")+TF2(infoP.pcInfo[0])+T("    ")+TF2(infoP.pcInfo[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    byteT*& pbHitP = *(byteT**)pcArgP ;
{
boolT bAcceptEvent_c_memcmpIF_F( tin0S& tin0P , tellInfoSysExceptionS& infoP , countT* pcArgP )

/**/

*/
 cbP
 pb2P
 pb1P
arguments
  \<A HREF=\"5.fb00104.1.1.0.html\"\>fb00104:  WAKEsHOW( "example.simplest.func.1020008.thirdC.c_memcmpIF" )\</A\>
 simplest
examples
\<A HREF=\"5.1020008.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$c_memcmpIF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

