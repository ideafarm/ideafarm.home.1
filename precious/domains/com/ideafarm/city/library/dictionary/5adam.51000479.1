
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}
    }
        }
            //if( idCycle == 1 ) etThread.osEditF( tinBaseP , tPrefix+T(".summary") ) ;
            etThread.delF( tinBaseP , pbts ) ;
            }
                etThread.delF( tinBaseP , postr ) ;
                etThread.boxPutF( tinBaseP , tPrefix+T(".summary") , postr , costr ) ;
                etThread.delF( tinBaseP , psttr ) ;
                countT costr = etThread.strMakeF( tinBaseP , LF , postr , psttr ) ; ___( postr ) ;
                ZE( osTextT* , postr ) ;

                /* if( idFile == 2 ) */ etThread.strokeF( tinBaseP , T("\f")+T(psttr) ) ;
        
                etThread.delF( tinBaseP , psttd ) ;
                ;
                )
        
                    TT(timeN1,timeN2)+T("    cThreads: ")+TF1(cThreads)+tc+T(" ")+tc+T(psttd)
        
                etThread.strFuseF( tinBaseP , psttr ,
                ZE( strokeS* , psttr ) ;
        
                }
                    pbc += sizeof( tinNormalS ) ;
        
                    etThread.strFuseF( tinBaseP , psttd , TF3(etherC::ifc_idAdamG_IF(tinBaseP),flFORMAT_null,9)+TP(((tinNormalS*)pTin)->postThreadName,0x10)+TP(ppostWhere[idWhere2],0x18)+T(((tinNormalS*)pTin)->postTell)+tc ) ;
                    cThreads ++ ;
        
                    countT idWhere2 = ((tinNormalS*)pTin)->idWhere - ifcIDwHERE_IFC + 1 < sizeof ppostWhere / sizeof ppostWhere[ 0 ] ? ((tinNormalS*)pTin)->idWhere - ifcIDwHERE_IFC + 1 : 0 ;
            
                    tinBaseS* pTin = (tinBaseS*)pbc ;
                {
                while( pbc < pbe )
                byteT* const pbe = pbts + cbts ;
                byteT*       pbc = pbts ;
                etThread.strFuseF( tinBaseP , psttd , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ 0x10000 ) ;
                ZE( strokeS* , psttd ) ;
                TN( tq , "\"" ) ;
                TN( tb , " " ) ;
                TN( tc , "\r\n" ) ;
        
                ZE( countT , cThreads ) ;
            {
            if( pbts )
            TN( tPrefix , "" ) ; tPrefix = T("///ideafarm/ephemeral/domains/com/ideafarm/")+TF1(DDNUMB)+T("/")+TT(timeN1,timeN2)+T("/")+tIdFile ;
        
            } ;
                "OSwAITgRAB" ,
                "OSoTHER" ,
                "OSmONITOR" ,
                "OSwAITiNTERNETaCCEPT" ,
                "OSwAITiNTERNETwRITE" ,
                "OSwAITiNTERNETrEAD" ,
                "OSwAITfILEwRITE" ,
                "OSwAITfILErEAD" ,
                "OSwAITwINDOW" ,
                "OSwAITmONITORING" ,
                "OSwAITsIGN" ,
                "OSwAITbATON" ,
                "OSwAITnAP" ,
                "IFC" ,
                "<invalid value>" ,
            {
            static osTextT* ppostWhere[] = // 0010*.ifcIDwHERE AND func.12f0007.tinNormalS.strFuseF AND adam.c740104 MUST BE KEPT IN SYNC
        
            etThread.osTimeNowF( tinBaseP , timeN1 , timeN2 ) ;
            ZE( sCountT , timeN2 ) ;
            ZE( countT , timeN1 ) ;
        
            __( cbts % sizeof( tinNormalS ) ) ;
    
            ether.boxGetF( tinBaseP , pbts , cbts , tFile ) ;
            ZE( countT , cbts ) ;
            ZE( byteT* , pbts ) ; // "tin set"
        {
        //else                                           
        //if( !etThread.diskFileExistsF( tinBaseP , tFile ) ) etThread.osMessageBoxF( tinBaseP , tFile+T(" does not exist") ) ;
    
        TN( tFile   , "" ) ; tFile   = T("///ideafarm/ephemeral/domains/com/ideafarm/6a40104/")+TF1(etThread.diskIdF(tinBaseP,T("///c")))+T("/tinNormalSet.")+TF1(idFile) ;
        TN( tIdFile , "" ) ; tIdFile = TF1(idFile) ;
    {
    //U: for( countT idFile = 1 ; idFile <= 2 ; idFile ++ )
    for( countT idFile = 1 ; idFile <= 1 ; idFile ++ )

    idCycle ++ ;
{
while( !etThread && !ether )
ZE( countT , idCycle ) ;

TODO

/*1*/WAKEhIDE( "tool.rpt.state.threads.summary" )/*1*/
/**/
*/
\<A HREF=\"5.c740104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

