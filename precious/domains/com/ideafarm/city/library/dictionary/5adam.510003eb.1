
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        if( bOnePass ) break ;

        etThread.strokeF( tin0P , T("\r\n" USCORE79 "\r\n\r\none adam of each class in the range ")+TF1(idMin)+T(" through ")+TF1(ether||etThread?idMax-1:idMax)+T(" has been hired\r\nok\r\npress enter") ) ;

        }
            #endif
            }
                }
                    }
                        }
                            etThread.ifcDatumF( tin0P , flDATUM1_ADAMlIFEtIME , flDATUM2_countT , 0 , pcPart , (byteT*)pcTimes , sizeof pcTimes ) ;
                            countT pcTimes[] = { time1A , time2A , time1B , time2B , time1C , time2C , time1D , time2D } ;
                            countT pcPart[] = { ida , 0 } ;

                            etThread.strokeF( tin0P , T("\r\n" USCORE79 "\r\n\r\ntiming report for ")+tIda+T(":\r\n\r\n")+TT(time1A,time2A)+T("\r\n")+TT(time1B,time2B)+T("\r\n")+TT(time1C,time2C)+T("  watch employers\r\n")+TT(time1D,time2D)+T("  watch nothing\r\n") ) ;
                        {
                        if( !value && !ether && !etThread )

                        __( idDeathType ) ;
                        TRIAL( "!bWatchfulNo" , time1D , time2D )
                    {
                    if( !value && !ether && !etThread )

                    __( idDeathType ) ;
                    TRIAL( "!bWatchEmployers" , time1C , time2C )
                {
                if( !value && !valueSave && !ether && !etThread )

                __( idDeathType ) ;
                TRIAL( "" , time1B , time2B ) // WE DO THE DEFAULT TRIAL TWICE TO CATCH CODE THAT WILL ONLY WORK THE FIRST TIME
                const countT valueSave = value ;
            {
            if( !value && !ether && !etThread )
            #if defined( NEVERdEFINED )

            __( idDeathType ) ;

            TRIAL( "" , time1A , time2A )

            ZE( sCountT , time2D ) ;
            ZE( countT  , time1D ) ;
            ZE( sCountT , time2C ) ;
            ZE( countT  , time1C ) ;
            ZE( sCountT , time2B ) ;
            ZE( countT  , time1B ) ;
            ZE( sCountT , time2A ) ;
            ZE( countT  , time1A ) ;

            ZE( countT , idDeathType ) ;
            ZE( countT , value ) ;

            }
                etThread.delF( tin0P , postIda ) ;
                etThread.boxPutF( tin0P , T("///ideafarm/ephemeral/tmp/de30104/postIda.ost") , postIda , costIda ) ;
                countT costIda = etThread.strMakeF( tin0P , LF , postIda , tIda ) ; ___( postIda ) ;
                ZE( osTextT* , postIda ) ;
            {

            textC tIda(  tin0P , ida , flFORMAT_UNSIGNED | flFORMAT_FILLzE , 7 ) ;
        {
        for( countT ida = idMin ; !ether && !etThread && ida <= idMax ; ida ++ )
        etThread.strokeF( tin0P , T("[")+TF1(idMin)+T(",")+TF1(idMax)+T("]\r\n") ) ;

        if( idMin == 0x4010000 ) idMin ++ ;
        else etThread.boxMenuIdRangeF( tin0P , idMin , idMax , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/5adam.????104") , 0x100000 , S1C('/') ) ;
        }
            idMax = 0x4010326 ;
            idMin = 0x4010326 ;
        {
        if( bTest )
        ZE( countT , idMax ) ;
        ZE( countT , idMin ) ;

        textC tExe = T("///ideafarm/ephemeral/city/park/7use/01000020") + + T(".ipdos-we") ;
    {
    while( !ether && !etThread )

    const boolT bTest    = bTestF( tin0P , etThread ) ;
    const boolT bOnePass = bOnePassF( tin0P , etThread ) ;

    //etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_LAZIEST ) ; //U: CONJ: NOT NEEDED SINCE PARENT PROCESS HAS IT
    etThread.strokeF( tin0P , T("IdeaFarm " "(tm) City Load DEBUG\r\ni apply a load to city center by continually hiring an adam of each defined class, sequentially\r\n") ) ;
{
else
}
    etThread.strokeF( tin0P , T("Another de30104 appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tin0P , TAG( TAGiDnULL ) , T("de30104") ) ;

TODO

}
    return bTest ;

    }
        }
            if( bOk ) etThread.strokeF( tin0P , T("\"")+T(psttc1)+T("\" ok\r\n") ) ;
            else if( !etThread.strCompareF( tin0P , psttc1 , T("!test") ) ) { bTest = bOk = 1 ; }
            }
                }
                    default : { idArg = 0 ; break ; }
                {
                switch( idArg )
            {
            if( idArg )

            ZE( boolT , bOk ) ;
        {
        FORsTRINGSiN1( etThread.ether_pstt1_processParametersI_F( tin0P ) )
        ZE( countT , idArg ) ;
    {
    ZE( boolT , bTest ) ;
{
boolT bTestF( tin0S& tin0P , etherC& etThread )

}
    return bOnePass ;

    }
        }
            if( bOk ) etThread.strokeF( tin0P , T("\"")+T(psttc1)+T("\" ok\r\n") ) ;
            else if( !etThread.strCompareF( tin0P , psttc1 , T("!onePass") ) ) { bOnePass = bOk = 1 ; }
            }
                }
                    default : { idArg = 0 ; break ; }
                {
                switch( idArg )
            {
            if( idArg )

            ZE( boolT , bOk ) ;
        {
        FORsTRINGSiN1( etThread.ether_pstt1_processParametersI_F( tin0P ) )
        ZE( countT , idArg ) ;
    {
    ZE( boolT , bOnePass ) ;
{
boolT bOnePassF( tin0S& tin0P , etherC& etThread )

tmHEAReNTER( tmQuitF )

    }
        /*if( !etThread ) etThread.osSleepF( tin0P , TOCK * 0x10 , TOCK , flSLEEP_TALK ) ;*/                                                                              \
                                                                                                                                                                    \
        etThread.osTimeSubtractF( tin0P , time1eP , time2eP , time1s , time2s ) ;                                                                                      \
        etThread.osTimeNowF( tin0P , time1eP , time2eP ) ;                                                                                                             \
                                                                                                                                                                    \
        etThread.osProcessF( value , idDeathType , tin0P , tExe , tArg ) ;                                                                                             \
                                                                                                                                                                    \
        etThread.osTimeNowF( tin0P , time1s , time2s ) ;                                                                                                               \
        ZE( sCountT , time2s ) ;                                                                                                                                  \
        ZE( countT , time1s ) ;                                                                                                                                   \
                                                                                                                                                                    \
        etThread.strokeF( tin0P , T("\r\n" USCORE79 "\r\n\r\n")+tIda+T(" ")+T(postArgP)+T("\r\n" USCORE79 "\r\n\r\n") ) ;                                            \
                                                                                                                                                                    \
        textC tArg = T("///ideafarm/ephemeral/city/park/7use/") + tIda + T(".ipdos-wd ") + T("!testAuto " postArgP) ;           \
    {                                                                                                                                                               \
    if( !etThread )                                                                                                                                                    \
                                                                                                                                                                    \
#define TRIAL(postArgP,time1eP,time2eP)                                                                                                                             \

/*1*/WAKEhIDE( "city.hire.all.adams" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

