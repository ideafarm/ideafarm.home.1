
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        ++ s ; ((tin123S&)tin0P).pEtScratch->osSleepF( tin0P , TOCK * 0x4 ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    
        etThread.delF( tin0P , pstt1m ) ;
        }
            CONoUTrAW( (!flagsFail?T("aok"):T("flagsFail:")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED))+T("\r\n") ) ;

            }
                flagsFail |= flFAIL_COULDnOTmOVEfILE ;
                POOPR
            {
            if( POOP )
            ((tin123S&)tin0P).pEtScratch->delF( tin0P , psttShort ) ;

            ((tin123S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tWhere+T(psttShort) , psttc1 ) ;

            ;
                    : tSent
                    ? tNotSent
                : flagsFail
                ? tNotSentAbandoned

            TN( tWhere , "" ) ; tWhere = bFailPermanent

            CONoUTrAW( "moving the file\r\n" ) ;

            }
                flagsFail |= flFAIL_COULDnOTgETsHORTfILEnAME ;
                POOPR
            {
            if( POOP )

            ((tin123S&)tin0P).pEtScratch->strWordF( tin0P , psttShort , psttc1 , sttq , sSlash , - 1 ) ; ___( psttShort ) ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , psttShort ) ;
            CONoUTrAW( "cleaning up 3\r\n" ) ;

            }
                CONoUTrAW( "unknown error\r\n" ) ;
                flagsFail |= flFAIL_UNKNOWNeRROR ;
                POOPR
            {
            if( POOP )
            CONoUTrAW( "cleaning up 2\r\n" ) ;

            }
                stBc.purgeF( tin0P ) ;
                stCc.purgeF( tin0P ) ;
                stTo.purgeF( tin0P ) ;

                etThread.delF( tin0P , psttFileBody ) ;

                CONoUTrAW( "cleaning up 1\r\n" ) ;
                etThread( tin0P , pStkEmailRelay ) ;
                etThread.delF( tin0P , psttFrom ) ;
                }
                    }
                        }
                            CONoUTrAW( T("end of handling list ")+TF2(offs,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
                            }
                                while( ~hWalk ) ;
                                }
                                    CONoUTrAW( T("end of recipient \"")+T(psttr)+T("\"\r\n") ) ;
                                    etThread.delF( tin0P , psttBccLine ) ;
    
                                    CONoUTrAW( "destroyed socket\r\n" ) ;
                                    }
                                        CONoUTrAW( "writing quit: aok; destroying socket\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "writing quit: failed\r\n" ) ;
                                            flagsFail |= flFAIL_QUITcOMMANDrEJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 221 ) ;
                                        CONoUTrAW( "writing quit: verifying reply\r\n" ) ;
                                        sockc.writeF( tin0P , (osTextT*)T("quit\r\n") ) ;
        
                                        CONoUTrAW( "writing data: aok; writing quit\r\n" ) ;

                                        //}
                                        //    break ;
                                        //
                                        //    }
                                        //        etThread.boxPutF( tin0P , T("//smtp/" ifcEMAIL_MAILoUT "/")+T(psttFrom) , tReply , tReply.csF( tin0P ) ) ;
                                        //
                                        //        ) ;
                                        //
                                        //            "Your email was sent.\r\n"
                                        //            "\r\n"
                                        //            "Subject: Your email was sent\r\n"
                                        //
                                        //        TN( tReply ,
                                        //    {
                                        //    //NOTIFY from THAT EMAIL WAS SENT
                                        //    CONoUTrAW( T("an email was sent.  notifying \"")+T(psttFrom)+T("\"\r\n") ) ;
                                        //{
                                        //else if( etThread.strCompareF( tin0P , psttFrom , T(ifcEMAIL_MAILoUT) ) )
                                        //THIS CAN CYCLE INFINITELY

                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;

                                            }
                                                etThread.boxPutF( tin0P , T("//smtp/" ifcEMAIL_MAILoUT "/")+T(psttFrom) , tReply , tReply.csF( tin0P ) ) ;

                                                ) ;

                                                    "       will avoid a bug in the censoring software.)\r\n"
                                                    "       the brackets so that they appear as \"[ ]\".  (Adding the space between the brackets\r\n"
                                                    "    2. If your email contains a '[' followed immediately by a ']', put a space between\r\n"
                                                    "\r\n"
                                                    "    1. Remove all references to web sites that might be listed as spamming sites.\r\n"
                                                    "\r\n"
                                                    "Tips:\r\n"
                                                    "\r\n"
                                                    "Please resend your email after editing it to avoid this \"no spam\" censoring.\r\n"
                                                    "\r\n"
                                                    "recipient.\r\n"
                                                    "It thinks that your note is spam, so is refusing to relay it to your intended\r\n"
                                                    "That relay combats spam by refusing to handle items that appeaer to be spam.\r\n"
                                                    "\r\n"
                                                    "    k2smtpout.secureserver.net\r\n"
                                                    "\r\n"
                                                    "Email sent by the IDEAFARM.COM email server is relayed through\r\n"
                                                    "\r\n"
                                                    "Subject: Your email could not be sent\r\n"

                                                TN( tReply ,
                                                CONoUTrAW( T("could not send; notifying\"")+T(psttFrom)+T("\"\r\n") ) ;
                                            {
                                            //SEND A REJECTED NOTICE TO from

                                            //}
                                            //    }
                                            //        __( logBodySnipFromFileF( tin0P , etThread , psttc1 ) ) ;
                                            //    {
                                            //    FORsTRINGSiN1( psttFileBody )
                                            //{
                                            //else
                                            //if( !ISsTRINGoFsTRINGS( psttFileBody ) ) { __( logBodySnipFromFileF( tin0P , etThread , psttFileBody ) ) ; }
                                            //
                                            //}
                                            //    CONoUTrAW( tHeaders ) ;
                                            //    TN( tHeaders , "" ) ; tHeaders = (!bIncoming?tFrToCcOutgoing:tFrToCcIncoming)+T(psttBccLine) ;
                                            //{
                                            //LOG THE DATA

                                            bFailPermanent = 1 ;
                                            flagsFail |= flFAIL_BODYrEJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 250 ) ; //WILL FAIL IF ANTISPAM RELAYER REFUSES DATA BECAUSE IT CONTAINS REFERENCE TO BLACKLISTED (SPAMMER) WEB SITE
                                        CONoUTrAW( "writing data: verifying reply\r\n" ) ;
                                        }
                                            sockc.writeF( tin0P , "\r\n.\r\n" , 5 ) ;
    
                                            }
                                               break ;
                                               etThread.delF( tin0P , psttBccLine ) ;
                                               POOPR
                                            {
                                            if( POOP )
    
                                            }
                                                }
                                                    }
                                                        break ;
                                                        etThread.delF( tin0P , psttBccLine ) ;
                                                        POOPR
                                                    {
                                                    if( POOP )
                                                    __( writeBodySnipFromFileF( tin0P , etThread , sockc , psttc1 , flagsFail ) ) ;
                                                {
                                                FORsTRINGSiN1( psttFileBody )
                                            {
                                            else
                                            if( !ISsTRINGoFsTRINGS( psttFileBody ) ) { __( writeBodySnipFromFileF( tin0P , etThread , sockc , psttFileBody , flagsFail ) ) ; }
    
                                            }
                                                sockc.writeF( tin0P , (osTextT*)tHeaders , tHeaders.csF( tin0P ) ) ;
                                                TN( tHeaders , "" ) ; tHeaders = (!bIncoming?tFrToCcOutgoing:tFrToCcIncoming)+T(psttBccLine) ;
                                            {
                                        {
                            
                                        CONoUTrAW( "writing data cmd: aok; writing data\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "writing data cmd: failed\r\n" ) ;
                                            flagsFail |= flFAIL_DATAcOMMANDrREJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 354 ) ;
                                        CONoUTrAW( "writing data cmd: verifying reply\r\n" ) ;
                                        sockc.writeF( tin0P , (osTextT*)T("data\r\n") ) ;
                            
                                        CONoUTrAW( "writing rcpt to: aok; writing data cmd\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "writing rcpt to: failed\r\n" ) ;
                                            flagsFail |= flFAIL_RCPTtOrEJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 250 ) ;
                                        CONoUTrAW( "writing rcpt to: verifying reply\r\n" ) ;
                                        { textC txt = T("rcpt to:<")+T(psttr)+T(">\r\n") ; sockc.writeF( tin0P , (osTextT*)txt ) ; }
                            
                                        CONoUTrAW( "mail from: aok; writing rcpt to\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "mail from: failed\r\n" ) ;
                                            flagsFail |= flFAIL_MAILfROMrEJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 250 ) ;
                                        CONoUTrAW( "mail from: verifying reply\r\n" ) ;
                                        { textC txt = T("mail from:<")+T(psttFrom)+T(">\r\n") ; sockc.writeF( tin0P , (osTextT*)txt ) ; }
                    
                                        CONoUTrAW( "helloed: writing mail from\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "hello: failed\r\n" ) ;
                                            flagsFail |= flFAIL_HELLOrEJECTED ;
                                            POOPR
                                        {
                                        if( POOP )
                                        sockc.verifyReplyF( tin0P , 250 ) ;
                                        CONoUTrAW( "hello: verifying reply\r\n" ) ;
                                        sockc.writeF( tin0P , (osTextT*)T("helo ipdos.ideafarm.com\r\n") ) ; //U: QUERY FOR MY REAL psttName
                        
                                        CONoUTrAW( "connected: writing hello\r\n" ) ;
                                        }
                                            break ;
                                            etThread.delF( tin0P , psttBccLine ) ;
                                            CONoUTrAW( "connecting: failed\r\n" ) ;
                                            flagsFail |= flFAIL_COULDnOTcONNECT ;
                                            POOPR
                                        {
                                        if( POOP )
    
                                        sockc.verifyReplyF( tin0P , 220 ) ;
    
                                        CONoUTrAW( "connecting: verifying reply\r\n" ) ;
                                        sockc.connectF( tin0P , 25 , hidServer ) ;
                                        //CONoUTrAW( "connecting\r\n" ) ;
        
                                        }
                                            etThread.delF( tin0P , psttServer ) ;
                                            hidServer = socketC::nicNameIF( tin0P , *((tin123S&)tin0P).pEtScratch , psttServer ) ;
        
                                            etThread.delF( tin0P , psttMxExclude ) ;
                                            etThread.delF( tin0P , psttRelayServer ) ;
                                            }
                                                etThread.delF( tin0P , psttMxName ) ;
                                                else                                                                                                                               { ((tin123S&)tin0P).pEtScratch->strMakeF(     tin0P , psttServer , psttRelayServer                   ) ; ___( psttServer ) ; }
                                                if( !psttRelayServer || !psttRelayServer->idAdam || ( psttMxExclude && !((tin123S&)tin0P).pEtScratch->strCompareF( tin0P , psttMxExclude , psttMxName ) ) ) { ((tin123S&)tin0P).pEtScratch->dnsNicNamesF( tin0P , psttServer , psttMxName , ifcIDtYPEdNSqUERY_MX ) ; ___( psttServer ) ; }
        
                                                ((tin123S&)tin0P).pEtScratch->strWordF( tin0P , psttMxName , psttr , sttq , strokeS('@') , -1 ) ; ___( psttMxName ) ;
                                                strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                                ZE( strokeS* , psttMxName ) ;
                                            {
                                            ZE( strokeS* , psttServer ) ;
                        
                                            }
                                                //CONoUTrAW( T("mx exclude  : \"")+T(psttMxExclude)+T("\"\r\n") ) ;
                                                //CONoUTrAW( T("relay server: \"")+T(psttRelayServer)+T("\"\r\n") ) ;
                                                //etThread.delF( tin0P , psttSetting ) ;
                                                //}
                                                //    etThread.delF( tin0P , pstt1l ) ;
                                                //    }
                                                //        else break ;
                                                //        else if( !psttMxExclude   ) { ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , psttMxExclude   , psttc1 ) ; ___( psttMxExclude   ) ; }
                                                //             if( !psttRelayServer ) { ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , psttRelayServer , psttc1 ) ; ___( psttRelayServer ) ; }
                                                //    {
                                                //    FORsTRINGSiN1( pstt1l )
                                                //    ((tin123S&)tin0P).pEtScratch->strWordsOldF( tin0P , pstt1l , psttSetting , sttq , T("\r\n") ) ; ___( pstt1l ) ;
                                                //    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                                //    ZE( strokeS* , pstt1l ) ;
                                                //{
                                                //if( psttSetting )
                                                //((tin123S&)tin0P).pEtScratch->boxGetShadow::20141115@1937::MIGRATE:TO:USE:SETTINGS.BIT.TREE::SettingF( tin0P , psttSetting , T("///d/ideafarm.home.")+TF1(etherC::ifc_idHomeIdisk_IF())+T(".setting.keyValue.smtprelay") ) ; ___( psttSetting ) ;
                                                //U:: 20190728@1932:  REWRITE TO USE A SETTING RATHER THAN HARDCODE

                                                //((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , psttRelayServer , T("") ) ; ___( psttRelayServer ) ;
                                                U:: THIS CODE IS OBSOLETE; SEE 750

                                                ZE( strokeS* , psttSetting ) ;
                                            {
                                            ZE( strokeS* , psttMxExclude ) ;
                                            ZE( strokeS* , psttRelayServer ) ;
                                        {
                                        nicNameC hidServer ;
    
                                        socketC sockc( tin0P , *((tin123S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                        countT idleTimeAllowedWrite = TOCK * 0x4 ;
                                        countT idleTimeAllowedRead  = TOCK * 0x4 ;
                                        countT timeAllowedConnected = TICK >> 2 ;
                                        //countT idleTimeAllowedWrite = TOCK * 0x10 ;
                                        //countT idleTimeAllowedRead  = TOCK * 0x10 ;
                                    {
    
                                    }
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttBccLine , T(">\r\n") ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttBccLine , psttr ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttBccLine , T("Bcc" ": <") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ 3 + psttr->idAdam ) ; ___( psttBccLine ) ;
                                    {
                                    if( offs == 2 )
                                    ZE( strokeS* , psttBccLine ) ;
    
                                    }
                                        while( ~hWalk ) ;
                                        }
                                            }
                                                break ;
                                                bIncoming = 1 ;
                                            {
                                            if( !((tin123S&)tin0P).pEtScratch->strCompareF( tin0P , psttr , psttw ) )
                                            strokeS* psttw = (strokeS*)pStkEmailRelay->downF( tin0P , hWalk ) ;
                                        {
                                        do
                                        handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                    {
                                    if( *pStkEmailRelay )
                                    ZE( boolT , bIncoming ) ;
    
                                    CONoUTrAW( T("beginning of recipient \"")+T(psttr)+T("\"\r\n") ) ;
                                    strokeS* psttr = (strokeS*)ppzStk[ offs ]->downF( tin0P , hWalk ) ;
                                {
                                do
                                handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                            if( *ppzStk[ offs ] )
                            CONoUTrAW( T("beginning of handling ")+TF2(*ppzStk[offs],flFORMAT_NObIGITvALUES)+T(" recipients for list ")+TF2(offs,flFORMAT_NObIGITvALUES)+T("\r\n") ) ;
                        {
                        for( countT offs = 0 ; offs < 3 && !flagsFail ; offs ++ )
                        stackC* ppzStk[] = { &stTo , &stCc , &stBc } ;
                    {
                    else
                    }
                        flagsFail |= flFAIL_DURINGpARSING ;
                        POOPR
                    {
                    if( POOP )
    
                    }
                        etThread.delF( tin0P , psttFrToCc ) ;
                        *pptFrToCc[ offc ] = T(psttFrToCc) ;
    
                        }
                            }
                                }
                                    while( ~hWalk ) ;
                                    }
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T(">\r\n") ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , psttw ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T(!off?"To: <":"Cc" ": <") ) ;
                                        strokeS* psttw = (strokeS*)ppzStk[ off ]->downF( tin0P , hWalk ) ;
                                    {
                                    do
                                    handleC hWalk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                {
                                if( *ppzStk[ off ] )
                            {
                            for( countT off = 0 ; off < 2 ; off ++ )
                            stackC* ppzStk[] = { &stTo , &stCc } ;
                        {
    
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T(">\r\n") ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , psttFrom ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T("<") ) ;
                        if( csttName ) ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T("\"")+tName+T("\" ") ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , psttFrToCc , T("From: ") ) ;
                        ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , psttFrToCc , 0 , cstta ) ; ___( psttFrToCc ) ;
    
                        const countT cstta = csttFrToCc + cFrToCcLines * 0x10 + csttName ; //0x10 IS MORE THAN NEEDED (0xa)
    
                        const countT csttName = !tName.csF( tin0P ) ? 0 : tName.csF( tin0P ) + 3 ;
                        textC& tName = !offc ? tNameOut : tNameIn ;
                        
                        ZE( strokeS* , psttFrToCc ) ;
                    {
                    for( countT offc = 0 ; offc <= 1 ; offc ++ )
                    textC* pptFrToCc[] = { &tFrToCcOutgoing , &tFrToCcIncoming } ;

                    //}
                    //    ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , psttFrom , T("hello@ideafarm.com") ) ; ___( psttFrom ) ;
                    //    ((tin123S&)tin0P).pEtScratch->delF( tin0P , psttFrom ) ;
                    //{
                    //if( !((tin123S&)tin0P).pEtScratch->strCompareF( tin0P , psttFrom , T(ifcEMAIL_HELLO) ) )
                    //SUPPORT FOR hello@ideafarm.com COMMENTED OUT DUE TO DECISION TO NOT PROVIDE ANY FUNCTIONALITY TO ANONYMOUS INTERNET USERS
                    //CS:CODEsYNC: b750104 3a50104
                    //MAPPING GLOBAL ALIASES
    
                    TN( tFrToCcIncoming , "" ) ;
                    TN( tFrToCcOutgoing , "" ) ;
    
                    }
                        }
                            }
                                }
                                    *pStkEmailRelay << psttw ;
                                    *info.pStkEmailRelay >> psttw ; ___( psttw ) ;
                                    ZE( strokeS* , psttw ) ;
                                {
                                if( info.pStkEmailRelay ) while( *info.pStkEmailRelay )
    
                                tNameOut = T(info.psttNameOut) ;
                                tNameIn  = T(info.psttNameIn) ;
                            
                                subaccountS info( tin0P , etThread , cPassAccount , cPassSubaccount , flSUBACCOUNT_QUERYeMAILrELAY | flSUBACCOUNT_QUERYnAMEiN | flSUBACCOUNT_QUERYnAMEoUT ) ;
                            {
    
                            }
                                etThread.delF( tin0P , psttw ) ;
                                tEmailOwner = T(psttw) ;
                                queryEmailFromIdAccountF( tin0P , psttw , cPassAccount ) ; ___( psttw ) ;
                                ZE( strokeS* , psttw ) ;
                            {
                        {
                        else if( cPassAccount && cPassSubaccount )
                        if( POOP ) POOPR
    
                        }
                            etThread.delF( tin0P , psttw ) ;
                            }
                                etThread.delF( tin0P , pstt1w ) ;
                                }
                                    }
                                        }
                                            break ;
                                            }
                                                }
                                                    if( idWord ++ == 4 ) break ;
            
                                                    else { __( ((tin123S&)tin0P).pEtScratch->strCompareF( tin0P , psttc2 , T("doubleblind") ) ) ; }
                                                    }
                                                        if( pco ) *pco = ((tin123S&)tin0P).pEtScratch->strDigitsToSCountF( tin0P , psttc2 , 36 ) ;
                
                                                        }
                                                            case 3 : { pco = &cPassAccount    ; break ; }
                                                            case 2 : { pco = &cPassSubaccount ; break ; }
                                                        {
                                                        switch( idWord )
                                                        ZE( countT* , pco ) ;
                            
                                                        }
                                                            break ;
                                                            POOPR
                                                        {
                                                        if( POOP )
                                                        __( !((tin123S&)tin0P).pEtScratch->strIsDigitsF( tin0P , psttc2 , 36 ) ) ;                           // REJECT IF NOT ALL DIGITS
                                                    {
                                                    if( idWord <= 3 )
                                                {
                                                FORsTRINGSiN2( pstt1w )
            
                                                countT idWord = 6 - cWords ; // 1 OR 2
                                            {
                                            else
                                            if( POOP ) POOPR
            
                                            __( cWords > 5 ) ;
                                            __( cWords < 4 ) ;
                                        {
                                        case 1 : // [idItem].fdee86.trswwh1.doubleblind.1
                                    {
                                    switch( idFormat )
            
                                    }
                                        if( BlATHsTRING1 ) idFormat = ((tin123S&)tin0P).pEtScratch->strDigitsToSCountF( tin0P , psttc1 , 36 ) ;
                                    {
                                    FORsTRINGSiN1( pstt1w )
                                {
                                if( pstt1w )
                                const countT cWords = ((tin123S&)tin0P).pEtScratch->strWordsOldF( tin0P , pstt1w , psttw , sttq , T(".") ) ; ___( pstt1w ) ;
                                ZE( strokeS* , pstt1w ) ;
                            {
                            else if( psttw && psttw->idAdam )
                            if( POOP ) POOPR
                            ((tin123S&)tin0P).pEtScratch->strSubstringF( tin0P , psttw , idf , sttq , S1C('@') , psttFrom ) ; ___( psttw ) ;
                            countT idf = 1 ;
                            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                            ZE( strokeS* , psttw ) ;
                        {
                        ZE( countT , idFormat        ) ; // 4
                        ZE( countT , cPassAccount    ) ; // 3
                        ZE( countT , cPassSubaccount ) ; // 2
                    {
                    TN( tNameIn , "" ) ;
                    TN( tNameOut , "" ) ;
                {
                if( pStkEmailRelay )
                etThread( tin0P , pStkEmailRelay , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ; ___( pStkEmailRelay ) ;
                ZE( stackC* , pStkEmailRelay ) ;
                TN( tEmailOwner , "" ) ;
                //PARSE psttFrom AND LOOKUP ACCOUNT OWNER NAME

                //else { //CONoUTrAW( "bad news, bro! psttFileBody is null or short\r\n" ) ; }
                }
                    etThread.delF( tin0P , psttDump ) ;
                    //CONoUTrAW( T("****DUMPbEGIN\r\n")+T(psttDump)+T("\r\n****DUMPeND\r\n") ) ;
                    etThread.strDumpIF( tin0P , psttDump , (byteT*)psttFileBody , sizeof( strokeS ) * ( CSpREFIX * 2 + 1 ) , sizeof( strokeS ) , sizeof( countT ) ) ; ___( psttDump ) ;
                    ZE( strokeS* , psttDump ) ;

                    //CONoUTrAW3( "ISsTRINGoFsTRINGS evaluates to " , ISsTRINGoFsTRINGS( psttFileBody ) , "\r\n" ) ;
                    //else                                                      { //CONoUTrAW( "STRING OF STRINGS? NO!\r\n" ) ; }
                    //if( psttFileBody[ CSpREFIX ].idCaste == sc_PREFIXlENGTH ) { //CONoUTrAW( "STRING OF STRINGS? yes\r\n" ) ; }
                {
                if( psttFileBody && psttFileBody->idAdam > CSpREFIX )

                sIn >> psttFileBody ; ___( psttFileBody ) ;
                ZE( strokeS* , psttFileBody ) ;

                }
                    }
                        }
                            }
                                *ppzStk[ off ] << psttw ; psttw = 0 ;
                                if( off < 2 ) csttFrToCc += psttw->idAdam ;
                            {
                            if( psttw )
                            }
                                case 2 : { CONoUTrAW( T("Bc" ": \"")+T(psttw)+T("\"\r\n") ) ; break ; }
                                case 1 : { CONoUTrAW( T("Cc" ": \"")+T(psttw)+T("\"\r\n") ) ; break ; }
                                case 0 : { CONoUTrAW( T("To: \"")+T(psttw)+T("\"\r\n") ) ; break ; }
                            {
                            switch( off )
                            sIn >> psttw ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;
                        {
                        while( cPlates -- )
                        if( off < 2 ) cFrToCcLines += cPlates ;
                        sIn >> cPlates ;
                        ZE( countT , cPlates ) ;
                    {
                    for( countT off = 0 ; off < 3 ; off ++ )
                    stackC* ppzStk[] = { &stTo , &stCc , &stBc } ;
                {
                countT csttFrToCc = psttFrom->idAdam ;
                countT cFrToCcLines = 1 ;

                sIn >> psttFrom ; ___( psttFrom ) ;
                ZE( strokeS* , psttFrom ) ;
            {
            else
            }
                flagsFail |= flFAIL_COULDnOTgETsHADOW ;
                POOPR ;
            {
            if( POOP )
            ZE( boolT , bFailPermanent ) ;
            ((tin123S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sIn , psttc1 ) ;
            soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;

            ZE( flagsT , flagsFail ) ;
            CONoUTrAW( TT(timeN1,timeN2)+T(" | mailing out ")+T(psttc1)+T(": ") ) ;
        {
        FORsTRINGSiN1( pstt1m )
        etThread.boxMenuF( tin0P , soul , tToSend+tStar , 0 , 0x10 ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;

        }
            etThread.delF( tin0P , pstt1m ) ;
            }
                etThread.delF( tin0P , psttPart2 ) ;
                etThread.delF( tin0P , psttPart1 ) ;
                etThread.diskMoveFileOrDirF( tin0P , tToSend+T(psttPart2) , psttc1 ) ;
                etThread.strBisectF( tin0P , psttPart1 , psttPart2 , psttc1 , 0 , - 1 ) ; ___( psttPart1 ) ; ___( psttPart2 ) ;
                ZE( strokeS* , psttPart2 ) ;
                ZE( strokeS* , psttPart1 ) ;
            {
            FORsTRINGSiN1( pstt1m )
            etThread.boxMenuF( tin0P , pstt1m , tNotSent+tStar , 0 , 0x10 ) ; ___( pstt1m ) ;
            etThread.boxMenuF( tin0P , soul , tNotSent+tStar , 0 , 0x10 ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;

            timeL2 = timeE2 ;
            timeL1 = timeE1 ;
        {
        if( timeE2 || timeE1 > TICK * 0x10 )
        
        etThread.osTimeSubtractF( tin0P , timeE1 , timeE2 , timeL1 , timeL2 ) ;
        etThread.osTimeNowF( tin0P , timeE1 , timeE2 ) ;
        ZE( sCountT , timeE2 ) ;
        ZE( countT  , timeE1 ) ;

        etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
        ZE( sCountT , timeN2 ) ;
        ZE( countT  , timeN1 ) ;
    {
    while( !ether && !etThread )
    ZE( sCountT , timeL2 ) ;
    ZE( countT  , timeL1 ) ;
    TN( tLeadingDoubleDot , "\r\n.." ) ;
    TN( tLeadingDot , "\r\n." ) ;
    TN( tDotRN , ".\r\n" ) ;
    stackC stBc( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    stackC stCc( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    stackC stTo( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;
    strokeS sSlash( '/' , sc_cFROMaSCII ) ;
    TN( tStar , "*" ) ;
    etThread.osThreadAdamF( tin0P , ifcIDaDAM_ROOTfORMdATAeATER ) ;

    etThread.diskMakeDirIfNeededF( tin0P , tNotSentAbandoned ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tNotSent ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSent ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tToSend ) ;

    TN( tNotSentAbandoned , "" ) ; tNotSentAbandoned = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/email.notsentabandoned/") ;
    TN( tNotSent          , "" ) ; tNotSent          = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/email.notsent/") ;
    TN( tSent             , "" ) ; tSent             = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/email.sent/") ;
    TN( tToSend           , "" ) ; tToSend           = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/email.to.send/") ;

    const countT idHomeDisk = etherC::ifc_idHomeIdisk_IF() ;

    SCOOPS
{
IFsCRATCH

}
    ++ s ; ether.osSleepF( tin0P , TOCK * 0x10 ) ; //TO AVOID LOADING SERVER DURING SYSTEM GEN
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
{

TODO

}
    return bFail ;
    }
        }
            }
                DEL( pInfo ) ;
                }
                    }
                        etherP.delF( tin0P , posti ) ;
                        }
                            etherP.strFuseF( tin0P , psttP , T(posti) ) ; ___( psttP ) ;
                            etherP.fileReadF( tin0P , posti , cToDo , hFileBody ) ;
                        {
                        if( posti )
                        etherP.newF( tin0P , LF , posti , costa ) ; ___( posti ) ;
                        ZE( osTextT* , posti ) ;
            
                        const countT costa = cToDo ;

                        if( cToDo > csttMaxP ) cToDo = csttMaxP ;

                        countT cToDo = pInfo->cbUsed ;
                        //CONoUTrAW3( "writing data: body file is " , pInfo->cbUsed , " bytes\r\n" ) ;
                    {
                    if( !bFail )
    
                    }
                        bFail = 1 ;
                        DEL( pInfo ) ;
                        //CONoUTrAW( "writing data: body file is too large\r\n" ) ;
                        POOPR
                    {
                    if( pInfo->cbUsedHigh )
                {
                if( !bFail && pInfo )
        
                }
                    bFail = 1 ;
                    //CONoUTrAW( "writing data: could not get info for body file\r\n" ) ;
                    POOPR
                {
                if( POOP )
                ((tin123S&)tin0P).pEtScratch->diskFileQueryF( tin0P , pInfo , hFileBody ) ; ___( pInfo ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            if( !bFail )
    
            }
                bFail = 1 ;
                //CONoUTrAW( "writing data: could not open the body file\r\n" ) ;
                POOPR
            {
            if( POOP )
            ((tin123S&)tin0P).pEtScratch->fileOpenF( tin0P , hFileBody , countTC() , psttFileBodyP , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ | flOPENdETAILS_DOnOTvALIDATE , ifcOPENhOW_nFeO ) ;
            handleC hFileBody( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
            //CONoUTrAW( T("opening body file\r\n") ) ;
        {
    {
    else
    }
        bFail = 1 ;
    {
    else if( !etherP.diskFileExistsF( tin0P , psttFileBodyP ) )
    }
        }
            etherP.strMakeF( tin0P , LF , psttP , tBody ) ; ___( psttP ) ;
            etherP.delF( tin0P , psttb ) ;
            TN( tBody , "" ) ; tBody = T(psttb) ;
            etherP.strSubstringF( tin0P , psttb , idf , idl , psttFileBodyP ) ; ___( psttb ) ;
            ZE( countT , idl ) ;
            countT idf = tLit.csF( tin0P ) + 1 ;
            ZE( strokeS* , psttb ) ;
        {
        if( tLit.csF( tin0P ) < psttFileBodyP->idAdam )
    {
    if( 1 == etherP.strIdF( tin0P , tLit , psttFileBodyP ) )
    TN( tLit , "!literal:" ) ;

    ZE( boolT , bFail ) ;
    _IO_
{
boolT getBodySnipFromFileF( tin0S& tin0P , etherC& etherP , strokeS*& psttP , const strokeS* const psttFileBodyP , const countT csttMaxP = TOCK )

}
    return bFail ;
    }
        //U::CANNOT DO THIS HERE BECAUSE THERE MIGHT BE MUTLIPLE RECIPIENTS, EACH OF WHICH NEEDS THIS FILE TO EXIST: if( !bFail && etherP.diskFileExistsF( tin0P , psttFileBodyP ) ) etherP.boxZapF( tin0P , psttFileBodyP ) ;

        }
            }
                DEL( pInfo ) ;
                }
                    }
                        etherP.delF( tin0P , posti ) ;
                        }
                            }
                                }
                                    }
                                        }
                                            break ;
                                            if( bNew ) bNew = 0 ;
                                        {
                                        default :
                                        }
                                            break ;
                                            }
                                                CONoUTrAW( "." ) ;
                                                bNew = 0 ;
                                            {
                                            if( bNew )
                                        {
                                        case '.' :
                                        }
                                            break ;
                                            if( !bNew ) bNew = 1 ;
                                        {
                                        case '\n' :
                                        case '\r' :
                                    {
                                    switch( posti[ offi ] )
                                    CONoUTrAW( post2 ) ;
                                    osTextT post2[] = { posti[ offi ] , 0 } ;
                                {
                                for( countT offi = 0 ; offi < cNibble ; offi ++ )
            
                                cToDo -= cNibble ;
                                etherP.fileReadF( tin0P , posti , cNibble , hFileBody ) ;
                                countT cNibble = costa < cToDo ? costa : cToDo ;
                            {
                            while( cToDo )
                            boolT bNew = 1 ;
                        {
                        if( posti )
                        etherP.newF( tin0P , LF , posti , costa ) ; ___( posti ) ;
                        ZE( osTextT* , posti ) ;
            
                        const countT costa = TOCK < cToDo ? TOCK : cToDo ;
                        countT cToDo = pInfo->cbUsed ;
                        //CONoUTrAW3( "writing data: body file is " , pInfo->cbUsed , " bytes\r\n" ) ;
                    {
                    if( !bFail )
    
                    }
                        bFail = 1 ;
                        DEL( pInfo ) ;
                        //CONoUTrAW( "writing data: body file is too large\r\n" ) ;
                        POOPR
                    {
                    if( pInfo->cbUsedHigh )
                {
                if( !bFail && pInfo )
        
                }
                    bFail = 1 ;
                    //CONoUTrAW( "writing data: could not get info for body file\r\n" ) ;
                    POOPR
                {
                if( POOP )
                ((tin123S&)tin0P).pEtScratch->diskFileQueryF( tin0P , pInfo , hFileBody ) ; ___( pInfo ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            if( !bFail )
    
            }
                bFail = 1 ;
                //CONoUTrAW( "writing data: could not open the body file\r\n" ) ;
                POOPR
            {
            if( POOP )
            ((tin123S&)tin0P).pEtScratch->fileOpenF( tin0P , hFileBody , countTC() , psttFileBodyP , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ | flOPENdETAILS_DOnOTvALIDATE , ifcOPENhOW_nFeO ) ;
            handleC hFileBody( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
            //CONoUTrAW( T("opening body file\r\n") ) ;
        {
    {
    else
    }
        bFail = 1 ;
    {
    else if( !etherP.diskFileExistsF( tin0P , psttFileBodyP ) )
    }
        }
            CONoUTrAW( tBody ) ;
            etherP.delF( tin0P , psttb ) ;
            TN( tBody , "" ) ; tBody = T(psttb) ;
            etherP.strSubstringF( tin0P , psttb , idf , idl , psttFileBodyP ) ; ___( psttb ) ;
            ZE( countT , idl ) ;
            countT idf = tLit.csF( tin0P ) + 1 ;
            ZE( strokeS* , psttb ) ;
        {
        if( tLit.csF( tin0P ) < psttFileBodyP->idAdam )
        //CONoUTrAW( T("sending literal value\r\n") ) ;
    {
    if( 1 == etherP.strIdF( tin0P , tLit , psttFileBodyP ) )
    TN( tLit , "!literal:" ) ;

    //CONoUTrAW( T("processing body file \"")+T(psttFileBodyP)+T("\"\r\n") ) ;
    ZE( boolT , bFail ) ;
    _IO_
{
boolT logBodySnipFromFileF( tin0S& tin0P , etherC& etherP , const strokeS* const psttFileBodyP )

}
    return bFail ;

    }
        //U::CANNOT DO THIS HERE BECAUSE THERE MIGHT BE MUTLIPLE RECIPIENTS, EACH OF WHICH NEEDS THIS FILE TO EXIST: if( !bFail && etherP.diskFileExistsF( tin0P , psttFileBodyP ) ) etherP.boxZapF( tin0P , psttFileBodyP ) ;

        }
            }
                DEL( pInfo ) ;
                }
                    }
                        etherP.delF( tin0P , posti ) ;
                        }
                            }
                                }
                                    }
                                        }
                                            break ;
                                            if( bNew ) bNew = 0 ;
                                        {
                                        default :
                                        }
                                            break ;
                                            }
                                                sockP.writeF( tin0P , "." , 1 ) ;
                                                bNew = 0 ;
                                            {
                                            if( bNew )
                                        {
                                        case '.' :
                                        }
                                            break ;
                                            if( !bNew ) bNew = 1 ;
                                        {
                                        case '\n' :
                                        case '\r' :
                                    {
                                    switch( posti[ offi ] )
                                    sockP.writeF( tin0P , posti + offi , 1 ) ;
                                {
                                for( countT offi = 0 ; offi < cNibble ; offi ++ )
            
                                cToDo -= cNibble ;
                                etherP.fileReadF( tin0P , posti , cNibble , hFileBody ) ;
                                countT cNibble = costa < cToDo ? costa : cToDo ;
                            {
                            while( cToDo )
                            boolT bNew = 1 ;
                        {
                        if( posti )
                        etherP.newF( tin0P , LF , posti , costa ) ; ___( posti ) ;
                        ZE( osTextT* , posti ) ;
            
                        const countT costa = TOCK < cToDo ? TOCK : cToDo ;
                        countT cToDo = pInfo->cbUsed ;
                        //CONoUTrAW3( "writing data: body file is " , pInfo->cbUsed , " bytes\r\n" ) ;
                    {
                    if( !bFail )
    
                    }
                        bFail = 1 ;
                        DEL( pInfo ) ;
                        //CONoUTrAW( "writing data: body file is too large\r\n" ) ;
                        flagsFailP |= flFAIL_DATAbODYfILEtOOlARGE ;
                        POOPR
                    {
                    if( pInfo->cbUsedHigh )
                {
                if( !bFail && pInfo )
        
                }
                    bFail = 1 ;
                    //CONoUTrAW( "writing data: could not get info for body file\r\n" ) ;
                    flagsFailP |= flFAIL_DATAcANNOTgETbODYfILEiNFO ;
                    POOPR
                {
                if( POOP )
                ((tin123S&)tin0P).pEtScratch->diskFileQueryF( tin0P , pInfo , hFileBody ) ; ___( pInfo ) ;
                ZE( infoFileS* , pInfo ) ;
            {
            if( !bFail )
    
            }
                bFail = 1 ;
                //CONoUTrAW( "writing data: could not open the body file\r\n" ) ;
                flagsFailP |= flFAIL_DATAcANNOToPENfILE ;
                POOPR
            {
            if( POOP )
            ((tin123S&)tin0P).pEtScratch->fileOpenF( tin0P , hFileBody , countTC() , psttFileBodyP , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ | flOPENdETAILS_DOnOTvALIDATE , ifcOPENhOW_nFeO ) ;
            handleC hFileBody( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
            //CONoUTrAW( T("opening body file\r\n") ) ;
        {
    {
    else
    }
        bFail = 1 ;
        flagsFailP |= flFAIL_DATAfILEdOESnOTeXIST ;
    {
    else if( !etherP.diskFileExistsF( tin0P , psttFileBodyP ) )
    }
        }
            sockP.writeF( tin0P , (osTextT*)tBody , tBody.csF( tin0P ) ) ;
            etherP.delF( tin0P , psttb ) ;
            TN( tBody , "" ) ; tBody = T(psttb) ;
            etherP.strSubstringF( tin0P , psttb , idf , idl , psttFileBodyP ) ; ___( psttb ) ;
            ZE( countT , idl ) ;
            countT idf = tLit.csF( tin0P ) + 1 ;
            ZE( strokeS* , psttb ) ;
        {
        if( tLit.csF( tin0P ) < psttFileBodyP->idAdam )
        //CONoUTrAW( T("sending literal value\r\n") ) ;
    {
    if( 1 == etherP.strIdF( tin0P , tLit , psttFileBodyP ) )
    TN( tLit , "!literal:" ) ;

    //CONoUTrAW( T("processing body file \"")+T(psttFileBodyP)+T("\"\r\n") ) ;
    ZE( boolT , bFail ) ;
{
boolT writeBodySnipFromFileF( tin0S& tin0P , etherC& etherP , socketC& sockP , const strokeS* const psttFileBodyP , flagsT& flagsFailP )

}
    }
        sIn >> psttP ; ___( psttP ) ;
    
        __( idFormat - 1 ) ;
        sIn >> idFormat ;
        ZE( countT , idFormat ) ;
    
        __( finger - FINGERnEG_LISTsERVERrEPLY ) ;
        sIn >> finger ;
        ZE( countT , finger ) ;
    
        sock.readF( tin0P , sIn ) ;
        soulC sIn( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.writeF( tin0P , sOut ) ;
        sOut << cPassAccountSP ;
        sOut << (countT)ifcIDcMDlISTsERVEReMAILiDaCCOUNT_ASKeMAILfROMiDaCCOUNT ;
        sOut << (countT)1 ;
        sOut << (countT)FINGERnEG_LISTsERVERcMD ;
        soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;
    
        sock.connectF( tin0P , homeS::homeIF().idPortListServerEmailIdAccount ) ;
        socketC sock( tin0P , *((tin123S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;

        SCOOPS
    {
    IFsCRATCH

    if( POOP ) return ;
    __NZ( psttP ) ;
    if( POOP ) return ;
{
voidT queryEmailFromIdAccountF( tin0S& tin0P , strokeS*& psttP , const countT cPassAccountSP )
//DUPLICATE CODE: b750104 3a50104

#define flFAIL_DATAfILEdOESnOTeXIST                 0x8000
#define flFAIL_DATAbODYfILEtOOlARGE                 0x4000
#define flFAIL_DATAcANNOTgETbODYfILEiNFO            0x2000
#define flFAIL_DATAcANNOToPENfILE                   0x1000
#define flFAIL_COULDnOTmOVEfILE                     0x0800
#define flFAIL_COULDnOTgETsHORTfILEnAME             0x0400
#define flFAIL_UNKNOWNeRROR                         0x0200
#define flFAIL_QUITcOMMANDrEJECTED                  0x0100
#define flFAIL_BODYrEJECTED                         0x0080
#define flFAIL_DATAcOMMANDrREJECTED                 0x0040
#define flFAIL_RCPTtOrEJECTED                       0x0020
#define flFAIL_MAILfROMrEJECTED                     0x0010
#define flFAIL_HELLOrEJECTED                        0x0008
#define flFAIL_COULDnOTcONNECT                      0x0004
#define flFAIL_DURINGpARSING                        0x0002
#define flFAIL_COULDnOTgETsHADOW                    0x0001

/*1*/WAKEhIDE( "ifcIDaDAM_ROOTmAILoUT" )/*1*/

/**/
*/
watches a directory containing email to send
/*

//OBSOLETES d750104
//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

