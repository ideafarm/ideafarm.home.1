
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

ether.osSleepF( tinBaseP , TOCK * 4 ) ;

while( cTries -- ) sockd.writeF( tinBaseP , ifcPORToLD2_TIMErEMAINING , nicNameC() , pbq , sizeof pbq ) ;
countT cTries = 8 ;

etThread.osThreadF( tinBaseP , countTC() , tmCatchF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&sockd ) ;

sockd.bindF( tinBaseP ) ;
socketC sockd( tinBaseP , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;

etThread.memCopyF( tinBaseP , pbq + sizeof( countT ) , (byteT*)&qq , sizeof qq ) ;
*(countT*)pbq = 1 ;
byteT pbq[ sizeof( countT ) + sizeof qq ] ;

}
        etThread.ifcJobF( tinBaseP , stCourses , 0x4010120 , sOrder , stOrders , T("!addTime") ) ;
        stOrders << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
        stackC stOrders(  tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
        stackC stCourses( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;

        sOrder << (countT)0 ;
        sOrder << (countT)( TICK * 0x80 ) ;
        sOrder << qq.idType ;
        sOrder << qq.idComputer ;
        sOrder << (strokeS*)T("!addTime") ;
        sOrder << ifcIDcMDjOBoRDER_NAMED ;
        soulC sOrder( tinBaseP , TAG( TAGiDnULL ) ) ;
{

qq.idType = 1 ;
qq.idComputer = etThread.diskIdF( tinBaseP , T("///d/") ) ;
queryTimeRemainingS qq ;

TODO

DONE( tmCatchF )
}
    }
        etThread.delF( tinBaseP , pbr ) ;

        }
            }
                }
                    break ;
                    }
                        etThread.strokeF( tinBaseP , TF3(idType,flFORMAT_UNSIGNED,9)+TT(timeRemaining.time1,timeRemaining.time2)+T("\r\n") ) ;
                        timeS timeRemaining = *(timeS*)( pbr + sizeof( countT ) ) ;
                    {
                    if( cbr == sizeof( countT ) + sizeof( timeS ) )
                {
                case 1 :
            {
            switch( idType )
            countT& idType = *(countT*)pbr ;
        {
        if( pbr && cbr >= sizeof( countT ) )
    
        sockd.readF( tinBaseP , pbr , cbr , idp , nnPeer ) ; ___( pbr ) ;
        nicNameC nnPeer ;
        ZE( countT , idp ) ;
        ZE( countT , cbr ) ;
        ZE( byteT* , pbr ) ;
    {
    while( !ether && !sockd.etherF( tinBaseP ) )

    socketC& sockd = *(socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmCatchF )

/*1*/WAKEhIDE( "gorilla.timeRemaining" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

