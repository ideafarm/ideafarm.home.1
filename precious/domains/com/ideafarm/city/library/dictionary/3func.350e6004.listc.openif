
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flagsRC ;
    //CONoUTrAW( "openIF / ----\r\n" ) ;

    THREADmODE2rESTORE
    }
        }
            }
                ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ;
                if( ((tin9S&)tinBaseP).pEther ) ((tin9S&)tinBaseP).pEther->traceF( tinBaseP , T("listC::openIF / napping before retrying") ) ;
            {
            else if( !hListP )
                 if( !bRetry ) break ;

            }
                ((tin9S&)tinBaseP).tlsDelF( LF , *(byteT**)&ppPreallocatedLists ) ;

                THREADmODE3rESTORE
                }
                    ppc ++ ;
                    DEL( *ppc ) ;                                                                               // THE ++ OPERATOR CANNOT BE USED IN THE ARGUMENT BECAUSE DEL EVALUATES ITS PARAMETER MULTIPLE TIMES
                    //CONoUTrAW3( "\r\n------------------------ [pPre      ]:    " , *ppc , "    deleted" ) ;
                {
                while( *ppc )
                THREADmODE3oN( flTHREADmODE3_ALLOWdESTRUCTIONoFlISTINGc ) ;
                listC** ppc = ppPreallocatedLists ;
            {
            if( ppPreallocatedLists )

            }
                }
                    }
                        }
                            }
                                flagsRC |= openIF( tinBaseP , hListP , hListRoot , pczNameP + 1 , flagsP , idGrabLayerP , ppPreallocatedLists ) ; //U::REMOVE THE countTC() PARAMETER
                                { grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ; pList->openF( tinBaseP , hListRoot , 0 , idGrabLayerP ) ; }
                                _IO_
                            {
                            handleC hListRoot( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                            _IO_
                        {
                        else
                        if( !pczNameP[ 1 ] ) pList->openF( tinBaseP , hListP , 0 , idGrabLayerP ) ;
                    {
                    else
                    }
                        if( !( F(flagsP) & flLISToPEN_IFeXISTS ) ) { BLAMMO ; }
                    {
                    if( !bList )

                    boolT bList = pList && pList->flagsi & fliLISTINGc_MIXINlIST ;
                {
                if( !POOP )

                __Z( pList ) ;
                listC* pList = &APT( listC , aptRoot ) ;
            {
            if( aptRoot )

            }
                }
                    __Z( aptRoot ) ;

                    }
                        }
                            THREADmODE3rESTORE

                            }
                                DEL( pd ) ;
                                                              pNew = 0 ;
                                listOfSetC* pd = (listOfSetC*)pNew ;
                            {
                            else
                            if( !bOfSet ) { DEL( pNew ) ; }

                            THREADmODE3oN( flTHREADmODE3_ALLOWdESTRUCTIONoFlISTINGc ) ;
                        {
                        if( aptRoot.setIfZeF( aptNew ) )
                        aptC aptNew( tinBaseP , pNew ) ;
                        THREADmODE3rESTORE
                        }
                            POPtINaRGS
                            if( pNew && !( pNew->flagsi & fliLISTINGc_MIXINlIST ) ) { BLAMMO ; }
                            ;
                                : new( 0 , tinBaseP , LF ) listC(      tinBaseP , LISTnAMEsYS_ROOT , flLISTINGc_DOnOTrEGISTERiNtIN )
                                ? new( 0 , tinBaseP , LF ) listOfSetC( tinBaseP , LISTnAMEsYS_ROOT , flLISTINGc_DOnOTrEGISTERiNtIN )
                            pNew = bOfSet

                            PUSHtINaRGS
                        {
                        THREADmODE3oN( flTHREADmODE3_ALLOWcONSTRUCTIONoFlISTINGc | flTHREADmODE3_ALLOWnEWdROPnOTiNaDAMtEMP ) ;
                        ZE( listC* , pNew ) ;
                    {

                    }
                        *( ppc ++ ) = 0 ;
                        }
                            if( !POOP ) *( ppc ++ ) = pPre ;
                            __Z( pPre ) ;
                            THREADmODE3rESTORE
                            //THREADmODE4rESTORE

                            //CONoUTrAW5( "\r\n++++++++++++++++++++++++ [pPre,idNew]:    " , pPre , "    " , 1 + incv02AM( idNewLath ) , "" ) ;

                            ___( pPre ) ;
                            ;
                                : new( 0 , tinBaseP , LF ) listC(      tinBaseP , LISTnAMEsYS_PREALLOCATED , flLISTINGc_DOnOTrEGISTERiNtIN )
                                ? new( 0 , tinBaseP , LF ) listOfSetC( tinBaseP , LISTnAMEsYS_PREALLOCATED , flLISTINGc_DOnOTrEGISTERiNtIN )
                            pPre = bOfSet
                            //THREADmODE4oN( flTHREADmODE4_NOsEXiNpOOL )
                            THREADmODE3oN( flTHREADmODE3_ALLOWcONSTRUCTIONoFlISTINGc | flTHREADmODE3_ALLOWnEWdROPnOTiNaDAMtEMP ) ;

                            ZE( listC* , pPre ) ;
                        {
                        while( !POOP && ccName -- )
                        listC** ppc = ppPreallocatedLists ;
                    {
                {
                if( !POOP )

                thirdC::c_memsetIF( tinBaseP , (byteT*)ppPreallocatedLists , cbaPre ) ;
                __Z( ppPreallocatedLists ) ;
                ppPreallocatedLists = (listC**)((tin9S&)tinBaseP).tlsNewF( LF , cbaPre ) ;
                countT cbaPre = ( ccName + 1 ) * sizeof( listC* ) ;
                countT ccName = thirdC::c_strlenIF( tinBaseP , pczNameP ) ;
            {
            else if( !( F(flagsP) & flLISToPEN_IFeXISTS ) )
            if( aptRoot ) flagsRC |= flLISToPENrETURNcODE_ROOTlISTeXISTED ;

            ZE( listC** , ppPreallocatedLists ) ; // NULL TERMINATED LIST OF PREALLOCATED listC ; CBF DISPENSES BY CLAIMING THE LEAF AND SETTING IT TO ZE

            //if( ((tin9S&)tinBaseP).pEther ) etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("[&aptRoot]:  (foreign ordering)    ")+TF2((countT)&aptRoot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN) ) ;

            aptC& aptRoot = PUSE.aptListRootF() ;
            flagsRC = flLISToPENrETURNcODE_null ;

            if( bRetry ) PUSE.refresh_ppSlots_F( tinBaseP ) ;
        {
        while( !hListP )
        boolT bRetry = F(flagsP) & flLISToPEN_REFRESHaNDrETRYfOREVER ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

    LNV( pczNameP )
    //static countT idNewLath ;

    _IO_

    }
        if( POOP ) return flagsRC ;
        FV( flLISToPEN , flagsP ) ;
        __( *pczNameP - LISTnAMEsYS_ROOT ) ;
        if( POOP ) return flagsRC ;
        __Z( pczNameP ) ;
        __( ~hListP ) ;
        //U::__(  bOfSet ) ;
        if( POOP ) return flagsRC ;
    {
    IFbEcAREFUL

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = PUSE.flagsPoolFormatF() ;

    flagsT flagsRC = flLISToPENrETURNcODE_null ;
    //CONoUTrAW( "openIF / +++\r\n" ) ;
{
/*1*/flagsT listC::openIF( tin0S& tinBaseP , handleC& hListP , const countT* const pczNameP , const flagsT flagsP , const countT idGrabLayerP )/*1*/

//CS:CODEsYNCH: PSEUDODUPLICATE: 350e6004 35159004

/**/
*/
  for each offset, a listC object will be constructed in the current pool if one is not already registered in the listC object specified by the prior offset
   the 0'th offset specifies the name of a listC object that is registered in the root listC object
  specifies the fully qualified name of a listC object relative to the root listC object
  i will modify elements in this string, replacing osTextT* values with numeric values obtained by looking the osTextT up in the dictionary of the current pool
  a countT value is a valid listC name iff BM_HIGH is set
  the ze'th element must be either LISTnAMEsYS_ROOTaPPLICATION or LISTnAMEsYS_ROOTsYSTEM2
  each element of this null terminated string must either be a valid list name or the address of a null terminated string of osTextT
  must not be 0 or null length
 pczNameP
 tinBaseP
arguments
i open the specified listC object, creating all specified dad lists in the current pool that do not exist
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

