

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
}
    }
        ((tin123S&)tin0P).pEther->traceF( tin0P , T("doBitF/-------- [offElt,cElt,shiftP]:    ")+TF2(offElt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cElt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(shiftP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ") , flTRACE_NOpREFIX ) ;
        ppMe[ remainder ]->traceRangeF( pbP , cbP , T("doBitF/--------") ) ;
    {
    if( F(flagsCt) & flSORTAc_CHATTER )

    }
        }
            if( cEltsHigh > modulo ) doBitF( pbHighs , cbP - cbLows , shiftP ) ;
            if( cEltsLow  > modulo ) doBitF(           pbP , cbLows , shiftP ) ;

            countT cEltsHigh = ( cbP - cbLows ) / cbElt ;
            countT cEltsLow  = cbLows / cbElt ;
            countT cbLows    = pbHighs - pbP ;
        {
        else
        }
            doBitF( sp.pbRangeLathCall , sp.cbRangeLathCall , shiftP ) ;
        {
        if( !pbHighs || pbHighs == pbP + cbElt * remainderUse )

        shiftP -- ;
    {
    if( shiftP )

    //}
    //    ((tin123S&)tin0P).pEther->traceF( tin0P , T("doBitF / ret_pbHighs: no high elements [bit]:    ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) , flTRACE_NOpREFIX ) ;
    //{
    //else
    //}
    //    ppMe[ remainder ]->traceMarkSelectedElementsF( strokeS( 'N' ) , pbUpDn , 1 ) ;
    //    byteT* pbUpDn[] = { ret_pbHighs } ;
    //{
    //else if( ret_pbHighs ) 
    //}
    //    ((tin123S&)tin0P).pEther->traceF( tin0P , T("doBitF / ret_pbHighs was never set [bit]:    ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) , flTRACE_NOpREFIX ) ;
    //{
    //if( (countT)ret_pbHighs == - 2 ) 

    //}
    //    //((tin123S&)tin0P).pEther->traceF( tin0P , T("doBitF / sp.pbHighs: no high elements [bit]:    ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) , flTRACE_NOpREFIX ) ;
    //{
    //else
    //}
    //    //ppMe[ remainder ]->traceMarkSelectedElementsF( strokeS( 'O' ) , pbUpDn , 1 ) ;
    //    //byteT* pbUpDn[] = { pbHighs } ;
    //{
    //if( pbHighs ) 

    while( idError ) ;
    }
        pbHighs = sp.pbHighs ;
        rs.recursionSimulatorF( pc3 , 3 ) ;
        countT pc3[] = { idWorker , (countT)pbP , cbP } ;
        idError = 0 ;

        sp.shift = shiftP ;
        thirdC::c_memsetIF( (byteT*)&sp , sizeof sp , 0 ) ;
    {
    do
    ZE( byteT* , pbHighs ) ;

    }
        }
            countT foo = 2 ;
        {
        if( cEltsBefore == 5 )

        remainderUse = ( remainder - cEltsBefore ) % modulo ;
        countT cEltsBefore = ( pbP - pbArray ) / cbElt ;

        if( ( pbP - pbArray ) % cbElt ) { BLAMMO ; }
    {
    ZE( countT , remainderUse ) ;

    }
        ppMe[ remainder ]->traceRangeF( pbP , cbP , T("doBitF/++++++++") ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+tRepeat+T("*") , flTRACE_NOpREFIX ) ;
        TN( tRepeat , "" ) ; tRepeat = T("**************** ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(" ") ;
        ((tin123S&)tin0P).pEther->traceF( tin0P , T("doBitF/++++++++ [offElt,cElt,bit]:    ")+TF2(offElt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cElt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF3(bit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) , flTRACE_NOpREFIX ) ;
    {
    if( F(flagsCt) & flSORTAc_CHATTER )
    countT bit    = 1 << shiftP ;
    countT cElt   = cbP / cbElt ;
    countT offElt = ( pbP - pbArray ) / cbElt ;
    TINSL
{
/*1*/voidT sortaC::doBitF( byteT* pbP , countT cbP , countT shiftP )/*1*/


/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
