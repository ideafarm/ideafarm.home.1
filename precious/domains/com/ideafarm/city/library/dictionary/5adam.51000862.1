
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinP ) ;
etThread.traceF( tinP , T("ok") ) ;

etThread.traceF( tinP , tSay6+TF2(cb6,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinP , tSay5+TF2(cb5,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinP , tSay4+TF2(cb4,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinP , tSay3+TF2(cb3,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinP , tSay2+TF2(cb2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinP , tSay1+TF2(cb1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

TN( tSay6 , "[sizeof( datumC           )]:    " ) ;
TN( tSay5 , "[sizeof( datum_countT_C   )]:    " ) ;
TN( tSay4 , "[sizeof( list_countT_C    )]:    " ) ;
TN( tSay3 , "[sizeof( listing_countT_C )]:    " ) ;
TN( tSay2 , "[sizeof( listC            )]:    " ) ;
TN( tSay1 , "[sizeof( listingC         )]:    " ) ;

countT cb6 =  sizeof( datumC           ) ;
countT cb5 =  sizeof( datum_countT_C   ) ;
countT cb4 =  sizeof( list_countT_C    ) ;
countT cb3 =  sizeof( listing_countT_C ) ;
countT cb2 =  sizeof( listC            ) ;
countT cb1 =  sizeof( listingC         ) ;

TODO

/*1*/WAKEsHOWtEXT( "doodle.listingC.class.sizes" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
