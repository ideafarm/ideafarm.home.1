
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

#endif

etThread.traceF( tinBaseP , T("time look: ")+TTF(timeWrittenLook.time1,timeWrittenLook.time2) ) ;
}
    thirdC::getFileTimeIF( tinBaseP , fir , &timeWrittenLook , 0 , 0 ) ;
    fileC fir( tinBaseP , (strokeS*)tBox , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;
{
timeWrittenLook  = timeS() ;

}
    ((thirdC&)etThread).setFileTimeF( tinBaseP , fiw , &timeWrittenLook , &timeWrittenLook , &timeWrittenLook ) ;
    fileC fiw( tinBaseP , (strokeS*)tBox , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;
{

etThread.traceF( tinBaseP , T("time look: ")+TTF(timeWrittenLook.time1,timeWrittenLook.time2) ) ;
}
    thirdC::getFileTimeIF( tinBaseP , fir , &timeWrittenLook , 0 , 0 ) ;
    fileC fir( tinBaseP , (strokeS*)tBox , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 1 , 0 ) ;
{
timeS timeWrittenLook  = timeS() ;

etThread.boxPutF( tinBaseP , tBox , "abcd" , 4 ) ;
TN( tBox , "///d/tmp/xoo.ttt" ) ;

#else

etThread.traceF( tinBaseP , T("time now (verify): ")+TTF(timeNS1,timeNS2) ) ;
thirdC::osTimeFromOldTimeIF( tinBaseP , timeV1 , timeV2 , y_s , m_s , d_s , hh_s , mm_s , ss_s , ms_s , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
ZE( sCountT , timeV2 ) ;
ZE( countT , timeV1 ) ;

thThread.osTimeToOldTimeF( tinBaseP , ms_s , ss_s , mm_s , hh_s , d_s , m_s , y_s , dow_s , timeNS1 , timeNS2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
static ZE( countT , dow_s ) ;
static ZE( sCountT , y_s ) ;
static ZE( countT , m_s ) ;
static ZE( countT , d_s ) ;
static ZE( countT , hh_s ) ;
static ZE( countT , mm_s ) ;
static ZE( countT , ss_s ) ;
static ZE( countT , ms_s ) ;

thThread.osTimeToOldTimeF( tinBaseP , ms_q , ss_q , mm_q , hh_q , d_q , m_q , y_q , dow_q , timeNQ1 , timeNQ2 , flOStIMEfROMoLDtIME_OLDtIMEiSutc ) ;
static ZE( countT , dow_q ) ;
static ZE( sCountT , y_q ) ;
static ZE( countT , m_q ) ;
static ZE( countT , d_q ) ;
static ZE( countT , hh_q ) ;
static ZE( countT , mm_q ) ;
static ZE( countT , ss_q ) ;
static ZE( countT , ms_q ) ;

thirdC& thThread = etThread ;

#if defined( NEVERdEFINED )

etThread.traceF( tinBaseP , T("time now (sloow):  ")+TTF(timeNS1,timeNS2) ) ;
((thirdC&)etThread).osTimeNowF( tinBaseP , timeNS1 , timeNS2 , 1 ) ;
ZE( sCountT , timeNS2 ) ;
ZE( countT , timeNS1 ) ;

etThread.traceF( tinBaseP , T("time now (quick):  ")+TTF(timeNQ1,timeNQ2) ) ;
etThread.osTimeNowF( tinBaseP , timeNQ1 , timeNQ2 ) ;
ZE( sCountT , timeNQ2 ) ;
ZE( countT , timeNQ1 ) ;

TODO

/*1*/WAKEsHOWtEXT( "doodle.getFileTimeIF.setFileTimeF.discrepancy" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
