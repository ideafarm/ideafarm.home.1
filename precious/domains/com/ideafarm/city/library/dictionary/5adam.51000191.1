
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( etThread )

etThread.strokeF( tinBaseP , T(USCORE79 "\r\n\r\npress the enter key") ) ;
lineF( tinBaseP , etThread , T("Z_3cfFG4") ) ;
lineF( tinBaseP , etThread , T("Z_000001") ) ;
lineF( tinBaseP , etThread , T("Z_00001") ) ;
lineF( tinBaseP , etThread , T("Z_0001") ) ;
lineF( tinBaseP , etThread , T("Z_001") ) ;
lineF( tinBaseP , etThread , T("Z_01") ) ;
lineF( tinBaseP , etThread , T("Z_1") ) ;

etThread.strokeF( tinBaseP , T("\r\n") ) ;
lineF( tinBaseP , etThread , T("z_3z141z1") ) ;
lineF( tinBaseP , etThread , T("z_0000001") ) ;
lineF( tinBaseP , etThread , T("z_000001") ) ;
lineF( tinBaseP , etThread , T("z_00001") ) ;
lineF( tinBaseP , etThread , T("z_0001") ) ;
lineF( tinBaseP , etThread , T("z_001") ) ;
lineF( tinBaseP , etThread , T("z_01") ) ;
lineF( tinBaseP , etThread , T("z_1") ) ;

etThread.strokeF( tinBaseP , T("\r\n") ) ;
lineF( tinBaseP , etThread , T("ffffffff") ) ;
lineF( tinBaseP , etThread , T("00000001") ) ;
lineF( tinBaseP , etThread , T("0000001") ) ;
lineF( tinBaseP , etThread , T("000001") ) ;
lineF( tinBaseP , etThread , T("00001") ) ;
lineF( tinBaseP , etThread , T("0001") ) ;
lineF( tinBaseP , etThread , T("001") ) ;
lineF( tinBaseP , etThread , T("01") ) ;
lineF( tinBaseP , etThread , T("1") ) ;

etThread.strokeF( tinBaseP , T("\r\n") ) ;
lineF( tinBaseP , etThread , T("5927694924") , 10 ) ;
lineF( tinBaseP , etThread , T("0000000001") , 10 ) ;
lineF( tinBaseP , etThread , T("000000001") , 10 ) ;
lineF( tinBaseP , etThread , T("00000001") , 10 ) ;
lineF( tinBaseP , etThread , T("0000001") , 10 ) ;
lineF( tinBaseP , etThread , T("000001") , 10 ) ;
lineF( tinBaseP , etThread , T("00001") , 10 ) ;
lineF( tinBaseP , etThread , T("0001") , 10 ) ;
lineF( tinBaseP , etThread , T("001") , 10 ) ;
lineF( tinBaseP , etThread , T("01") , 10 ) ;
lineF( tinBaseP , etThread , T("1") , 10 ) ;

etThread.strokeF( tinBaseP , T("\r\n") ) ;
lineF( tinBaseP , etThread , T("9_5927694924") ) ;
lineF( tinBaseP , etThread , T("9_0000000001") ) ;
lineF( tinBaseP , etThread , T("9_000000001") ) ;
lineF( tinBaseP , etThread , T("9_00000001") ) ;
lineF( tinBaseP , etThread , T("9_0000001") ) ;
lineF( tinBaseP , etThread , T("9_000001") ) ;
lineF( tinBaseP , etThread , T("9_00001") ) ;
lineF( tinBaseP , etThread , T("9_0001") ) ;
lineF( tinBaseP , etThread , T("9_001") ) ;
lineF( tinBaseP , etThread , T("9_01") ) ;
lineF( tinBaseP , etThread , T("9_1") ) ;

etThread.strokeF( tinBaseP , T("\r\n") ) ;
lineF( tinBaseP , etThread , T("0") ) ;

etThread.strokeF( tinBaseP , T("radix:    10_9        16_9        36_9        62_9          string\r\n" USCORE79 "\r\n\r\n") ) ;

TODO

}
    etThread.strokeF( tinBaseP , TF4(vv,flFORMAT_UNSIGNED,14,10)+TF4(vv,flFORMAT_UNSIGNED,12,16)+TF4(vv,flFORMAT_UNSIGNED,12,36)+TF4(vv,flFORMAT_UNSIGNED,12,62)+T("          \"")+T(psttP)+T("\"\r\n") ) ;

    sCountT vv = etThread.strDigitsToSCountF( tinBaseP , psttP , defaultRadixP ) ;
{
voidT lineF( tin0S& tinBaseP , etherC& etThread , const strokeS* const psttP , const countT defaultRadixP = 0 )

/*1*/WAKEhIDE( "example.simplest.func.1030057.etherC.strDigitsToSCountF" )/*1*/
/**/
*/
\<A HREF=\"5.1910104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

