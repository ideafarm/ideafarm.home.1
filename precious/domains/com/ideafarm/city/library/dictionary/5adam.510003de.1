
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    //U:etThread.strokeF( tin0P , T("Ok") ) ;
    etThread.loafIF( tin0P ) ;

    }
        //U:baton.ungrabF( tin0P ) ;

        }
            }
                }
                    //U: DISABLED BECAUSE, WITHIT, i00003 RUNS VERY SLOWLY AFTER A FEW DAYS: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , T("9e30104") , T("i00003") , T("") , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 0xf )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103fe , T("i00003") , T("") , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 0xa )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , T("0100001") , T("i00003") , T("") , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 8 )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f9 , T("i00003") , T("") , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 6 )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f7 , T("i00003") , T("") , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , T("0100001") , T("i00002") , T("") , idCycle ) ;
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 5 )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f5 , T("i00003") , T("") , idCycle ) ;
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f4 , T("i00003") , 0 , idCycle ) ;
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103e7 , T("i00003") , 0 , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103ff , T("i00002") , T("") , idCycle ) ;
                    //U: /*NNFG*/ if( !bSolo ) birthF( tin0P , etThread , idCycleLastActive , 0x40103ef , T("i00002") , T("") , idCycle ) ;
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103ec , T("i00002") , T("") , idCycle ) ;
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103e7 , T("i00002") , 0 , idCycle ) ;
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103fa , T("i00002") , T("") , idCycle ) ;
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 4 )

            }
                bAllStarted = 1 ; //U:

                }
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103ea , T("i00002") , 0 , idCycle ) ;
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103e4 , T("i00002") , 0 , idCycle ) ;
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103e3 , T("i00002") , T("") , idCycle ) ;
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103e2 , T("i00002") , 0 , idCycle ) ;
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103e1 , T("i00002") , T("") , idCycle ) ;
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 3 )

            }
                }
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103f3 , T("i00002") , 0 , idCycle ) ;
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 2 )

            }
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f6 , T("i00003") , 0 , idCycle ) ;
                {
                else if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
                }
                    //U: /*NNFG*/ birthF( tin0P , etThread , idCycleLastActive , 0x40103f8 , T("i00002") , 0 , idCycle ) ;
                    birthF( tin0P , etThread , idCycleLastActive , 0x40103eb , T("i00002") , 0 , idCycle ) ;
                {
                if( bSolo || idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
            {
            if( idCycle >= 1 )

            //U:testInternetF( etThread ) ;
        {
        if( !ether && !etThread )

        // NNFG: "NOT NEEDED FOR GATE"

        //U:baton.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        //U:batonC baton( tin0P , TAG( TAGiDnULL ) , T("ifc.hog") ) ;

        //U: if( idCycleLastActive + 0x2 < idCycle ) etThread.strokeF( tin0P , T("\f") ) ;

        if( idCycle ++ ) etThread.osSleepF( tin0P , TOCK * 0x8 , TOCK /*U: , flSLEEP_TALK */ ) ;
    {
    while( !ether && !etThread && !bAllStarted )
    ZE( countT , bAllStarted ) ;
    ZE( countT , idCycleLastActive ) ;
    ZE( countT , idCycle ) ;

    }
        etThread.delF( tin0P , psttv ) ;
        if( psttv ) bSolo = !etThread.strCompareF( tin0P , psttv , T("me") ) ;
        etThread.osEnvironmentVariableF( tin0P , psttv , T("ifcNicNameCityCenter") ) ; ___( psttv ) ;
        ZE( strokeS* , psttv ) ;
    {
    ZE( boolT , bSolo ) ;

    #endif
    }
        //U:etThread.strokeF( tin0P , T("bf30104 time to load was"": ")+TT(time1b,time2b)+T("\r\n") ) ;
        etThread.osTimeSubtractF( tin0P , time1b , time2b , time1a , time2a ) ;
        //U:etThread.strokeF( tin0P , T("bf30104 is ready at:      ")+TT(time1b,time2b)+T("\r\n") ) ;
        etThread.osTimeNowF( tin0P , time1b , time2b ) ;
        ZE( sCountT , time2b ) ;
        ZE( countT , time1b ) ;

        sgnReady.waitF( tin0P ) ;
        etThread.osSessionF( tin0P , countTC() , countTC() , 0x40103fb , 0 ,  0 ,  0 , 640 , 100 , flSESSION_MINIMIZE | flSESSION_KID ) ;
        signC sgnReady( tin0P , TAG( TAGiDnULL ) , T("bf30104.ready") ) ;

        //U:etThread.strokeF( tin0P , T("bf30104 started at:       ")+TT(time1a,time2a)+T("\r\n") ) ;
        etThread.osTimeNowF( tin0P , time1a , time2a ) ;
        ZE( sCountT , time2a ) ;
        ZE( countT , time1a ) ;
    {
    if( idComputer == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 )
    #if defined( NEVERdEFINED )

    while( etThread.diskFileExistsF( tin0P , tBlock0e30104 ) ) etThread.osSleepF( tin0P , TOCK * 8 ) ;
    TN( tBlock0e30104 , "///ideafarm/ephemeral/0e30104/wait" ) ;

    countT idComputer = etThread.diskIdF( tin0P , T("///c") ) ;

    //etThread.osSleepF( tin0P , TOCK * 0x8 ) ; // GIVE fd30104 TIME TO COMPLETE ITS STARTUP
    //U:etThread.strokeF( tin0P , T("IdeaFarm " "(tm) City Supervisor\r\ni periodically verify that all city workers are on the job\r\n") ) ;

    //etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_RUSH ) ;
{
else
}
    //U:etThread.strokeF( tin0P , T("Another ")+textIdFileC( tin0P , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tin0P , TAG( TAGiDnULL ) , T("0e30104") ) ;

TODO

}
    }
        etThread.osSleepF( tin0P , TOCK * 8 ) ;
        else { ZE( countT , idKid ) ; etThread.osProcessKidF( tin0P , 0 , idKid , idAdamP ) ; }

        if( !etThread.strCompareF( tin0P , tIdAdam , T("0100001") ) ) etThread.osSessionF( tin0P , countTC() , countTC() , T("///d/ideafarm.work/backed.up.never/gen/exe/released.")+T(psttIidP)+T("/")+tIdAdam+T("w.exe") , T(psttArgsP) ,  0 ,  0 , 640 , 100 , flSESSION_MINIMIZE | flSESSION_KID ) ;

        //U: etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+TF3(idCycleP,0,8)+T(" ")+TT(time1,time2)+T("  starting ")+tIdAdam+T("\r\n")+S2(0,scOld_SYSmARK) ) ;
        etThread.osTimeNowF( tin0P , time1 , time2 ) ;
        ZE( sCountT , time2 ) ;
        ZE( countT , time1 ) ;
        idCycleLastActiveP = idCycleP ;
    {
    else
    if( etThread ) etThread = 0  ;
    ZE( countT , nu ) ;
    U:: USE napkinC OBJECT TO TEST FOR ALONENESS
    { batonC baton( tin0P , TAG( TAGiDnULL ) , tIdAdam ) ; }
    TN( tIdAdam , "" ) ; tIdAdam = TF1(idAdamP) ;
    //U: etThread.strokeF( tin0P , T("")+S2(saOLD_EDITeRASEbACKtOmARK,scOld_EDIT)+S2(0,scOld_SYSmARK)+TF3(idCycleP,0,8) ) ;
    #endif
        TN( tOs , "w" ) ;
    #elif defined( __NT__ )
        TN( tOs , "o" ) ;
    #if defined( __OS2__ )
{
voidT birthF( tin0S& tin0P , etherC& etThread , countT& idCycleLastActiveP , const countT idAdamP , const strokeS* const psttIidP , const strokeS* const psttArgsP , const countT idCycleP )

}
    etThread.delF( tin0P , pb ) ;
    etThread.boxGetShadowF( tin0P , pb , cb , T("city.center.ideafarm.com//http/ping.html") ) ; ___( pb ) ; //U: NOT TESTED
    ZE( countT , cb ) ;
    ZE( byteT* , pb ) ;
{
voidT testInternetF( tin0S& tin0P , etherC& etThread )

/*1*/WAKEhIDE( "city.supervisor" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

