
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


;
}
    friend voidT loginCBF( tinBaseS& tinBaseP , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , const osTextT* const postBodyP ) ; //U::idPort
    friend TASKpROTO( tmHttpCacheF ) ;
    friend TASKpROTO( tm_httpServerC_F ) ;
    friend voidT etherC::etherDoHttpJobF( tinBaseS& tinBaseP , taskDrivenServerJobS& jobP , socketC*& psoP , sessionC& sessionP , countT idPortMeP , nicNameC nnMeP ) ;

    }
        return bOk ;
        swNicNameByBadge.ungrabF( tinBaseP ) ;
        }
            if( nicNameP != *(nicNameC*)&(countT&)swNicNameByBadge ) bOk = 0 ;
            cLeverBadge = badgeP ;
        {
        if( bOk )
        boolT bOk = swNicNameByBadge.idSlotOfLeverF( tinBaseP , badgeP ) ;
        swNicNameByBadge.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    inline boolT isBadgeOkF( tinBaseS& tinBaseP , countT badgeP , nicNameC& nicNameP )

    }
        return bOk ;
        swNicNameByBadge.ungrabF( tinBaseP ) ;
        }
            *(nicNameC*)&(countT&)swNicNameByBadge = nicNameP ;
            cLeverBadge = badgeP ;
        {
        if( bOk )
        boolT bOk = !swNicNameByBadge.idSlotOfLeverF( tinBaseP , badgeP ) ;
        swNicNameByBadge.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    inline boolT createBadgeF( tinBaseS& tinBaseP , countT badgeP , nicNameC& nicNameP )

    inline measure04T ruF( voidT ) { return ru ; }
    inline textC&     tListFactoryF( voidT ) { return tListFactory ; }
    inline switchC&   swMapUrlF( voidT ) { return swMapUrl ; }
    inline strokeS*&  psttLeverUrlReplyF( voidT ) { return psttLeverUrlReply ; }
    inline strokeS*&  psttLeverUrlMapF( voidT ) { return psttLeverUrlMap ; }
    inline countT     idPortF( tinBaseS& tinBaseP ) { return idPort ; }

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34016.httpServerC.pushSnipNamedF!||
    voidT pushSnipNamedF( tinBaseS& tinBaseP , stackC& stBodyP , const strokeS* const psttNameSnipP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34012.httpServerC.pushSnipF!||
    voidT pushSnipF( tinBaseS& tinBaseP , stackC& stBodyP , const pbRefC& rP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34011.httpServerC.pushSnipF!||
    voidT pushSnipF( tinBaseS& tinBaseP , stackC& stBodyP , const strokeS* const psttP ) const ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34010.httpServerC.pushSnipF!||
    voidT pushSnipF( tinBaseS& tinBaseP , stackC& stBodyP , const countT idSnipP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34015.httpServerC.getSnipF!||
    voidT getSnipF( tinBaseS& tinBaseP , pbRefC*& prP , const strokeS* const psttNameSnipP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34009.httpServerC.getSnipF!||
    voidT getSnipF( tinBaseS& tinBaseP , pbRefC*& prP , const countT idSnipP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400a.httpServerC.getReplyF!||
    voidT getReplyF( tinBaseS& tinBaseP , httpReplyRefC*& prP , const strokeS* const psttUrlP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34007.httpServerC.readRequestF!||
    osTextT readRequestF( tinBaseS& tinBaseP , boolT& bFailP , strokeS*& psttNameP , strokeS*& psttQueryKVP , switchC& swKVP , strokeS*& psttLeverKVP , strokeS*& psttAgentP , osTextT*& postBodyP , boolT& bCloseP , socketC* psoP , const osTextT* const postEscapeP = 0 ) ;
    /* serve a client */

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400e.httpServerC.sayFieldEditF!||
    voidT sayFieldEditF( tinBaseS& tinBaseP , stackC& stBodyP , countT& idBoxLathP , textC& tLabelP , textC& tKeyP , const flagsT flagsP , const countT idHelpLabelP , const countT idHelpMoreP , const strokeS* const psttValueP = 0 , const strokeS* const psttOldCol2P = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400f.httpServerC.sayFieldF!||
    voidT sayFieldF( tinBaseS& tinBaseP , stackC& stBodyP , const strokeS* const psttTitleP , const strokeS* const psttP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3401a.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const strokeS* const psttNameSnipP , const textC& tP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34019.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const countT idSnipP , const textC& tP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34018.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const strokeS* const psttNameSnipP , const osTextT*& postsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34017.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const countT idSnipP , const osTextT*& postsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34013.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const strokeS* const psttNameSnipP , const strokeS* const psttP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400d.httpServerC.storeSnipF!||
    voidT storeSnipF( tinBaseS& tinBaseP , const countT idSnipP , const strokeS* const psttP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34008.httpServerC.storeReplyF!||
    voidT storeReplyF( tinBaseS& tinBaseP , const countT idFormP , const strokeS* const psttUrlP , httpReplyRefC** ppRefOverrideP , const countT idSnipHttpPrefixP = 0 , const strokeS* const psttsTitleP = 0 , const strokeS* const psttsDescriptionP = 0 , const strokeS* const psttsMetaDescriptionP = 0 , const strokeS* const psttsSloganP = 0 , const strokeS* const psttsPageHelpP = 0 , const strokeS* const psttsKeywordsP = 0 , /*httpDynamicReplyBodyCBFT*/voidT* pCBFP = 0 , const strokeS* const psttP = 0 , const byteT* const pbP = 0 , const countT cbP = 0 , const countT idSnipHttpLocationP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34006.httpServerC.ct4F!||
    voidT ct4F( tinBaseS& tinBaseP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34005.httpServerC.ct3F!||
    voidT ct3F( tinBaseS& tinBaseP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34004.httpServerC.ct2F!||
    voidT ct2F( tinBaseS& tinBaseP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34003.httpServerC.ct1F!||
    voidT ct1F( tinBaseS& tinBaseP ) ;
    inline cacheC* pzCacheF( voidT ) { return pzCache ; }
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34002.httpServerC.httpServerC!||
    httpServerC( tinBaseS& tinBaseP , httpServerC_arg1S& arg1P , httpServerC_arg2S& arg2P , cacheC* pCacheP = 0 ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34001.httpServerC.dt_httpServerC!||
    ~httpServerC( voidT ) ;
    /* construction and initialization */

    inline operator textC&( voidT ) { return tNetBiosMe ; }

    public :

    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.34014.httpServerC.storeSnipPrivateF!||
    voidT storeSnipPrivateF( tinBaseS& tinBaseP , const strokeS* const psttNameSnipP , const pbRefC* const prPostsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400c.httpServerC.storeSnipPrivateF!||
    voidT storeSnipPrivateF( tinBaseS& tinBaseP , const countT idSnipP , const pbRefC* const prPostsP ) ;
    //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.3400b.httpServerC.storeReplyPrivateF!||
    voidT storeReplyPrivateF( tinBaseS& tinBaseP , storeReplyPrivateF_argS& argP ) ;

    switchC          swNicNameByBadge ;
    countT           cLeverBadge ;
    ranUniC          ru ;
    textC            tListFactory ;
    cacheC*          pzCache ;
    sessionsC        sessions ;
    threadC*         pThrServe ;
    signC            sgnCtDone ;
    switchC          swSnipByName ;
    strokeS*         psttLeverNameSnip ;
    switchC          swSnipById ;
    countT           cLeverIdSnip ;
    switchC          swReply ;
    switchC          swMapUrl ;
    strokeS*         psttLeverUrlReply ;
    strokeS*         psttLeverUrlMap ;
    countT           cArgThread ;
    httpReplyRefC* pRefReplyAlert ;
    count8S          c8tp ;
    count8S          c8tp2 ;
    count8S          c8tp1 ;
    const countT     idPort ;
    textC            tNetBiosMe ;
    etherC&          ether ;
{
/*1*/class _export httpServerC/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

