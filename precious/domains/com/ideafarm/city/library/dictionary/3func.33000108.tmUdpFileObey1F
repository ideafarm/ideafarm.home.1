

//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//



DONE( tmUdpFileObey1F )
}
    }
        Sleep( 0 ) ;

        }
            //etThread.traceF( tin0P , T("poured wo [cPouredP (after)]:    ")+TF2(cPouredP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            pbci     += cbThis ;
            cPouredP ++ ;

            }
                }
                    pbco += cbDo ;
                    memcpy( pbco , pbThis + cbDone , cbDo ) ;
                {
                else
                if( cbDo > pbwe - pbco ) { BLAMMO ; }           //A:ASSUME: FILE WINDOW IS LARGE ENOUGH TO CONTAIN THE LARGEST POSSIBLE INCOMING PACKET (WORST CASE IS cbDone==0 AND cbThis IS LARGEST POSSIBLE PACKET)
                countT cbDo = cbThis - cbDone ;

                pbco = pbw ;
                pbwe = pbw + cbw ;
                if( !pbw || !cbw ) { BLAMMO ; }
                fwsBuffer.getF( tin0P , pbw , cbw ) ;
                cbw = 0 ;
                pbw = 0 ;

                }
                    pbco += cbDone ;
                    memcpy( pbco , pbThis , cbDone ) ;
                {
                if( cbDone )

                countT cbDone = pbwe - pbco ;
            {
            else
            }
                pbco += cbThis ;
                memcpy( pbco , pbThis , cbThis ) ;          // THIS INCLUDES THE offNext FIELD, WHICH WILL BE USELESS TO tmUdpFileObey2F AND AVAILABLE FOR tmUdpFileObey2F TO USE AS SCRATCH BUFFER OR TO IGNORE
            {
            if( cbThis <= pbwe - pbco )

            countT cbThis = 4 * sizeof( countT ) + cbData + sizeof( sockaddr_in6 ) ;
            byteT* pbThis = pbci ;

            pcLagOffNext    =  &offNext ;
            countT& cbData  = ((countT*)pbci)[ 3 ] ;
            countT& idGram  = ((countT*)pbci)[ 1 ] ;
            countT& offNext = ((countT*)pbci)[ 0 ] ;        // I WILL USE THIS VALUE ON MY NEXT ITERATION TO POSITION MYSELF IN THE CIRCULAR BUFFER TO READ THE NEXT RECORD

            //
            //  01+cbData sizeof( sockaddr_in6 )    from
            //  01        cbData                    data
            //  c         4                         cbData
            //  8         4                         rc
            //  4         4                         idGram (serial number)
            //  0         4                         offNext
            //
            //  offset    length                    description
            //
            // INPUT LAYOUT (FROM s_readF WRITING TO MY CIRCULAR BUFFER pbFastBufferP)

            if( pbci + cbMin > pbe             ) { BLAMMO ; }
            if( pcLagOffNext                   ) pbci = pbFastBufferP + *pcLagOffNext ;      // THE PRECEDING RECORD TELLS ME WHERE IN THE CIRCULAR BUFFER TO POSITION MYSELF
            if( pcLagOffNext && !*pcLagOffNext ) { BLAMMO ; }

            //etThread.traceF( tin0P , T("[idGramLath,cPouredP]:    ")+TF2(idGramLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cPouredP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        {
        while( cPouredP != idGramLath )      // INTENDED TO HANDLE WRAP AOK
    {
    while( !bQuitP )
    ZE( countT* , pcLagOffNext ) ;
    byteT* pbci = pbCircle ;
    const byteT* const pbe = pbFastBufferP + cbFastBufferP ;
    byteT* const pbCircle = pbFastBufferP + sizeof( countT ) ;
    countT& idGramLath = *(countT*)pbFastBufferP ;
    const countT cbMin = 0xc + ifcCBdATAGRAMmAX + sizeof( sockaddr_in6 ) ;

    }
        etThread.osThreadF( TaRG1( tmUdpFileObey2F ) , (countT)&bQuitP , (countT)&psoEndpointP , (countT)&grab_psoEndpointP , (countT)pNicNameToUseP , (countT)pSecretToUseP , (countT)pcReceivedFileWindowsP , ++ cWorker , cProcessorsObey2 , (countT)&cPouredP , (countT)ppcSecretsP , (countT)ppcHashSecretsP , (countT)&offEpochFresheningP , (countT)psttFileBuffer , (countT)&pNicNameWhiteP , (countT)&cNicNameWhiteP , (countT)&grab_pNicNameWhiteP ) ;

        //etThread.traceF( tin0P , T("launching Obey2 [pSecretToUseP]:    ")+TF2((countT)pSecretToUseP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        etThread.strMakeF( tin0P , LF , psttFileBuffer , tFileBuffer ) ; ___( psttFileBuffer ) ;
        ZE( strokeS* , psttFileBuffer ) ;
    {
    while( cDo -- )
    ZE( countT , cWorker ) ;
    countT cDo = cProcessorsObey2 ;

    etThread.traceF( tin0P , T("using [cProcessors,cProcessorsObey2]:    ")+TF2(cProcessors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cProcessorsObey2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    const countT cProcessorsObey2 = pSecretToUseP ? 1 : cProcessors < 7 ? 1 : cProcessors - 5 ;     // "- 5" IS OPTIMAL ON factory2
    const countT cProcessors      = thirdC::osProcessorsIF( tin0P ) ;

    byteT* pbco = pbw ;
    byteT* pbwe = pbw + cbw ;
    if( !pbw || !cbw ) { BLAMMO ; }         //SHOULD BE IMPOSSIBLE SINCE OPENING FOR WRITING ; U:: fileWindowsC WILL FAIL IF NO MORE SPACE ON DISK OR DISK I/O FAILURE
    fwsBuffer.getF( tin0P , pbw , cbw ) ;    //U:: ACCESSES TO THIS MEMORY WILL EXCEPTION IF DISK I/O FAILURE ; NEED TO USE RESTART TO RECOVER FROM SUCH A FAILURE
    ZE( countT , cbw ) ;
    ZE( byteT* , pbw ) ;
    TN( tb4 , "    " ) ;

    fileWindowsC fwsBuffer( tin0P , etThread , tFileBuffer , flFILEwINDOW_WRITE | flFILEwINDOW_DOnOTvALIDATE ) ;
    //etThread.boxPutF( tin0P , tFileBuffer , "X" , 1 ) ;

    }
        etThread.delF( tin0P , psttu ) ;
        tFileBuffer = T("///ideafarm/tmp/udp.file.buffer.")+T(psttu) ;
        etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
        ZE( strokeS* , psttu ) ;
    {
    TN( tFileBuffer , "" ) ;

    grabC&           grab_pNicNameWhiteP    =           *(grabC*)pTaskP->c01 ;
    countT&          cNicNameWhiteP         =          *(countT*)pTaskP->cf  ;
    const nicNameC*& pNicNameWhiteP         = *(const nicNameC**)pTaskP->ce  ;
    strokeS*         psttFileBufferP        =          (strokeS*)pTaskP->cd  ;           //U:: WHAT IS THIS FOR?  IT IS NOT REFERENCED
    countT&          offEpochFresheningP    =          *(countT*)pTaskP->cc  ;
    const countT**   ppcHashSecretsP        =    (const countT**)pTaskP->cb  ;
    const countT**   ppcSecretsP            =    (const countT**)pTaskP->ca  ;
    countT           cbFastBufferP          =                    pTaskP->c9  ;
    byteT*           pbFastBufferP          =            (byteT*)pTaskP->c8  ;
    countT&          cPouredP               =          *(countT*)pTaskP->c7  ;
    countT*          pcReceivedFileWindowsP =           (countT*)pTaskP->c6  ;
    countT*          pSecretToUseP          =           (countT*)pTaskP->c5  ;
    nicNameC*        pNicNameToUseP         =         (nicNameC*)pTaskP->c4  ;
    grabC&           grab_psoEndpointP      =           *(grabC*)pTaskP->c3  ;
    socketC*&        psoEndpointP           =        *(socketC**)pTaskP->c2  ;
    boolT&           bQuitP                 =           *(boolT*)pTaskP->c1  ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c7 && pTaskP->c8 && pTaskP->c9 && pTaskP->cc && pTaskP->ce && pTaskP->cf && pTaskP->c01 )
/*1*/TASK( tmUdpFileObey1F )/*1*/

// I SINGLEHANDEDLY COPY DATA OUT OF THE CIRCULAR BUFFER THAT s_readF WRITES TO, APPENDING THE INCOMING DATA TO A BUFFER FILE THAT GROWS WITHOUT BOUND ; I DO THIS AS QUICLY AS POSSIBLE SO THAT s_readF RARELY HAS TO WAIT FOR ME ; MAKING s_readF WAIT CAUSES PACKET LOSS

/**/

*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

