
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    }
        }
            etThread.delF( tin0P , psttPassword ) ;
            strokeS*& psttPassword = (strokeS*&)(countT&)swExistingCredentials ;
            psttzLeverIdUser = (strokeS*)swExistingCredentials.leverF( tin0P , idf ) ;

            _IO_
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swExistingCredentials.cFlavorsF( tin0P ) ;
    {

    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //****                                             *****************************************************************************************************************************************************************************************************************************************************
    //****  PURGE THE PREEXISTING CREDENTIALS switchC  *****************************************************************************************************************************************************************************************************************************************************
    //****                                             *****************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************

    }
        ++ s ; ether.osSleepF( tin0P , TOCK ) ;

        }
            while( !ether && ~hFindEvent && !POOP ) ;
            }
                DEL( pInfo ) ;
                }
                    }
                        }
                            }
                                //etRock.traceF( tin0P , (!F(flagsFail)?T("aok"):T("flagsFail:")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)) ) ;

                                }
                                    }
                                        ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                        flagsFail |= flFAIL_COULDnOTmOVEfILE ;
                                        POOPR
                                    {
                                    if( POOP )
                                    ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tWhere+tShort , tLongEating , 1 ) ;

                                    SCOOPS
                                {
                                IFsCRATCHoK

                                ;
                                        : tSharedFolderEventDone
                                        ? tSharedFolderEventRetryLater
                                    : F(flagsFail) || !bRegistered
                                    ? tSharedFolderEventGorilla01
                                TN( tWhere , "" ) ; tWhere = bGorilla01

                                //etRock.traceF( tin0P , T("moving the file") ) ;

                                //etRock.traceF( tin0P , T("cleaning up 3") ) ;

                                }
                                    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                    //etRock.traceF( tin0P , T("unknown error") ) ;
                                    flagsFail |= flFAIL_UNKNOWNeRROR ;
                                    POOPR
                                {
                                if( POOP )
                                //etRock.traceF( tin0P , T("cleaning up 2") ) ;

                                }
                                    }
                                        }
                                            etThread.delF( tin0P , psttValueMiddleAmountDiscount     ) ;
                                            etThread.delF( tin0P , psttValueMiddleAmountSubtotal     ) ;
                                            etThread.delF( tin0P , psttValueMiddleAmountTotal        ) ;
                                            etThread.delF( tin0P , psttValueMiddleCurrencyConversion ) ;
                                            etThread.delF( tin0P , psttValueMiddleCurrency           ) ;
                                            etThread.delF( tin0P , psttValueLive                     ) ;
                                            etThread.delF( tin0P , psttValueUpdatedLanName           ) ;
                                            etThread.delF( tin0P , psttValueUpdatedNnPeer            ) ;
                                            etThread.delF( tin0P , psttValueCreatedLanName           ) ;
                                            etThread.delF( tin0P , psttValueCreatedNnPeer            ) ;
                                            etThread.delF( tin0P , psttValuePaidLanName              ) ;
                                            etThread.delF( tin0P , psttValuePaidNnPeer               ) ;
                                            etThread.delF( tin0P , psttValueIdSubscription           ) ;
                                            etThread.delF( tin0P , psttValueName                     ) ;
                                            etThread.delF( tin0P , psttValueEmail                    ) ;
                                            etThread.delF( tin0P , psttValuePostalCode               ) ;
                                            etThread.delF( tin0P , psttValueCountry                  ) ;
                                            etThread.delF( tin0P , psttValueHawker                   ) ;
                                            etThread.delF( tin0P , psttValueAge                      ) ;
                                            etThread.delF( tin0P , psttVersion                       ) ;
                                            etThread.delF( tin0P , psttEvent                         ) ;

                                            }
                                                 etThread.delF( tin0P , psttPeer3Domain ) ;
                                                 etThread.delF( tin0P , psttPeer2Domain ) ;
                                                 etThread.delF( tin0P , psttPeer1Domain ) ;

                                                 if( etThread.strCompareF( tin0P , tLanNameExpected , psttValueUpdatedLanName ) ) etThread.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Valid Webhook Notice received from untrusted peer ")+T(psttValueUpdatedLanName)+T(": ")+T(psttValueUpdatedNnPeer)+tb4DomainColontb4+T(psttPeer3Domain)+T("\r\nPlease add this value to the list of trusted peers.\r\n\r\n") ) ;
                                                 if( etThread.strCompareF( tin0P , tLanNameExpected , psttValueCreatedLanName ) ) etThread.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Valid Webhook Notice received from untrusted peer ")+T(psttValueCreatedLanName)+T(": ")+T(psttValueCreatedNnPeer)+tb4DomainColontb4+T(psttPeer2Domain)+T("\r\nPlease add this value to the list of trusted peers.\r\n\r\n") ) ;
                                                 if( etThread.strCompareF( tin0P , tLanNameExpected , psttValuePaidLanName    ) ) etThread.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/factoryreports@ideafarm.com") , T("Subject: Valid Webhook Notice received from untrusted peer ")+T(psttValuePaidLanName   )+T(": ")+T(psttValuePaidNnPeer   )+tb4DomainColontb4+T(psttPeer1Domain)+T("\r\nPlease add this value to the list of trusted peers.\r\n\r\n") ) ;

                                                 ZE( strokeS* , psttPeer3Domain ) ; etThread.sockPsttHostF( tin0P , psttPeer3Domain , nnPeer3 ) ; ___( psttPeer3Domain ) ;
                                                 ZE( strokeS* , psttPeer2Domain ) ; etThread.sockPsttHostF( tin0P , psttPeer2Domain , nnPeer2 ) ; ___( psttPeer2Domain ) ;
                                                 ZE( strokeS* , psttPeer1Domain ) ; etThread.sockPsttHostF( tin0P , psttPeer1Domain , nnPeer1 ) ; ___( psttPeer1Domain ) ;

                                                nicNameC nnPeer3 = etThread.sockNicNameF( tin0P , tNnPeer3 ) ;
                                                nicNameC nnPeer2 = etThread.sockNicNameF( tin0P , tNnPeer2 ) ;
                                                nicNameC nnPeer1 = etThread.sockNicNameF( tin0P , tNnPeer1 ) ;
                                            {
                                            if( bValidEvent )

                                            /**/etRock.traceF( tin0P , T("[tUpdatedLanName]:    ")+T(psttValueUpdatedLanName) ) ;
                                            /**/etRock.traceF( tin0P , T("[tUpdatedNnPeer]:     ")+tNnPeer3                   ) ;
                                            /**/etRock.traceF( tin0P , T("[tCreatedLanName]:    ")+T(psttValueCreatedLanName) ) ;
                                            /**/etRock.traceF( tin0P , T("[tCreatedNnPeer]:     ")+tNnPeer2                   ) ;
                                            /**/etRock.traceF( tin0P , T("[tPaidLanName]:       ")+T(psttValuePaidLanName   ) ) ;
                                            /**/etRock.traceF( tin0P , T("[tPaidNnPeer]:        ")+tNnPeer1                   ) ;

                                            TN( tNnPeer3 , psttValueUpdatedNnPeer ) ;
                                            TN( tNnPeer2 , psttValueCreatedNnPeer ) ;
                                            TN( tNnPeer1 , psttValuePaidNnPeer    ) ;

                                            }
                                                }
                                                    }
                                                        }
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //****                                             *****************************************************************************************************************************************************************************************************************************************************
                                                            //****  TRY THE NEXT ID VALUE FOR THIS TYPE (END)  *****************************************************************************************************************************************************************************************************************************************************
                                                            //****                                             *****************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************

                                                            //etRock.traceF( tin0P , T("debug / 0") ) ;
                                                            etThread.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/factoryreports@ideafarm.com/")+T(psttValueEmail)+T("") , tThankYou ) ;
                                                            //etRock.traceF( tin0P , T("debug / 1") ) ;

                                                            }
                                                                ) ;

                                                                    "Be sure to use the same email address so that we can detect duplicate charges and reverse them.\r\n\r\n"
                                                                    "If you entered your [matrix] username incorrectly, you can submit a new, corrected order.\r\n"
                                                                    "\r\nWe have been notified and will contact you via email during business hours.\r\n"

                                                                tThankYou += T(

                                                                }
                                                                    ) ;

                                                                        "    [students and faculty]:    ")+tValueError3+T("\r\n"

                                                                    tThankYou += T(
                                                                {
                                                                if( bFail3 )

                                                                }
                                                                    ) ;

                                                                        "    [courtship workshops]:     ")+tValueError2+T("\r\n"

                                                                    tThankYou += T(
                                                                {
                                                                if( bFail2 )

                                                                }
                                                                    ) ;

                                                                        "    [visitors]:                ")+tValueError1+T("\r\n"

                                                                    tThankYou += T(
                                                                {
                                                                if( bFail1 )

                                                                ) ;

                                                                    "Your payment has been received but this automated system could not generate some of your invite(s):\r\n\r\n"

                                                                tThankYou += T(
                                                            {
                                                            if( bFail1 || bFail2 || bFail3 )

                                                            ) ;
                                                                "go to http://admissions.ideafarm.com/ and click: \"[Click here to manage your subscription]\".\r\n"
                                                                "unless you think that this email is spam.  To terminate or modify the subscription that you just paid for,\r\n"
                                                                "The anti-spam link at the bottom appears at the end of all email sent from IDEAFARM.COM.  Please do NOT click it\r\n"
                                                                +tInvitationsSubmitted +T("\r\n\r\n"
                                                                "You have been invited to join the following spaces and rooms at The IdeaFarm (tm) College of Imagination Science:\r\n\r\n")
                                                                "    [backup codes]:  ")+T("        (You will receive these during your first login, but hopefully will never need them.)\r\n\r\n"
                                                                "    [secret phrase]: ")+T("        (You will make this up during your first login and enter it each time you log in.)\r\n"
                                                                "Your account will also be secured by the following credentials:\r\n\r\n"
                                                                "    [password]:      ")+tNewPassword+T("        (Be sure to change this right away!)\r\n\r\n"
                                                                "    [username]:      ")+tNewUserNameShort+T("\r\n"
                                                                "Here are your credentials.  You can use them immediately to log in:\r\n\r\n"
                                                                "For instructions, see http://admissions.ideafarm.com .\r\n\r\n"
                                                                "    [hawker]:        ")+T(psttValueHawker)+T("\r\n\r\n"
                                                                "    [age (parsed)]:  ")+TF4(age,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n"
                                                                "    [age (raw)]:     ")+T(psttValueAge)+T("\r\n"
                                                                "    [email]:         ")+T(psttValueEmail)+T("\r\n"
                                                                +T("Payment received for:\r\n\r\n"
                                                                "Subject: Notification from IDEAFARM.COM\r\n\r\nThank you for ")+tForWhat

                                                            TN( tThankYou , "" ) ; tThankYou = T(

                                                            else           tForWhat = T("paying your entry fee for self-monitored chat.\r\n\r\n") ;
                                                            if( bStudent ) tForWhat = T("registering as a student on IDEAFARM.COM.\r\n\r\n") ;
                                                            TN( tForWhat , "" ) ;
                                                            //etRock.traceF( tin0P , T("debug / 2") ) ;

                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //****                          ************************************************************************************************************************************************************************************************************************************************************************
                                                            //****  POST THE WELCOME EMAIL  ************************************************************************************************************************************************************************************************************************************************************************
                                                            //****                          ************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************

                                                            }
                                                                }
                                                                    }
                                                                        }
                                                                            //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                            POOPRqUIET
                                                                        {
                                                                        if( POOP )
                                                                    
                                                                        //etRock.traceF( tin0P , T("[accessToken,deviceId]:    ")+tValueAccessToken+tb4+tValueDeviceId ) ;
                                                                    
                                                                        }
                                                                            DEL( pSwPathValue ) ;
                                                                    
                                                                            }
                                                                                }
                                                                                    etThread.delF( tin0P , pstpsttValue ) ;
                                                                    
                                                                                    }
                                                                                        }
                                                                                            //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                            *pptValue[ offe ] = T(pstpsttValue) ;
                                                                                        {
                                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                    {
                                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )
                                                                    
                                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                                                                    
                                                                                    /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                    /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                    
                                                                                    strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                                                                    
                                                                                    _IO_
                                                                                {
                                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                            {
                                                                            if( !POOP )
                                                                    
                                                                            ;
                                                                            }
                                                                                &tPathDeviceId     ,
                                                                                &tPathAccessToken  ,
                                                                            {
                                                                            textC* pptPath[] =
                                                                    
                                                                            TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                                                                            TN( tPathAccessToken , "\"access_token\"/" ) ;
                                                                    
                                                                            ;
                                                                            }
                                                                                &tValueDeviceId      ,
                                                                                &tValueAccessToken ,
                                                                            {
                                                                            textC* pptValue[] =
                                                                    
                                                                            __Z( pSwPathValue ) ;
                                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                            ZE( switchC* , pSwPathValue ) ;
                                                                            ZE( strokeS* , psttPath     ) ;
                                                                        {
                                                                    
                                                                        //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                        //etRock.traceF( tin0P , T("json response:") ) ;
                                                                    
                                                                        }
                                                                            }
                                                                                else if( costj ) break ;
                                                                                     if( cNest ) costj ++ ;
                                                                    
                                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                     if( postj[ costj ] == '{' ) cNest ++ ;

                                                                                if( !cbIn ) break ;
                                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                            {
                                                                            for(;;)
                                                                            ZE( countT , cNest ) ;
                                                                        {
                                                                        ZE( countT , costj ) ;
                                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                                        osTextT postj[ TUCK << 1 ] ;
                                                                    
                                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                        //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                        //etRock.traceF( tin0P , T("request:") ) ;
                                                                    
                                                                        TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/logout HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(0,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n") ;
                                                                    
                                                                        //sockc.connectF( tin0P , 80 , nnServer ) ;
                                                                        //socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                    
                                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                    
                                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                        countT timeAllowedConnected = TICK >> 2 ;
                                                                    
                                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                        nicNameC nnServer ;
                                                                    
                                                                        SCOOPS
                                                                        _IO_

                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****          ****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****  LOGOUT  ****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****          ****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                    {
                                                                    IFsCRATCHoK                                                           // LOGOUT

                                                                    if( !tInvitationsSubmitted.csF( tin0P ) ) tInvitationsSubmitted = T("    none\r\n") ;
                                                                    //etRock.traceF( tin0P , T("debug / 3") ) ;

                                                                    }            
                                                                        }
                                                                            }
                                                                                tInvitationsSubmitted += tb4+tNameSpaceAcademic+tcrlf ;
                                                                                TN( tNameSpaceAcademic , "Students and Faculty Only (ICIS)" ) ;
                                                                            {
                                                                            if( !bFail3 )

                                                                            }
                                                                                bFail3 = 1 ;
                                                                                //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                                POOPRqUIET
                                                                            {
                                                                            if( POOP )
                                                                        
                                                                            }
                                                                                if( !tValueErrorCode3.csF( tin0P ) ) bFail3 = 0 ;
                                                                                DEL( pSwPathValue ) ;
                                                                                }
                                                                                    }
                                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                                        }
                                                                                            }
                                                                                                //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                                            {
                                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                        {
                                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                                        _IO_
                                                                                    {
                                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                                {
                                                                                if( !POOP )

                                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                                ;
                                                                                }
                                                                                    &tPathError     ,
                                                                                    &tPathErrorCode ,
                                                                                {
                                                                                textC* pptPath[] =

                                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                                ;
                                                                                }
                                                                                    &tValueError3     ,
                                                                                    &tValueErrorCode3 ,
                                                                                {
                                                                                textC* pptValue[] =

                                                                                __Z( pSwPathValue ) ;
                                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                                ZE( switchC* , pSwPathValue ) ;
                                                                                ZE( strokeS* , psttPath     ) ;
                                                                            {

                                                                            //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("json response:") ) ;

                                                                            }
                                                                                }
                                                                                    else if( costj ) break ;
                                                                                         if( cNest ) costj ++ ;
                                                                        
                                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                                        
                                                                                    putchar( postj[ costj ] ) ;

                                                                                    if( !cbIn ) break ;
                                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                                {
                                                                                for(;;)
                                                                                ZE( countT , cNest ) ;
                                                                            {
                                                                            ZE( countT , costj ) ;
                                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                                            osTextT postj[ TUCK << 1 ] ;
                                                                        
                                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("request:") ) ;

                                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!CxQXuURdflEEIURQXO:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                                        
                                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                        
                                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                                        
                                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                            nicNameC nnServer ;
                                                                        
                                                                            SCOOPS
                                                                        {
                                                                        IFsCRATCHoK
                                                                        _IO_

                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****                                                   ***********************************************************************************************************************************************************************************************************************************************
                                                                        //****  INVITE TO ROOM Students and Faculty Only (ICIS)  ***********************************************************************************************************************************************************************************************************************************************
                                                                        //****                                                   ***********************************************************************************************************************************************************************************************************************************************
                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                    {
                                                                    else if( !bFail0 )
                                                                    if( age < 16 || !bStudent ) bFail3 = 0 ;
                                                                    TN( tNameSpaceAcademic , "Students and Faculty Only (ICIS)" ) ;    // INVITE TO SPACE
                                                                    //etRock.traceF( tin0P , T("debug / 4") ) ;
                                                                    
                                                                    }            
                                                                        }
                                                                            }
                                                                                tInvitationsSubmitted += tb4+tNameSpaceCourtship+tcrlf ;
                                                                                TN( tNameSpaceCourtship , "Bait N' Switch Courtship Workshops (ICIS)" ) ;
                                                                            {
                                                                            if( !bFail2 )

                                                                            }
                                                                                bFail2 = 1 ;
                                                                                //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                                POOPRqUIET
                                                                            {
                                                                            if( POOP )
                                                                        
                                                                            }
                                                                                if( !tValueErrorCode2.csF( tin0P ) ) bFail2 = 0 ;
                                                                                DEL( pSwPathValue ) ;
                                                                                }
                                                                                    }
                                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                                        }
                                                                                            }
                                                                                                //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                                            {
                                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                        {
                                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                                        _IO_
                                                                                    {
                                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                                {
                                                                                if( !POOP )

                                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                                ;
                                                                                }
                                                                                    &tPathError     ,
                                                                                    &tPathErrorCode ,
                                                                                {
                                                                                textC* pptPath[] =

                                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                                ;
                                                                                }
                                                                                    &tValueError2     ,
                                                                                    &tValueErrorCode2 ,
                                                                                {
                                                                                textC* pptValue[] =

                                                                                __Z( pSwPathValue ) ;
                                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                                ZE( switchC* , pSwPathValue ) ;
                                                                                ZE( strokeS* , psttPath     ) ;
                                                                            {

                                                                            //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("json response:") ) ;

                                                                            }
                                                                                }
                                                                                    else if( costj ) break ;
                                                                                         if( cNest ) costj ++ ;
                                                                        
                                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                                        
                                                                                    putchar( postj[ costj ] ) ;

                                                                                    if( !cbIn ) break ;
                                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                                {
                                                                                for(;;)
                                                                                ZE( countT , cNest ) ;
                                                                            {
                                                                            ZE( countT , costj ) ;
                                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                                            osTextT postj[ TUCK << 1 ] ;
                                                                        
                                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("request:") ) ;
                                                                        
                                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!esnkyOGEyeJQlIZGPM:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                                        
                                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                        
                                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                                        
                                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                            nicNameC nnServer ;
                                                                        
                                                                            SCOOPS
                                                                        {
                                                                        IFsCRATCHoK
                                                                        _IO_

                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****                                                            **************************************************************************************************************************************************************************************************************************************
                                                                        //****  INVITE TO ROOM Bait N' Switch Courtship Workshops (ICIS)  **************************************************************************************************************************************************************************************************************************************
                                                                        //****                                                            **************************************************************************************************************************************************************************************************************************************
                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                    {
                                                                    else if( !bFail0 )
                                                                    if( age < 13 || age > 29 ) bFail2 = 0 ;
                                                                    //etRock.traceF( tin0P , T("debug / 5") ) ;
                                                                    
                                                                    }
                                                                        }
                                                                            }
                                                                                tInvitationsSubmitted += tb4+tNameSpaceVisitors+tcrlf ;
                                                                                TN( tNameSpaceVisitors , "Visitors (ICIS: The IdeaFarm (tm) College of Imagination Science)" ) ;
                                                                            {
                                                                            if( !bFail1 )

                                                                            }
                                                                                bFail1 = 1 ;
                                                                                //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                                POOPRqUIET
                                                                            {
                                                                            if( POOP )
                                                                        
                                                                            }
                                                                                if( !tValueErrorCode1.csF( tin0P ) ) bFail1 = 0 ;
                                                                                DEL( pSwPathValue ) ;
                                                                                }
                                                                                    }
                                                                                        etThread.delF( tin0P , pstpsttValue ) ;

                                                                                        }
                                                                                            }
                                                                                                //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                                *pptValue[ offe ] = T(pstpsttValue) ;
                                                                                            {
                                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                        {
                                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                                        _IO_
                                                                                    {
                                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                                {
                                                                                if( !POOP )

                                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                                ;
                                                                                }
                                                                                    &tPathError     ,
                                                                                    &tPathErrorCode ,
                                                                                {
                                                                                textC* pptPath[] =

                                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                                ;
                                                                                }
                                                                                    &tValueError1     ,
                                                                                    &tValueErrorCode1 ,
                                                                                {
                                                                                textC* pptValue[] =

                                                                                __Z( pSwPathValue ) ;
                                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                                ZE( switchC* , pSwPathValue ) ;
                                                                                ZE( strokeS* , psttPath     ) ;
                                                                            {

                                                                            //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("json response:") ) ;

                                                                            }
                                                                                }
                                                                                    else if( costj ) break ;
                                                                                         if( cNest ) costj ++ ;
                                                                        
                                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                         if( postj[ costj ] == '{' ) cNest ++ ;
                                                                        
                                                                                    putchar( postj[ costj ] ) ;

                                                                                    if( !cbIn ) break ;
                                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                                {
                                                                                for(;;)
                                                                                ZE( countT , cNest ) ;
                                                                            {
                                                                            ZE( countT , costj ) ;
                                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                                            osTextT postj[ TUCK << 1 ] ;
                                                                        
                                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("request:") ) ;
                                                                        
                                                                            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/rooms/!tvsMKCZYUrmUfxhZIq:ideafarm.com/invite HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(tBodyInvite.csF(tin0P),flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBodyInvite ;
                                                                        
                                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                        
                                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT timeAllowedConnected = TICK >> 2 ;
                                                                        
                                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                            nicNameC nnServer ;
                                                                        
                                                                            SCOOPS
                                                                        {
                                                                        IFsCRATCHoK
                                                                        _IO_

                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****                                                                                    **************************************************************************************************************************************************************************************************************
                                                                        //****  INVITE TO SPACE Visitors (ICIS: The IdeaFarm (tm) College of Imagination Science) **************************************************************************************************************************************************************************************************************
                                                                        //****                                                                                    **************************************************************************************************************************************************************************************************************
                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                    {
                                                                    else if( !bFail0 )
                                                                    if( age < 13 ) bFail1 = 0 ;
                                                                    //etRock.traceF( tin0P , T("debug / 6") ) ;

                                                                    }
                                                                        if( tValueAccessToken.csF( tin0P ) ) bFail0 = 0 ;

                                                                        }
                                                                            //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                            POOPRqUIET
                                                                        {
                                                                        if( POOP )
                                                                    
                                                                        //etRock.traceF( tin0P , T("[accessToken,deviceId]:    ")+tValueAccessToken+tb4+tValueDeviceId ) ;
                                                                    
                                                                        }
                                                                            DEL( pSwPathValue ) ;
                                                                            
                                                                            }
                                                                                }
                                                                                    etThread.delF( tin0P , pstpsttValue ) ;
                                                                            
                                                                                    }
                                                                                        }
                                                                                            //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                            *pptValue[ offe ] = T(pstpsttValue) ;
                                                                                        {
                                                                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                    {
                                                                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )
                                                                            
                                                                                    if( cPaths - cValues ) { BLAMMO ; }
                                                                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                                                                            
                                                                                    /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                    /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            
                                                                                    strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                                                                            
                                                                                    _IO_
                                                                                {
                                                                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                            {
                                                                            if( !POOP )
                                                                            
                                                                            ;
                                                                            }
                                                                                &tPathDeviceId     ,
                                                                                &tPathAccessToken  ,
                                                                            {
                                                                            textC* pptPath[] =
                                                                            
                                                                            TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                                                                            TN( tPathAccessToken , "\"access_token\"/" ) ;
                                                                            
                                                                            ;
                                                                            }
                                                                                &tValueDeviceId      ,
                                                                                &tValueAccessToken ,
                                                                            {
                                                                            textC* pptValue[] =
                                                                            
                                                                            __Z( pSwPathValue ) ;
                                                                            etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                            ZE( switchC* , pSwPathValue ) ;
                                                                            ZE( strokeS* , psttPath     ) ;
                                                                            _IO_
                                                                        {
                                                                    
                                                                        //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                        //etRock.traceF( tin0P , T("json response:") ) ;
                                                                    
                                                                        }
                                                                            }
                                                                                else if( costj ) break ;
                                                                                     if( cNest ) costj ++ ;
                                                                    
                                                                                else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                     if( postj[ costj ] == '{' ) cNest ++ ;
                                                                    
                                                                                putchar( postj[ costj ] ) ;

                                                                                if( !cbIn ) break ;
                                                                                countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                            {
                                                                            for(;;)
                                                                            ZE( countT , cNest ) ;
                                                                        {
                                                                        ZE( countT , costj ) ;
                                                                        thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                                                                        osTextT postj[ TUCK << 1 ] ;
                                                                    
                                                                        sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                        //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                        //etRock.traceF( tin0P , T("request:") ) ;
                                                                    
                                                                        TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/login HTTP/1.1\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;
                                                                    
                                                                        countT costBody = tBody.csF( tin0P ) ;
                                                                    
                                                                        //sockc.connectF( tin0P , 80 , nnServer ) ;
                                                                        //socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_null , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                    
                                                                        sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                        socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                    
                                                                        countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                        countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                        countT timeAllowedConnected = TICK >> 2 ;
                                                                    
                                                                        nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                        nicNameC nnServer ;
                                                                    
                                                                        ) ;
                                                                        
                                                                            "}\r\n"
                                                                            "    \"password\": \"")+tApiPassword+T("\"\r\n"
                                                                            "    },\r\n"
                                                                            "        \"user\": \"a.1\"\r\n"
                                                                            "        \"type\": \"m.id.user\",\r\n"
                                                                            "    {\r\n"
                                                                            "    \"identifier\":\r\n"
                                                                            "    \"type\": \"m.login.password\",\r\n"
                                                                            "{\r\n"
                                                                        
                                                                        TN( tBody , "" ) ; tBody = T(
                                                                        
                                                                        }
                                                                            etThread.delF( tin0P , psttApiPassword ) ;
                                                                            tApiPassword = T(psttApiPassword) ;
                                                                            //etRock.traceF( tin0P , T("[password]:    ")+T(psttApiPassword) ) ;
                                                                            if( psttApiPassword && psttApiPassword->idAdam ) tApiPassword = T(psttApiPassword) ;

                                                                              ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.ideafarm.com.a.1"          ) ) ; ___( psttApiPassword ) ;
                                                                            //ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.ideafarm.com.administrator") ) ; ___( psttApiPassword ) ;
                                                                            //ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.communick.com.ideafarm"    ) ) ; ___( psttApiPassword ) ;
                                                                        {
                                                                        TN( tApiPassword , "" ) ;

                                                                        SCOOPS
                                                                        _IO_

                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****         *****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****  LOGIN  *****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //****         *****************************************************************************************************************************************************************************************************************************************************************************************
                                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                    {
                                                                    IFsCRATCHoK

                                                                    TN( tValueDeviceId    , ""                     ) ;
                                                                    TN( tValueAccessToken , ""                     ) ;
                                                                    TN( tServer              , "ideafarm.com"         ) ;
                                                                  //TN( tServer              , "matrix.communick.com" ) ;
                                                                    //etRock.traceF( tin0P , T("debug / 7") ) ;

                                                                    }
                                                                        }
                                                                            //etRock.traceF( tin0P , T("debug / 7.1") ) ;
                                                                            }
                                                                                //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                                POOPRqUIET
                                                                            {
                                                                            if( POOP )
                                                                            //etRock.traceF( tin0P , T("debug / 7.2") ) ;

                                                                            //etRock.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;
                                                                            TN( tb4 , "    " ) ;

                                                                            }
                                                                                }
                                                                                    etThread.boxPutF( tin0P , tLong , tRecord , tRecord.csF( tin0P ) ) ;

                                                                                    etThread.delF( tin0P , psttu ) ;

                                                                                    TN( tLong , "" ) ; tLong = T("///" "/go1/" "d/ideafarm.shared/")+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/json/usernames/")+T("json.username.")+T(psttu)+T(".json") ;

                                                                                    etThread.strUniqueF( tin0P , psttu ) ; ___( psttu ) ;
                                                                                    ZE( strokeS* , psttu ) ;

IFsCRATCHoK{}

                                                                                    ) ;

                                                                                        "}\r\n"
                                                                                        "    \"subscription.id\" : \"")+T(psttValueIdSubscription)+T("\"\r\n"
                                                                                        "    \"type\" : \"")+T(bStudent?"student":"visitor")+T("\"\r\n"
                                                                                        "    \"username\" : \"")+tNewUserNameLong+T("\"\r\n"
                                                                                        "    \"email\" : \"")+T(psttValueEmail)+T("\"\r\n"
                                                                                        "    \"live\" : \"")+T(psttValueLive)+T("\"\r\n"
                                                                                        "    \"time\" : \"")+TTF(timeN1,timeN2)+T("\"\r\n"
                                                                                        "{\r\n"

                                                                                    TN( tRecord , "" ) ; tRecord = T(

                                                                                    etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
                                                                                    ZE( sCountT , timeN2 ) ;
                                                                                    ZE( countT  , timeN1 ) ;

                                                                                    bRegistered = 1 ;
                                                                                {
                                                                                else
                                                                                }
                                                                                    continue ;
                                                                                    bRetrySameUsername = 1 ;
                                                                                    //etRock.traceF( tin0P , T("!exception / other error ; will retry the same value [errorCode,error]:    ")+tValueErrorCode+tb4+tValueError ) ;
                                                                                {
                                                                                else if( tValueErrorCode.csF( tin0P ) || tValueError.csF( tin0P ) )
                                                                                }
                                                                                    continue ;
                                                                                    //etRock.traceF( tin0P , T("!exception / this username is already registered ; will try the next value [errorCode,error]:    ")+tValueErrorCode+tb4+tValueError ) ;
                                                                                {
                                                                                if( !etThread.strCompareF( tin0P , tValueErrorCode , T("M_USER_IN_USE") ) )

                                                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                                //****                                                      ********************************************************************************************************************************************************************************************************************************************
                                                                                //****  IF OK THEN WRITE JSON FILE, ELSE CONTINUE TO RETRY  ********************************************************************************************************************************************************************************************************************************************
                                                                                //****                                                      ********************************************************************************************************************************************************************************************************************************************
                                                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
IFsCRATCHoK{}

                                                                                DEL( pSwPathValue ) ;

                                                                                }
                                                                                    }
                                                                                        etThread.delF( tin0P , psttValue ) ;

                                                                                        }
                                                                                            }
                                                                                                //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                                *pptValue[ offe ] = T(psttValue) ;
                                                                                            {
                                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                        {
                                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                                        /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                        /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                                                                                        strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                                        _IO_
                                                                                    {
                                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                                    _IO_
                                                                                {
                                                                                if( !POOP )

                                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                                ;
                                                                                }
                                                                                    &tPathNonce     ,
                                                                                    &tPathError     ,
                                                                                    &tPathErrorCode ,
                                                                                {
                                                                                textC* pptPath[] =

                                                                                TN( tPathNonce     , "\"nonce\"/"   ) ;
                                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                                ;
                                                                                }
                                                                                    &tValueNonce     ,
                                                                                    &tValueError     ,
                                                                                    &tValueErrorCode ,
                                                                                {
                                                                                textC* pptValue[] =

                                                                                TN( tValueError     , "" ) ;
                                                                                TN( tValueErrorCode , "" ) ;

                                                                                __Z( pSwPathValue ) ;
                                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                                ZE( switchC* , pSwPathValue ) ;
                                                                                ZE( strokeS* , psttPath     ) ;
                                                                                _IO_
                                                                            {
                                                                            TN( tValueNonce     , "" ) ;
                                                                            //etRock.traceF( tin0P , T("debug / 7.3") ) ;
IFsCRATCHoK{}

                                                                            //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("json response:") ) ;

                                                                            }
                                                                                //etRock.traceF( tin0P , T(posth) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                //etRock.traceF( tin0P , T("[headers]:") ) ;
                                                                                posth[ costh ] = 0 ;
                                                                                }
                                                                                    }
                                                                                        break ;

                                                                                        postj[ costj ] = save ;
                                                                                                       postj[ costj ] = 0 ;
                                                                                        osTextT save = postj[ costj ] ;
                                                                                    {
                                                                                    else if( costj )
                                                                                         if( cNest ) costj ++ ;

                                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                         if( postj[ costj ] == '{' ) cNest ++ ;

                                                                                    if( !costj && !cNest ) posth[ costh ++ ] = postj[ costj ] ;

                                                                                    //etRock.traceF( tin0P , TF3(++idReadLath,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,8)+T("    ")+T(post2) ) ;
                                                                                    //osTextT post2[] = { postj[ costj ] , 0 } ;
                                                                        
                                                                                    if( !cbIn ) break ;
                                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                                {
                                                                                for(;;)
                                                                                ZE( countT , cNest ) ;
                                                                                ZE( countT , idReadLath ) ;

                                                                                ZE( countT , costh ) ;
                                                                                osTextT posth[ TUCK << 1 ] ;
                                                                                _IO_
                                                                            {
                                                                            ZE( countT , costj ) ;
                                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;
                                                                            osTextT postj[ TUCK << 1 ] ;
                                                                            //etRock.traceF( tin0P , T("debug / 7.4") ) ;

                                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("request:") ) ;
                                                                            //etRock.traceF( tin0P , T("debug / 7.5") ) ;

                                                                            TN( tSay , "" ) ; tSay = T("POST /_synapse/admin/v1/register HTTP/1.1")/*+T("\r\nAuthorization: Bearer ")+tValueSharedSecret*/+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;

                                                                            countT costBody = tBody.csF( tin0P ) ;

                                                                            //etRock.traceF( tin0P , T("debug / 7.6") ) ;
                                                                            sockc.connectF( tin0P , 443 , nnServer ) ;                  //U::20250824@0848: IF SERVER DOES NOT RESPOND, THIS LINE WILL CAUSE etScratch TO BECOME IMPOTENT, WHICH WILL CAUSE scoopC TO BLAMMO
                                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
                                                                            //etRock.traceF( tin0P , T("debug / 7.7") ) ;

                                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT timeAllowedConnected = TICK >> 2 ;

                                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                            nicNameC nnServer ;

                                                                            //etRock.traceF( tin0P , T("debug / 7.8") ) ;
                                                                            ) ;

                                                                                "}\r\n"
                                                                                "    \"mac\": \"")+tMac                 +T("\"\r\n"
                                                                                "    \"password\": \"")+tNewPassword           +T("\",\r\n"
                                                                                "    \"username\": \"")+tNewUserNameShort      +T("\",\r\n"
                                                                                "    \"nonce\": \"")+tValueNonce        +T("\",\r\n"
                                                                                "{\r\n"

                                                                            TN( tBody , "" ) ; tBody = T(

                                                                            //etRock.traceF( tin0P , T("[mac]:    ")+tMac ) ;
                                                                            }
                                                                                etThread.delF( tin0P , psttMac ) ;
                                                                                tMac = T(psttMac) ;
                                                                                etThread.openSslHmacF( tin0P , psttMac , tValueSharedSecret , tValueSharedSecret.csF( tin0P ) , postRaw , costRaw ) ; ___( psttMac ) ;
                                                                                ZE( strokeS* , psttMac ) ;

                                                                                countT costRaw = postc - postRaw ;

                                                                                thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi     ;
                                                                                costi = tNote.csF( tin0P ) ;
                                                                                posti = tNote ;

                                                                                thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                                                costi = tNewPassword.csF( tin0P ) ;
                                                                                posti = tNewPassword ;

                                                                                thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                                                costi = tNewUserNameShort.csF( tin0P ) ;
                                                                                posti = tNewUserNameShort ;

                                                                                thirdC::c_strcpyIF( tin0P , postc , posti ) ; postc += costi + 1 ;
                                                                                countT   costi = tValueNonce.csF( tin0P ) ;
                                                                                osTextT* posti = tValueNonce ;

                                                                                osTextT* postc = postRaw ;
                                                                                thirdC::c_memsetIF( tin0P , postRaw , sizeof postRaw , 0 ) ;
                                                                                osTextT postRaw[ TUCK ] ;
                                                                                //etRock.traceF( tin0P , T("debug / 7.g") ) ;
                                                                                _IO_
                                                                            {
                                                                            TN( tMac , "" ) ;

                                                                            TN( tNote , "notadmin"  ) ;
                                                                            //etRock.traceF( tin0P , T("debug / 7.h") ) ;

                                                                            _IO_

                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                            //****                                          ********************************************************************************************************************************************************************************************************************************************************
                                                                            //****  USE THE NONCE TO REGISTER THE NEW USER  ********************************************************************************************************************************************************************************************************************************************************
                                                                            //****                                          ********************************************************************************************************************************************************************************************************************************************************
                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        {
                                                                        //etRock.traceF( tin0P , T("debug / 8") ) ;

                                                                        }
                                                                            }
                                                                                //etRock.traceF( tin0P , T("socket is impotent") ) ;
                                                                                POOPRqUIET
                                                                            {
                                                                            if( POOP )

                                                                            //etRock.traceF( tin0P , T("[nonce]:    ")+tValueNonce ) ;

                                                                            }
                                                                                DEL( pSwPathValue ) ;

                                                                                }
                                                                                    }
                                                                                        etThread.delF( tin0P , psttValue ) ;

                                                                                        }
                                                                                            }
                                                                                                //etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                                *pptValue[ offe ] = T(psttValue) ;
                                                                                            {
                                                                                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                                                                        {
                                                                                        for( countT offe = 0 ; offe < cPaths ; offe ++ )

                                                                                        if( cPaths - cValues ) { BLAMMO ; }
                                                                                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                                                                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                                                                                        /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                                        /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                                                                                        strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                                                                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                                                                                        _IO_
                                                                                    {
                                                                                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                                                                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                                                                                    _IO_
                                                                                {
                                                                                if( !POOP )

                                                                                //EXAMPLE: {"errcode":"M_UNKNOWN","error":"Can't connect to server ideafarm.com"}

                                                                                ;
                                                                                }
                                                                                    &tPathNonce     ,
                                                                                    &tPathError     ,
                                                                                    &tPathErrorCode ,
                                                                                {
                                                                                textC* pptPath[] =

                                                                                TN( tPathNonce     , "\"nonce\"/"   ) ;
                                                                                TN( tPathError     , "\"error\"/"   ) ;
                                                                                TN( tPathErrorCode , "\"errcode\"/" ) ;

                                                                                ;
                                                                                }
                                                                                    &tValueNonce     ,
                                                                                    &tValueError     ,
                                                                                    &tValueErrorCode ,
                                                                                {
                                                                                textC* pptValue[] =

                                                                                TN( tValueError     , "" ) ;
                                                                                TN( tValueErrorCode , "" ) ;

                                                                                __Z( pSwPathValue ) ;
                                                                                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                                                                                ZE( switchC* , pSwPathValue ) ;
                                                                                ZE( strokeS* , psttPath     ) ;
                                                                                _IO_
                                                                            {

                                                                            //etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("json response:") ) ;

                                                                            }
                                                                                }
                                                                                    else if( costj ) break ;
                                                                                         if( cNest ) costj ++ ;

                                                                                    else if( postj[ costj ] == '}' ) cNest -- ;
                                                                                         if( postj[ costj ] == '{' ) cNest ++ ;

                                                                                    putchar( postj[ costj ] ) ;

                                                                                    if( !cbIn ) break ;
                                                                                    countT cbIn = sockc.readF( tin0P , postj + costj , 1 ) ;
                                                                                {
                                                                                for(;;)
                                                                                ZE( countT , cNest ) ;
                                                                                _IO_
                                                                            {
                                                                            ZE( countT , costj ) ;
                                                                            thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;
                                                                            osTextT postj[ TUCK << 1 ] ;

                                                                            sockc.writeF( tin0P , (osTextT*)tSay ) ;
                                                                            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                                                            //etRock.traceF( tin0P , T("request:") ) ;

                                                                            TN( tSay , "" ) ; tSay = T("GET /_synapse/admin/v1/register HTTP/1.1")+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;

                                                                            countT costBody = tBody.csF( tin0P ) ;

                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                            //****                                                     *********************************************************************************************************************************************************************************************************************************************
                                                                            //****  GET A NONCE VALUE TO USE TO REGISTER THE NEW USER  *********************************************************************************************************************************************************************************************************************************************
                                                                            //****                                                     *********************************************************************************************************************************************************************************************************************************************
                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************

                                                                            sockc.connectF( tin0P , 443 , nnServer ) ;
                                                                            socketC sockc( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;

                                                                            countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
                                                                            countT timeAllowedConnected = TICK >> 2 ;

                                                                            nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;
                                                                            nicNameC nnServer ;

                                                                            TN( tBody , "" ) ;

                                                                            SCOOPS
                                                                            _IO_

                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                            //****                         *************************************************************************************************************************************************************************************************************************************************************************
                                                                            //****  CONNECT TO HOMESERVER  *************************************************************************************************************************************************************************************************************************************************************************
                                                                            //****                         *************************************************************************************************************************************************************************************************************************************************************************
                                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                        {
                                                                        IFsCRATCHoK
                                                                        TN( tValueNonce , "" ) ;
                                                                    {
                                                                    else
                                                                    if( tPreexistingPassword.csF( tin0P ) ) bRegistered = 1 ;

                                                                    _IO_
                                                                {
                                                                else
                                                                }
                                                                    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                                                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                                                    flagsFail |= flFAIL_COULDnOTgETsHAREDsECRET ;
                                                                    //etRock.traceF( tin0P , T("could not retrieve shared secret") ) ;
                                                                {
                                                                if( !tPreexistingPassword.csF( tin0P ) && !tValueSharedSecret.csF( tin0P ) )

                                                                TN( tServer , "ideafarm.com" ) ;

                                                                }
                                                                    //etRock.traceF( tin0P , T("[sharedSecret]:    ")+tValueSharedSecret ) ;
                                                                    etThread.delF( tin0P , psttSharedSecret ) ;
                                                                    if( psttSharedSecret && psttSharedSecret->idAdam ) tValueSharedSecret = T(psttSharedSecret) ;

                                                                    ZE( strokeS* , psttSharedSecret ) ; etThread.querySettingF( tin0P , psttSharedSecret , T("!ipdos.password.matrix.ideafarm.com.shared.secret")  ) ; ___( psttSharedSecret ) ;

                                                                    tNewPassword = TF4((countT)ruPassword,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE|flFORMAT_FILLzE,0,0x3e) ;
                                                                    countT idNewPassword = ruPassword ;
                                                                {
                                                                else
                                                                if( tPreexistingPassword.csF( tin0P ) ) tNewPassword = tPreexistingPassword ;
                                                                TN( tValueSharedSecret , "" ) ;

                                                                _IO_

                                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                                //****                          ************************************************************************************************************************************************************************************************************************************************************************
                                                                //****  CALCULATE THE PASSWORD  ************************************************************************************************************************************************************************************************************************************************************************
                                                                //****                          ************************************************************************************************************************************************************************************************************************************************************************
                                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            {
                                                            if( tNewUserNameLong.csF( tin0P ) )

                                                            }
                                                                //etRock.traceF( tin0P , T("dispensing preexisting credentials [tNewUserNameShort]:    ")+tNewUserNameShort ) ;
                                                                tPreexistingPassword   = T(psttPassword)                                       ;
                                                                strokeS*& psttPassword = (strokeS*&)(countT&)swExistingCredentials             ;
                                                                psttzLeverIdUser       = (strokeS*)swExistingCredentials.leverF( tin0P , idf ) ;
                                                            {
                                                            if( idf )
                                                            countT idf = swExistingCredentials.idSlotOfLeverF( tin0P , (countT)(const strokeS*)tIdUser ) ;
                                                            //etRock.traceF( tin0P , T("looking for preexisting credentials for [tIdUser]:    ")+tIdUser ) ;
                                                            TN( tPreexistingPassword , "" ) ;                                                           // ALSO USED AS BOOLEAN TO SUPPRESS REGISTRATION OF A NEW USER

                                                            }
                                                                tBodyInvite = T("{\"user_id\": \"")+tNewUserNameLong+T("\"}\r\n") ;
                                                                tNewUserNameLong  = T("@")+tNewUserNameShort+T(":ideafarm.com") ;       // GIVE ONLY THE SHORT USERNAME IN THE EMAILS BECAUSE NONFEDERATED SO (1) LONG NAME ISN'T NEEDED AND (2) LONG NAME WILL PRODUCE AN ERROR MESSAGE THAT WILL CONFUSE EVEN THOUGH IT WILL THEN WORK
                                                                tNewUserNameShort = T(bLive?"a.":"test.")+tIdUser ;
                                                                tIdUser = TF4(idNewUser,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x24) ;       // [0-9,a-z]

                                                                }
                                                                    etThread.fileWriteF( tin0P , fileCount , (byteT*)&idNewUser , sizeof idNewUser ) ;
                                                                    etThread.fileSetPtrF( tin0P , fileCount , flSETfILEpTR_BEGINNING , c2z ) ;
                                                                    count2S c2z ;

                                                                    idNewUser = bRetrySameUsername && idOld ? idOld : ++ idOld ;

                                                                    }
                                                                        }
                                                                            etRock.traceF( tin0P , T("!exception / invalid file size for idNewUserLath, so using 0 [tName]:    ")+tName ) ;
                                                                            idOld = 0 ;
                                                                        {
                                                                        if( cbr - sizeof idOld )

                                                                        }
                                                                            }
                                                                                cbr = 0 ;       // PROBABLY REDUNDANT
                                                                                etRock.traceF( tin0P , T("!exception / countT file is not of the expected size [tName]")+tName ) ;
                                                                                POOPR ;
                                                                            {
                                                                            if( POOP )
                                                                            ((tin1S&)tin0P).pEtScratch->fileReadF( tin0P , (byteT*)&idOld , cbr , fileCount ) ;
                                                                            SCOOPS
                                                                        {
                                                                        IFsCRATCHoK
                                                                        countT cbr = sizeof idOld ;
                                                                    {
                                                                    if( !bNewFile )
                                                                    countT idOld = bStudent ? 0 : TOCK ;    // STUDENTS GET LOW VALUES, DISPENSED IN SERIAL ORDER 1 2 3 4 ... ; OTHERWISE INITIALIZE TO A HIGH VALUE THAT WILL BE USED IF THE FILE DOES NOT EXIST OR IS INVALID

                                                                    const boolT bNewFile = ifcOPENrESULT_CREATED == fileCount.idOpenResultF( tin0P  ) ;
                                                                    fileC fileCount( tin0P , (strokeS*)tName , ifcOPENaCCESS_WR , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nCeO ) ;
                                                                {
                                                                ZE( countT , idNewUser ) ;

                                                                else           tName = tSharedFolderWorking+T(bLive?"idNewUserLiveVisitorLath":"idNewUserTestVisitorLath") ;
                                                                if( bStudent ) tName = tSharedFolderWorking+T(bLive?"idNewUserLiveStudentLath":"idNewUserTestStudentLath") ;
                                                                TN( tName , "" ) ; 

                                                                const boolT bLive = !etThread.strCompareF( tin0P , psttValueLive , tTrue ) ;
                                                                _IO_
                                                            {
                                                            TN( tIdUser , "" ) ;
                                                            TN( tBodyInvite , "" ) ;
                                                            // DISPENSE CREDENTIALS (LIVE OR TEST)

                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //****                           ***********************************************************************************************************************************************************************************************************************************************************************
                                                            //****  CALCULATE THE USER NAME  ***********************************************************************************************************************************************************************************************************************************************************************
                                                            //****                           ***********************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************

                                                            tNewPassword          = tn ;
                                                            tNewUserNameLong      = tn ;
                                                            tNewUserNameShort     = tn ;
                                                            tValueError3          = tn ;
                                                            tValueErrorCode3      = tn ;
                                                            tValueError2          = tn ;
                                                            tValueErrorCode2      = tn ;
                                                            tValueError1          = tn ;
                                                            tValueErrorCode1      = tn ;
                                                            tInvitationsSubmitted = tn ;
                                                            bFail3 = 1 ;
                                                            bFail2 = 1 ;
                                                            bFail1 = 1 ;
                                                            bFail0 = 1 ;
                                                            _IO_

                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //****                                               ***************************************************************************************************************************************************************************************************************************************************
                                                            //****  TRY THE NEXT ID VALUE FOR THIS TYPE (BEGIN)  ***************************************************************************************************************************************************************************************************************************************************
                                                            //****                                               ***************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                        {
                                                        while( !ether && !POOP && !bRegistered )     //WILL continue UNTIL SUCCESSFULLY REGISTER A NEW USERNAME ; THIS CAUSES idNewUser TO INCREMENT UNTIL IT IS A VALUE THAT HAS NOT BEEN REGISTERED

                                                        ZE( boolT , bRetrySameUsername ) ;
                                                        TN( tNewPassword         , "" ) ;
                                                        TN( tNewUserNameLong     , "" ) ;
                                                        TN( tNewUserNameShort    , "" ) ;
                                                        TN( tValueError3         , "" ) ;
                                                        TN( tValueErrorCode3     , "" ) ;
                                                        TN( tValueError2         , "" ) ;
                                                        TN( tValueErrorCode2     , "" ) ;
                                                        TN( tValueError1         , "" ) ;
                                                        TN( tValueErrorCode1     , "" ) ;
                                                        boolT bFail3 = 1 ;
                                                        boolT bFail2 = 1 ;
                                                        boolT bFail1 = 1 ;
                                                        boolT bFail0 = 1 ;
                                                        TN( tInvitationsSubmitted , "" ) ;
                                                        bValidEvent = 1 ;                           //I THINK THAT THIS IS A VALID EVENT THAT IS REALLY FROM STRIPE, SO WILL PROCEED TO ISSUE A WELCOME EMAIL WITH CREDENTIALS

                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                        //****                                         *********************************************************************************************************************************************************************************************************************************************************
                                                        //****  SEND A WELCOME EMAIL WITH CREDENTIALS  *********************************************************************************************************************************************************************************************************************************************************
                                                        //****                                         *********************************************************************************************************************************************************************************************************************************************************
                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                    {
//                                                  else
//                                                  }
//                                                      //etRock.traceF( tin0P , T("ignoring gorilla01") ) ;
//                                                  {
//                                                  if( bGorilla01 )
                                                {
                                                if( !flagsFail )

                                                }
                                                    ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                                    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                                    flagsFail |= flFAIL_UNKNOWNpRODUCT ;
                                                {
                                                if( !bStudent && !bVisitor && !bGorilla01 )

                                                ;
                                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RTnJkcMaLDwaqK") )      // TEST
                                                    ||
                                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RJ1RvgWrjbn5VU") )      // LIVE
                                                const boolT bVisitor =

                                                ;
                                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RTh7nU4xMtwvzD") )      // TEST
                                                    ||
                                                    !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_RJ1XOIUO9htwyX") )      // LIVE
                                                const boolT bStudent =

                                                bGorilla01 = !etThread.strCompareF( tin0P , psttValueIdProduct , T("prod_GORILLA01") ) ;

                                                _IO_

                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                //****                        **************************************************************************************************************************************************************************************************************************************************************************
                                                //****  DETECT EVENT SUBTYPE  **************************************************************************************************************************************************************************************************************************************************************************
                                                //****                        **************************************************************************************************************************************************************************************************************************************************************************
                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                            {
                                            else
                                            }
                                                ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                                sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
                                            {
                                            if( flagsFail )
                                            ZE( boolT , bValidEvent ) ;

                                            if( age < 13                                                       ) flagsFail |= flFAIL_UNEXPECTEDaGEtOOyOUNG ;
                                            if( etThread.strCompareF( tin0P , psttVersion , tCorrectVersion1 ) ) flagsFail |= flFAIL_UNEXPECTEDvERSION     ;
                                            if( etThread.strCompareF( tin0P , psttEvent   , tCorrectEvent    ) ) flagsFail |= flFAIL_UNEXPECTEDeVENT       ;

                                            const sCountT age = etThread.strDigitsToSCountF( tin0P , psttValueAge , 0xa , 1 ) ;

                                            _IO_

                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                            //****                      ****************************************************************************************************************************************************************************************************************************************************************************
                                            //****  VALIDATE THE EVENT  ****************************************************************************************************************************************************************************************************************************************************************************
                                            //****                      ****************************************************************************************************************************************************************************************************************************************************************************
                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                                        {
                                        if( !( F(flagsFail) ) )

                                        }
                                            }
                                                /**/etRock.traceF( tin0P , T("!exception / could not extract data from sIn") ) ;
                                                flagsFail |= flFAIL_COULDnOTeXTRACTdATA2 ;
                                                POOPRqUIET
                                            {
                                            if( POOP )
    
                                            sIn >> psttValueMiddleAmountDiscount     ; ___( psttValueMiddleAmountDiscount     ) ; //etRock.traceF( tin0P , T("[ValueMiddleAmountDiscount     ]:    ")+T(psttValueMiddleAmountDiscount     ) ) ;
                                            sIn >> psttValueMiddleAmountSubtotal     ; ___( psttValueMiddleAmountSubtotal     ) ; //etRock.traceF( tin0P , T("[ValueMiddleAmountSubtotal     ]:    ")+T(psttValueMiddleAmountSubtotal     ) ) ;
                                            sIn >> psttValueMiddleAmountTotal        ; ___( psttValueMiddleAmountTotal        ) ; //etRock.traceF( tin0P , T("[ValueMiddleAmountTotal        ]:    ")+T(psttValueMiddleAmountTotal        ) ) ;
                                            sIn >> psttValueMiddleCurrencyConversion ; ___( psttValueMiddleCurrencyConversion ) ; //etRock.traceF( tin0P , T("[ValueMiddleCurrencyConversion ]:    ")+T(psttValueMiddleCurrencyConversion ) ) ;
                                            sIn >> psttValueMiddleCurrency           ; ___( psttValueMiddleCurrency           ) ; //etRock.traceF( tin0P , T("[ValueMiddleCurrency           ]:    ")+T(psttValueMiddleCurrency           ) ) ;
    
                                            SCOOPS
                                            _IO_
                                        {
                                        IFsCRATCHoK

                                        TN( tCorrectVersion1 , "1" ) ;
                                        TN( tCorrectEvent    , "ipdos.subscription.create" ) ;

                                        _IO_
                                    {
                                    if( !( F(flagsFail) ) )

                                    }
                                        }
                                            /**/etRock.traceF( tin0P , T("!exception / could not extract data from sIn") ) ;
                                            flagsFail |= flFAIL_COULDnOTeXTRACTdATA1 ;
                                            POOPRqUIET
                                        {
                                        if( POOP )

                                        sIn >> psttValueHawker         ; ___( psttValueHawker         ) ; //etRock.traceF( tin0P , T("[ValueHawker        ]:    ")+T(psttValueHawker         ) ) ;
                                        sIn >> psttValueAge            ; ___( psttValueAge            ) ; //etRock.traceF( tin0P , T("[ValueAge           ]:    ")+T(psttValueAge            ) ) ;
                                        sIn >> psttValueName           ; ___( psttValueName           ) ; //etRock.traceF( tin0P , T("[ValueName          ]:    ")+T(psttValueName           ) ) ;
                                        sIn >> psttValueEmail          ; ___( psttValueEmail          ) ; //etRock.traceF( tin0P , T("[ValueEmail         ]:    ")+T(psttValueEmail          ) ) ;
                                        sIn >> psttValuePostalCode     ; ___( psttValuePostalCode     ) ; //etRock.traceF( tin0P , T("[ValuePostalCode    ]:    ")+T(psttValuePostalCode     ) ) ;
                                        sIn >> psttValueCountry        ; ___( psttValueCountry        ) ; //etRock.traceF( tin0P , T("[ValueCountry       ]:    ")+T(psttValueCountry        ) ) ;
                                        sIn >> psttValueIdSubscription ; ___( psttValueIdSubscription ) ; //etRock.traceF( tin0P , T("[ValueIdSubscription]:    ")+T(psttValueIdSubscription ) ) ;
                                        sIn >> psttValueIdProduct      ; ___( psttValueIdProduct      ) ; //etRock.traceF( tin0P , T("[ValueIdProduct     ]:    ")+T(psttValueIdProduct      ) ) ;
                                        sIn >> psttValueLive           ; ___( psttValueLive           ) ; //etRock.traceF( tin0P , T("[ValueLive          ]:    ")+T(psttValueLive           ) ) ;
                                        sIn >> psttValueUpdatedLanName ; ___( psttValueUpdatedLanName ) ; //etRock.traceF( tin0P , T("[ValueUpdatedLanName]:    ")+T(psttValueUpdatedLanName ) ) ;
                                        sIn >> psttValueUpdatedNnPeer  ; ___( psttValueUpdatedNnPeer  ) ; //etRock.traceF( tin0P , T("[ValueUpdatedNnPeer ]:    ")+T(psttValueUpdatedNnPeer  ) ) ;
                                        sIn >> psttValueCreatedLanName ; ___( psttValueCreatedLanName ) ; //etRock.traceF( tin0P , T("[ValueCreatedLanName]:    ")+T(psttValueCreatedLanName ) ) ;
                                        sIn >> psttValueCreatedNnPeer  ; ___( psttValueCreatedNnPeer  ) ; //etRock.traceF( tin0P , T("[ValueCreatedNnPeer ]:    ")+T(psttValueCreatedNnPeer  ) ) ;
                                        sIn >> psttValuePaidLanName    ; ___( psttValuePaidLanName    ) ; //etRock.traceF( tin0P , T("[ValuePaidLanName   ]:    ")+T(psttValuePaidLanName    ) ) ;
                                        sIn >> psttValuePaidNnPeer     ; ___( psttValuePaidNnPeer     ) ; //etRock.traceF( tin0P , T("[ValuePaidNnPeer    ]:    ")+T(psttValuePaidNnPeer     ) ) ;
                                        sIn >> psttVersion             ; ___( psttVersion             ) ; //etRock.traceF( tin0P , T("[Version            ]:    ")+T(psttVersion             ) ) ;
                                        sIn >> psttEvent               ; ___( psttEvent               ) ; //etRock.traceF( tin0P , T("[Event              ]:    ")+T(psttEvent               ) ) ;

                                        SCOOPS
                                    {
                                    IFsCRATCHoK
                                    ZE( strokeS* , psttValueMiddleAmountDiscount     ) ;
                                    ZE( strokeS* , psttValueMiddleAmountSubtotal     ) ;
                                    ZE( strokeS* , psttValueMiddleAmountTotal        ) ;
                                    ZE( strokeS* , psttValueMiddleCurrencyConversion ) ;
                                    ZE( strokeS* , psttValueMiddleCurrency           ) ;
                                    ZE( strokeS* , psttValueHawker                   ) ;
                                    ZE( strokeS* , psttValueAge                      ) ;
                                    ZE( strokeS* , psttValueName                     ) ;
                                    ZE( strokeS* , psttValueEmail                    ) ;
                                    ZE( strokeS* , psttValuePostalCode               ) ;
                                    ZE( strokeS* , psttValueCountry                  ) ;
                                    ZE( strokeS* , psttValueIdSubscription           ) ;
                                    ZE( strokeS* , psttValueIdProduct                ) ;
                                    ZE( strokeS* , psttValueLive                     ) ;
                                    ZE( strokeS* , psttValueUpdatedLanName           ) ;
                                    ZE( strokeS* , psttValueUpdatedNnPeer            ) ;
                                    ZE( strokeS* , psttValueCreatedLanName           ) ;
                                    ZE( strokeS* , psttValueCreatedNnPeer            ) ;
                                    ZE( strokeS* , psttValuePaidLanName              ) ;
                                    ZE( strokeS* , psttValuePaidNnPeer               ) ;
                                    ZE( strokeS* , psttVersion                       ) ;
                                    ZE( strokeS* , psttEvent                         ) ;
                                    // VERSION 1

                                    //******************************************************************************************************************************************************************************************************************************************************************************************************
                                    //******************************************************************************************************************************************************************************************************************************************************************************************************
                                    //****                         *************************************************************************************************************************************************************************************************************************************************************************
                                    //****  PULL THE FIELD VALUES  *************************************************************************************************************************************************************************************************************************************************************************
                                    //****                         *************************************************************************************************************************************************************************************************************************************************************************
                                    //******************************************************************************************************************************************************************************************************************************************************************************************************
                                    //******************************************************************************************************************************************************************************************************************************************************************************************************

                                    _IO_
                                {
                                if( !( F(flagsFail) ) )
                                ZE( boolT , bGorilla01  ) ;
                                ZE( boolT , bRegistered ) ;     // WILL ALSO BE SET IF I USE A PREEXISTING CREDENTIALS SETTING

                                }
                                    }
                                        ++ s ; ether.osSleepF( tin0P , TOCK << 2 ) ;                    //THIS ENSURES THAT I DON'T PEG CPU BY RETRYING ; I AM SPRINKLED OVER CODE WITHOUT ANALYSIS
                                        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

                                        //etRock.traceF( tin0P , T("could not get shadow of ")+T((strokeS*)tLong)+T(": ") ) ;
                                        flagsFail |= flFAIL_COULDnOTgETsHADOW ;
                                        POOPR ;
                                    {
                                    if( POOP )
                                    ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , sIn , tLongEating , 1 ) ;
                                    SCOOPS
                                {
                                IFsCRATCHoK
                                soulC sIn( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) ) ;
                                IFsCRATCHoK{}

                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                //****                              ********************************************************************************************************************************************************************************************************************************************************************
                                //****  LOAD THE FILE INTO A soulC  ********************************************************************************************************************************************************************************************************************************************************************
                                //****                              ********************************************************************************************************************************************************************************************************************************************************************
                                //******************************************************************************************************************************************************************************************************************************************************************************************************
                                //******************************************************************************************************************************************************************************************************************************************************************************************************

                                ZE( flagsT , flagsFail ) ;
                                //etRock.traceF( tin0P , T("receiving ")+T((strokeS*)tLongEating)+T(": ") ) ;

                                //etRock.traceF( tin0P , tShort ) ;
                            {
                            else
                            }
                                //etRock.traceF( tin0P , T("collision / could not rename to \"eating\" [short]:    ")+tShort ) ;
                                POOPRqUIET ;
                            {
                            if( POOP )
                            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tLongEating , tLong , 1 ) ;
                            SCOOPS

                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                            //****                      ****************************************************************************************************************************************************************************************************************************************************************************
                            //****  RENAME TO "EATING"  ****************************************************************************************************************************************************************************************************************************************************************************
                            //****                      ****************************************************************************************************************************************************************************************************************************************************************************
                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                            //******************************************************************************************************************************************************************************************************************************************************************************************************
                        {
                        IFsCRATCHoK
                        TN( tLongEating , "" ) ; tLongEating = tFolder+tEatingDot+tShort ;

                        /**/etRock.traceF( tin0P , T("processing [tShort]:    ")+tShort ) ;
                        }
                            etThread.delF( tin0P , psttShort ) ;
                            tShort = T(psttShort) ;
                            etThread.delF( tin0P , psttnu ) ;
                            etThread.strBisectF( tin0P , psttnu , psttShort , tLong , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                            ZE( strokeS* , psttShort ) ;
                            ZE( strokeS* , psttnu ) ;
                        {
                        TN( tShort , "" ) ;
                        TN( tLong , pInfo->psttIfoName ) ;

                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //****                               *******************************************************************************************************************************************************************************************************************************************************************
                        //****  PROCESS AN EVENT soulC FILE  *******************************************************************************************************************************************************************************************************************************************************************
                        //****                               *******************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************
                        //******************************************************************************************************************************************************************************************************************************************************************************************************

                        _IO_
                    {
                    if( !bDir )

                    const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;
                    _IO_
                {
                else
                }
                    break ;
                    DEL( pInfo ) ;
                {
                if( !pInfo || !pInfo->psttIfoName )

                etThread.diskFindFileOrDirF( tin0P , pInfo , hFindEvent , tFolder , &patMyEvents ) ;
                ZE( infoFileS* , pInfo ) ;
                _IO_
            {
            do
            handleC hFindEvent( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

            textC& tFolder = *pptFolderEventsIncoming[ offf ] ;
        {
        for( countT offf = 0 ; offf < sizeof pptFolderEventsIncoming / sizeof pptFolderEventsIncoming[ 0 ] ; offf ++ )
    {
    while( !ether && !etThread )
    ZE( countT , idCycle ) ;
    TN( tStar  , "*" ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //****                                                **************************************************************************************************************************************************************************************************************************************************
    //****  WATCH FOR EVENT soulC FILES AND PROCESS THEM  **************************************************************************************************************************************************************************************************************************************************
    //****                                                **************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************

    }
        }
            //etRock.traceF( tin0P , T("existing credentials:    a.")+T(psttzLeverIdUser)+tb4+T(psttPassword) ) ;

            strokeS*& psttPassword = (strokeS*&)(countT&)swExistingCredentials ;
            psttzLeverIdUser = (strokeS*)swExistingCredentials.leverF( tin0P , idf ) ;

            _IO_
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swExistingCredentials.cFlavorsF( tin0P ) ;

        }
            }
                }
                    else               { etThread.strMakeF( tin0P , LF , psttPassword , tPassword ) ; ___( psttPassword ) ; }
                    if( psttPassword ) etRock.traceF( tin0P , T("!exception / duplicate tIdUser [tIdUser]:    ")+tIdUser ) ;

                    strokeS*& psttPassword = (strokeS*&)(countT&)swExistingCredentials ;
                    psttzLeverIdUser = tIdUser ;

                    }
                        etThread.delF( tin0P , pstt1IdPassword ) ;
                        }
                            }
                                break ;
                                tPassword = T(psttc1) ;
                            {
                            else
                            }
                                tIdUser = T(psttc1) ;
                                bWoth = 0 ;
                            {
                            if( bWoth )
                            //etRock.traceF( tin0P , psttc1 ) ;
                            _IO_
                        {
                        FORsTRINGSiN1( pstt1IdPassword )
                        boolT bWoth = 1 ;

                        etThread.delF( tin0P , psttEat ) ;
                        countT cNn = etThread.strWordsF( tin0P , pstt1IdPassword , psttEat , sttq , T(" ,") ) ; ___( pstt1IdPassword ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        ZE( strokeS* , pstt1IdPassword ) ;
                    {
                    TN( tPassword , "" ) ;
                    TN( tIdUser   , "" ) ;

                    //etRock.traceF( tin0P , T("setting for preexisting matrix credentials found:    ")+tSetting+tb4+T(psttEat) ) ;
                {
                else
                if( !psttEat ) break ;
                ZE( strokeS* , psttEat ) ; etThread.querySettingF( tin0P , psttEat , tSetting ) ; ___( psttEat ) ;
                _IO_

                TN( tSetting , "" ) ; tSetting = T("!ipdos.matrix.preexisting.account.a.")+TF2(++idSetting,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
            {
            while( !ether )
            ZE( countT , idSetting ) ;
        {
        etherC& etRock = etherC::etRockIF( tin0P ) ;

        TN( tb4 , "    " ) ;
    {
    switchC swExistingCredentials( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , psttzLeverIdUser ) ;
    ZE( strokeS* , psttzLeverIdUser ) ;

    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //****                                              ****************************************************************************************************************************************************************************************************************************************************
    //****  LOAD PREEXISTING CREDENTIALS FROM SETTINGS  ****************************************************************************************************************************************************************************************************************************************************
    //****                                              ****************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************
    //******************************************************************************************************************************************************************************************************************************************************************************************************

    ranUniC ruPassword( tin0P , (measure04T)MAXcOUNTT + 1 , processGlobal1S::_processGlobal1I_IF().trueRandom ) ;

    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventDone       ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventGorilla01  ) ;
    etThread.diskMakeDirIfNeededF( tin0P , tSharedFolderEventRetryLater ) ;

    TN( tb4DomainColontb4        , "    domain:    "               ) ;
    TN( tLanNameExpected         , "WH1"                           ) ;
    TN( tn                       , ""                              ) ;
    TN( tb4                      , "    "                          ) ;
    TN( tcrlf                    , "\r\n"                          ) ;
    TN( tTrue                    , "true"                          ) ;

    TN( tSharedFolderEventDone       , "" ) ; tSharedFolderEventDone       = tSharedFolderFinal+T("events.4.done/"                     ) ;
    TN( tSharedFolderEventGorilla01  , "" ) ; tSharedFolderEventGorilla01  = tSharedFolderFinal+T("events.3.gorilla01/"                ) ;
    TN( tSharedFolderEventRetryLater , "" ) ; tSharedFolderEventRetryLater = tSharedFolderFinal+T("events.2.retry.later/"              ) ;

    TN( tSharedFolderWorking         , "" ) ; tSharedFolderWorking         = T("///" "/go1/" "d/ideafarm.shared/")+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/") ;
    TN( tSharedFolderFinal           , "" ) ; tSharedFolderFinal           = T("///" "/go1/" "d/ideafarm.shared/") ;

    textC* pptFolderEventsIncoming[] = { &tFolderEventsIncoming } ;

    TN( tFolderEventsIncoming , "///" "/go1/" "d/ideafarm.shared/5100088f/events.incoming/" ) ;

    patternC patMyEvents( tin0P , etThread , tPatternMyEvents , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
    TN( tPatternMyEvents , "" ) ; tPatternMyEvents = T("event.*.")+tLanName+T(".*.soulC") ;

    }
        etThread.delF( tin0P , psttLanName ) ;
        tLanName = T(psttLanName) ;
        etThread.computerLanNameF( tin0P , psttLanName ) ; ___( psttLanName ) ;
        ZE( strokeS* , psttLanName ) ;
    {
    TN( tLanName , "" ) ;

    TN( tEatingDot , "eating." ) ;
    TN( tSlash     , "/"       ) ;

    etThread.osThreadF( TaRG2cBsTACK( tmStayConnectedF , CBsTACKmIN << 1 ) , (countT)&bServerIsUp ) ;
    ZE( boolT , bServerIsUp ) ;

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_NORMAL ) ;
    thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_NORMAL ) ;

    etherC& etRock = etherC::etRockIF( tin0P ) ;

    _IO_
{
if( pTaskP )
TASK( tmWorkF )

DONE( tmStayConnectedF )
}
    }
        ++ s ; ether.osSleepF( tin0P , TOCK << 3 ) ;
        /**/etRock.traceF( tin0P , tSayNappingOuter ) ;

        DELzOMBIE( psoc ) ;
        }
            /**/etRock.traceF( tin0P , tSayLoggedOut ) ;

            }
                etRock.traceF( tin0P , T("socket is impotent") ) ;
                POOPRqUIET
            {
            if( POOP )
        
            etRock.traceF( tin0P , T("[accessToken,deviceId]:    ")+tValueAccessToken+tb4+tValueDeviceId ) ;
        
            }
                DEL( pSwPathValue ) ;
        
                }
                    }
                        etThread.delF( tin0P , pstpsttValue ) ;
        
                        }
                            }
                                etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                *pptValue[ offe ] = T(pstpsttValue) ;
                            {
                            if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                        {
                        for( countT offe = 0 ; offe < cPaths ; offe ++ )
        
                        if( cPaths - cValues ) { BLAMMO ; }
                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                        countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
        
                        /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                        /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
        
                        strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
        
                        _IO_
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                {
                if( !POOP )
        
                ;
                }
                    &tPathDeviceId     ,
                    &tPathAccessToken  ,
                {
                textC* pptPath[] =
        
                TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                TN( tPathAccessToken , "\"access_token\"/" ) ;
        
                ;
                }
                    &tValueDeviceId      ,
                    &tValueAccessToken ,
                {
                textC* pptValue[] =
        
                __Z( pSwPathValue ) ;
                etThread.strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;
                ZE( switchC* , pSwPathValue ) ;
                ZE( strokeS* , psttPath     ) ;
            {
        
            etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
            etRock.traceF( tin0P , T("json response:") ) ;
        
            }
                }
                    else if( costj ) break ;
                         if( cNest ) costj ++ ;
        
                    else if( postj[ costj ] == '}' ) cNest -- ;
                         if( postj[ costj ] == '{' ) cNest ++ ;

                    if( !cbIn ) break ;
                    countT cbIn = psoc->readF( tin0P , postj + costj , 1 ) ;
                {
                for(;;)
                ZE( countT , cNest ) ;
            {
            ZE( countT , costj ) ;
            thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
            osTextT postj[ TUCK << 1 ] ;
        
            psoc->writeF( tin0P , (osTextT*)tSay ) ;
            //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
            //etRock.traceF( tin0P , T("request:") ) ;
        
            TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/logout HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(0,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n") ;
        
            /**/etRock.traceF( tin0P , tSayLoggingOut+tValueAccessToken+tb4+tValueDeviceId ) ;

            //******************************************************************************************************************************************************************************************************************************************************************************************************
            //****          ****************************************************************************************************************************************************************************************************************************************************************************************
            //****  LOGOUT  ****************************************************************************************************************************************************************************************************************************************************************************************
            //****          ****************************************************************************************************************************************************************************************************************************************************************************************
            //******************************************************************************************************************************************************************************************************************************************************************************************************

            }
                ++ s ; ether.osSleepF( tin0P , TOCK << 3 ) ;

                if( !bServerIsUpLag ) break ;

                /**/etRock.traceF( tin0P , tSayQueried ) ;

                }
                    notifyF( tin0P , etThread , bServerIsUpLag , bCommunick ) ;
                    bServerIsUpLag = bUpNow ;
                    boolT bCommunick = bServerIsUpLag != - 1 ;
                {
                if( bServerIsUpLag != bUpNow  )
                
                boolT bUpNow = !!etThread.strIdF( tin0P , tOpenCurly , tJson ) ;

                }
                    etRock.traceF( tin0P , tJson , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    etRock.traceF( tin0P , T("json response:") ) ;

                    tJson = T(postj) ;

                    }
                        //etRock.traceF( tin0P , T(posth) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                        //etRock.traceF( tin0P , T("[headers]:") ) ;
                        posth[ costh ] = 0 ;
                        }
                            }
                                break ;

                                postj[ costj ] = save ;
                                               postj[ costj ] = 0 ;
                                osTextT save = postj[ costj ] ;
                            {
                            else if( costj )
                                 if( cNest ) costj ++ ;

                            else if( postj[ costj ] == '}' ) cNest -- ;
                                 if( postj[ costj ] == '{' ) cNest ++ ;

                            if( !costj && !cNest ) posth[ costh ++ ] = postj[ costj ] ;

                            if( !cbIn ) break ;
                            countT cbIn = psoc->readF( tin0P , postj + costj , 1 ) ;
                        {
                        for(;;)
                        ZE( countT , cNest ) ;
                        ZE( countT , idReadLath ) ;

                        ZE( countT , costh ) ;
                        osTextT posth[ TUCK << 1 ] ;
                        _IO_
                    {
                    ZE( countT , costj ) ;
                    thirdC::c_memsetIF( tin0P , postj , sizeof postj , 0 ) ;
                    osTextT postj[ TUCK << 1 ] ;

                    psoc->writeF( tin0P , (osTextT*)tSay ) ;
                    TN( tSay , "" ) ; tSay = T("GET /_synapse/admin/v1/statistics/users/media HTTP/1.1")+T("\r\nAuthorization: Bearer ")+tValueAccessToken+T("\r\nHost: ")+tServer+T("\r\n\r\n") ;
                {
                //if( idTest % ( TUCK >> 6 ) )
                TN( tJson , "" ) ;

                /**/etRock.traceF( tin0P , tSayQuerying+TF2(idTest,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                ++ idTest ;
            {
            while( !ether && !POOP )
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
        {
        else
        }
            }
                notifyF( tin0P , etThread , 0 , bCommunick ) ;
                bServerIsUpLag  = 0 ;
                boolT bCommunick = bServerIsUpLag != - 1 ;
            {
            if( bServerIsUpLag  )
        {
        if( !psoc || !tValueAccessToken.csF( tin0P ) )

        }
            }
                }
                    }
                        etRock.traceF( tin0P , T("socket is impotent") ) ;
                        POOPRqUIET
                    {
                    if( POOP )
                
                    /**/etRock.traceF( tin0P , tSayLoggedIn+tValueAccessToken+tb4+tValueDeviceId ) ;

                    }
                        DEL( pSwPathValue ) ;
                        
                        }
                            }
                                }
                                    etThread.delF( tin0P , pstpsttValue ) ;
                            
                                    }
                                        }
                                            etRock.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                            *pptValue[ offe ] = T(pstpsttValue) ;
                                        {
                                        if( !etThread.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                                    {
                                    for( countT offe = 0 ; offe < cPaths ; offe ++ )
                            
                                    if( cPaths - cValues ) { BLAMMO ; }
                                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                            
                                    /**/etRock.traceF( tin0P , T("--------------------------        [value]:    ")+T(pstpsttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                                    /**/etRock.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                            
                                    strokeS*& pstpsttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                                    psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                            
                                    _IO_
                                {
                                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                            {
                            if( !POOP )
                            
                            ;
                            }
                                &tPathDeviceId     ,
                                &tPathAccessToken  ,
                            {
                            textC* pptPath[] =
                            
                            TN( tPathDeviceId    , "\"device_id\"/"    ) ;
                            TN( tPathAccessToken , "\"access_token\"/" ) ;
                            
                            ;
                            }
                                &tValueDeviceId      ,
                                &tValueAccessToken ,
                            {
                            textC* pptValue[] =
                        {
                        if( pSwPathValue )
                        
                        }
                            }
                                DEL( pSwPathValue ) ;
                                etRock.traceF( tin0P , tSayExCouldNotParseJson+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tServer ) ;
                                POOPRqUIET
                                countT rc = POOP ;
                            {
                            if( POOP )
                            __Z( pSwPathValue ) ;
                            ((tin1S&)tin0P).pEtScratch->strParseJsonF( tin0P , pSwPathValue , psttPath , (osTextT*)postj , flSTACKc_null ) ;

                            SCOOPS
                        {
                        IFsCRATCHoK
                        ZE( switchC* , pSwPathValue ) ;
                        ZE( strokeS* , psttPath     ) ;
                        _IO_
                    {
                
                    etRock.traceF( tin0P , T(postj) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    etRock.traceF( tin0P , T("json response:") ) ;
                
                    }
                        }
                            else if( costj ) break ;
                                 if( cNest ) costj ++ ;
                
                            else if( postj[ costj ] == '}' ) cNest -- ;
                                 if( postj[ costj ] == '{' ) cNest ++ ;
                
                            putchar( postj[ costj ] ) ;

                            if( !cbIn ) break ;
                            countT cbIn = psoc->readF( tin0P , postj + costj , 1 ) ;
                        {
                        for(;;)
                        ZE( countT , cNest ) ;
                    {
                    ZE( countT , costj ) ;
                    thirdC::c_memsetIF( tin0P , postj , sizeof postj ) ;
                    osTextT postj[ TUCK << 1 ] ;
                
                    psoc->writeF( tin0P , (osTextT*)tSay ) ;
                    //etRock.traceF( tin0P , tSay , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    //etRock.traceF( tin0P , T("request:") ) ;
                
                    TN( tSay , "" ) ; tSay = T("POST /_matrix/client/v3/login HTTP/1.1\r\nHost: ")+tServer+T("\r\nContent-Type: application/json\r\nContent-Length: ")+TF4(costBody,flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ;
                
                    countT costBody = tBody.csF( tin0P ) ;
                
                    ) ;
                    
                        "}\r\n"
                        "    \"password\": \"")+tApiPassword+T("\"\r\n"
                        "    },\r\n"
                        "        \"user\": \"administrator\"\r\n"
                        "        \"type\": \"m.id.user\",\r\n"
                        "    {\r\n"
                        "    \"identifier\":\r\n"
                        "    \"type\": \"m.login.password\",\r\n"
                        "{\r\n"
                    
                    TN( tBody , "" ) ; tBody = T(
                    
                    }
                        etThread.delF( tin0P , psttApiPassword ) ;
                        tApiPassword = T(psttApiPassword) ;
                        //etRock.traceF( tin0P , T("[password]:    ")+T(psttApiPassword) ) ;
                        if( psttApiPassword && psttApiPassword->idAdam ) tApiPassword = T(psttApiPassword) ;

                          ZE( strokeS* , psttApiPassword ) ; etThread.querySettingF( tin0P , psttApiPassword , T("!ipdos.password.matrix.ideafarm.com.administrator"          ) ) ; ___( psttApiPassword ) ;
                    {
                    TN( tApiPassword , "" ) ;

                    /**/etRock.traceF( tin0P , tSayLoggingIn ) ;

                    //******************************************************************************************************************************************************************************************************************************************************************************************************
                    //****         *****************************************************************************************************************************************************************************************************************************************************************************************
                    //****  LOGIN  *****************************************************************************************************************************************************************************************************************************************************************************************
                    //****         *****************************************************************************************************************************************************************************************************************************************************************************************
                    //******************************************************************************************************************************************************************************************************************************************************************************************************
                {
                else
                }
                    DELzOMBIE( psoc ) ;
                    etRock.traceF( tin0P , tSayExCouldNotConnectToServer+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tServer ) ;
                    POOPRqUIET
                    countT rc = POOP ;
                {
                if( POOP )
                psoc->connectF( tin0P , 443 , nnServer ) ;
                psoc = new( 0 , tin0P , pb_sockc , sizeof pb_sockc ) socketC( tin0P , *((tin1S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , 0 , flSOCKETc_CRYPTfOREIGNsSL , 0 , &idleTimeAllowedRead , &idleTimeAllowedWrite , &timeAllowedConnected ) ;
            {
            else
            }
                etRock.traceF( tin0P , tSayExCouldNotObtainNnServer+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tServer ) ;
                POOPRqUIET
                countT rc = POOP ;
            {
            if( POOP )
            nicNameC nnServer = socketC::nicNameIF( tin0P , *((tin1S&)tin0P).pEtScratch , tServer ) ;

            SCOOPS
        {
        IFsCRATCHoK
        ZE( boolT , bServerIsUpNew ) ;
        ZE( socketC* , psoc ) ;
        byteT pb_sockc[ sizeof( socketC ) ] ;
        TN( tValueDeviceId    , "" ) ;
        TN( tValueAccessToken , "" ) ;

        ++ idTest ;

        /**/etRock.traceF( tin0P , tSayConnectingToServer+tServer ) ;
    {
    while( !ether && !POOP )
    ZE( countT , idTest ) ;
    boolT bServerIsUpLag = - 1 ;            //NORMALLY [0,1] ; "- 1": "NO TESTS YET, SO DO NOT NOTIFY communick.com"
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

    const countT idleTimeAllowedWrite = SOCKETtIMEOUTdEFAULTwAN ;
    const countT idleTimeAllowedRead  = SOCKETtIMEOUTdEFAULTwAN ;
    const countT timeAllowedConnected = 0                       ;

    TN( tOpenCurly , "{" ) ;
    TN( tServer , "ideafarm.com" ) ;
    TN( tb4     , "    " ) ;

    TN( tSayExCouldNotParseJson       , "!exception / could not parse json" ) ;
    TN( tSayQueried                   , "queried"         ) ;
    TN( tSayQuerying                  , "querying [idTest]:    " ) ;
    TN( tSayNappingInner              , "napping (inner)" ) ;
    TN( tSayNappingOuter              , "napping (outer)" ) ;
    TN( tSayExCouldNotConnectToServer , "!exception / could not connect to server [rc,tServer]:    " ) ;
    TN( tSayExCouldNotObtainNnServer  , "!exception / could not obtain nnServer value [rc,tServer]:    " ) ;
    TN( tSayLoggedOut  , "logged  out from homeserver" ) ;
    TN( tSayLoggingOut , "logging out from homeserver [accessToken,deviceId]:    " ) ;
    TN( tSayLoggedIn  , "logged  in to homeserver [accessToken,deviceId]:    " ) ;
    TN( tSayLoggingIn , "logging in to homeserver" ) ;
    TN( tSayConnectingToServer  , "connecting to server [tServer]:    " ) ;

    etherC& etRock = etherC::etRockIF( tin0P ) ;

    boolT& bServerIsUpP = *(boolT*)pTaskP->c1 ;

    _IO_
{
if( pTaskP && pTaskP->c1 )
TASK( tmStayConnectedF )

}
    /**/etRock.traceF( tin0P , tSubject+tb4+tBody ) ;
    etherC& etRock = etherC::etRockIF( tin0P ) ;
    etherP.boxPutF( tin0P , T("mail.smtp2go.com/dd9/smtp/factories@ideafarm.com/")+tTo , tSubject+tBody ) ;

    TN( tTo      , !bCommunickP ? "factoryreports@ideafarm.com" : "factoryreports@ideafarm.com/support@communick.com" ) ;
    TN( tb4      , "    " ) ;
    TN( tBody    , bServerIsUpP ? "A server that monitors the IDEAFARM.COM [matrix] homeserver was able to log in and successfully query, using the \"GET /_synapse/admin/v1/statistics/users/media\" api.\r\n\r\n" : "A server that monitors the IDEAFARM.COM [matrix] homeserver either could not log in or could not query, using the \"GET /_synapse/admin/v1/statistics/users/media\" api.\r\n\r\n" ) ;
    TN( tSubject , bServerIsUpP ? "Subject: The IDEAFARM.COM [matrix] homeserver is now UP\r\n" : "Subject: The IDEAFARM.COM [matrix] homeserver is now DOWN\r\n" ) ;
{
voidT notifyF( tin0S& tin0P , etherC& etherP , const boolT bServerIsUpP , const boolT bCommunickP )

#define flFAIL_COULDnOTeXTRACTdATA2             0xe04000ff
#define flFAIL_COULDnOTeXTRACTdATA1             0xe02000ff
#define flFAIL_UNKNOWNpRODUCT                   0xe01000ff
#define flFAIL_COULDnOTzAPrAW                   0xe00800ff
#define flFAIL_COULDnOTgEThMAC                  0xe00400ff
#define flFAIL_COULDnOTpUTrAW                   0xe00200ff
#define flFAIL_COULDnOTgETsHAREDsECRET          0xe00100ff
#define flFAIL_UNEXPECTEDaGEtOOyOUNG            0xe00080ff
#define flFAIL_UNEXPECTEDvERSION                0xe00010ff
#define flFAIL_UNEXPECTEDeVENT                  0xe00008ff
#define flFAIL_COULDnOTmOVEfILE                 0xe00004ff
#define flFAIL_COULDnOTgETsHADOW                0xe00002ff
#define flFAIL_UNKNOWNeRROR                     0xe00001ff

// OBSOLETES 893_: LIKE 893_ BUT DETECTS AND HANDLES UNRESPONSIVENESS OF [MATRIX] HOMESERVER

/*1*/WAKEhIDE( "ifcIDaDAM_WELCOMER" )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
