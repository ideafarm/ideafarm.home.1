
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( pBaton ) pBaton->ungrabF( tin0P ) ;
    if( !third ) pStack->sinkF( tin0P , idSlotP , pSoulP , flagsP , pSubtractFP , subtractionParmP ) ;
    }
        ( bTinHasLeverP ? swMe.forIfcThreadF( tin0P ) : (countT&)swMe ) = (countT)pStack ;
        __Z( pStack ) ;
        pStack = new( 0 , tin0P , LF ) stackC( tin0P , third , TAG( TAGiDnULL ) , flagsStack , idType , idGrabLayer , swMe.pLeverLathRefF( tin0P ) , 0 , pCbF ) ; ___BITScT( pStack , 0xefb ) ;
    {
    if( !pStack )
    stackC* pStack = (stackC*)( bTinHasLeverP ? swMe.forIfcThreadF( tin0P ) : (countT)swMe ) ;
    _IO_
    else if( osTidOwner != ((tin1S&)tin0P).osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = ((tin1S&)tin0P).osTid ;
    if( pBaton ) pBaton->grabF( tin0P , TAG( TAGiDnULL ) ) ;

    }
        if( third ) return ;
        FV( flSTACKsINK , flagsP ) ;
        __Z( pSoulP ) ;
        __( idSlotP ) ;
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT switchStackC::sinkF( tin0S& tin0P , countT& idSlotP , const soulC* const pSoulP , const flagsT flagsP , ifc4FT pSubtractFP , const countT subtractionParmP , const boolT bTinHasLeverP )/*1*/
/**/
*/
\<A HREF=\"5.1210058.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$sinkF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

