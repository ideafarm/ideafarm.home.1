
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    {for( countT off = 0 ; off < sizeof ppsttDayOfWeek / sizeof ppsttDayOfWeek[ 0 ] ; off ++ ) delF( tin0P , ppsttDayOfWeek[ off ] ) ;}
    {for( countT off = 0 ; off < sizeof ppsttMonth     / sizeof ppsttMonth[     0 ] ; off ++ ) delF( tin0P , ppsttMonth[     off ] ) ;}
    {for( countT off = 0 ; off < sizeof ppsttQOD       / sizeof ppsttQOD[       0 ] ; off ++ ) delF( tin0P , ppsttQOD[       off ] ) ;}
    {for( countT off = 0 ; off < sizeof ppsttDOS       / sizeof ppsttDOS[       0 ] ; off ++ ) delF( tin0P , ppsttDOS[       off ] ) ;}
    {for( countT off = 0 ; off < sizeof ppsttSOQ1       / sizeof ppsttSOQ1[       0 ] ; off ++ ) delF( tin0P , ppsttSOQ1[       off ] ) ;}
    {for( countT off = 0 ; off < sizeof ppsttSOQ2       / sizeof ppsttSOQ2[       0 ] ; off ++ ) delF( tin0P , ppsttSOQ2[       off ] ) ;}

    }
        //FORCE APPLICATION CODE TO DO THIS IF IT WANTS IT: strFuseF( tin0P , psttP , tcr ) ; ___( psttP ) ;
        }
            strFuseF( tin0P , psttP , TP("",cPadL)+T(ppsttDOS[off])+TP("",cPadR) ) ; ___( psttP ) ;
        {
        for( countT off = 0 ; off < sizeof ppsttDOS / sizeof ppsttDOS[ 0 ] ; off ++ )

        countT cPadR = cPad - cPadL ;
        countT cPadL = cPad / 2 ;
        countT cPad = cColP - 5 ;
    {

    }
        }
            else                                  { strFuseF( tin0P , psttP , tcrPlus ) ; ___( psttP ) ; }                                   // SCAN LINE 2 (DIVIDER)
            else if( oScan % cRowP              ) { strFuseF( tin0P , psttP , T("| ")+T(ppsttSOQ2[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE 1 (FOREIGN DATE)
                 if( oScan % cRowP == cRowP / 2 ) { strFuseF( tin0P , psttP , T("| ")+T(ppsttSOQ1[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE  (DAY)
        {
        else                                                                                                                            // ELSE
        }
            else                                  { strFuseF( tin0P , psttP , tcrAt  ) ; ___( psttP ) ; }                                    // SCAN LINE 2 (DIVIDER)
            else if( oScan % cRowP              ) { strFuseF( tin0P , psttP , T("| ")+T(ppsttSOQ2[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE 1 (FOREIGN DATE)
                 if( oScan % cRowP == cRowP / 2 ) { strFuseF( tin0P , psttP , T("| ")+T(ppsttSOQ1[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE  (DAY)
        {
        else if( oScan / cRowP == oStrong + 1 && oDay % 8 == 7 )                                                                        // IF THE FOCUS DAY IS THE LATH DAY OF THE NEXT STRONG
        }
            else                                  { strFuseF( tin0P , psttP , tcrAt ) ; ___( psttP ) ; }                                     // SCAN LINE 2 (DIVIDER)
            else if( oScan % cRowP              ) { strFuseF( tin0P , psttP , T("@ ")+T(ppsttSOQ2[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE 1 (FOREIGN DATE)
                 if( oScan % cRowP == cRowP / 2 ) { strFuseF( tin0P , psttP , T("@ ")+T(ppsttSOQ1[oScan/cRowP])+tcr ) ; ___( psttP ) ; }     // SCAN LINE  (DAY)
        {
        if( oScan / cRowP == oStrong && oDay % 8 == 7 )                                                                                 // IF THE FOCUS DAY IS THE LATH DAY OF THIS STRONG
        // NOW APPEND THE EPILOG FOR THIS SCAN LINE, WHICH IS EITHER '+' CR OR '|' CR OR '|' STRONG CR

        }
            cellScanCalendarF( tin0P , *this , psttP , oScan % cRowP , od , oDay , cColP , time2P , ppsttDayOfWeek , ppsttMonth , !( od % 2 ) || !( ( oScan / cRowP ) % 2 ) ? flCELLsCANcALENDAR_CAVE : flCELLsCANcALENDAR_null ) ;

            countT od = 0x40 * oQtr + ( oScan / cRowP ) * 8 + oCol ;
        {
        for( countT oCol = 0 ; oCol < 8 ; oCol ++ )                                                                                     // FOR EACH COLUMN, APPEND THE CONTENTS OF THE CALENDAR CELL FOR THIS SCAN LINE
    {
    for( sCountT oScan = cScan ; oScan >= 0 ; oScan -- )                                                                                // SCAN PROCEEDS "TOP TO BOTTOM", SO THAT THE TOP LINE OF THE BODY OF THE CALENDAR IS FUSED WOTH
    countT cScan = cRowP * 8 ;                                                                                                          // cRowP IS NORMALLY 3 ; cScan IS THE NUMBER OF "SCAN LINES", NAMED ANALOGOUSLY TO A CATHOD RAY TUBE SCAN LINE ;

    { ZE( countT , time1 ) ; strFuseF( tin0P , psttP , ti+(time2P<0?T(""):T("+"))+TT(time1,time2P)+(time2P<0?T(""):T("+"))+TP("",8*cColP-0x1e)+T(ppsttQOD[oQtr])+tcr ) ; ___( psttP ) ; }

    }
        tcrPlus += ti ;
        tcrBar  += ti ;
        tcrAt   += ti ;
        tcr     += ti ;
        ti      += TP("",csttIndentP) ;
    {
    if( csttIndentP )
    TN( tcrPlus , "+\r\n" ) ;
    TN( tcrBar  , "|\r\n" ) ;
    TN( tcrAt   , "@\r\n" ) ;
    TN( tcr     , "\r\n" ) ;
    TN( ti , "" ) ;

    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x6 ] , T("sat") ) ; ___( ppsttDayOfWeek[ 0x6 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x5 ] , T("fri") ) ; ___( ppsttDayOfWeek[ 0x5 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x4 ] , T("thu") ) ; ___( ppsttDayOfWeek[ 0x4 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x3 ] , T("wed") ) ; ___( ppsttDayOfWeek[ 0x3 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x2 ] , T("tue") ) ; ___( ppsttDayOfWeek[ 0x2 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x1 ] , T("mon") ) ; ___( ppsttDayOfWeek[ 0x1 ] ) ;
    strMakeF( tin0P , LF , ppsttDayOfWeek[ 0x0 ] , T("sun") ) ; ___( ppsttDayOfWeek[ 0x0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttDayOfWeek / sizeof ppsttDayOfWeek[ 0 ] ; off ++ ) ppsttDayOfWeek[ off ] = 0 ;}
    strokeS* ppsttDayOfWeek[ 7 ] ;

    strMakeF( tin0P , LF , ppsttMonth[ 0xb ] , T("dec") ) ; ___( ppsttMonth[ 0xb ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0xa ] , T("nov") ) ; ___( ppsttMonth[ 0xa ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x9 ] , T("oct") ) ; ___( ppsttMonth[ 0x9 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x8 ] , T("sep") ) ; ___( ppsttMonth[ 0x8 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x7 ] , T("aug") ) ; ___( ppsttMonth[ 0x7 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x6 ] , T("jul") ) ; ___( ppsttMonth[ 0x6 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x5 ] , T("jun") ) ; ___( ppsttMonth[ 0x5 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x4 ] , T("may") ) ; ___( ppsttMonth[ 0x4 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x3 ] , T("apr") ) ; ___( ppsttMonth[ 0x3 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x2 ] , T("mar") ) ; ___( ppsttMonth[ 0x2 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x1 ] , T("feb") ) ; ___( ppsttMonth[ 0x1 ] ) ;
    strMakeF( tin0P , LF , ppsttMonth[ 0x0 ] , T("jan") ) ; ___( ppsttMonth[ 0x0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttMonth / sizeof ppsttMonth[ 0 ] ; off ++ ) ppsttMonth[ off ] = 0 ;}
    strokeS* ppsttMonth[ 12 ] ;

    strMakeF( tin0P , LF , ppsttQOD[ 3 ] , T("re'qu (the reaping)") ) ; ___( ppsttQOD[ 3 ] ) ;
    strMakeF( tin0P , LF , ppsttQOD[ 2 ] , T("oo'qu (the tending)") ) ; ___( ppsttQOD[ 2 ] ) ;
    strMakeF( tin0P , LF , ppsttQOD[ 1 ] , T("wo'qu (the sowing)") ) ; ___( ppsttQOD[ 1 ] ) ;
    strMakeF( tin0P , LF , ppsttQOD[ 0 ] , T("ze'qu (the fallow)") ) ; ___( ppsttQOD[ 0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttQOD / sizeof ppsttQOD[ 0 ] ; off ++ ) ppsttQOD[ off ] = 0 ;}
    strokeS* ppsttQOD[ 4 ] ;

    strMakeF( tin0P , LF , ppsttDOS[ 7 ] , T("ve'da") ) ; ___( ppsttDOS[ 7 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 6 ] , T("se'da") ) ; ___( ppsttDOS[ 6 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 5 ] , T("fi'da") ) ; ___( ppsttDOS[ 5 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 4 ] , T("fo'da") ) ; ___( ppsttDOS[ 4 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 3 ] , T("re'da") ) ; ___( ppsttDOS[ 3 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 2 ] , T("oo'da") ) ; ___( ppsttDOS[ 2 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 1 ] , T("wo'da") ) ; ___( ppsttDOS[ 1 ] ) ;
    strMakeF( tin0P , LF , ppsttDOS[ 0 ] , T("ze'da") ) ; ___( ppsttDOS[ 0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttDOS / sizeof ppsttDOS[ 0 ] ; off ++ ) ppsttDOS[ off ] = 0 ;}
    strokeS* ppsttDOS[ 8 ] ;

    strMakeF( tin0P , LF , ppsttSOQ2[ 7 ] , T("") ) ; ___( ppsttSOQ2[ 7 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 6 ] , T("CAVE") ) ; ___( ppsttSOQ2[ 6 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 5 ] , T("") ) ; ___( ppsttSOQ2[ 5 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 4 ] , T("CAVE") ) ; ___( ppsttSOQ2[ 4 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 3 ] , T("") ) ; ___( ppsttSOQ2[ 3 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 2 ] , T("CAVE") ) ; ___( ppsttSOQ2[ 2 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 1 ] , T("") ) ; ___( ppsttSOQ2[ 1 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ2[ 0 ] , T("CAVE") ) ; ___( ppsttSOQ2[ 0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttSOQ2 / sizeof ppsttSOQ2[ 0 ] ; off ++ ) ppsttSOQ2[ off ] = 0 ;}
    strokeS* ppsttSOQ2[ 8 ] ;

    strMakeF( tin0P , LF , ppsttSOQ1[ 7 ] , T("ve'str") ) ; ___( ppsttSOQ1[ 7 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 6 ] , T("se'str") ) ; ___( ppsttSOQ1[ 6 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 5 ] , T("fi'str") ) ; ___( ppsttSOQ1[ 5 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 4 ] , T("fo'str") ) ; ___( ppsttSOQ1[ 4 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 3 ] , T("re'str") ) ; ___( ppsttSOQ1[ 3 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 2 ] , T("oo'str") ) ; ___( ppsttSOQ1[ 2 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 1 ] , T("wo'str") ) ; ___( ppsttSOQ1[ 1 ] ) ;
    strMakeF( tin0P , LF , ppsttSOQ1[ 0 ] , T("ze'str") ) ; ___( ppsttSOQ1[ 0 ] ) ;
    {for( countT off = 0 ; off < sizeof ppsttSOQ1 / sizeof ppsttSOQ1[ 0 ] ; off ++ ) ppsttSOQ1[ off ] = 0 ;}
    strokeS* ppsttSOQ1[ 8 ] ;

    countT oQtr  = offQTR( time2P ) ;
    countT oStrong = offSTRONG( time2P ) ;
    countT oDay  = offDAY( time2P ) ;

    }
        strFuseF( tin0P , psttP , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ csttEstimate + csttExtraP ) ; //CALLER MUST TAG ___( psttP ) ;
        countT csttEstimate = cRowsAlloc * cColsAlloc ;
        countT cColsAlloc   = csttIndentP + cColP * 8 + 0xa ;
        countT cRowsAlloc   =               cRowP * 8 + 3 ;
    {
    if( !psttP )

    _IO_

    }
        if( POOP ) return ;
        __( cColP < ( cRowP == 2 ? 0x6 : 0xb ) ) ;
        if( POOP ) return ;
        __( cRowP < 2 ) ;
        __( csttExtraP && psttP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::strCalendarF( tin0S& tin0P , strokeS*& psttP , const sCountT time2P , const countT cColP , const countT cRowP , const countT csttIndentP , const countT csttExtraP )/*1*/

/**/
*/
  must be 0 if psttP is not null
  is used when psttP is null
 csttExtraP
  if 2 then the foreign date is not displayed
  must be at least 2
 cRowP
  must be at least 6 if cRowP is 2, and at least b otherwise
 cColP
  the calendar will depict the quarter that contains this day
  the day to highlight on the calendar
 time2P
  if not null then must contain enough extra strokes to completely hold the calendar
  if null then will be allocated
  can be null
 psttP
 tin0P
arguments
  \<A HREF=\"5.7b30104.1.1.0.html\"\>7b30104:  WAKEsHOW( "example.simplest.func.1030117.etherC.strCalendarF" )\</A\>
 simplest
examples
\<A HREF=\"5.1030117.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strCalendarF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

