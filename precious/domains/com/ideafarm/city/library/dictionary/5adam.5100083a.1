
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

sgnDone_tmWorkF.waitF( tin0P ) ;
etThread.osThreadF( TaRG3sGNdONEcBsTACK( tmWorkF , sgnDone_tmWorkF , TICK ) ) ;     //U::O: REPLACE "TICK" WITH MINIMUM cbStackP VALUE THAT WORKS RELIABLY
signC sgnDone_tmWorkF( tin0P , TAG( TAGiDnULL ) ) ;

TODO

DONE( tmWorkF )
}
    thirdC::osHireThenMonitorIF( tin0P , ifcIDaDAM_2GLASS2 , T("ifcIDaDAM_GLASS1") , T("!ignoreFireByOperator") ) ;

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_LAZIEST ) ;
    thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_LAZIEST ) ;

    etThread.osThreadF( TaRG2cBsTACK( tmLaunchBatExeFilesF , CBsTACKmIN << 1 ) ) ;
{
if( pTaskP )
TASK( tmWorkF )

DONE( tmLaunchBatExeFilesF )
}
    }
        }
            }
                FORsTRINGSiNsPANNEDcOMBINEDtAIL1
                }
                    }
                        }
                            etThread.diskFileOrDirDeleteF( tin0P , psttm ) ;
                            CONoUTrAW( "\r\n" ) ;
                            etThread.osProcessF( tin0P , countTC() , countTC() , countTC() , countTC() , psttm ) ;
                            CONoUTrAW( "\r\n" ) ;
                            etThread.traceF( tin0P , T("launching [tLong]:    ")+T(psttm) ) ;

                            etThread.diskMapFileNameF( tin0P , psttm , psttc1 ) ; ___( psttm ) ;
                            ZE( strokeS* , psttm ) ;
                        {
                        if( etThread.strIdF( tin0P , T(".bat") , psttc1 ) )
                    {
                    if( psttc1[ CSpREFIX - 1 + psttc1->idAdam ].idAdam != '/' )                                 // IF NOT DIRECTORY
                {
                FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )
                etThread.boxMenuF( tin0P , soul1m , tDrop+T("*") , 0 , TUCK ) ;
                soulC soul1m( tin0P , TAG( TAGiDnULL ) , flSOUL_null , "soul.launch.bat.and.exe" ) ;

                if( bWoth ) bWoth = 0 ;
                if( !bWoth ) etThread.traceF( tin0P , T("waited  for a change [tDrop]:    ")+tDrop ) ;
            {
            if( bWoth || etThread.etherC::diskWaitDirF( tin0P , hWait , ether , tDrop , flWAITdIR_RECURSE | flWAITdIR_FILEnAME | flWAITdIR_DIRnAME ) )
            if( !bWoth ) etThread.traceF( tin0P , T("waiting for a change [tDrop]:    ")+tDrop ) ;
        {
        while( !ether && !POOP )
        handleC hWait( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEwAIT ) ;
        boolT bWoth = 1 ;
    {
    IFsCRATCHoK

    etThread.diskMakeDirIfNeededF( tin0P , tDrop ) ;
    TN( tDrop , "///ideafarm/control/drop.executables/" ) ;

    etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_PUSHY ) ;
    thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_PUSHY ) ;
{
if( pTaskP )
TASK( tmLaunchBatExeFilesF )                    //P:PERSONALITY: I LAUNCH (AND EAT) BAT AND EXE FILES SO THAT THEY WON'T BE DEBUGGED, SO WILL SURVIVE EVEN IF WO OF THEM CAUSES ME TO DIE

/*1*/WAKEhIDE( "ifcIDaDAM_GLASS1" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
