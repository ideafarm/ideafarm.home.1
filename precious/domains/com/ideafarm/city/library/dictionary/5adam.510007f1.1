
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    }
        etThread.delF( tin0P , pbi ) ;

        }
            }
                }
                    }
                        sock.writeF( tin0P , idpi , nni , (byteT*)&epOut , sizeof epOut ) ;
                        etThread.traceF( tin0P , T("throwing ")+TF2(epOut.idType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" to port ")+TF2(idpi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" of ")+T(nni) ) ;

                        epOut.cbData = 0 ;
                        epOut.idType = ifcIDtYPEeCHOpACKET_ECHOrEPLY ;
                        echoPacketS epOut = epIn ;

                        }
                            }
                                if( ids ) etThread.traceF( tin0P , T("remembering [nn]:    ")+T(nnHe) ) ;
                                stNicNameKnown.sinkF( tin0P , ids , nnHe , flSTACKsINK_UNIQUE , 0 , 0 ) ;
                                ZE( countT , ids ) ;

                                nicNameC& nnHe = *( pnni ++ ) ;
                            {
                            while( cIn -- )
                            nicNameC* pnni = (nicNameC*)( pbi + sizeof( echoPacketS ) ) ;
                            countT cIn = epIn.cbData / sizeof( nicNameC ) ;
                        {
                        if( cbi == ifcCBdATAGRAMmAX && epIn.cbData >= sizeof( nicNameC ) && !( epIn.cbData % sizeof( nicNameC ) ) )
                    {
                    case ifcIDtYPEeCHOpACKET_ECHO :
                {
                switch( epIn.idType )

                if( ids ) etThread.traceF( tin0P , T("remembering [nn]:    ")+T(nni) ) ;
                stNicNameKnown.sinkF( tin0P , ids , nni , flSTACKsINK_UNIQUE , 0 , 0 ) ;
                ZE( countT , ids ) ;

                etThread.traceF( tin0P , T("caught   ")+TF2(epIn.idType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" from port ")+TF2(idpi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" of ")+T(nni) ) ;
            {
            if( getNegAM( epIn.finger ) == FINGERnEG_echoPacketS )
            echoPacketS& epIn = *(echoPacketS*)pbi ;
        {
        if( !ether && cbi >= sizeof( echoPacketS ) )

        }
            etThread.traceF( tin0P , T("oops!") ) ;
            POOPR
        {
        if( POOP )
        sock.readF( tin0P , pbi , cbi , idpi , nni ) ;
        nicNameC nni ;
        ZE( countT , idpi ) ;
        ZE( countT , cbi ) ;
        ZE( byteT* , pbi ) ;
    {
    while( !ether )

    etThread.osThreadF( TaRG1( tmOpenDoorToAllF ) , (countT)&sock , (countT)&stNicNameKnown ) ;
    idPortBind = sock.bindF( tin0P , idPortBind ) ;
    socketC sock( tin0P , *((tin9S&)tin0P).pEtScratch , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;

    SCOOPS
{
IFsCRATCH

}
    etThread.delF( tin0P , pnnTo ) ;

    }
        if( ids ) etThread.traceF( tin0P , T("remembering [nn]:    ")+T(pnnTo[offn]) ) ;
        stNicNameKnown.sinkF( tin0P , ids , pnnTo[ offn ] , flSTACKsINK_UNIQUE , 0 , 0 ) ;
        ZE( countT , ids ) ;

        etThread.traceF( tin0P , T("black  :    ")+T(pnnTo[offn]) ) ;
    {
    for( countT offn = 0 ; offn < cnnTo  ; offn ++ )
    socketC::nicNameIF( tin0P , etThread , pnnTo  , cnnTo  , ppsttTo[ offt ] ) ;
    ZE( countT    , cnnTo  ) ;
    ZE( nicNameC* , pnnTo  ) ;
{
for( countT offt = 0 ; offt < sizeof ppsttTo / sizeof ppsttTo[ 0 ] ; offt ++ )

strokeS* ppsttTo[] = { tEcho /*, tBlack6 , tBlack4*/ } ;

TN( tBlack4  , "192.168.24.32" ) ;
TN( tBlack6  , "2600:380:442e:e76a:3309:635e:c64f:6d6f" ) ;
TN( tEcho    , "echo.ideafarm.com" ) ;

stackC stNicNameKnown( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , ifcSTACKtYPE_nicNameC ) ;

TODO

DONE( tmOpenDoorToAllF )
}
    }
        ++ s ; ether.osSleepF( tin0P , TOCK ) ;

        stNicNameKnownP.ungrabF( tin0P ) ;
        }
            }
                while( ~hStk ) ;
                }
                    pSock->writeF( tin0P , idPortTo , nnHe , pbGram , sizeof pbGram ) ;
                    etThread.traceF( tin0P , T("throwing ")+TF2(pepOut->idType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" to port ")+TF2(idPortTo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" of ")+T(nnHe) ) ;

                    nicNameC& nnHe = *(nicNameC*)&stNicNameKnownP.downF( tin0P , hStk ) ;
                {
                do
                handleC hStk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {

            }
                while( ~hStk ) ;
                }
                    else break ;
                    }
                        cnnDone ++ ;
                        pepOut->cbData += sizeof nnHe ;
                        *( pnnOut ++ ) = nnHe ;
                    {
                    else if( cRemain -- )
                    if( cnnSkip ) cnnSkip -- ;

                    nicNameC& nnHe = *(nicNameC*)&stNicNameKnownP.downF( tin0P , hStk ) ;
                {
                do
                handleC hStk( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;

                countT cnnSkip = cnnDone ;
                if( stNicNameKnownP <= cnnDone ) cnnDone = 0 ;
            {

            pepOut->idType = ifcIDtYPEeCHOpACKET_ECHO ;
            putNegAM( pepOut->finger , FINGERnEG_echoPacketS ) ;

            ZE( countT , cnnThis ) ;
            countT       cRemain = CBpAYLOAD / sizeof( nicNameC ) ;
            nicNameC*    pnnOut = (nicNameC*)( pbGram + sizeof( echoPacketS ) ) ;
            echoPacketS* pepOut = (echoPacketS*)pbGram ;
            thirdC::c_memsetIF( tin0P , pbGram , sizeof pbGram ) ;
            byteT pbGram[ sizeof( echoPacketS ) + CBpAYLOAD ] ;
        {
        if( stNicNameKnownP )
        stNicNameKnownP.grabF( tin0P , TAG( TAGiDnULL ) ) ;

        idPass ++ ;
    {
    while( !ether )
    ZE( countT , cnnDone ) ;
    ZE( countT , idPass ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    countT idSayLath  = 0x10000000 ;

    stackC&  stNicNameKnownP = *(stackC*)pTaskP->c2 ;
    socketC* pSock           = (socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmOpenDoorToAllF )

countT idPortTo   = 0xfade ;
countT idPortBind = 0xfade ;

#define CBpAYLOAD ( ifcCBdATAGRAMmAX - sizeof( echoPacketS ) )

//   WHEN RECEIVE ECHOrEPLYrEPLY, IF THE RECEIVED HASH IS CORRECT FOR THE CLAIMED nicNameC, ADD THAT nicNameC TO THE LIST
//   (PEER) IN RESPONSE TO ECHOrEPLY, SEND THE RECEIVED HASH VALUE IN ECHOrEPLYrEPLY
//   WHEN RECEIVE ECHO, HASH [cSecret||nicNameC] AND SEND THE HASH VALUE IN ECHOrEPLY TO THE CLAIMED nicNameC
//   UPDATE A countT cSecret EVERY TICK
// RECIPE:
//U:: ELIMINATE ATTACK SURFACE BY ADDING nicNameC VALUES ONLY AFTER THEY ARE CONFIRMED USING HASHED [nicNameC,secret]

//BASELINE: 7f0: "dut.duplex.udt.keepalive"

/*1*/WAKEhIDE( "ifcIDaDAM_UDPeCHO" )/*1*/

/**/
*/
 i ignore all other incoming packets
 i do this by catching ECHO udp packets and replying with ECHOrEPLY udp packets
i maintain a list of nicNameC values where IPDOS (tm) homes can be found
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
