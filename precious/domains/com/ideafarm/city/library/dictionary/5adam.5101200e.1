
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

       cDo = cPairs ; while( cDo -- ) etThread.osThreadF( TaRG2cBsTACK( tmPullF , CBsTACKmIN << 1 ) , (countT)&myCircle ) ;
countT cDo = cPairs ; while( cDo -- ) etThread.osThreadF( TaRG2cBsTACK( tmPushF , CBsTACKmIN << 1 ) , (countT)&myCircle ) ;
const countT cPairs = TUCK >> 4 ;
//const countT cPairs = 1 ;

circleC myCircle( tin0P , etThread , ether , sizeof( countT ) , TICK ) ;

TODO

DONE( tmPushF )
}
    }
        myCircleP << &vv ;
        ++ vv ;
    {
    while( !ether )
    ZE( countT , vv ) ;

    circleC& myCircleP = *(circleC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmPushF )

DONE( tmPullF )
}
    }
        etThread.traceF( tin0P , tSay+TF2(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        myCircleP >> &vv ;
    {
    while( !ether )
    TN( tSay , "pulled [vv]:    " ) ;
    ZE( countT , vv ) ;

    circleC& myCircleP = *(circleC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmPullF )

/*1*/WAKEhIDE( "example.simplest.1snip.150001d1.circleC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
