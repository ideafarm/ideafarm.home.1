
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//



    }                                                                                                                                                                                                                                                                   \
        /* ONLY main,tmWindowsF,tmWatchF,tmWatchRudeF,tmKillSocketF REMAIN */                                                                                                                                                                                           \
        /*CONoUTrAW5( "WAITuNTILaLMOSTaLONE(" , cKidsOrphansAllowP , ")/" , ((tin1S&)tin0P).pag1->idAdam , "/ending wait\r\n" ) ;*/                                                                                                                                     \
        }                                                                                                                                                                                                                                                               \
            if( POOP ) POOPR                                                                                                                                                                                                                                            \
                                                                                                                                                                                                                                                                        \
            }                                                                                                                                                                                                                                                           \
                ++ s ; thirdC::dosSleepWinkIF( tin0P , 1 ) ;                                                                                                                                                                                                            \
                /*CONoUTrAW7( "WAITuNTILaLMOSTaLONE(" , cKidsOrphansAllowP , ")/" , ((tin1S&)tin0P).pag1->idAdam , "/waiting for " , ( cAllKidThreadsI + cAllOrphanThreadsI - bService - b_tmWindows * 2 - 3 - (cKidsOrphansAllowP) ) , " kid threads to end\r\n" ) ;*/ \
            {                                                                                                                                                                                                                                                           \
            while( cAllKidThreadsI + cAllOrphanThreadsI > bService + b_tmWindows * 2 + ((tin1S&)tin0P).pag1->_deviceC_cHelper + bSysThreads * 3 /*tmWatchF,tmWatchRudeF,tmKillSocketF*/ + (cKidsOrphansAllowP) )                                                        \
            sleepC s( tin0P , TAG( TAGiDnULL ) ) ;                                                                                                                                                                                                                      \
            SCOOPS                                                                                                                                                                                                                                                      \
        {                                                                                                                                                                                                                                                               \
        IFsCRATCHoK                                                                                                                                                                                                                                                     \
        countT& cAllOrphanThreadsI = thirdC::os_cAllOrphanThreadsI_IF( tin0P ) ;                                                                                                                                                                                        \
        countT& cAllKidThreadsI    = thirdC::os_cAllKidThreadsI_IF( tin0P ) ;                                                                                                                                                                                           \
        /*CONoUTrAW7( "WAITuNTILaLMOSTaLONE(" , cKidsOrphansAllowP , ")/" , ((tin1S&)tin0P).pag1->idAdam , "/bService:" , bService , "\r\n" ) ; */                                                                                                                      \
        const boolT bSysThreads    =  !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_NOsYSTEMtHREADS ) ;                                                                                                                                                  \
        const boolT bService       = !!( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_SERVICE         ) ;                                                                                                                                                  \
        const boolT b_tmWindows    = !!( F(thirdC::third_flagsModeAdam1I_IF(tin0P))    & flADAMmODE1_tmWindows          ) ;                                                                                                                                             \
    {                                                                                                                                                                                                                                                                   \
    TELL( "waiting for all child threads except tmWindowsF tmAnimateSadamsOnPaperF to end" ) ;                                                                                                                                                                          \
                                                                                                                                                                                                                                                                        \
#define WAITuNTILaLMOSTaLONE(cKidsOrphansAllowP)                                                                                                                                                                                                                        \

/*1*//*WAITuNTILaLMOSTaLONE*//*1*/
/**/
*/
if i am called before i have been fired (ether is impotent) then cKidsOrphansAllowP must be at least 1 because tmTimeNowF will be active
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

