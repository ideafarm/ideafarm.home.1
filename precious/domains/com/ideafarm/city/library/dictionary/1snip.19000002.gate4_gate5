
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

#endif
    #undef   DEBUGeXCEPTIONhANDLER 
#if defined( DEBUGeXCEPTIONhANDLER )

}
    #endif
        return rc ;
    #elif defined( __NT__ )
    #if defined( __OS2__ )

    }
        processGlobal2S::_processGlobal2I_IF().flDt |= flCTdTg_WITHINlIFETIMEoFmAIN ;

        ((etherC*)0)->traceF( tin0P , (strokeS*)"------------------------------------- main ----" , flTRACE_PARAMETERiSoStEXT | flTRACE_FORCEnOsILENCE | flTRACE_NObOOK ) ;

        #endif

                }
                    processGlobal1S::_processGlobal1I_IF().phExceptionHandler = 0 ;

                    rc = c_threadTry1Outer123F( 1 , processGlobal1S::_processGlobal1I_IF().phExceptionHandler->osF( ifcIDtYPEhANDLE_EXCEPTIONhANDLER ) , cHowP , (countT)ppostHowP , 0 ) ;

                    processGlobal1S::_processGlobal1I_IF().phExceptionHandler = &hExceptionHandler ;
                    handleC hExceptionHandler( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_EXCEPTIONhANDLER ) ; //WOULD LIKE THIS TO BE THE WOTH STATIC, BUT IT DOESN'T WORK THAT EARLY ; 20210715@1125: MOVED TO HERE FROM mainThreadWorkF
                {

            #endif

                else
                }
                    rc = c_threadTry1Outer123F( 1 , 0 , cHowP , (countT)ppostHowP , 0 ) ;
                {
                if( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_DEBUG )

            #if !defined( DEBUGeXCEPTIONhANDLER )

            }
                }
                    break ;
                    thirdC::third_flagsModeProcess1I_IF() |= flMODEpROCESS1_DEBUG ;     //20241110@0814: SET EARLY BECAUSE etherC::traceF INSPECTS IT
                {
                if( !thirdC::c_strcmpIF( tin0P , ppostHowP[ offp ] , "!debug" ) )
            {
            for( countT offp = 0 ; offp < cHowP ; offp ++ )

        #else

            rc = threadLocalStorageNoTls123F( ifcIDtYPEtLS_WINDOW , 0 , 0 , 0 , 0 , (countT)hWindowingClientIP , (countT)hPreviousWindowingClientP , (osTextT*)postP , (countT)idCmdShowP ) ;
            thirdC::third_flagsModeProcess2I_IF() |= flMODEpROCESS2_FANCY ;

        #if defined( LOCALgRAPHIC )

        ((etherC*)0)->traceF( tin0P , (strokeS*)"------------------------------------- main ++++" , flTRACE_PARAMETERiSoStEXT | flTRACE_FORCEnOsILENCE | flTRACE_NObOOK ) ;

        processGlobal2S::_processGlobal2I_IF().flCt |= flCTdTg_WITHINlIFETIMEoFmAIN ;

        TINSL
    {
    ZE( sCountT , rc ) ;

    //U:: DO THIS ALSO FOR GRAPHICS PROCESSES BY DEFINING A c_main1OuterWinF THAT PASSES IN THE PARAMETERS PROVIDED TO WinMain
    //20210714@1441:  MIGRATED CODE IN main INTO threadTry2Inner123F (CALLED WITHIN A _try BLOCK BY c_threadTry1Outer123F) TO PROTECT IT WITHIN _try _except, AND THIS WAS DONE ONLY FOR WINDOWS 10 CONSOLE PROCESSES ;

    //}
    //    etherC::etRockIF( tin0P ).traceF( tin0P , (const strokeS* const)(const osTextT* const)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
    //    tin0S& tin0P = processGlobal5S::_processGlobal5I_IF().tin9VeryEarlyLateMain ;
    //
    //    OStEXTC(  ostoSay , pbStackEnd , 0 ) ;
    //    OStEXTAK( ostoSay , "    " ) ;
    //    OStEXTC(  ostoSay , pbStackStart , 0 ) ;
    //    OStEXTAK( ostoSay , "    " ) ;
    //    OStEXTC(  ostoSay , cbStack , 0 ) ;
    //    #endif
    //        OStEXTAK( ostoSay ,    "main [cbStack,pbStackStart,pbStackEnd]:    " ) ;
    //    #else
    //        OStEXTAK( ostoSay , "WinMain [cbStack,pbStackStart,pbStackEnd]:    " ) ;
    //    #if defined( LOCALgRAPHIC )
    //    OStEXT(   ostoSay , TUCK << 1 ) ;
    //{

    //}
    //    byteT foo = *( pbc -- ) ;             FAILS (STACK OVERFLOW) WHEN pbc = 0xa2ffe
    //{                                                            pbStackStart = 0xa0000
    //while( pbc )                                                 pbStackEnd   = 0xe0000
    //byteT* pbc = pbStackEnd - 1 ;
    //
    // NOTE: THE WATCOM LINKER REPORTS THAT THE EXECUTABLE GETS A 1 GRAIN STACK THAT IS FULLY COMMITTED (NO ADDITIONAL RESERVE), WHICH IS WHAT IS REQUESTED IN THE wlink INVOCATION
    //
    //    4. MS WINDOWS IS A STEAMING PILE OF SHIT
    //    3. THE HIGHEST BYTE OF THE HIGHEST GUARD PAGE IS ACCESSIBLE, BUT THE BYTE BELOW IT IS NOT
    //    2. 3 PAGES ARE BEING USED AS GUARD PAGES
    //    1. AN EXECUTABLE THAT SPECIFIES A 1 GRAIN (64K) STACK SIZE IS BEING GIVEN A 4 GRAIN STACK
    //
    //20240917@1749: U:: THIS TEST CODE INDICATES THE FOLLOWING:

    //}
    //    CONoUTrAW( ostoSay ) ;
    //    OStEXTAK(  ostoSay , "\r\n\r\n" ) ;
    //    OStEXTCF(  ostoSay , pbStackEnd , '0' ) ;
    //    OStEXTAK(  ostoSay , "    " ) ;
    //    OStEXTCF(  ostoSay , pbStackStart , '0' ) ;
    //    OStEXTAK(  ostoSay , "    " ) ;
    //    OStEXTCF(  ostoSay , cbStack , '0' ) ;
    //    OStEXTAK(  ostoSay , "\r\nmain [cbStack,pbStack,pbStackEnd]:    " ) ;
    //    OStEXT(    ostoSay , TUCK << 1 ) ;
    //
    //    countT cbStack      = pbStackEnd - pbStackStart ;
    //    byteT* pbStackEnd   = (byteT*)info.BaseAddress + info.RegionSize ;
    //    byteT* pbStackStart = (byteT*)info.AllocationBase ;
    //    VirtualQuery( (byteT*)ebpAM() , &info , sizeof info ) ;
    //    MEMORY_BASIC_INFORMATION info ;
    //{

    thirdC::setAddressUsageBitsIF( (const byteT*)eipAM() , ifcIDtYPEaDDRESSuSAGE_CODE ) ;     //CANNOT REFERENCE main (Linker error): "Error! E466: col(53) 'main' cannot be referenced"
{
#endif
    #endif
        int main( countT cHowP , osTextT** ppostHowP )
    #elif defined( __NT__ )
        sCountT  main( countT cHowP , osTextT** ppostHowP )
    #if defined( __OS2__ )
#else
    #endif
        int CALLBACK WinMain( HINSTANCE hWindowingClientIP , HINSTANCE hPreviousWindowingClientP , LPSTR postP , int idCmdShowP )
    #elif defined( __NT__ )
        //U: OS/2
    #if defined( __OS2__ )
#if defined( LOCALgRAPHIC )

}
    return c_openSslAppLinkInnerIF() ;
{
extern "C" void** _export __syscall OPENSSL_Applink( void )                                 //OPENSSL REQUIRES THIS FUNCTION TO BE IN THE EXE MODULE OF ANY PROCESS THAT DOES I/O FOR PEM FILES

//   
//   20250409@1728: THESE INSTRUCTIONS TESTED AOK
//   
//   THIS SHOULD RESULT IN EXECUTION STOPPING AT THAT BREAKPOINT SO THAT YOU CAN STEP INTO THE HANDLER   
//   
//   11. CLICK Run/Go (OR PRESS THE F5 KEY)
//   01. PUT A BREAKPOINT ON rptExceptionF IN MODULE 30000
//   f0. wdw ideafarm.00000xxx.ipdos-we 5101200f !idHome 10000008                                                        (THE "!debug" ARGUMENT IS INTENTIONALLY OMITTED SO THAT THE EXCEPTION HANDLER WILL BE CALLED)
//   e0. dir                                                                                                             (NOTE THE FILENAME ideafarm.00000xxx.ipdos-we OF THE WO'TH *.ipdos-we FILE, WHICH IS THE COMMAND WINDOW EXECUTABLE) 
//   d0. g 1
//   c0. dir
//   b0. g m
//   a0. e                                                                                                               (THIS WILL BUILD, USING THE PREBUILT GENERATED HEADERS AND THE CURRENT BUILD SPECS IN Eve (ADAM 5adam.51000621.1)
//   90. m
//   80. rw elves.cpp ; IN THE EDITOR, EDIT THE WO'TH LINE TO ENABLE "#define DEBUG" ; THEN SAVE AND EXIT
//   70. g el
//   60. DELETE THIS FOLDER: x:\ideafarm.home.1\ephemeral\city
//   50. g d                                                                                                             (CHANGE DIRECTORY TO THE DICTIONARY FOLDER)
//   40. OPEN A COMMAND PROMPT WINDOW
//   30. EDIT Eve SO THAT Eve WILL BUILD THAT SCRATCH ADAM                                                               (SCRATCH ADAM 5101200f IS USED HERE AS AN EXAMPLE)
//   20. USING EITHER Elves OR AN EDITOR AT A COMMAND PROMPT, EDIT A SCRATCH ADAM SO THAT IT WILL THROW AN EXCEPTION.    (THE EASIEST WAY TO DO THAT IS TO ADD A "__1" LINE, WHICH WILL CALL gruntF TO THROW A "GRUNT EXCEPTION".)
//   10. ENABLE THE "#define DEBUGeXCEPTIONhANDLER" LINE
//   
// INSTRUCTIONS FOR DEBUGGING THE EXCEPTION HANDLER AND FOR BUILDING AFTER ANY CHANGE OF A HEADER FILE (A FILE IN THE dictionary FOLDER WITH A NAME 1.*)

//#define DEBUGeXCEPTIONhANDLER
// FOR PRODUCTION AND FOR NORMAL DEBUGGING, COMMENT OUT THE NEXT LINE ; TO USE WDW TO DEBUG THE EXCEPTION HANDLER, ENABLE THE NEXT LINE

//U::O: THE DUPLICATE IMAGE IN 0100002 CAN BE ELIMINATED BY HAVING 0100002 RESOLVE REFERENCES USING 0100003W.EXE AS IF IT IS A DLL

/*1*//*main*//*1*/

/**/
*/
 functions that do not, such as operators, call pTinF() to obtain the address (by walking up the stack) of the thread's tin123S, object
 most functions receive a reference to tin0P as a parameter
 each thread's local storage consists of its tin123S, object and a countT object on the thread stack that contains the address of that object
thread local storage is supported by storing a fingerprint value and a tin0S* value (initially 0) on each thread's stack
i look complicated because base operating systems vary slightly in how they pass me command line info, and whether they expect me to return a value
the only thing that i do is call threadLocalStorageNoTls123F
after i terminate, the static image objects are destructed and then the process ends
i am called after the static image objects have been constructed
i am the executive function of the executable image
\<A HREF=\"5.0050002.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

