
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

}
    }

//}
//    ((tin9S&)tinBaseP).pc Utility[ 1 ] -- ;
//    }
//        TRACEcALLnEST( "ifcTHREADpRIORITY_LAZIEST 4" ) ;
//        LOGcALLnEST(   "ifcTHREADpRIORITY_LAZIEST 4" ) ;
//    {
//    if( ifcTHREADpRIORITY_LAZIEST == thirdC::dosPriorityIF( tinBaseP ) )
//    ((tin9S&)tinBaseP).pc Utility[ 1 ] -- ;
//{
//if( ((tin9S&)tinBaseP).pc Utility[ 0 ] )
//U:: TO FIND A BUG

        ((tin9S&)tinBaseP).pInOutFrame = pDad ;

        }
            THREADmODE5rESTORE
            }
                THREADmODE5rESTORE

                ((tin9S&)tinBaseP).cTimeWriteInOutTelemetry      += deltaTime5      ;
                ((tin9S&)tinBaseP).cCpuCyclesWriteInOutTelemetry += deltaCpuCycles5 ;
                ((tin9S&)tinBaseP).cTellsWriteInOutTelemetry ++ ;

                }
                    pDad->auditTime     .dTimeAuditKidBook      += deltaTime5      ;
                    pDad->auditCpuCycles.dCpuCyclesAuditKidBook += deltaCpuCycles5 ;
                {
                if( pDad )

                deltaTime5      -= say.cTime4      ;
                deltaCpuCycles5 -= say.cCpuCycles4 ;

                ((tin9S&)tinBaseP).cTime2Or5Lath      = deltaTime5      ; //NOT DELTA YET
                ((tin9S&)tinBaseP).cCpuCycles2Or5Lath = deltaCpuCycles5 ; //NOT DELTA YET

                QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&deltaCpuCycles5 ) ;
                QueryPerformanceCounter( (LARGE_INTEGER*)&deltaTime5 ) ;
                count04T deltaTime5      ;  //INTENTIONALLY UNINITIALIZED FOR SPEED
                count04T deltaCpuCycles5 ;  //INTENTIONALLY UNINITIALIZED FOR SPEED

                }
                    THREADmODE5rESTORE
                    TELLaPPc3LIFI( ifcIDtYPEtELLaPP_INoUT , (byteT*)&say , sizeof say , idLineCt , idiFileCt )
                    THREADmODE5oN( flTHREADmODE5_INoUTfRAMEdEFERwRITINGaPPtELEMETRY ) ;
                {
                if( !bDone && !( F(flagsCt) & flINoUTfRAMEc_DEFERwRITINGaPPtELEMETRY ) )

                }
                    }
                        BLAMMO ;
                        bDone = 1 ;
                        pPending[ cPending ++ ] = say ;
                        cPending = 0 ;
                        LOGrAW3(    "~inOutFrameC: error 3: no more room in pending buffer [cPending]:    " , cPending , "\r\n" ) ;
                        CONoUTrAW3( "~inOutFrameC: error 3: no more room in pending buffer [cPending]:    " , cPending , "\r\n" ) ;
                        CONoUTrAW3( "[cPending++]:    " , cPending , "  (will discard all)\r\n" ) ; //U:: 20221024@1132: TO FIND A BUG
                    {
                    else
                    }
                        bDone = 1 ;

                        }
                            countT foo = 2 ;
                            //CONoUTrAW( "cPending is too high!\r\n" ) ; //U:: 20221024@1132: TO FIND A BUG
                        {
                        if( cPending > ( TUCK >> 1 ) )

                        pPending[ cPending ++ ] = say ;
                        CONoUTrAW3( "[cPending++]:    " , cPending , "\r\n" ) ; //U:: 20221024@1132: TO FIND A BUG
                    {
                    else if( cPending < CmAXpENDINGiNoUTfRAMEpACKETS )
                    }
                        BLAMMO ;
                        LOGrAW5(    "~inOutFrameC: error 2 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                        CONoUTrAW5( "~inOutFrameC: error 2 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                    {
                    if( cPending > CmAXpENDINGiNoUTfRAMEpACKETS )

                    }
                        }
                            cPending = 0 ;

                            //THREADmODE5rESTORE
                            }
                                thirdC::dosTellMonitorIF( tinBaseP , tell , ifcIDbOOKStELL_APP ) ;
                                tellC tell( tinBaseP , idLineCt , idiFileCt , 0 , ifcIDtYPEtELLaPP_INoUTaRRAY , ((tin9S&)tinBaseP).pbPendingInOutFramePackets , sizeof( countT ) + cPending * sizeof( tellInfoAppInOutFrameS ) ) ;
                            {
                            //THREADmODE5oN( flTHREADmODE5_INoUTfRAMEdOnOTcOLLECTaPPtELEMETRY | flTHREADmODE5_DOnOTfLUSHpENDINGaPPtELEMETRY ) ;
                        {
                        //B:else if( cPending >= CmAXpENDINGiNoUTfRAMEpACKETS * 1 / 0x20 ) //U:: EXPERIMENT
                        //B: else if( cPending >= CmAXpENDINGiNoUTfRAMEpACKETS * 1 / 8 ) //U:: EXPERIMENT
                        else if( cPending  )    //U:: SEE WHAT HAPPENS (INVALID HANDLE BUG SEEN AND NOW FIXED)
                        //OLD: else if( cPending >= CmAXpENDINGiNoUTfRAMEpACKETS * 7 / 8 )  //OLD: 1/8 OF THE CAPACITY IS USED TO ACCUMULATE WHEN I CANNOT EMIT TELEMETRY
                        }
                            BLAMMO ;
                            LOGrAW5(    "~inOutFrameC: error 1 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                            CONoUTrAW5( "~inOutFrameC: error 1 [cPending,cMax]:    " , cPending , "    " , CmAXpENDINGiNoUTfRAMEpACKETS , "\r\n" ) ;
                        {
                        if( cPending > CmAXpENDINGiNoUTfRAMEpACKETS )
                    {
                    if( !( F(flagsCt) & flINoUTfRAMEc_DEFERwRITINGaPPtELEMETRY ) )        // EMIT THE PENDING PACKETS IF I CAN

                    tellInfoAppInOutFrameS* pPending = (tellInfoAppInOutFrameS*)( ((tin9S&)tinBaseP).pbPendingInOutFramePackets + sizeof( countT ) ) ;
                    countT&                 cPending =                *(countT*)  ((tin9S&)tinBaseP).pbPendingInOutFramePackets                      ;
                {
                if( ((tin9S&)tinBaseP).pbPendingInOutFramePackets )
                ZE( boolT , bDone ) ;

                THREADmODE5oN( flTHREADmODE5_INoUTfRAMEdOnOTcOLLECTaPPtELEMETRY | flTHREADmODE5_DOnOTfLUSHpENDINGaPPtELEMETRY ) ;
            {
            THREADmODE5oFF( flTHREADmODE5_INoUTfRAMEfORCEcOLLECTaPPtELEMETRY )

            say.dTimeDt      = say.cTime4      - say.cTime3      ;
            say.dCpuCyclesDt = say.cCpuCycles4 - say.cCpuCycles3 ;

            }
                pDad->auditTime     .dTimeAuditKidDt      += say.cTime4      - say.cTime3      ;
                pDad->auditCpuCycles.dCpuCyclesAuditKidDt += say.cCpuCycles4 - say.cCpuCycles3 ;
            {
            if( pDad )

            QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles4 ) ;
            QueryPerformanceCounter( (LARGE_INTEGER*)&say.cTime4 ) ;
        {
        else
        }
            #endif

                }
                    LOGrAW( "~inOutFrameC: obeying flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY\r\n" ) ; //U:: TO FIND A BUG
                    CONoUTrAW( "~inOutFrameC: obeying flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY\r\n" ) ; //U:: TO FIND A BUG
                {
                if( !( idIn % ( TUCK << 3 ) ) )

                countT idIn = 1 + incv02AM( idInLath ) ;
                static countT idInLath ;

            #if defined( NEVERdEFINED )
        {
        if( F(flagsCt) & flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY )

        ((tin9S&)tinBaseP).monitor.idWhat1 = idWhat1Save ;_

        }
            _MOLE
            ((tin9S&)tinBaseP).monitor.idWhat2 = idWhat2Save ;_
            }
                thirdC::inOutChatterIfIF( tinBaseP ) ;_

                }
                    ((tin9S&)tinBaseP).bSuppressInOutTrace -- ;_
                    }
                        //U::SUSPECTED DEADLOCK: ((etherC*)0)->traceF( tinBaseP , (strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;_

                        }
                            OStEXTA( ostoSay , postTitle ) ;_
                        {
                        if( postTitle )
                        const osTextT* postTitle = processGlobal8S::_processGlobal8I_IF().source.postFileTitleF( tinBaseP , processGlobal8S::_processGlobal8I_IF().source.idFileRankF( tinBaseP , idiFileCt ) ) ;_
                        OStEXTAK( ostoSay , ") --    " ) ;_
                        OStEXTC9( ostoSay , idLineCt ) ;_
                        OStEXTAK( ostoSay , "(" ) ;_
                        OStEXTC(  ostoSay , idiFileCt , 0 ) ;_
                        OStEXT(   ostoSay , TUCK << 2 ) ;_
                    {
                    if( !( ((tin9S&)tinBaseP).bSuppressInOutTrace ++ ) && ((tin9S&)tinBaseP).monitor.idThread != ifcIDtHREADlOW_tmHeartF && ((tin9S&)tinBaseP).monitor.idThread != ifcIDtHREADlOW_break && ((tin9S&)tinBaseP).monitor.idThread != ifcIDtHREADlOW_tmKillSocketF && ((tin9S&)tinBaseP).monitor.idThread != ifcIDtHREADlOW_tmWatchF && ((tin9S&)tinBaseP).monitor.idThread != ifcIDtHREADlOW_tmTimeNowF )
                {
                if( ph && ph->flags & F(flHOMEs_INoUTtRACE) )
                homeS* ph = &homeS::homeIF() ;_

                ((tin9S&)tinBaseP).monitor.idDirty ++ ;_

                ((tin9S&)tinBaseP).pLFstep[ offos2New + 1 ] = idiFileCt ;_
                ((tin9S&)tinBaseP).pLFstep[ offos2New     ] = idLineCt & ~fliSTEP_FLAGmASK | fliSTEP_NESTcHANGE | fliSTEP_NESToUT ;_

                const countT offosNew  =   ((tin9S&)tinBaseP).monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2New = offosNew << 1 ;_
                ((tin9S&)tinBaseP).monitor.cInNest -- ;_
                ((tin9S&)tinBaseP).monitor.idStep ++ ;_

                ((tin9S&)tinBaseP).pFlagsThreadLevelMode[ offon      ] = pFlagsThreadLevelModeSave ;_
                ((tin9S&)tinBaseP).pIdProgressNest[       offon      ] = idProgressNestSave ;_
                ((tin9S&)tinBaseP).pEIPInNest[            offon      ] = eipInNestSave ;_
                ((tin9S&)tinBaseP).pIdInNest[             offonk     ] = 0 ;_
                ((tin9S&)tinBaseP).monitor.pLFnest[       offon2 + 1 ] = idFileNestSave ;_
                ((tin9S&)tinBaseP).monitor.pLFnest[       offon2     ] = idLineNestSave ;_

                }
                    }
                        if( was == - 1 ) incv02AM( ( (countT*)&((tin9S&)tinBaseP).pcExitsWhere[ off ] )[ 1 ] ) ;_                 // THIS IS NOT ATOMIC, BUT THE CORRECT VALUE WILL RESULT EVEN IF RACE (WHICH IS PRACTICALLY BUT NOT THEORETICALLY IMPOSSIBLE) (CODE CAN BE WRITTEN TO "BREAK" THIS ASSUMPTION)
                        countT was = incv02AM( *(countT*)&((tin9S&)tinBaseP).pcExitsWhere[ off ] ) ;_ 
                    {
                    if( off && off < ((tin9S&)tinBaseP).ccExitsWhere )
                    countT off = idFileRankCt ;_

                    //}
                    //    countT foo = 2 ;
                    //{
                    //if( idFileRankCt == 0xe88 )
                {
                IFwHEREiSwATCHING

                if( ((tin9S&)tinBaseP).tally.bTally ) ((tin9S&)tinBaseP).tally.pcExits[ IDFILE ] ++ ;_

                const countT offonk = ( ((tin9S&)tinBaseP).monitor.cInNest + 1 ) & OFFsLOTtINnESTmAX ; // "k" IS FOR "KID"
                const countT offon  =   ((tin9S&)tinBaseP).monitor.cInNest       & OFFsLOTtINnESTmAX ; const countT offon2 = offon << 1 ;_
                const countT offos  =   ((tin9S&)tinBaseP).monitor.idStep        & OFFsLOTtINsTEPmAX ; const countT offos2 = offos << 1 ;_

                ((tin9S&)tinBaseP).monitor.idDirty ++ ;_
            {
            if( F(((tin9S&)tinBaseP).flagsThreadMode2) & flTHREADmODE2_UPDATEtIN && !( ((tin9S&)tinBaseP).monitor.idDirty % 2 ) )

            //}
            //    }
            //        BLAMMO ;_
            //        LOGrAW5( "process global [valueExpectedByInOut,*pcWatchedByInOut]: " , pg1.valueExpectedByInOut , " != " , *pg1.pcWatchedByInOut , "\r\n" ) ;_
            //    {
            //    if( pg1.pcWatchedByInOut && *pg1.pcWatchedByInOut != pg1.valueExpectedByInOut )
            //    processGlobal2S& pg1 = processGlobal2S::_processGlobal2I_IF() ;_
            //{
            //
            //}
            //    BLAMMO ;_
            //    LOGrAW5( "tinBaseP [valueExpectedByInOut,*pcWatchedByInOut]: " , ((tin9S&)tinBaseP).valueExpectedByInOut , " != " , *((tin9S&)tinBaseP).pcWatchedByInOut , "\r\n" ) ;_
            //{
            //if( ((tin9S&)tinBaseP).pcWatchedByInOut && *((tin9S&)tinBaseP).pcWatchedByInOut != ((tin9S&)tinBaseP).valueExpectedByInOut )
        {
        if( F(flagsCt) & flINoUTfRAMEc_REGISTERcALLnEST )

        ((tin9S&)tinBaseP).monitor.idWhat1 = ifcIDwHAT_GOiNoUTdT ;_

//    #endif
//
//        }
//            THREADmODE5rESTORE
//            PUSE.testDropHeadersF( tinBaseP ) ;
//            THREADmODE5oN( flTHREADmODE5_DOnOTtESTdROPhEADERS )
//        {
//        if( ((tin9S&)tinBaseP).pag1->idAdam == ifcIDaDAM_ROOThTTPsERVER && !( F(((tin9S&)tinBaseP).flagsThreadMode5) & flTHREADmODE5_DOnOTtESTdROPhEADERS ) && ((tin9S&)tinBaseP).pPoolUse )
//
//    #if defined( ENABLEdROPnOTES )

        }
            }
                say.dTimeInNet = deltaTimeIn - ( dAuditTimeTotal - auditTime.dTimeAuditKidBetween ) ;

                }
                    BLAMMO ;
                    LOGrAW( ostoSay ) ;
                    CONoUTrAW( ostoSay ) ;
                    OStEXTAK( ostoSay , "\r\n" ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dTimeInNet)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dTimeInNet)[1] , '0' ) ;
                    OStEXTAK( ostoSay , "\r\n dTimeInNet:    " ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dTimeIn)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dTimeIn)[1] , '0' ) ;
                    OStEXTAK( ostoSay , "\r\n    dTimeIn:    " ) ;
                    OStEXTCF( ostoSay , ((countT*)&dAuditTimeTotal)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&dAuditTimeTotal)[1] , '0' ) ;
                    OStEXTAK( ostoSay ,     "~inOutFrameC error: auditTime failure:    dAuditTimeTotal :    " ) ;
                    OStEXT( ostoSay , TUCK ) ;
                {
                if( dAuditTimeTotal != say.dTimeIn )

                ;

                    + auditTime.dTimeAuditKidBook
                    + auditTime.dTimeAuditKidDt
                    + auditTime.dTimeAuditKidIn
                    + auditTime.dTimeAuditKidCt
                      auditTime.dTimeAuditKidBetween

                count04T dAuditTimeTotal =
            {

            }
                say.dCpuCyclesInNet = deltaCpuCyclesIn - ( dAuditCpuCyclesTotal - auditCpuCycles.dCpuCyclesAuditKidBetween ) ;

                }
                    BLAMMO ;
                    LOGrAW( ostoSay ) ;
                    CONoUTrAW( ostoSay ) ;
                    OStEXTAK( ostoSay , "\r\n" ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesInNet)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesInNet)[1] , '0' ) ;
                    OStEXTAK( ostoSay , "\r\n dCpuCyclesInNet:    " ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesIn)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&say.dCpuCyclesIn)[1] , '0' ) ;
                    OStEXTAK( ostoSay , "\r\n    dCpuCyclesIn:    " ) ;
                    OStEXTCF( ostoSay , ((countT*)&dAuditCpuCyclesTotal)[0] , '0' ) ;
                    OStEXTAK( ostoSay , "." ) ;
                    OStEXTCF( ostoSay , ((countT*)&dAuditCpuCyclesTotal)[1] , '0' ) ;
                    OStEXTAK( ostoSay ,     "~inOutFrameC error: auditCpuCycles failure:    dAuditCpuCyclesTotal :    " ) ;
                    OStEXT( ostoSay , TUCK ) ;
                {
                if( dAuditCpuCyclesTotal != say.dCpuCyclesIn )

                ;

                    + auditCpuCycles.dCpuCyclesAuditKidBook
                    + auditCpuCycles.dCpuCyclesAuditKidDt
                    + auditCpuCycles.dCpuCyclesAuditKidIn
                    + auditCpuCycles.dCpuCyclesAuditKidCt
                      auditCpuCycles.dCpuCyclesAuditKidBetween

                count04T dAuditCpuCyclesTotal =
            {

            say.dTimeIn      = say.cTime3      - say.cTime2      ;
            say.dCpuCyclesIn = say.cCpuCycles3 - say.cCpuCycles2 ;

            ;
                : say.cTime3 - ((tin9S&)tinBaseP).cTime2Or5Lath
                ? deltaTimeIn
            auditTime.dTimeAuditKidBetween += ((tin9S&)tinBaseP).cTime2Or5Lath == say.cTime2

            ;
                : say.cCpuCycles3 - ((tin9S&)tinBaseP).cCpuCycles2Or5Lath
                ? deltaCpuCyclesIn
            auditCpuCycles.dCpuCyclesAuditKidBetween += ((tin9S&)tinBaseP).cCpuCycles2Or5Lath == say.cCpuCycles2

            }
                pDad->auditTime     .dTimeAuditKidIn      += deltaTimeIn      ;
                pDad->auditCpuCycles.dCpuCyclesAuditKidIn += deltaCpuCyclesIn ;
            {
            if( pDad )

            count04T deltaTimeIn      = say.cTime3      - say.cTime2      ;
            count04T deltaCpuCyclesIn = say.cCpuCycles3 - say.cCpuCycles2 ;

            QueryThreadCycleTime( (HANDLE)(-2) ,  (ULONG64*)&say.cCpuCycles3 ) ;
            QueryPerformanceCounter( (LARGE_INTEGER*)&say.cTime3 ) ;
        {
        if( !( F(flagsCt) & flINoUTfRAMEc_DOnOTcOLLECTaPPtELEMETRY ) )

        //if( processGlobal1I.pHome && ((tin9S&)tinBaseP).pc Utility[ 0 ] ) { *(countT*)0 = 0x1234 ; }

//}
//    ((tin9S&)tinBaseP).pc Utility[ 1 ] -- ;
//    }
//        TRACEcALLnEST( "ifcTHREADpRIORITY_LAZIEST 3" ) ;
//        LOGcALLnEST(   "ifcTHREADpRIORITY_LAZIEST 3" ) ;
//    {
//    if( ifcTHREADpRIORITY_LAZIEST == thirdC::dosPriorityIF( tinBaseP ) )
//    ((tin9S&)tinBaseP).pc Utility[ 1 ] -- ;
//{
//if( ((tin9S&)tinBaseP).pc Utility[ 0 ] )
//U:: TO FIND A BUG

        tin0S& tinBaseP = tinBaseCt ; _MILE  _
    {
    if( !( F(thirdC::third_flagsModeProcess2I_IF()) & flMODEpROCESS2_SUPPRESSiNoUTfRAMEc ) )
{
/*1*/inOutFrameC::~inOutFrameC( voidT )/*1*/

boolT bDebugIsSet ;

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

