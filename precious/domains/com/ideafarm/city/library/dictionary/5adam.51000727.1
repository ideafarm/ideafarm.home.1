
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

}
    while( ~hFindDir && !ether && !POOP ) ;
    }
        DEL( pInfoDir ) ;
    
        }
            }
                //if( !stCurrentNameValueDataFileName ) break ; //U:: REMOVE IN PRODUCTION

                }
                    }


                        }
                            etThread.delF( tinBaseP , psttSourceShortRoot ) ;
                            etThread.delF( tinBaseP , psttTargetShortRoot ) ;
                            etThread.delF( tinBaseP , pstt1Doomed ) ;

                            }
                                etThread.diskFileOrDirDeleteF( tinBaseP , psttc1 ) ;
                                etThread.traceF( tinBaseP , T("                                           doomed: ")+T(psttc1) ) ;
                            {
                            FORsTRINGSiN1( pstt1Doomed )
                            etThread.diskFindFileOrDirOldF( tinBaseP , pstt1Doomed , tPathArchive+tYearSlash+T(psttSourceShortRoot)+tStar ) ; ___( pstt1Doomed ) ;
                            ZE( strokeS* , pstt1Doomed ) ;

                            etThread.traceF( tinBaseP , T("                                      doomed root: ")+tPathArchive+tYearSlash+T(psttSourceShortRoot) ) ;

                            etThread.diskMoveFileOrDirF( tinBaseP , tPathArchive+tYearSlash+tNewName , tPathArchive+tYearSlash+T(psttzDataThumb) ) ;

                            etThread.traceF( tinBaseP , T("                                         new name: ")+tPathArchive+tYearSlash+tNewName ) ;
                            etThread.traceF( tinBaseP , T("                                         old name: ")+tPathArchive+tYearSlash+T(psttzDataThumb) ) ;

                            TN( tNewName , psttTargetShortRoot ) ; tNewName += tMetaDotThumbDot0600xDotJpg ;

                            etThread.strSubstringF( tinBaseP , psttSourceShortRoot , idf4 , idHit4 , psttzDataThumb ) ; ___( psttSourceShortRoot ) ;
                            countT idf4 = 1 ;
                            ZE( strokeS* , psttSourceShortRoot ) ;

                            etThread.strSubstringF( tinBaseP , psttTargetShortRoot , idf3 , idHit3 , psttzDataFull ) ; ___( psttTargetShortRoot ) ;
                            countT idf3 = 1 ;
                            ZE( strokeS* , psttTargetShortRoot ) ;
                        {
                        if( idHit3 && idHit4 )
                        countT idHit4 = etThread.strIdF( tinBaseP , tDotDataDot , psttzDataThumb ) ;
                        countT idHit3 = etThread.strIdF( tinBaseP , tDotDataDot , psttzDataFull ) ;

                        etThread.traceF( tinBaseP , T("                     full: ")+T(psttzDataFull) ) ;
                        etThread.traceF( tinBaseP , T("                    thumb: ")+T(psttzDataThumb) ) ;
                    {
                    if( psttzDataThumb && psttzDataFull )

                    }
                        while( ~hWalk ) ;
                        }
                            }
                                }
                                    }
                                        break ;
                                        ( b600 ? psttzDataThumb : psttzDataFull ) = psttc1 ;
                                        etThread.traceF( tinBaseP , T("                dataname: ")+T(psttc1) ) ;
                                    {
                                    case 3 :
                                    }
                                        break ;
                                        b600 = !!etThread.strIdF( tinBaseP , tDot0600xDotJpg , psttc1 ) ;
                                        etThread.traceF( tinBaseP , T("        currentnamevalue: ")+T(psttc1) ) ;
                                    {
                                    case 2 :
                                {
                                switch( ++ ids )
                            {
                            FORsTRINGSiN1( pstt1Set )
                            ZE( boolT , b600 ) ;
                            ZE( countT , ids ) ;

                            strokeS* pstt1Set = (strokeS*)swsSets.downF( tinBaseP , hWalk ) ;
                            etThread.traceF( tinBaseP , T("    set") ) ;
                        {
                        do
                        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                    {
                    if( swsSets > 1 )
                    ZE( strokeS* , psttzDataThumb ) ;
                    ZE( strokeS* , psttzDataFull  ) ;
                    etThread.traceF( tinBaseP , T("sets [swsSets]:")+TF2(swsSets,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                    psttzLever = (strokeS*)swsSets.leverF( tinBaseP , idf ) ;
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = swsSets.cFlavorsF( tinBaseP ) ;

                }
                    swsSets << pstt1Set ;
                    etThread.traceF( tinBaseP , T("lever: ")+T(psttzLever) ) ;
                    psttzLever = pstt1Set + CSpREFIX ;
                
                    stCurrentNameValueDataFileName >> pstt1Set ;
                    ZE( strokeS* , pstt1Set ) ;
                {
                while( stCurrentNameValueDataFileName )
                switchStackC swsSets( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , psttzLever , flSTACKc_null , ifcSTACKtYPE_PTR_strokeS ) ;
                ZE( strokeS* , psttzLever ) ;

                while( ~hFindFile && !ether && !POOP ) ;
                }
                    DEL( pInfoFile ) ;
    
                    }
                        }
                            }
                                etThread.delF( tinBaseP , psttShortest ) ;
                                stCurrentNameValueDataFileName.sinkF( tinBaseP , countTC() , pstt1Set , flSTACKsINK_null , 0 , 1 ) ;
                                etThread.strFuseSeparateF( tinBaseP , pstt1Set , tShort            ) ;
                                etThread.strFuseSeparateF( tinBaseP , pstt1Set , tCurrentNameValue ) ;
                                etThread.strFuseSeparateF( tinBaseP , pstt1Set , psttShortest      , 0 , 0 , 0 , 0 , 2 * CSpREFIX + tCurrentNameValue.csF( tinBaseP ) + tShort.csF( tinBaseP ) ) ; ___( pstt1Set ) ;
                                ZE( strokeS* , pstt1Set ) ;

                                etThread.strSubstringF( tinBaseP , psttShortest , idf2 , idHit2 , tCurrentNameValue ) ; ___( psttShortest ) ;
                                countT idf2 = 1 ;
                                ZE( strokeS* , psttShortest ) ;

                                if( !idHit2 ) { BLAMMO ; }
                                if( !idHit2 ) idHit2 = etThread.strIdF( tinBaseP , tDotJpg         , tCurrentNameValue ) ;
                                countT        idHit2 = etThread.strIdF( tinBaseP , tDot0600xDotJpg , tCurrentNameValue ) ;

    
                                }
                                    etThread.delF( tinBaseP , postCurrentNameValue ) ;
                                    tCurrentNameValue = T(postCurrentNameValue) ;
                                    etThread.boxGetShadowF( tinBaseP , postCurrentNameValue , costCurrentNameValue , tFileMetaNameLong ) ; ___( postCurrentNameValue ) ;
                                    ZE( countT   , costCurrentNameValue ) ;
                                    ZE( osTextT* , postCurrentNameValue ) ;
                                {
                                else
                                if( !etThread.diskFileExistsF( tinBaseP , tFileMetaNameLong ) ) etThread.traceF( tinBaseP , T("error / file does not exist: ")+tFileMetaNameLong ) ;
                                TN( tCurrentNameValue , "" ) ;
                                TN( tFileMetaNameLong , "" ) ; tFileMetaNameLong = tPathArchive+tYearSlash+tShortMetaName ;
    
                                etThread.delF( tinBaseP , psttShorter ) ;
                                TN( tLongMetaDotStar , "" ) ; tLongMetaDotStar = tPathArchive+tYearSlash+T(psttShorter)+tMetaDotStar ;
                                TN( tShortMetaName , "" ) ; tShortMetaName = T(psttShorter)+tMetaDotCurrentName ;
    
                                etThread.strSubstringF( tinBaseP , psttShorter , idf , idHit , tShort ) ; ___( psttShorter ) ;
                                countT idf = 1 ;
                                ZE( strokeS* , psttShorter ) ;
                            {
                            if( idHit )
                            countT idHit = etThread.strIdF( tinBaseP , tDotDataDot , tShort ) ;
    
                            }
                                etThread.delF( tinBaseP , psttShort ) ;
                                tShort = T(psttShort) ;
                                etThread.delF( tinBaseP , psttnu ) ;
                                etThread.strBisectF( tinBaseP , psttnu , psttShort , pInfoFile->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            TN( tShort , "" ) ;
                        {
                        if( !bDir )
    
                        const boolT bDir = pInfoFile->psttIfoName[ CSpREFIX - 1 + pInfoFile->psttIfoName->idAdam ].idAdam == '/' ;
                        TN( tIfoName , pInfoFile->psttIfoName ) ;
                    {
                    else
                    }
                        break ;
                        DEL( pInfoFile ) ;
                    {
                    if( !pInfoFile || !pInfoFile->psttIfoName )
    
                    etThread.diskFindFileOrDirOldF( tinBaseP , pInfoFile , hFindFile , tPathArchive+tYearSlash+t7DotStarDotDataDotJpg ) ; ___( pInfoFile ) ;
                    ZE( infoFileS* , pInfoFile ) ;
                {
                do
                handleC hFindFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
                stackC stCurrentNameValueDataFileName( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
    
                etThread.traceF( tinBaseP , tYearSlash ) ;
            {
            if( bDir && etThread.strCompareF( tinBaseP , tDotSlash , tYearSlash ) && etThread.strCompareF( tinBaseP , tDotDotSlash , tYearSlash ) )
    
            }
                etThread.delF( tinBaseP , psttYearSlash ) ;
                tYearSlash = T(psttYearSlash) ;
                etThread.delF( tinBaseP , psttnu ) ;
                etThread.strBisectF( tinBaseP , psttnu , psttYearSlash , pInfoDir->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttYearSlash ) ;
                ZE( strokeS* , psttYearSlash ) ;
                ZE( strokeS* , psttnu ) ;
            {
            TN( tYearSlash , "" ) ;
    
            const boolT bDir = pInfoDir->psttIfoName[ CSpREFIX - 1 + pInfoDir->psttIfoName->idAdam ].idAdam == '/' ;
            TN( tIfoName , pInfoDir->psttIfoName ) ;
        {
        else
        }
            break ;
            DEL( pInfoDir ) ;
        {
        if( !pInfoDir || !pInfoDir->psttIfoName )
    
        etThread.diskFindFileOrDirOldF( tinBaseP , pInfoDir , hFindDir , tPathArchive+tStar ) ; ___( pInfoDir ) ;
        ZE( infoFileS* , pInfoDir ) ;
    {
    do
    handleC hFindDir( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    
    TN( tMetaDotThumbDot0600xDotJpg , "meta.thumb.0600x.jpg" ) ;
    TN( tDotJpg , ".jpg" ) ;
    TN( tDot0600xDotJpg , ".0600x.jpg" ) ;
    TN( tDot , "." ) ;
    TN( tDotDotSlash , "../" ) ;
    TN( tDotSlash , "./" ) ;
    TN( tb8 , "        " ) ;
    TN( tb , " " ) ;
    TN( tMetaDotStar , "meta.*" ) ;
    TN( tMetaDotCurrentName , "meta.currentname" ) ;
    TN( tDotDataDot , ".data." ) ;
    TN( tSlash , "/" ) ;
    TN( t7DotStarDotDataDotJpg , "!ideafarm.8.2.00000000.00000001.*.data.jpg" ) ;
    TN( tStar , "*" ) ;
    TN( tPathArchiveLinks , "///d/archive.links/" ) ;
    TN( tPathArchive      , "///d/archive/" ) ;
{

TODO

/*1*/WAKEsHOWtEXT( "was.scratch.2.archived.20180508@1202.tool.file.migrate.0600x.files.to.meta.thumbnails" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
