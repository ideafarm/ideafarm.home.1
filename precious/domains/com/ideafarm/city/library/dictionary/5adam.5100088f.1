
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etThread.traceF( tin0P , T("bye") ) ;
etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    }
        if( bDelete ) etThread.delF( tin0P , *(byteT**)&pbi ) ;
        }
            bHead = 1 ;
            cbi = sizeof( count4S ) ;
            pbi = 0 ;

            }
                //++ s ; ether.osSleepF( tin0P , TICK >> 2 ) ;    // PACE MYSELF SO THAT THE HTTP SERVER PROCESS GETS MORE OF THE CPU (EXPERIMENT TO SEE WHETHER THIS IMPROVES HTTPS RESPONSE TIME)
                //THIS NAPPING IS DISABLED BECAUSE THE BOTTLENECK IS WITH ME; I CAN ONLY HANDLE ABOUT WO NOTICE PER TOCK, AND AT THAT RATE, IT IS EASY FOR THE HTTPS SERVER TO KEEP UP

                writeSoulFileF( tin0P , etThread , (osTextT*)pbi , cbi - 1 , pptFileName ) ;

                //etThread.delF( tin0P , psttnu ) ;
                //etThread.traceF( tin0P , T("[cDone]:    ")+TF3(cDone,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,0xc)+T(psttnu) ) ;
                //etThread.boxPutUniqueF( tin0P , psttnu , tLike , pbi , cbi - 1 ) ; ___( psttnu ) ;
                //ZE( strokeS* , psttnu ) ;
                //DISABLE IN PRODUCTION

                ++ cDone ;
            {
            if( F(flagsNoticeLath) & fliWEBhOOKnOTICE_NEW )

            //*********************************************************************************************************************************************************
            //********                                     ************************************************************************************************************
            //********  EAT JSON BODY TO WRITE soulC FILE  ************************************************************************************************************
            //********                                     ************************************************************************************************************
            //*********************************************************************************************************************************************************
            etThread.traceF( tin0P , T("eat body") ) ;
        {
        else
        }
            }
                cbi = 1 ;
                bSearchForHead = 1 ;
                etThread.traceF( tin0P , T("!exception / bad header, so will search for the next header [flagsFail]:    ")+TF3(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
            {
            else
            }
                bHead           = 0      ;
                cbi             = c4h.c3 ;

                }
                    bksWebHookNotices.flushF( tin0P ) ;
                    c4h.c4 = fliWEBhOOKnOTICE_null ;                        //U:: PERHAPS EDIT CODE TO NOT DO THIS UNTIL AFTER writeSoulFileF HAS RETURNED ; THIS WILL COMPLICATE THE CODE BUT AVOID THE SCENARIO IN WHICH I DIE BEFORE ACTUALLY WRITING THE soulC FILE
                {
                if( F(flagsNoticeLath) & fliWEBhOOKnOTICE_NEW )
                flagsNoticeLath = c4h.c4 ;
            {
            if( !flagsFail )
            pbi = 0 ;

            }
                if( !c4h.c3                                       ) { flagsFail |= 0x00000108 ; }
                if( c4h.c2 - 1                                    ) { flagsFail |= 0x00000104 ; }
                if( getNegAM( c4h.c1 ) - FINGERnEG_WEBhOOKnOTICES ) { flagsFail |= 0x00000102 ; etThread.traceF( tin0P , T("!exception [flagsFail,finger]:    ")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(getNegAM(c4h.c1),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }

                // putNegAM( c4s.c1 , FINGERnEG_WEBhOOKnOTICES ) ;
                // count4S c4s( 0 , 1 , costaBody ) ;
            {
            if( !flagsFail )
            count4S& c4h = *(count4S*)pbi ;

            if( cbi - sizeof( count4S )                           ) { flagsFail |= 0x00000101 ; etThread.traceF( tin0P , T("!exception [flagsFail,cbi]:    ")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
            ZE( flagsT , flagsFail ) ;

            //*********************************************************************************************************************************************************
            //********            *************************************************************************************************************************************
            //********  EAT HEAD  *************************************************************************************************************************************
            //********            *************************************************************************************************************************************
            //*********************************************************************************************************************************************************
            etThread.traceF( tin0P , T("eat head") ) ;
        {
        else if( bHead )
        }
            }
                cbi = 1 ;
                bSearchForHead = 1 ;
                etThread.traceF( tin0P , T("!exception / not a header, so will continue searching [flagsFail]:    ")+TF3(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE,8) ) ;
            {
            else
            }
                bHead = 0 ;
                cbi = c4h.c3 ;
                etThread.traceF( tin0P , T("header found!") ) ;
            {
            if( !flagsFail )
            pbi = 0 ;

            }
                if( !c4h.c4                                       ) { flagsFail |= 0x00000020 ; }
                if( !c4h.c3                                       ) { flagsFail |= 0x00000010 ; }
                if( c4h.c2 - 1                                    ) { flagsFail |= 0x00000008 ; }
                if( getNegAM( c4h.c1 ) - FINGERnEG_WEBhOOKnOTICES ) { flagsFail |= 0x00000004 ; etThread.traceF( tin0P , T("!exception [flagsFail,finger]:    ")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(getNegAM(c4h.c1),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }

                // putNegAM( c4s.c1 , FINGERnEG_WEBhOOKnOTICES ) ;
                // count4S c4s( 0 , 1 , costaBody ) ;
            {
            if( !flagsFail )

                            pc4HeadMaybe = 0 ;
            count4S& c4h = *pc4HeadMaybe ;

            if( pbi - (byteT*)pc4HeadMaybe - 1                    ) { flagsFail |= 0x00000002 ; etThread.traceF( tin0P , T("!exception [flagsFail,pbi-(byteT*)pc4HeadMaybe-1]:    ")+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(pbi-(byteT*)pc4HeadMaybe-1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }       //IF WHAT I GOT IS NOT IMMEDIATELY AFTER THE FINGERPRINT (SHOULD BE IMPOSSIBLE)
            if( cbi - sizeof( count4S )    + 1                    ) { flagsFail |= 0x00000001 ; etThread.traceF( tin0P , T("!exception [flagsFail,cbi]:    "                       )+TF2(flagsFail,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbi                       ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }       //IF DIDN'T GET THE REST OF THE HEAD
            ZE( flagsT , flagsFail ) ;

            //*********************************************************************************************************************************************************
            //********                                   **************************************************************************************************************
            //********  INSPECT BYTES AFTER FINGERPRINT  **************************************************************************************************************
            //********                                   **************************************************************************************************************
            //*********************************************************************************************************************************************************
            etThread.traceF( tin0P , T("searching for head after fingerprint") ) ;
        {
        else if( pc4HeadMaybe )
        }
            pbi = 0 ;
            }
                cbi = sizeof( count4S ) - 1 ;
                pc4HeadMaybe = (count4S*)pbi ;
                bSearchForHead = 0 ;
            {
            if( getNegAM( c4h.c1 ) == FINGERnEG_WEBhOOKnOTICES )                                        //A:ASSUME: booksC PROVIDES HEADROOM SO THAT A countT OBJECT CAN ALWAYS BE READ, EVEN AT THE END OF A bookC INSTANCE
            count4S& c4h = *(count4S*)pbi ;

            //*********************************************************************************************************************************************************
            //********                       **************************************************************************************************************************
            //********  INSPECT FINGERPRINT  **************************************************************************************************************************
            //********                       **************************************************************************************************************************
            //*********************************************************************************************************************************************************
            etThread.traceF( tin0P , T("searching for head fingerprint") ) ;
        {
        if( bSearchForHead )

        }
            continue ;
            cbi = cbiSave ;
            ++ s ; ether.osSleepF( tin0P , TOCK ) ;
            etThread.traceF( tin0P , T("napping") ) ;
        {
        if( !pbi || !cbi )

        //etThread.traceF( tin0P , T("bksWebHookNotices.readF returned [pbi,cbi]:    ")+TF2((countT)pbi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        //((tin123S&)tin0P).pcUtility[ 0 ] -- ;
        boolT bDelete = bksWebHookNotices.readF( tin0P , pbi , cbi , hRead , flBOOKScrEAD_null ) ;
        //((tin123S&)tin0P).pcUtility[ 0 ] ++ ;
        const countT cbiSave = cbi ;

        }
            BLAMMOiD( 0x11111111 ) ;
            etThread.traceF( tin0P , T("bksWebHookNotices is impotent [idPoop]:    ")+TF2(idPoop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        {
        if( idPoop )
        const countT idPoop = (const poopC&)bksWebHookNotices ;
    {
    while( !ether )
    ZE( flagsT , flagsNoticeLath ) ;
    ZE( countT , cDone           ) ;

    textC* pptFileName[] = { &tSharedFolderPrefixPrecious , &tSharedFolderPrefixSandbox , &tSharedFileEventSubCreated , &tSharedFileEventCheckoutCompleted , &tSharedFileEventSubCreatedUpdated , &tb4 , &tSlash } ;

    TN( tSharedFileEventSubCreatedUpdated , "sub.updated"        ".soulC" ) ;
    TN( tSharedFileEventCheckoutCompleted , "checkout.completed" ".soulC" ) ;
    TN( tSharedFileEventSubCreated        , "sub.created"        ".soulC" ) ;
    TN( tSharedFolderPrefixSandbox        , ""                            ) ; tSharedFolderPrefixSandbox  = T("///z/ideafarm.shared/sandbox/" )+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/") ;
    TN( tSharedFolderPrefixPrecious       , ""                            ) ; tSharedFolderPrefixPrecious = T("///z/ideafarm.shared/precious/")+TfORsTRING(processGlobal1S::_processGlobal1I_IF().idAdamRoot)+T("/") ;

    etThread.traceF( tin0P , T("reading begun") ) ;
    TN( tLike , "///ideafarm/tmp/notice.@1@.txt" ) ;
    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    ZE( count4S* , pc4HeadMaybe   ) ;
    ZE( boolT    , bSearchForHead ) ;
    boolT bHead = 1 ;
    handleC hRead( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKS ) ;
    booksC bksWebHookNotices( tin0P , TAG( TAGiDnULL ) , "webhook.notices" , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ;

    countT             cbi = sizeof( count4S ) ;
    ZE( const byteT* , pbi ) ;

    TN( tSlash , "/"    ) ;
    TN( tb4    , "    " ) ;
{

//*********************************************************************************************************************************************************
//********                                     ************************************************************************************************************
//********  EAT INCOMING STRIPE EVENT NOTICES  ************************************************************************************************************
//********                                     ************************************************************************************************************
//*********************************************************************************************************************************************************

etThread.osThreadSwitchingDesireF( tin0P , ifcTHREADpRIORITY_NORMAL ) ;
thirdC::dosPriorityProcessIF(      tin0P , ifcTHREADpRIORITY_NORMAL ) ;

TODO

}
    etherP.traceF( tin0P , T("writeSoulFileF / ---- ") ) ;

    }
        DEL( pSwPathValue ) ;

        }
            }
                etherP.boxPutF( tin0P , tLong , WS( sOut ) ) ;

                //etherP.traceF( tin0P , T("[tLong]:    ")+tLong , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                TN( tLong , "" ) ; tLong = tSharedFolderUse+tLiveSlash+T("sub.created/")+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+T("/new.")+tdInvoice+tSlashP+tSharedFileEventCheckoutCompletedP ;

                textC& tSharedFolderUse = bLive ? tSharedFolderPrefixPreciousP : tSharedFolderPrefixSandboxP ;
                TN( tLiveSlash    , bLive ?  "live/" :  "test/" ) ;
                boolT bLive = !etherP.strCompareF( tin0P , tValueLive , T("true") ) ;

                }
                    sOut << (strokeS*)tValueCurrencyConversion ;
                    sOut << (strokeS*)tValueCurrency           ;
                    sOut << (strokeS*)tValueAmountDiscount     ;
                    sOut << (strokeS*)tValueIdSubscription     ;
                    sOut << (strokeS*)tValueMode               ;
                    sOut << (strokeS*)tValueName               ;
                    sOut << (strokeS*)tValueEmail              ;
                    sOut << (strokeS*)tValuePostalCode         ;
                    sOut << (strokeS*)tValueCountry            ;
                    sOut << (strokeS*)tValueHawker             ;
                    sOut << (strokeS*)tValueAge                ;
                    sOut << (strokeS*)tValueAmountTotal        ;
                    sOut << (strokeS*)tValueAmountSubtotal     ;
                    sOut << (strokeS*)tValueApiVersion         ;
                    sOut << (strokeS*)tValueIdProduct          ;
                    sOut << (strokeS*)tValueInvoice            ;
                    sOut << (strokeS*)tValueStripeNoticeType   ;
                    sOut << (strokeS*)tValueLive               ;
                    // VERSION 1

                    sOut << (strokeS*)tVersion                       ;
                    sOut << (strokeS*)tEvent                         ;
                {
                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                TN( tVersion   , "1" ) ;
                TN( tEvent , "stripe.subscription.new.paid" ) ;
            {

            }
                //etherP.traceF( tin0P , T("[hashInvoice,modulo]:    ")+TF4(hashInvoice,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+tb4P+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20) ) ;

                hashInvoice = hashF( tdInvoice , tdInvoice.csF( tin0P ) , 0 ) ;

                etherP.delF( tin0P , psttdInvoice ) ;
                //etherP.traceF( tin0P , T("[dInvoice]:     ")+tdInvoice ) ;
                tdInvoice = T(psttdInvoice) ;
                etherP.strDumpIF( tin0P , psttdInvoice , tValueInvoice , tValueInvoice.csF( tin0P ) , flSTRdUMP_5bITS ) ; ___( psttdInvoice ) ;
                ZE( strokeS* , psttdInvoice ) ;
            {
            ZE( countT    , hashInvoice ) ;
            TN( tdInvoice , "" ) ;

            //etherP.traceF( tin0P , T("[Invoice]:    ")+tValueInvoice ) ;
            }
                }
                    }
                        etherP.delF( tin0P , psttValue ) ;
                
                        }
                            }
                                //etherP.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF , ifcIDtRACEdIVERT_f ) ;

                                etherP.delF( tin0P , psttt ) ;
                                *pptValue[ offe ] = T(psttt) ;
                                etherP.strTrimF( tin0P , psttt , psttValue , 0 , 0 , strokeS() ) ; ___( psttt ) ;
                                ZE( strokeS* , psttt ) ;
                            {
                            if( !etherP.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                        {
                        for( countT offe = 0 ; offe < cKeys ; offe ++ )
                
                        if( cKeys - cValues ) { BLAMMO ; }
                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                        countT cKeys  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                
                        //etherP.trace F( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_d*/ ) ;
                        //etherP.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)       , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_d*/ ) ;
                
                        strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                
                        _IO_
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                {
                if( !POOP )
            
                ;
                }
                    &tPathCurrencyConversion ,
                    &tPathCurrency           ,
                    &tPathAmountDiscount     ,
                    &tPathIdSubscription     ,
                    &tPathMode               ,
                    &tPathName               ,
                    &tPathEmail              ,
                    &tPathPostalCode         ,
                    &tPathCountry            ,
                    &tPathHawker             ,
                    &tPathAge                ,
                    &tPathAmountTotal        ,
                    &tPathAmountSubtotal     ,
                    &tPathApiVersion         ,
                    &tPathIdProduct          ,
                    &tPathInvoice            ,
                    &tPathStripeNoticeType   ,
                    &tPathLive               ,
                {
                textC* pptPath[] =


                TN( tPathCurrencyConversion , "\"data\"/\"object\"/\"currency_conversion\"/"                               ) ;
                TN( tPathCurrency           , "\"data\"/\"object\"/\"currency\"/"                                          ) ;
                TN( tPathAmountDiscount     , "\"data\"/\"object\"/\"total_details\"/\"amount_discount\"/"                 ) ;
                TN( tPathIdSubscription     , "\"data\"/\"object\"/\"subscription\"/"                                      ) ;
                TN( tPathMode               , "\"data\"/\"object\"/\"mode\"/"                                              ) ;
                TN( tPathName               , "\"data\"/\"object\"/\"customer_details\"/\"name\"/"                         ) ;
                TN( tPathEmail              , "\"data\"/\"object\"/\"customer_details\"/\"email\"/"                        ) ;
                TN( tPathPostalCode         , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"postal_code\"/"      ) ;
                TN( tPathCountry            , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"country\"/"          ) ;
                TN( tPathHawker             , "\"data\"/\"object\"/\"custom_fields\"/item.00000002/\"text\"/\"value\"/"    ) ;
                TN( tPathAge                , "\"data\"/\"object\"/\"custom_fields\"/item.00000001/\"numeric\"/\"value\"/" ) ;
                TN( tPathAmountTotal        , "\"data\"/\"object\"/\"amount_total\"/"                                      ) ;
                TN( tPathAmountSubtotal     , "\"data\"/\"object\"/\"amount_subtotal\"/"                                   ) ;
                TN( tPathApiVersion         , "\"api_version\"/"                                                           ) ;
                TN( tPathIdProduct          , "\"data\"/\"object\"/\"plan\"/\"product\"/"                                  ) ;
                TN( tPathInvoice            , "\"data\"/\"object\"/\"invoice\"/"                                           ) ;
                TN( tPathStripeNoticeType   , "\"type\"/"                                                                  ) ;
                TN( tPathLive               , "\"livemode\"/"                                                              ) ;

                ;
                }
                    &tValueCurrencyConversion ,
                    &tValueCurrency           ,
                    &tValueAmountDiscount     ,
                    &tValueIdSubscription     ,
                    &tValueMode               ,
                    &tValueName               ,
                    &tValueEmail              ,
                    &tValuePostalCode         ,
                    &tValueCountry            ,
                    &tValueHawker             ,
                    &tValueAge                ,
                    &tValueAmountTotal        ,
                    &tValueAmountSubtotal     ,
                    &tValueApiVersion         ,
                    &tValueIdProduct          ,
                    &tValueInvoice            ,
                    &tValueStripeNoticeType   ,
                    &tValueLive               ,
                {
                textC* pptValue[] =
            
                __Z( pSwPathValue ) ;
                etherP.strParseJsonF( tin0P , pSwPathValue , psttPath , postP , flSTACKc_null ) ;
                ZE( switchC* , pSwPathValue ) ;
                ZE( strokeS* , psttPath     ) ;
            {
            TN( tValueCurrencyConversion , "" ) ;
            TN( tValueCurrency           , "" ) ;
            TN( tValueAmountDiscount     , "" ) ;
            TN( tValueIdSubscription     , "" ) ;
            TN( tValueMode               , "" ) ;
            TN( tValueName               , "" ) ;
            TN( tValueEmail              , "" ) ;
            TN( tValuePostalCode         , "" ) ;
            TN( tValueCountry            , "" ) ;
            TN( tValueHawker             , "" ) ;
            TN( tValueAge                , "" ) ;
            TN( tValueAmountTotal        , "" ) ;
            TN( tValueAmountSubtotal     , "" ) ;
            TN( tValueApiVersion         , "" ) ;
            TN( tValueIdProduct          , "" ) ;
            TN( tValueInvoice            , "" ) ;
            TN( tValueStripeNoticeType   , "" ) ;
            TN( tValueLive               , "" ) ;
            etherP.traceF( tin0P , T("writeSoulFileF / checkout completed") ) ;
            _IO_                                                                                                                                                // WRITE soulC FILE CONTAINING SOME NEW SUBSCRIPTION FIELDS

            //*********************************************************************************************************************************************************
            //********                      ***************************************************************************************************************************
            //********  CHECKOUT COMPLETED  ***************************************************************************************************************************
            //********                      ***************************************************************************************************************************
            //*********************************************************************************************************************************************************
        {
        else if( !etherP.strCompareF( tin0P , tValueStripeNoticeType , tValueStripeNoticeTypeCheckoutCompleted ) )                                          // ELSE IF NOTICE TYPE IS "CHECKOUT COMPLETED"
        }
            }
                etherP.boxPutF( tin0P , tLong , WS( sOut ) ) ;

                //etherP.traceF( tin0P , T("[tLong]:    ")+tLong , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                TN( tLong , "" ) ; tLong = tSharedFolderUse+tLiveSlash+T("sub.created/")+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+T("/new.")+tdInvoice+tSlashP+tSharedFileEventSubCreatedP ;

                textC& tSharedFolderUse = bLive ? tSharedFolderPrefixPreciousP : tSharedFolderPrefixSandboxP ;
                TN( tLiveSlash    , bLive ?  "live/" :  "test/" ) ;
                boolT bLive = !etherP.strCompareF( tin0P , tValueLive , T("true") ) ;

                }
                    sOut << (strokeS*)tValueAmountDiscount   ;
                    sOut << (strokeS*)tValueIdSubscription   ;
                    sOut << (strokeS*)tValueMode             ;
                    sOut << (strokeS*)tValueName             ;
                    sOut << (strokeS*)tValueEmail            ;
                    sOut << (strokeS*)tValuePostalCode       ;
                    sOut << (strokeS*)tValueCountry          ;
                    sOut << (strokeS*)tValueHawker           ;
                    sOut << (strokeS*)tValueAge              ;
                    sOut << (strokeS*)tValueAmountTotal      ;
                    sOut << (strokeS*)tValueAmountSubtotal   ;
                    sOut << (strokeS*)tValueApiVersion       ;
                    sOut << (strokeS*)tValueIdProduct        ;
                    sOut << (strokeS*)tValueStatus           ;
                    sOut << (strokeS*)tValueLatestInvoice    ;
                    sOut << (strokeS*)tValueStripeNoticeType ;
                    sOut << (strokeS*)tValueLive             ;
                    // VERSION 1

                    sOut << (strokeS*)tVersion                       ;
                    sOut << (strokeS*)tEvent                         ;
                {
                soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                TN( tVersion   , "1" ) ;
                TN( tEvent , "stripe.subscription.new.created" ) ;
            {

            }
                //etherP.traceF( tin0P , T("[hashInvoice,modulo]:    ")+TF4(hashInvoice,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+tb4P+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20) ) ;

                hashInvoice = hashF( tdInvoice , tdInvoice.csF( tin0P ) , 0 ) ;

                etherP.delF( tin0P , psttdInvoice ) ;
                //etherP.traceF( tin0P , T("[dInvoice]:     ")+tdInvoice ) ;
                tdInvoice = T(psttdInvoice) ;
                etherP.strDumpIF( tin0P , psttdInvoice , tValueLatestInvoice , tValueLatestInvoice.csF( tin0P ) , flSTRdUMP_5bITS ) ; ___( psttdInvoice ) ;
                ZE( strokeS* , psttdInvoice ) ;
            {
            ZE( countT    , hashInvoice ) ;
            TN( tdInvoice , "" ) ;

            //etherP.traceF( tin0P , T("[LatestInvoice]:    ")+tValueLatestInvoice ) ;
            }
                }
                    }
                        etherP.delF( tin0P , psttValue ) ;
                
                        }
                            }
                                //etherP.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF , ifcIDtRACEdIVERT_f ) ;

                                etherP.delF( tin0P , psttt ) ;
                                *pptValue[ offe ] = T(psttt) ;
                                etherP.strTrimF( tin0P , psttt , psttValue , 0 , 0 , strokeS() ) ; ___( psttt ) ;
                                ZE( strokeS* , psttt ) ;
                            {
                            if( !etherP.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                        {
                        for( countT offe = 0 ; offe < cKeys ; offe ++ )
                
                        if( cKeys - cValues ) { BLAMMO ; }
                        countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                        countT cKeys  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                
                        //etherP.trace F( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_e*/ ) ;
                        //etherP.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)       , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_e*/ ) ;
                
                        strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                        psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                
                        _IO_
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                {
                if( !POOP )
            
                ;
                }
                    &tPathAmountDiscount   ,
                    &tPathIdSubscription   ,
                    &tPathMode             ,
                    &tPathName             ,
                    &tPathEmail            ,
                    &tPathPostalCode       ,
                    &tPathCountry          ,
                    &tPathHawker           ,
                    &tPathAge              ,
                    &tPathAmountTotal      ,
                    &tPathAmountSubtotal   ,
                    &tPathApiVersion       ,
                    &tPathIdProduct        ,
                    &tPathStatus           ,
                    &tPathLatestInvoice    ,
                    &tPathStripeNoticeType ,
                    &tPathLive             ,
                {
                textC* pptPath[] =
                
                TN( tPathAmountDiscount   , "\"data\"/\"object\"/\"total_details\"/\"amount_discount\"/"                 ) ;
                TN( tPathIdSubscription   , "\"data\"/\"object\"/\"subscription\"/"                                      ) ;
                TN( tPathMode             , "\"data\"/\"object\"/\"mode\"/"                                              ) ;
                TN( tPathName             , "\"data\"/\"object\"/\"customer_details\"/\"name\"/"                         ) ;
                TN( tPathEmail            , "\"data\"/\"object\"/\"customer_details\"/\"email\"/"                        ) ;
                TN( tPathPostalCode       , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"postal_code\"/"      ) ;
                TN( tPathCountry          , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"country\"/"          ) ;
                TN( tPathHawker           , "\"data\"/\"object\"/\"custom_fields\"/item.00000002/\"text\"/\"value\"/"    ) ;
                TN( tPathAge              , "\"data\"/\"object\"/\"custom_fields\"/item.00000001/\"numeric\"/\"value\"/" ) ;
                TN( tPathAmountTotal      , "\"data\"/\"object\"/\"amount_total\"/"                                      ) ;
                TN( tPathAmountSubtotal   , "\"data\"/\"object\"/\"amount_subtotal\"/"                                   ) ;
                TN( tPathApiVersion       , "\"api_version\"/"                                                           ) ;
                TN( tPathIdProduct        , "\"data\"/\"object\"/\"plan\"/\"product\"/"                                  ) ;

                TN( tPathStatus           , "\"data\"/\"object\"/\"status\"/"                                            ) ;
                TN( tPathLatestInvoice    , "\"data\"/\"object\"/\"latest_invoice\"/"                                    ) ;
                TN( tPathStripeNoticeType , "\"type\"/"                                                                  ) ;
                TN( tPathLive             , "\"livemode\"/"                                                              ) ;

                ;
                }
                    &tValueAmountDiscount   ,
                    &tValueIdSubscription   ,
                    &tValueMode             ,
                    &tValueName             ,
                    &tValueEmail            ,
                    &tValuePostalCode       ,
                    &tValueCountry          ,
                    &tValueHawker           ,
                    &tValueAge              ,
                    &tValueAmountTotal      ,
                    &tValueAmountSubtotal   ,
                    &tValueApiVersion       ,
                    &tValueIdProduct        ,
                    &tValueStatus           ,
                    &tValueLatestInvoice    ,
                    &tValueStripeNoticeType ,
                    &tValueLive             ,
                {
                textC* pptValue[] =
            
                __Z( pSwPathValue ) ;
                etherP.strParseJsonF( tin0P , pSwPathValue , psttPath , postP , flSTACKc_null ) ;
                ZE( switchC* , pSwPathValue ) ;
                ZE( strokeS* , psttPath     ) ;
            {
            TN( tValueAmountDiscount   , "" ) ;
            TN( tValueIdSubscription   , "" ) ;
            TN( tValueMode             , "" ) ;
            TN( tValueName             , "" ) ;
            TN( tValueEmail            , "" ) ;
            TN( tValuePostalCode       , "" ) ;
            TN( tValueCountry          , "" ) ;
            TN( tValueHawker           , "" ) ;
            TN( tValueAge              , "" ) ;
            TN( tValueAmountTotal      , "" ) ;
            TN( tValueAmountSubtotal   , "" ) ;
            TN( tValueApiVersion       , "" ) ;
            TN( tValueIdProduct        , "" ) ;
            TN( tValueStatus           , "" ) ;
            TN( tValueLatestInvoice    , "" ) ;
            TN( tValueStripeNoticeType , "" ) ;
            TN( tValueLive             , "" ) ;
            etherP.traceF( tin0P , T("writeSoulFileF / sub created") ) ;
            _IO_                                                                                                                                                // WRITE soulC FILE CONTAINING SOME NEW SUBSCRIPTION FIELDS

            //*********************************************************************************************************************************************************
            //********                            *********************************************************************************************************************
            //********  NEW SUBSCRIPTION CREATED  *********************************************************************************************************************
            //********                            *********************************************************************************************************************
            //*********************************************************************************************************************************************************
        {
        else if( !etherP.strCompareF( tin0P , tValueStripeNoticeType , tValueStripeNoticeTypeSubCreated ) )                                                 // ELSE IF NOTICE TYPE IS "SUB CREATED"
        }
            }
                }
                    etherP.boxPutF( tin0P , tLong , WS( sOut ) ) ;

                    //etherP.traceF( tin0P , T("[tLong]:    ")+tLong , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    TN( tLong , "" ) ; tLong = tSharedFolderUse+tLiveSlash+T("sub.created/")+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+T("/new.")+tdInvoice+tSlashP+tSharedFileEventSubCreatedUpdatedP ;
                    textC& tSharedFolderUse = bLive ? tSharedFolderPrefixPreciousP : tSharedFolderPrefixSandboxP ;
                    TN( tLiveSlash    , bLive ?  "live/" :  "test/" ) ;
                    boolT bLive = !etherP.strCompareF( tin0P , tValueLive , T("true") ) ;

                    }
                        sOut << (strokeS*)tValueAmountDiscount   ;
                        sOut << (strokeS*)tValueIdSubscription   ;
                        sOut << (strokeS*)tValueMode             ;
                        sOut << (strokeS*)tValueName             ;
                        sOut << (strokeS*)tValueEmail            ;
                        sOut << (strokeS*)tValuePostalCode       ;
                        sOut << (strokeS*)tValueCountry          ;
                        sOut << (strokeS*)tValueHawker           ;
                        sOut << (strokeS*)tValueAge              ;
                        sOut << (strokeS*)tValueAmountTotal      ;
                        sOut << (strokeS*)tValueAmountSubtotal   ;
                        sOut << (strokeS*)tValueApiVersion       ;
                        sOut << (strokeS*)tValueIdProduct        ;
                        sOut << (strokeS*)tValueStatus           ;
                        sOut << (strokeS*)tValueLatestInvoice    ;
                        sOut << (strokeS*)tValueStripeNoticeType ;
                        sOut << (strokeS*)tValueLive             ;
                        // VERSION 1

                        sOut << (strokeS*)tVersion                       ;
                        sOut << (strokeS*)tEvent                         ;
                    {
                    soulC sOut( tin0P , TAG( TAGiDnULL ) ) ;

                    TN( tVersion   , "1" ) ;
                    TN( tEvent , "stripe.subscription.new.updated" ) ;
                {

                }
                    //etherP.traceF( tin0P , T("[hashInvoice,modulo]:    ")+TF4(hashInvoice,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20)+tb4P+TF4(hashInvoice%0x20,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_NObASE,0,0x20) ) ;

                    hashInvoice = hashF( tdInvoice , tdInvoice.csF( tin0P ) , 0 ) ;

                    etherP.delF( tin0P , psttdInvoice ) ;
                    //etherP.traceF( tin0P , T("[dInvoice]:     ")+tdInvoice ) ;
                    tdInvoice = T(psttdInvoice) ;
                    etherP.strDumpIF( tin0P , psttdInvoice , tValueLatestInvoice , tValueLatestInvoice.csF( tin0P ) , flSTRdUMP_5bITS ) ; ___( psttdInvoice ) ;
                    ZE( strokeS* , psttdInvoice ) ;
                {
                ZE( countT    , hashInvoice ) ;
                TN( tdInvoice , "" ) ;

                //etherP.traceF( tin0P , T("[LatestInvoice]:    ")+tValueLatestInvoice ) ;
                }
                    }
                        }
                            etherP.delF( tin0P , psttValue ) ;
                    
                            }
                                }
                                    //etherP.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF , ifcIDtRACEdIVERT_f ) ;

                                    etherP.delF( tin0P , psttt ) ;
                                    *pptValue[ offe ] = T(psttt) ;
                                    etherP.strTrimF( tin0P , psttt , psttValue , 0 , 0 , strokeS() ) ; ___( psttt ) ;
                                    ZE( strokeS* , psttt ) ;
                                {
                                if( !etherP.strCompareF( tin0P , psttPath , *pptPath[ offe ] ) )
                            {
                            for( countT offe = 0 ; offe < cKeys ; offe ++ )
                    
                            if( cKeys - cValues ) { BLAMMO ; }
                            countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                            countT cKeys  = sizeof pptPath  / sizeof pptPath[  0 ] ;
                    
                            //etherP.trace F( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_d*/ ) ;
                            //etherP.trace F( tin0P , T("-------------------------- [path]:            ")+T(psttPath)       , flTRACE_NOpREFIX | flTRACE_KEEPcRlF /*, ifcIDtRACEdIVERT_d*/ ) ;
                    
                            strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                            psttPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;
                    
                            _IO_
                        {
                        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                        countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                    {
                    if( !POOP )
                
                    ;
                    }
                        &tPathAmountDiscount   ,
                        &tPathIdSubscription   ,
                        &tPathMode             ,
                        &tPathName             ,
                        &tPathEmail            ,
                        &tPathPostalCode       ,
                        &tPathCountry          ,
                        &tPathHawker           ,
                        &tPathAge              ,
                        &tPathAmountTotal      ,
                        &tPathAmountSubtotal   ,
                        &tPathApiVersion       ,
                        &tPathIdProduct        ,
                        &tPathStatus           ,
                        &tPathLatestInvoice    ,
                        &tPathStripeNoticeType ,
                        &tPathLive             ,
                    {
                    textC* pptPath[] =
                    
                    TN( tPathAmountDiscount   , "\"data\"/\"object\"/\"total_details\"/\"amount_discount\"/"                 ) ;
                    TN( tPathIdSubscription   , "\"data\"/\"object\"/\"subscription\"/"                                      ) ;
                    TN( tPathMode             , "\"data\"/\"object\"/\"mode\"/"                                              ) ;
                    TN( tPathName             , "\"data\"/\"object\"/\"customer_details\"/\"name\"/"                         ) ;
                    TN( tPathEmail            , "\"data\"/\"object\"/\"customer_details\"/\"email\"/"                        ) ;
                    TN( tPathPostalCode       , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"postal_code\"/"      ) ;
                    TN( tPathCountry          , "\"data\"/\"object\"/\"customer_details\"/\"address\"/\"country\"/"          ) ;
                    TN( tPathHawker           , "\"data\"/\"object\"/\"custom_fields\"/item.00000002/\"text\"/\"value\"/"    ) ;
                    TN( tPathAge              , "\"data\"/\"object\"/\"custom_fields\"/item.00000001/\"numeric\"/\"value\"/" ) ;
                    TN( tPathAmountTotal      , "\"data\"/\"object\"/\"amount_total\"/"                                      ) ;
                    TN( tPathAmountSubtotal   , "\"data\"/\"object\"/\"amount_subtotal\"/"                                   ) ;
                    TN( tPathApiVersion       , "\"api_version\"/"                                                           ) ;
                    TN( tPathIdProduct        , "\"data\"/\"object\"/\"plan\"/\"product\"/"                                  ) ;
                    TN( tPathStatus           , "\"data\"/\"object\"/\"status\"/"                                            ) ;
                    TN( tPathLatestInvoice    , "\"data\"/\"object\"/\"latest_invoice\"/"                                    ) ;
                    TN( tPathStripeNoticeType , "\"type\"/"                                                                  ) ;
                    TN( tPathLive             , "\"livemode\"/"                                                              ) ;

                    // 
                    // 
                    // 
                    // "data" / "object" / "plan" / "product" / : "prod_RJ1XOIUO9htwyX"
                    // "type" / : "customer.subscription.created"
                    //
                    // FOR THE STUDENT REGISTRATION SUBSCRIPTION

                    ;
                    }
                        &tValueAmountDiscount   ,
                        &tValueIdSubscription   ,
                        &tValueMode             ,
                        &tValueName             ,
                        &tValueEmail            ,
                        &tValuePostalCode       ,
                        &tValueCountry          ,
                        &tValueHawker           ,
                        &tValueAge              ,
                        &tValueAmountTotal      ,
                        &tValueAmountSubtotal   ,
                        &tValueApiVersion       ,
                        &tValueIdProduct        ,
                        &tValueStatus           ,
                        &tValueLatestInvoice    ,
                        &tValueStripeNoticeType ,
                        &tValueLive             ,
                    {
                    textC* pptValue[] =
                
                    __Z( pSwPathValue ) ;
                    etherP.strParseJsonF( tin0P , pSwPathValue , psttPath , postP , flSTACKc_null ) ;
                    ZE( switchC* , pSwPathValue ) ;
                    ZE( strokeS* , psttPath     ) ;
                {
                TN( tValueAmountDiscount   , "" ) ;
                TN( tValueIdSubscription   , "" ) ;
                TN( tValueMode             , "" ) ;
                TN( tValueName             , "" ) ;
                TN( tValueEmail            , "" ) ;
                TN( tValuePostalCode       , "" ) ;
                TN( tValueCountry          , "" ) ;
                TN( tValueHawker           , "" ) ;
                TN( tValueAge              , "" ) ;
                TN( tValueAmountTotal      , "" ) ;
                TN( tValueAmountSubtotal   , "" ) ;
                TN( tValueApiVersion       , "" ) ;
                TN( tValueIdProduct        , "" ) ;
                TN( tValueStatus           , "" ) ;
                TN( tValueLatestInvoice    , "" ) ;
                TN( tValueStripeNoticeType , "" ) ;
                TN( tValueLive             , "" ) ;
                etherP.traceF( tin0P , T("writeSoulFileF / sub updated (sub created))") ) ;
                _IO_

                //*********************************************************************************************************************************************************
                //********                            *********************************************************************************************************************
                //********  NEW SUBSCRIPTION UPDATED  *********************************************************************************************************************
                //********                            *********************************************************************************************************************
                //*********************************************************************************************************************************************************
            {
            else                                                                                                                                                    // ELSE WRITE soulC FILE CONTAINING SOME NEW SUBSCRIPTION FIELDS
            }
                etherP.delF( tin0P , psttnu ) ;
                etherP.boxPutUniqueF( tin0P , psttnu , tSharedFolderNoticeSubRenewedLive+T("sub.renewed.@1@.json") , postP , costP ) ; ___( psttnu ) ;                // THEN WRITE JSON NOTICE OF SUB RENEWED TO FILE FOR MANUAL PROCESSING
                ZE( strokeS* , psttnu ) ;
                etherP.traceF( tin0P , T("writeSoulFileF / sub updated (renewal)") ) ;
                _IO_

                //*********************************************************************************************************************************************************
                //********                        *************************************************************************************************************************
                //********  SUBSCRIPTION RENEWED  *************************************************************************************************************************
                //********                        *************************************************************************************************************************
                //*********************************************************************************************************************************************************
            {
            )
                !etherP.strCompareF( tin0P , tValueRequestId , T("null") )
                &&                                                                                                                                              // IF STATUS IS NOT INCOMPLETE AND THERE IS NO REQUEST ID
                etherP.strCompareF( tin0P , tValueStatus , T("incomplete") )
            (
            if
        {
        else if( !etherP.strCompareF( tin0P , tValueStripeNoticeType , tValueStripeNoticeTypeSubUpdated ) )                                                 // ELSE IF NOTICE TYPE IS "SUB UPDATED"
        }
            etherP.delF( tin0P , psttnu ) ;
            etherP.boxPutUniqueF( tin0P , psttnu , tSharedFolderNoticeSubDeletedLive+T("sub.deleted.@1@.json") , postP , costP ) ; ___( psttnu ) ;                // WRITE JSON NOTICE OF SUB DELETED TO FILE FOR MANUAL PROCESSING
            ZE( strokeS* , psttnu ) ;
            etherP.traceF( tin0P , T("writeSoulFileF / sub deleted") ) ;
            _IO_

            //*********************************************************************************************************************************************************
            //********                        *************************************************************************************************************************
            //********  SUBSCRIPTION DELETED  *************************************************************************************************************************
            //********                        *************************************************************************************************************************
            //*********************************************************************************************************************************************************
        {
        if( !etherP.strCompareF( tin0P , tValueStripeNoticeType , tValueStripeNoticeTypeSubDeleted ) )                                                      // IF NOTICE TYPE IS "SUB DELETED"

        TN( tSharedFolderNoticeSubRenewedTest , "" ) ; tSharedFolderNoticeSubRenewedTest = tSharedFolderPrefixSandboxP +T("json.notice.1.")+tValueStripeNoticeTypeSubUpdated+T("/") ;
        TN( tSharedFolderNoticeSubRenewedLive , "" ) ; tSharedFolderNoticeSubRenewedLive = tSharedFolderPrefixPreciousP+T("json.notice.1.")+tValueStripeNoticeTypeSubUpdated+T("/") ;
        TN( tSharedFolderNoticeSubDeletedTest , "" ) ; tSharedFolderNoticeSubDeletedTest = tSharedFolderPrefixSandboxP +T("json.notice.1.")+tValueStripeNoticeTypeSubDeleted+T("/") ;
        TN( tSharedFolderNoticeSubDeletedLive , "" ) ; tSharedFolderNoticeSubDeletedLive = tSharedFolderPrefixPreciousP+T("json.notice.1.")+tValueStripeNoticeTypeSubDeleted+T("/") ;

        TN( tValueStripeNoticeTypeCheckoutCompleted , "checkout.session.completed"    ) ;
        TN( tValueStripeNoticeTypeSubCreated        , "customer.subscription.created" ) ;
        TN( tValueStripeNoticeTypeSubUpdated        , "customer.subscription.updated" ) ;
        TN( tValueStripeNoticeTypeSubDeleted        , "customer.subscription.deleted" ) ;

        //*********************************************************************************************************************************************************
        //********                                    *************************************************************************************************************
        //********  EAT STRIPE EVENT NOTICES BY TYPE  *************************************************************************************************************
        //********                                    *************************************************************************************************************
        //*********************************************************************************************************************************************************

        }
            }
                }
                    etherP.delF( tin0P , psttValue ) ;

                    }
                        }
                            //etherP.traceF( tin0P , T("********    ") + *pptPath[ offe ] + T("   :    ") + *pptValue[ offe ] , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                            *pptValue[ offe ] = T(psttValue) ;
                        {
                        if( !etherP.strCompareF( tin0P , psttzPath , *pptPath[ offe ] ) )
                    {
                    for( countT offe = 0 ; offe < cPaths ; offe ++ )

                    if( cPaths - cValues ) { BLAMMO ; }
                    countT cValues = sizeof pptValue / sizeof pptValue[ 0 ] ;
                    countT cPaths  = sizeof pptPath  / sizeof pptPath[  0 ] ;

                    //etherP.traceF( tin0P , T("--------------------------        [value]:    ")+T(psttValue) , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
                    //etherP.traceF( tin0P , T("-------------------------- [path]:            ")+T(psttzPath)  , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                    strokeS*& psttValue = *(strokeS**)&(countT&)*pSwPathValue ;
                    psttzPath = (strokeS*)pSwPathValue->leverF( tin0P , idf ) ;

                    _IO_
                {
                for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                countT cFlavors = pSwPathValue->cFlavorsF( tin0P ) ;
                _IO_
            {
            if( !POOP )

            ;
            }
                &tKeyRequestId         ,
                &tKeyStatus            ,
                &tPathStripeNoticeType ,
            {
            textC* pptPath[] =

            TN( tKeyRequestId         , "\"request\"/\"id\"/"  ) ;
            TN( tKeyStatus            , "\"data\"/\"status\"/" ) ;
            TN( tPathStripeNoticeType , "\"type\"/"            ) ;

            ;
            }
                &tValueRequestId        ,
                &tValueStatus           ,
                &tValueStripeNoticeType ,
            {
            textC* pptValue[] =
        {
        TN( tValueRequestId        , "" ) ;
        TN( tValueStatus           , "" ) ;
        TN( tValueStripeNoticeType , "" ) ;

        //*********************************************************************************************************************************************************
        //********                                    *************************************************************************************************************
        //********  GET THE STRIPE EVENT NOTICE TYPE  *************************************************************************************************************
        //********                                    *************************************************************************************************************
        //*********************************************************************************************************************************************************

        __Z( pSwPathValue ) ;
        }
            }
                etherP.traceF( tin0P , T("!exception / could not parse json") ) ;
                POOPRqUIET
            {
            if( POOP )
            ((tin1S&)tin0P).pEtScratch->strParseJsonF( tin0P , pSwPathValue , psttzPath , (osTextT*)postP , flSTACKc_null ) ;
            SCOOPS
            _IO_
        {
        IFsCRATCHoK
        ZE( switchC* , pSwPathValue ) ;
        ZE( strokeS* , psttzPath    ) ;

        //*********************************************************************************************************************************************************
        //********                                              ***************************************************************************************************
        //********  GET ALL PATH : VALUE PAIRS FROM JSON INPUT  ***************************************************************************************************
        //********                                              ***************************************************************************************************
        //*********************************************************************************************************************************************************

        _IO_
    {
    if( postP )

    etherP.traceF( tin0P , T("writeSoulFileF / ++++ ") ) ;

    textC& tSlashP                            = *pptFileNameP[ 6 ] ;
    textC& tb4P                               = *pptFileNameP[ 5 ] ;
    textC& tSharedFileEventSubCreatedUpdatedP = *pptFileNameP[ 4 ] ;
    textC& tSharedFileEventCheckoutCompletedP = *pptFileNameP[ 3 ] ;
    textC& tSharedFileEventSubCreatedP        = *pptFileNameP[ 2 ] ;
    textC& tSharedFolderPrefixSandboxP        = *pptFileNameP[ 1 ] ;
    textC& tSharedFolderPrefixPreciousP       = *pptFileNameP[ 0 ] ;
{
voidT writeSoulFileF( tin0S& tin0P , etherC& etherP , osTextT* const postP , countT costP , textC** pptFileNameP )

/*1*/WAKEhIDE( "ifcIDaDAM_WEBhOOKnOTICEfILER" )/*1*/
/**/
*/

/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
