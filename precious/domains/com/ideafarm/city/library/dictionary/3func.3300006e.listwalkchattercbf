
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flrc ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    THREADmODE2rESTORE
    THREADmODE3rESTORE

    }
        }
            }
                if( POOP ) POOPR

                }
                    }
                        ((tin123S&)tin0P).pEtScratch->delF( tin0P , pstto ) ;
                        POOPR
                    {
                    else
                    }
                        break ;
                        ((tin123S&)tin0P).pEtScratch->delF( tin0P , pstto ) ;
                        ((tin123S&)tin0P).pEtScratch->traceF( tin0P , pstto ) ;
                    {
                    if( !POOP )

                    if( flagsi & fliLISTINGc_DELETErEQUESTED ) ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("DELETErEQUESTED") ) ;

                    }
                        THREADmODE1rESTORE
                        }
                            ((tin123S&)tin0P).tlsDelF( LF , *(byteT**)&pczHe ) ;
                            //{ puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ; PUSE( tin0P , *(byteT**)&pczHe ) ; }

                            }
                                if( pczHe[ ++ offo ] ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("/") ) ; }
            
                                }
                                    }
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T((const byteT*)vspo) ) ;
                                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                                    {
                                    else            
                                    if( !(const byteT*)vspo ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(pczHe[offo],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
                
                                    if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tin0P , pczHe[ offo ] ) ;
                                    blobVSP vspo ;
                                {
                                else
                                if( postzMap ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postzMap) ) ; }
                                const osTextT* postzMap = processGlobal4I.mapListName( pczHe[ offo ] ) ;
                            {
                            while( pczHe[ offo ] )
                            countT offo = 0 ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" Refers to: ") ) ;

                            ((const listingC*)vspValue)->nameF( tin0P , pczHe ) ; //___( pczHe ) ;
                            ZE( countT* , pczHe ) ;

                            if( flagsi & fliLISTINGc_DELETErEQUESTED ) ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" DELETErEQUESTED") ) ;
                            }
                                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postNamePool) ) ;
                                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" in pool: \"") ) ;
                            {
                            if( postNamePool )
                            const osTextT* postNamePool = ((tin123S&)tin0P).pPoolUse ? ((tin123S&)tin0P).pPoolUse->postNameF( tin0P ) : 0 ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(aptRef,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" a: ") ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2((countT)(const listingC*)vspValue,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("listingVSP: p: ") ) ;
            
                            aptC aptRef( tin0P , vspValue ) ;
            
                            puseC puseRecord( tin0P , *pPool ) ;

                            __Z( pPool ) ;
                            poolC* pPool = poolC::pPoolIF( tin0P , (byteT*)(const listingC*)vspValue ) ;
                        {
                        THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING ) ;
                    {
                    else if( (const listingC*)vspValue )
                    }
                        }
                            if( pczValue[ ++ offo ] ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("/") ) ; }

                            }
                                }
                                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T((const byteT*)vspo) ) ;
                                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                                {
                                else            
                                if( !(const byteT*)vspo ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(pczValue[offo],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
            
                                if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tin0P , pczValue[ offo ] ) ;
                                blobVSP vspo ;
                            {
                            else
                            if( postzMap ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postzMap) ) ; }
                            const osTextT* postzMap = processGlobal4I.mapListName( pczValue[ offo ] ) ;
                        {
                        while( pczValue[ offo ] )
                        countT offo = 0 ;

                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("countTstrz: ") ) ;
                    {
                    else if( pczValue )
                    }
                        }
                            ((tin123S&)tin0P).pEtScratch->delF( tin0P , psttw ) ;
                            if( bPartial ) ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , (strokeS*)( T(" ... (there are ")+TF2(cbv,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" total bytes)") ) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(psttw) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("blob):\r\n") ) ;
                            ((tin123S&)tin0P).pEtScratch->strDumpIF( tin0P , psttw , postValue , bPartial ? TUCK : cbv , flSTRdUMP_null , 0x20 , 4 , '~' ) ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;

                            }
                                countT foo = 2 ;
                            {
                            if( idIn == 0x18 )

                            countT idIn = 1 + incv02AM( idInLath ) ;
                            static countT idInLath ;

                            boolT bPartial = cbv > TUCK ;
                        {
                        else
                        }
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postValue) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("blob: \"") ) ;
                        {
                        if( bText )

                        }
                            }
                                }
                                    break ;
                                    bText = 0 ;
                                {
                                if( !test || test < 0x20 || test > 0x7f )
                                byteT test = postValue[ offi ] ;
                            {
                            for( countT offi = 0 ; offi < offNull ; offi ++ )
                        {
                        if( bText )
                        byteT  bText = !postValue[ offNull ] ;
                        countT offNull = cbv - 1 ;
                        countT cbv = ((countT*)postValue)[ - 1 ] ;
                    {
                    else if( postValue )
                    }
                        }
                            }
                                ((tin123S&)tin0P).pEtScratch->delF( tin0P , psttJot ) ;
                                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("    ")+T(psttJot) ) ;
                            {
                            else
                            if( POOP ) POOPR
                            ((tin123S&)tin0P).pEtScratch->strFromIdJotF( tin0P , psttJot , *pcValue , cbJotStringDecodePrefixP ) ; ___( psttJot ) ;
                            ZE( strokeS* , psttJot ) ;
                        {
                        if( F(flagsP) & flLISTwALKcHATTER_MAPiDjOTvALUES )

                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(*pcValue,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("countT: ") ) ;
                    {
                    if( pcValue )

                    }
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" ") ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(cName,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    {
                    else if( cName )
                    }
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" ") ) ;
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postzName) ) ;
                    {
                    if( postzName )
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postMark) ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" | ") ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(aptListing,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" | a: ") ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("0x")+TfORsTRING((countT)pListing) ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" | p: ") ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , TF2(((tin123S&)tin0P).ta.pushed.u.listWalk.walk.cRecurseP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(" | ") ) ;
                    ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(((tin123S&)tin0P).pPoolUse->postNameF(tin0P)) ) ;

                    ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , pstto , 0 , max ) ; ___( pstto ) ;
                    ZE( strokeS* , pstto ) ;
                {
                for( countT max = TOCK ;; max <<= 1 )
                SCOOPS
            {
            IFsCRATCH

            }
                }
                    if( (const byteT*)vspbName ) postzName = (const byteT*)vspbName ;
                    vspbName = listC::dictionaryQueryFromIdIF( tin0P , cName ) ;
                {
                else if( bUseDictionary && cName )
                if( postzMap ) postzName = postzMap ;

                }
                    countT foo = 2 ;
                {
                if( postzMap && !thirdC::c_strcmpIF( tin0P , postzMap , "ROOTaPPLICATION" ) )

                const osTextT* postzMap = processGlobal4I.mapListName( cName ) ;

                cName = pList->nameF() ;
                listC* pList = (listC*)pListing ;
            {
            if( flagsi & fliLISTINGc_MIXINlIST )
            ZE( const byteT* , postzName ) ;
            blobVSP vspbName ;
            ZE( countT   , cName ) ;
    
            ;
                : "listing "
                ? "LIST    "
            osTextT* postMark = flagsi & fliLISTINGc_MIXINlIST
    
            }
                }
                    }
                        }
                            default                             : { BLAMMO                                                     ; break ; }
                            case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =                  *(list_listingVSP_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  =         (countT*)*(list_countTstrz_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_blob       : { postValue =              (osTextT*)*(list_blob_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =             (countT*)*(list_countT_C*)pListing ; break ; }
                        {
                        switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                    {
                    else
                    }
                        }
                            default                             : { BLAMMO                                                     ; break ; }
                            case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =               *(listing_listingVSP_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  =      (countT*)*(listing_countTstrz_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_blob       : { postValue =           (osTextT*)*(listing_blob_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =          (countT*)*(listing_countT_C*)pListing ; break ; }
                        {
                        switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                    {
                    if( !( flagsi & fliLISTINGc_MIXINlIST ) )
                {
                else
                }
                    }
                        }
                            default                             : { BLAMMO                                                ; break ; }
                            case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =             *(listOfSet_listingVSP_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  =    (countT*)*(listOfSet_countTstrz_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_blob       : { postValue =         (osTextT*)*(listOfSet_blob_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =        (countT*)*(listOfSet_countT_C*)pListing ; break ; }
                        {
                        switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                    {
                    else
                    }
                        }
                            default                             : { BLAMMO                                                ; break ; }
                            case ifcIDtYPEmIXINdATUM_listingVSP : { vspValue  =          *(listingOfSet_listingVSP_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countTstrz : { pczValue  = (countT*)*(listingOfSet_countTstrz_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_blob       : { postValue =      (osTextT*)*(listingOfSet_blob_C*)pListing ; break ; }
                            case ifcIDtYPEmIXINdATUM_countT     : { pcValue   =     (countT*)*(listingOfSet_countT_C*)pListing ; break ; }
                        {
                        switch( pListing->idTypeDatumF() ) //CS:CODEsYNC: 00104b0 21e0006 21e0002 21e0008 21e0009 220000e
                    {
                    if( !( flagsi & fliLISTINGc_MIXINlIST ) )
                {
                if( bOfSet )
            {
            if( flagsi & fliLISTINGc_MIXINdATUM )
            flagsT flagsi = pListing->flagsF() ;
    
            listingVSP     vspValue    ;
            ZE( countT*  , pczValue  ) ;
            ZE( osTextT* , postValue ) ;
            ZE( countT*  , pcValue   ) ;
        {
        else
        }
            flrc |= flLISTwALKcALLbACKrETURNcODE_QUIT ;
            CONoUTrAW( "EXCEPTION: An apartment was encountered that does not contain a valid listingC object.  quitting\r\n" ) ;
        {
        if( !listingC::bIsListingIF( tin0P , aptListing ) )

        aptC aptListing( tin0P , pListing ) ;

        //}
        //    CONoUTrAW( ostoSay ) ;
        //
        //    OStEXTAK( ostoSay , "\r\n" ) ;
        //    OStEXTC(  ostoSay , finger , 0 ) ;
        //    OStEXTAK( ostoSay , "    " ) ;
        //    OStEXTC(  ostoSay , dropHeader , 0 ) ;
        //    OStEXTAK( ostoSay , "    " ) ;
        //    OStEXTC(  ostoSay , separator , 0 ) ;
        //    OStEXTAK( ostoSay , "    " ) ;
        //    OStEXTCF( ostoSay , pListing , '0' ) ;
        //    OStEXTAK( ostoSay , "\r\n[pListing,separator,dropHeader]:    0x" ) ;
        //    OStEXT(  ostoSay , TUCK ) ;
        //
        //    countT  finger     = pcl[   0 ] ;
        //    countT  dropHeader = pcl[ - 1 ] ;
        //    countT  separator  = pcl[ - 2 ] ;
        //    countT* pcl = (countT*)pListing ;
        //{
        //U:: TO FIND A BUG
    {
    if( pListing )
    flagsT flrc = flLISTwALKcALLbACKrETURNcODE_null ;

    }
        }
            if( POOP ) POOPR

            }
                }
                    ((tin123S&)tin0P).pEtScratch->delF( tin0P , pstto ) ;
                    POOPR
                {
                else
                }
                    break ;
                    ((tin123S&)tin0P).pEtScratch->delF( tin0P , pstto ) ;
                    ((tin123S&)tin0P).pEtScratch->traceF( tin0P , pstto ) ;
                {
                if( !POOP )

                { puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ; PUSE( tin0P , *(byteT**)&pcSquished ) ; }
                ((tin123S&)tin0P).tlsDelF( LF , *(byteT**)&pczName ) ;
                //{ puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ; PUSE( tin0P , *(byteT**)&pczName ) ; }
                }
                    else ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(bSquishedValue?"VALUE(":"ILLEGALnAME(")+TF2(idName,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(")") ) ;
                    }
                        }
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T((const byteT*)vspo) ) ;
                            ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("\"") ) ;
                        {
                        else            
                        if( !(const byteT*)vspo ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("NOTiNdICTIONARY(")+TF2(idName,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(")") ) ; }
            
                        if( bUseDictionary ) vspo = listC::dictionaryQueryFromIdIF( tin0P , idName ) ;
                        blobVSP vspo ;
                    {
                    else if( LISTnAMEdICTIONARYmIN <= idName && idName <= LISTnAMEdICTIONARYmAX )
                    }
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("LISTnAMEaPP(")+TF2(idName-LISTnAMEaPPmIN,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(")") ) ;
                    {
                    else if( LISTnAMEaPPmIN <= idName && idName <= LISTnAMEaPPmAX )
                    }
                        ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(postzMap) ) ;
                        const osTextT* postzMap = postzMap = processGlobal4I.mapListName( idName ) ;
                    {
                    if( LISTnAMEsYS_min <= idName && idName <= LISTnAMEsYS_max )

                    }
                        case LISTnAMEsYS_STRETCHbEGINoStEXTsTRZ : { bSquishedValue = 1 ; break ; }
                        case LISTnAMEsYS_STRETCHbEGINcOUNTsTRZ  :
                        case LISTnAMEsYS_STRETCHbEGINbITS       :
                        case LISTnAMEsYS_STRETCHbEGINcOUNT      :

                        case LISTnAMEsYS_STRETCHeND             : { bSquishedValue = 0 ; break ; }
                    {
                    switch( idName )

                    const countT idName = pcSquished[ offi ] ;

                    if( offi ) { ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T("/") ) ; }
                {
                for( countT offi = 0 ; offi < ccSquished ; offi ++ )
                ZE( boolT  , bSquishedValue ) ;

                }
                    }
                                   tSay += TF2(pcSquished[offi],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;
                        if( offi ) tSay += tSlash ;
                    {
                    for( countT offi = 0 ; offi < ccSquished ; offi ++ )
                    TN( tSay , "[pcSquished]:    " ) ;
                {
                TN( tSlash , "/" ) ;

                { puseC puseat( tin0P , ifcIDpOOL_ADAMtEMP ) ; ccSquished = etherC::strSquishIF( tin0P , pcSquished , pczName ) ; ___( pcSquished ) ; }
                ZE( countT  , ccSquished ) ;
                ZE( countT* , pcSquished ) ;

                ((tin123S&)tin0P).pEtScratch->traceF( tin0P , T("[pczName]    :    ")+T(pczName) ) ;

                ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP->nameF( tin0P , pczName ) ; // ___( pczName ) ;
                ZE( countT* , pczName ) ;

                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(bUseDictionary?" | ------------------------------------------------------------------------------- ":" | ------------------------------------------------------------------------------- (NO DICTIONARY LOOKUP) ") ) ;
                ((tin123S&)tin0P).pEtScratch->strFuseF( tin0P , pstto , T(((tin123S&)tin0P).pPoolUse->postNameF(tin0P)) ) ;

                ((tin123S&)tin0P).pEtScratch->strMakeF( tin0P , LF , pstto , 0 , max ) ; ___( pstto ) ;
                ZE( strokeS* , pstto ) ;
            {
            for( countT max = TOCK ;; max <<= 1 )
            SCOOPS
        {
        IFsCRATCH
    {
    if( ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.idCallP == 1 )

    THREADmODE3oN( flTHREADmODE3_POOLaLLOCATEfROMhEAP )                         // MY CALLER MIGHT HAVE GRABBED LISTnAMEsYS_ROOT, WHICH COULD DEADLOCK sexC::sexC
    THREADmODE2oN( flTHREADmODE2_ALLOWdICTIONARYwHILEgRABBING )

    ;
        && ( levelOoNameUse != LISTnAMEsYS_ROOTsYSTEM2 || levelReNameUse != LISTnAMEsYS_DICTIONARY )
             levelOoNameUse 
    const boolT bUseDictionary =                                             // 20180508@1624: AVOID DICTIONARY IF SYSTEM1 OR SYSTEM3 (ADDED WITHOUT ANALYSIS TO ELIMINATE DEADLOCK IN ADAM 206 (602_) WHICH USED TO WORK AOK)

    const countT levelReNameUse = levelReNameMe ? levelReNameMe : levelReNameDad ;
    const countT levelOoNameUse = levelOoNameMe ? levelOoNameMe : levelOoNameDad ;

    const countT levelReNameDad = !((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP ? 0 : ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP->nameF( 3 ) ;
    const countT levelReNameMe  = !pListing                            ? 0 :                            pListing->nameF( 3 ) ;

    const countT levelOoNameDad = !((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP ? 0 : ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pDadP->nameF( 2 ) ;
    const countT levelOoNameMe  = !pListing                            ? 0 :                            pListing->nameF( 2 ) ;

    FV( flLISTwALKcHATTER , flagsP ) ;
    countT    cbJotStringDecodePrefixP = ((tin123S&)tin0P).ta.pushed.u.listWalk.util.pcP[ 2 ] ;
    flagsT    flagsP                   = ((tin123S&)tin0P).ta.pushed.u.listWalk.util.pcP[ 1 ] ;
    listingC* pListing                 = ((tin123S&)tin0P).ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = !((tin123S&)tin0P).pPoolUse ? 0 : PUSE.flagsPoolFormatF() ;

    }
        countT foo = 2 ;
    {
    if( idIn == 0x1c )
    countT idIn = 1 + incv02AM( idInLath ) ;
    static countT idInLath ;

    if( tin0P.idTypeTin - ifcIDtYPEtIN_123 ) { BLAMMOiD( 0x12121212 ) ; }
{
/*1*/flagsT listWalkChatterCBF( tin0S& tin0P )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

