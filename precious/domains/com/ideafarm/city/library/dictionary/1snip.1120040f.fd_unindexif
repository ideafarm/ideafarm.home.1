
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        ((tinNormalS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = 0 ;                                                                                                                                                    \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            DEL( pPuseIndex ) ;                                                                                                                                                                                                  \
            PUSE( tinBaseP , *(byteT**)&pczV ) ;                                                                                                                                                                                 \
            puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                                      \
        {                                                                                                                                                                                                                        \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            { puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ; PUSE( tinBaseP , *(byteT**)&pczIKV ) ; }                                                                                                                           \
                                                                                                                                                                                                                                 \
            }                                                                                                                                                                                                                    \
                }                                                                                                                                                                                                                \
                    pczIKV[ ccDoomed ] = 0 ;                                                                                                                                                                                     \
                    ccDoomed -- ;                                                                                                                                                                                                \
                {                                                                                                                                                                                                                \
                while( ccDoomed > 1 && F(flLISTwALKrETURNcODE_LISTINGdELETED) & listC::deleteIF( tinBaseP , pczIKV , flLISTdELETE_IFeMPTY ) )                                                                                    \
                countT ccDoomed = ccIKV ;                                                                                                                                                                                        \
                                                                                                                                                                                                                                 \
                thirdC::c_memcpyIF( tinBaseP , (byteT*)( pczIKV + ccIK ) , (byteT*)pczV  , sizeof( countT ) * ( ccV      + 1 ) ) ;                                                                                               \
                thirdC::c_memcpyIF( tinBaseP , (byteT*)  pczIKV          , (byteT*)pczIK , sizeof( countT ) *   ccIK           ) ;                                                                                               \
            {                                                                                                                                                                                                                    \
            if( !bFail )                                                                                                                                                                                                         \
                                                                                                                                                                                                                                 \
            }                                                                                                                                                                                                                    \
                __Z( pczIKV ) ;                                                                                                                                                                                                  \
                PUSE.newF( tinBaseP , LF , *(byteT**)&pczIKV , sizeof( countT ) * ( ccIKV + 1 ) ) ; ___( pczIKV ) ;                                                                                                              \
                puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                                  \
            {                                                                                                                                                                                                                    \
            countT ccIKV = ccIK + ccV ;                                                                                                                                                                                          \
            countT ccV   = thirdC::c_strlenIF( tinBaseP , pczV  ) ;                                                                                                                                                              \
            countT ccIK  = thirdC::c_strlenIF( tinBaseP , pczIK ) ;                                                                                                                                                              \
            ZE( countT* , pczIKV ) ;                                                                                                                                                                                             \
        {                                                                                                                                                                                                                        \
        if( !bFail )                                                                                                                                                                                                             \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            DELlIST( fieldEditParamOutC , pOut ) ;                                                                                                                                                                               \
            puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                                      \
        {                                                                                                                                                                                                                        \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            }                                                                                                                                                                                                                    \
                listC::fieldIF( tinBaseP , pOut , hIKV , pczField , _fe_deleteC() +  _fe_ok_equal_C( recordP ) , LF ) ;                                                                                                          \
                countT pczField[] = { LISTnAMEsYS_RECORD , 0 } ;                                                                                                                                                                 \
            {                                                                                                                                                                                                                    \
            if( !bFail )                                                                                                                                                                                                         \
                                                                                                                                                                                                                                 \
            if( bOpenIK ) hIKP.closeIfF() ;                                                                                                                                                                                      \
            if( bFail && bSmelly ) { __1 }                                                                                                                                                                                       \
            if( !hIKV ) bFail = 1 ;                                                                                                                                                                                              \
            listC::openIF( tinBaseP , hIKV , hIKP , pczV , flLISToPEN_IFeXISTS ) ;                                                                                                                                               \
            handleC hIKV( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;                                                                                                                                              \
        {                                                                                                                                                                                                                        \
        if( !bFail )                                                                                                                                                                                                             \
        ZE( fieldEditParamOutC* , pOut ) ;                                                                                                                                                                                       \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            if( bFail && bSmelly ) { __1 }                                                                                                                                                                                       \
            if( !hIKP ) bFail = 1 ;                                                                                                                                                                                              \
            listC::openIF( tinBaseP , hIKP , pczIK , flLISToPEN_IFeXISTS ) ;                                                                                                                                                     \
            THREADmODE3rESTORE                                                                                                                                                                                                   \
            listC::dictionaryReplaceOsTextIF( tinBaseP , pczIK ) ;                                                                                                                                                               \
            THREADmODE3oN( flTHREADmODE3_ALLOWdICTIONARYwHILEgRABBING )                                                                                                                                                          \
        {                                                                                                                                                                                                                        \
        if( bOpenIK )                                                                                                                                                                                                            \
        countT pczIK[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM3 , LISTnAMEsYS_FIELDvALUEiNDEX , (countT)postMasterPool , LISTnAMEsYS_INDEXaPPLICATION , idKeyInIndex , 0 } ;                                               \
        ZE( boolT , bFail ) ;                                                                                                                                                                                                    \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            THREADmODE3rESTORE                                                                                                                                                                                                   \
            }                                                                                                                                                                                                                    \
                }                                                                                                                                                                                                                \
                    DELzOMBIE( pvspPostKey ) ;                                                                                                                                                                                   \
                    idKeyInIndex = dictionaryQueryFromTextIF( tinBaseP , *pvspPostKey ) ;                                                                                                                                        \
                {                                                                                                                                                                                                                \
                if( !bLiteralKey )                                                                                                                                                                                               \
                                                                                                                                                                                                                                 \
                }                                                                                                                                                                                                                \
                    ___( pPuseIndex ) ;                                                                                                                                                                                          \
                    puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                              \
                {                                                                                                                                                                                                                \
                                                                                                                                                                                                                                 \
                ;                                                                                                                                                                                                                \
                    : new( 0 , tinBaseP , LF ) puseC( tinBaseP , idStateSpace == ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) || idStateSpace == ifcIDsTATEsPACE_SCRATCH ? ifcIDpOOL_ADAMtEMP : ifcIDpOOL_HOMEtEMP )                   \
                    ? new( 0 , tinBaseP , LF ) puseC( puseIndexP )                                                                                                                                                               \
                pPuseIndex = !bOpenIK                                                                                                                                                                                            \
                puseat.doNotRestoreTinWhenDieF() ;                                                                                                                                                                               \
                puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                                  \
                                                                                                                                                                                                                                 \
                }                                                                                                                                                                                                                \
                    *pvspPostKey = dictionaryQueryFromIdIF( tinBaseP , idKeyP ) ;                                                                                                                                                \
                    pvspPostKey = new( 0 , tinBaseP , pbvsp , sizeof pbvsp ) blobVSP ;                                                                                                                                           \
                {                                                                                                                                                                                                                \
                if( !bLiteralKey )                                                                                                                                                                                               \
                ZE( blobVSP* , pvspPostKey ) ;                                                                                                                                                                                   \
                byteT pbvsp[ sizeof( blobVSP ) ] ;                                                                                                                                                                               \
                                                                                                                                                                                                                                 \
                ;                                                                                                                                                                                                                \
                )                                                                                                                                                                                                                \
                    LISTnAMEaPPmIN  <= idKeyP && idKeyP <= LISTnAMEaPPmAX                                                                                                                                                        \
                    ||                                                                                                                                                                                                           \
                    LISTnAMEsYS_min <= idKeyP && idKeyP <= LISTnAMEsYS_max                                                                                                                                                       \
                (                                                                                                                                                                                                                \
                boolT bLiteralKey =                                                                                                                                                                                              \
            {                                                                                                                                                                                                                    \
            THREADmODE3oN( flTHREADmODE3_ALLOWdICTIONARYwHILEgRABBING )                                                                                                                                                          \
        {                                                                                                                                                                                                                        \
        if( !bOpenIK || thirdC::c_strcmpIF( tinBaseP , postMasterPool , "adam.temp" ) )                                                                                                                                          \
        countT idKeyInIndex = idKeyP ;                                                                                                                                                                                           \
        ZE( puseC* , pPuseIndex ) ;                                                                                                                                                                                              \
        puseC puseMaster( tinBaseP , *((tinNormalS&)tinBaseP).pPoolUse ) ;                                                                                                                                                       \
                                                                                                                                                                                                                                 \
        const countT idStateSpace = PUSE.idStateSpaceF() ;                                                                                                                                                                       \
        ;                                                                                                                                                                                                                        \
            : PUSE.postNameF( tinBaseP )                                                                                                                                                                                         \
            ? 0                                                                                                                                                                                                                  \
        const osTextT* postMasterPool = !bOpenIK                                                                                                                                                                                 \
                                                                                                                                                                                                                                 \
        boolT bSmelly = !( F(flagsP) & flUNiNDEXf_IFiNDEXED ) ;                                                                                                                                                                  \
        boolT bOpenIK = !hIKP ;                                                                                                                                                                                                  \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            etherC::strStretchIF( tinBaseP , pczV , 0 , valueP , cNetP ) ; ___( pczV ) ;                                                                                                                                         \
            puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                                                      \
        {                                                                                                                                                                                                                        \
        ZE(  countT* , pczV ) ;                                                                                                                                                                                                  \
                                                                                                                                                                                                                                 \
        ((tinNormalS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;                                                                                                                                                \
                                                                                                                                                                                                                                 \
        }                                                                                                                                                                                                                        \
            if( POOP ) return ;                                                                                                                                                                                                  \
            FV( flUNiNDEXf , flagsP ) ;                                                                                                                                                                                          \
            if( bCareful != - 1 ) { __( bCareful ) ; }                                                                                                                                                                           \
            countT bCareful = (expCarefulP) ;                                                                                                                                                                                    \
            if( POOP ) return ;                                                                                                                                                                                                  \
            __( !!((tinNormalS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;                                                                                                                                            \
            __Z( idKeyP ) ;                                                                                                                                                                                                      \
            if( POOP ) return ;                                                                                                                                                                                                  \
            __( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) ;                                                                                                                                                                       \
            if( POOP ) return ;                                                                                                                                                                                                  \
        {                                                                                                                                                                                                                        \
        IFbEcAREFUL                                                                                                                                                                                                              \
    {                                                                                                                                                                                                                            \
    voidT listC::unIndexIF( tinBaseS& tinBaseP , puseC& puseIndexP , handleC& hIKP , const countT idKeyP , const typeP valueP , const countT cNetP , const listingC& recordP , const listingC& datumP , const flagsT flagsP )    \
                                                                                                                                                                                                                                 \
#define FD_UNiNDEXif(typeP,expCarefulP)                                                                                                                                                                                          \

/*1*//*FD_UNiNDEXif(typeP,expCarefulP)*//*1*/

/**/
*/
 flagsP
   the full record would then be displayed for all "checked" bodies, using the record references already retrieved
   these bodies would be displayed to the user, who would "check" which ones he is interested in
   the query would retrieve all [recordP,datumP] pairs for emails which contained a body that contained the word "awesome"
   in this example, each email record contains fields such as body, subject, from, to, cc, bcc, time
  application example: find the full text body of all emails that contain the word "awesome", display it, and if approved, retrieve the entire reocrd for that email
  the listing that contains the datum to be indexed
 datumP
  application example: find all families that contain a child named "Theresa"
  this is a record that contains a field with the specified value
  the list (record) that contains the list (field) that contains the datum to be indexed
 recordP
  this value is assumed to be present as a listing within the field
  this is the value to be indexed
 valueP
   it is the lath element of the fully qualified name of the list that contains the datum listing
   this is the value passed into fieldIF when the datum that is being indexed was created
  the name of the field
 idKeyP
    the cost of being specific to a field is small since it is cheap to open a handle to the overall index
    it might have been intentional, on the theory that it makes unindexing of a set of values for a specific field fast
    perhaps this was just an artifact of convenience while coding
   2011.12.27: not sure why it is this way
  note that this handle is to the index for a specific field rather than to the whole index
  as of this writing, no application of this ability to do global unindexing is expected
  non null value is allowed only to make this definition similar in power to indexIF
  may be null
 hIKP
  if !hIKP then specify puseC()
 puseIndexP
 tinBaseP
args
i remove an index entry for a particular value of a particular field in a particular record
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

