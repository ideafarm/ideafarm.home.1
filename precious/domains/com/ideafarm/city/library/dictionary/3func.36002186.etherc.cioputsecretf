
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    (*this)( tin0P , psGift ) ;
    if( !pczPinP ) (*this)( tin0P , psToMediator ) ;

    }
        delF( tin0P , pc01all ) ;
        }
            delF( tin0P , pczChannel ) ;
            }
                cioPutF( tin0P , bQuitP , pczChannel , *psGift , &sToP , psToMediator ) ;
    
                memCopyF( tin0P , (byteT*)( pczChannel + cc1 ) , (byteT*)(countT*)pczChannelSuffixP , ( cc2 + 1 ) * sizeof( countT ) ) ;
                memCopyF( tin0P , (byteT*)pczChannel           , (byteT*)(countT*)c8Prefix          , cc1         * sizeof( countT ) ) ;
            {
            if( pczChannel )
            newF( tin0P , LF , pczChannel , cc1 + cc2 + 1 ) ; ___( pczChannel ) ;
            countT cc2 = strBodyLengthF( tin0P , pczChannelSuffixP ) ;
            countT cc1 = strBodyLengthF( tin0P , (countT*)c8Prefix ) ;
            ZE( countT* , pczChannel ) ;
            count8S c8Prefix( ifcOLDiDcHANNEL1_BYfUNCTION , ifcOLDiDcHANNELfUNCTION_MEDIATED , ifcIDaDAM_SECRETsERVICE ) ;
    
            psGift->shiftLeftF( tin0P , ifcIDtYPEsOULiTEM_byteTptr , (byteT*)pc01all , cc01all * sizeof( count01T ) ) ;
        {
        if( pc01all )

        }
            delF( tin0P , pc01pin ) ;
            }
                delF( tin0P , pc01secret ) ;
                }
                    }
                        memCopyF( tin0P , (byteT*)( pc01all + cc01pin ) , (byteT*)pc01secret , cc01secret * sizeof( count01T ) ) ;
                        memCopyF( tin0P , (byteT*)pc01all               , (byteT*)pc01pin    , cc01pin    * sizeof( count01T ) ) ;
                    {
                    if( pc01all )
                    newF( tin0P , LF , pc01all , cc01all ) ; ___( pc01all ) ;
                    cc01all = cc01pin + cc01secret ;
                {
                if( pc01secret )
        
                }
                    mom( tin0P , pc01secret , cc01secret , pbs , sizeof( countT ) + *(countT*)pbs ) ; ___( pc01secret ) ;
                    const byteT* pbs = sSecretP ;
                {
                ZE( countT    , cc01secret ) ;
                ZE( count01T* , pc01secret ) ;
            {
            if( pc01pin )
    
            }
                if( bDefault ) delF( tin0P , *(countT**)&pczPinP ) ;
                if( pczPinP ) { mom( tin0P , pc01pin , cc01pin , 0 , 0 , pczPinP , 1 ) ; ___( pc01pin ) ; }
                if( bDefault ) { cioKeyF( tin0P , *(countT**)&pczPinP , idbKEYtYPE_PIN , idbKEYpINtYPE_SECRETsERVICE ) ; ___( pczPinP ) ; } //A: ASSUME: A COPY OF THIS PIN FILE RESIDES AT THE HOME OF THE MEDIATOR (SINGLE CELL ADAM)
                boolT bDefault = !pczPinP ;
            {
            ZE( countT    , cc01pin ) ;
            ZE( count01T* , pc01pin ) ;
        {
        ZE( countT    , cc01all ) ;
        ZE( count01T* , pc01all ) ;

        momC mom( tin0P , *this , TAG( TAGiDnULL ) ) ;
    {
    if( psGift && ( pczPinP || psToMediator ) )

    (*this)( tin0P , psGift , TAG( TAGiDnULL ) ) ;
    ZE( soulC* , psGift ) ;

    //else strokeF( tin0P , T("delivering using pin ")+T(pczPinP)+T("\r\n") ) ; //U::
    }
        }
            idptm >> *psToMediator ;
            portTimeC idptm ;
        {
        if( psToMediator )
        (*this)( tin0P , psToMediator , TAG( TAGiDnULL ) ) ;
    {
    if( !pczPinP ) //A: ASSUME: IF CALLER SPECIFIES A PIN THEN CALLER IS A MEDIATOR CALLING ME TO DELIVER TO FINAL RECIPIENT
    ZE( soulC* , psToMediator ) ;
    _IO_

    }
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::cioPutSecretF( tin0S& tin0P , const boolT& bQuitP , soulC& sSecretP , soulC& sToP , const countT* pczChannelSuffixP , const countT* pczPinP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

