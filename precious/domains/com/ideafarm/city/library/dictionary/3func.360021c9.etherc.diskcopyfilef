
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    delF( tinBaseP , postOld ) ;
    delF( tinBaseP , postNew ) ;
    third.dosCopyF( tinBaseP , osFileNameC( tinBaseP , *this , postNew ) , osFileNameC( tinBaseP , *this , postOld ) , cTriesP ) ;

    delF( tinBaseP , pstto ) ;
    delF( tinBaseP , psttn ) ;
    countT costOld = strMakeF( tinBaseP , LF , postOld , pstto ) ; ___( postOld ) ;
    countT costNew = strMakeF( tinBaseP , LF , postNew , psttn ) ; ___( postNew ) ;
    diskMakeDirIfNeededF( tinBaseP , psttn ) ;
    diskMapFileNameF( tinBaseP , pstto , psttOldP ) ; ___( pstto ) ;
    diskMapFileNameF( tinBaseP , psttn , psttNewP ) ; ___( psttn ) ;
    ZE( strokeS* , pstto ) ;
    ZE( strokeS* , psttn ) ;
    ZE( osTextT* , postOld ) ;
    ZE( osTextT* , postNew ) ;
    _IO_

    }
        if( POOP ) return ;
        __( psttOldP[ psttOldP[ 0 ].idAdam - 1 ].idAdam == '/' ) ; //MUST NOT DESIGNATE A DIRECTORY
        __( psttNewP[ psttNewP[ 0 ].idAdam - 1 ].idAdam == '/' ) ; //MUST NOT DESIGNATE A DIRECTORY
        if( POOP ) return ;
        __Z( psttOldP->idAdam ) ;
        __Z( psttNewP->idAdam ) ;
        if( POOP ) return ;
        __Z( psttOldP ) ;
        __Z( psttNewP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/voidT etherC::diskCopyFileF( tinBaseS& tinBaseP , const strokeS* const psttNewP , const strokeS* const psttOldP , const countT cTriesP )/*1*/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

