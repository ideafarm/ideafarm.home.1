
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        BLAMMOiD( 0x33333333 ) ;    //U:: TO FIND A BUG
        tinP.pPoop->chatterF( tinP , idLineCt , idiFileCt ) ;
        etherC::etRockIF( tinP ).traceF( tinP , (const strokeS*)(const osTextT*)ostoSay , flTRACE_PARAMETERiSoStEXT ) ;
        OStEXTAK( ostoSay , "scoopC / before using *pEtScratch, it is impotent (coding error):" ) ;
        OStEXT(   ostoSay , TUCK ) ;
    {
    if( tinP.pPoop != pPoopSave && POOP )    //20230610@1416: IF MY THREAD IS ALREADY USING etScratch THEN DON'T COMPLAIN ABOUT etScratch BEING IMPOTENT

    if( getNegAM( tinP.pPoop->fingerprint ) != FINGERnEG_POOPc ) { BLAMMOiD( 0x22222222 ) ; }
    if( !tinP.pPoop ) { BLAMMOiD( 0x11111111 ) ; }
    tinP.pEther = tinP.pEtScratch ; // THIS IS A WORKAROUND TO A DESIGN ERROR: tinP.pEther SHOULD BE ELIMINATED
    tinP.pPoop = &(const poopC&)*tinP.pEtScratch ;
    //_IO_
    //INOUT NOT USED TO AVOID TRACE CLUTTER AND ALSO TO AVOID STACK OVERFLOW WHEN TRACING INOUT
{
pEtherSave( tinP.pEther )
pPoopSave( tinP.pPoop ) ,
flagsCt( flSCOOPc_DTlOOKfORsCRATCHiMPOTENCE ) ,
idiFileCt( idiFileP ) ,
idLineCt( idLineP ) ,
idSerial( tinP.idSerial ) ,
/*1*/scoopC::scoopC( tinNormalS& tinP , const countT idLineP , const countT idiFileP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

