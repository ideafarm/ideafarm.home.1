
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    THREADmODE2rESTORE
    }
        //while( cUngrabsDone -- ) deviceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;                                 //20151023@0943: ADDED TO AVOID A DEADLOCK OBSERVED AT WILL BY WAITING SEVERAL TICKS USING ADAM 6ae
        //((tinNormalS&)tinBaseP).pSgnUtility->waitF( tinBaseP ) ;
        //countT cUngrabsDone = deviceP.ungrabF( tinBaseP , flGRABcUNGRABf_IF | flGRABcUNGRABf_ALLrECURSIONS ) ;  //20151023@0943: ADDED TO AVOID A DEADLOCK OBSERVED AT WILL BY WAITING SEVERAL TICKS USING ADAM 6ae

        //ANOTHER WAY TO AVOID THAT IS SIMPLY TO NAP OR YIELD HERE UNTIL THE STACK IS EMPTY
        //CONJ: THE FUNCTION OF THE SIGN IS TO PREVENT FILLING UP THE DRAWING JOB STACK
        //CONJ: I CAN ELIMINATE THE ISSUE BY JUST ELIMINATING THE USE OF THE SIGN
        //THE UNGRAB/GRAB HERE DOES NOT WORK FOR SOME REASON
        //THIS INDICATES A DESIGN ERROR, BUT I CANNOT FIX IT UNTIL I AM AGAIN FAMILIAR WITH THE CODE, WHICH WOULD TAKE SEVERAL STRONGS OF WORKING WITH IT
        //U:: 20151023@1047:  DEADLOCK OCCURS WITHIN SEVERAL TICK HERE BECAUSE I (tmDrawF) HAVE GRABBED deviceP AND tmDisplayF/liveF/messageHandler CANNOT GRAB deviceP SO CANNOT EVER GIVE THE SIGN

        etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("pelF/pushJob/-") ) ;

            thirdC::osThreadYieldIF( tinBaseP , TAG( TAGiDnULL ) ) ;
        while( cPending )
        //while( drawJobS::cInstancesIF() )

        etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("pelF/pushJob/ spinning") ) ;

        /*O*/   }
        /*O*/       *((tinNormalS&)tinBaseP).pag1->_deviceC_pStkJob << (byteT*)&job ;
        /*O*/       inc02AM( drawJobS::cInstancesIF() ) ;
        /*O*/       drawJobS job( cLever_rgb , ((tinNormalS&)tinBaseP).pSgnUtility , cPending , *this , *pSpace , *pPel ) ;
        /*O*/       inc02AM( cPending ) ;
        /*O*/   
        /*O*/       pelS*         pPel      = (pelS*)&(*pPelP)[ cLever_rgb ] ; // *pPel IS NOT YET CONSTRUCTED ; IT WILL BE CONSTRUCTED IN PASS 2
        /*O*/       const spaceS* pSpace    = (spaceS*)&(countT&)swSpace ;
        /*O*/       cLever_rgb              = swSpace.leverF( tinBaseP , idf ) ;
        /*O*/   {
        /*O*/   for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        /*O*/   ZE( countT , cPending ) ;

        // THESE TIMES ARE FOR 1 GLYPH IN ADAM 6ae
        // IT IS THE MOST INTERESTING SEGMENT OF CODE FOR STUDYING ANIMATION SPEED AND VARIABILITY THEREOF
        // EXECUTION OF THIS SNIPPET RANGES FROM 0 TIME TO 139 TIME (1/20 SECOND)

        //TRACEcALLnEST( "spaceC::pelF / pushing drawJobS" )  //U::TO FIND A BUG

        etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("pelF/pushJob/+") ) ;

        countT cFlavors = swSpace.cFlavorsF( tinBaseP ) ;
    {
    if( pPelP )
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

    pPelP = new( 0 , tinBaseP , LF ) pelC( tinBaseP , ether , deviceP , viewee ) ;

    if( pPelP ) { BLAMMO ; }

    _IO_
{
/*1*/voidT spaceC::pelF( tinBaseS& tinBaseP , pelC*& pPelP , deviceC& deviceP )/*1*/

/**/
*/
 this can be done with "grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ; "
caller must set thread priority to RUDE
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

