
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( POOP ) cbP = cbSave ;

    else                    __( cbP - off ) ;
    if( fStillHungryIsOkP ) cbP = off ;
    }
        if( !cbToDo || !cbNew || ( fStillHungryIsOkP && pbEnd ) ) break ; // TESTING cbNew IS JUST TO MAKE SURE THAT WE DON'T PEG CPU IN HERE
        }
            if( pbEnd && cbTrail ) thirdC::c_memsetIF( tinP , pbEnd , cbTrail ) ;
            const countT cbTrail = pbP + off - pbEnd ;
            pbEnd = thirdC::c_strchrIF( tinP , pbP + off - cbNew , bEnd ) ;
            pbP[ off ] = 0 ;
        {
        if( fStillHungryIsOkP && cbToDo )
        ZE( byteT* , pbEnd ) ;
        if( !POOP ) off += cbNew , cbToDo -= cbNew ;

        #endif




            //BOSpOOP




__( idiUse ) ;


    ;
    )
                        : IDiMPOTENCErAW
                        ? 1
                    : !IDiMPOTENCErAW
                    ? tinP.brcQuery
                : IDiMPOTENCErAW > ifcIDiMPOTENCEbASEeRRORcODE_max
                ? tinP.brcQuery
            : IDiMPOTENCErAW < ifcIDiMPOTENCEbASEeRRORcODE_min
            ? 0
        !tinP.bosFail
    (
idiUse =
static countT idiUse ;




//            BOS( WHATsfr , BOSoK , ReadFile( (HANDLE)handleP.osF( ifcIDtYPEhANDLE_FILE ) , pbP + off , cbBite , &cbNew , 0 ) )



    }
        tinP.brcRaw = _brcRawExp ;
        tinP.monitor.idWhat1 = _idWhatSaveBos ;
        }
            }
                /*if( F(POOP.flagsF()) & flPOOP_SMELLY ) { LOGrAW7( "BOS0   [brcLath,idLine,idiFile]: " , tinP.brcLath , " " , tinP.idLine_brcLath , " " , tinP.idiFile_brcLath , "\r\n" ) ; }*/
                tinP.idiFile_brcLath = DDNUMB ;
                tinP.idLine_brcLath = ifcLINE ;
                tinP.brcLath = tinP.brcQuery ;
            {
            if( tinP.brcQuery )
            tinP.brcQuery = _brcRaw ;
            BOSnOtIN( GetLastError() ) ;
            ZE( countT , _brcRaw ) ;
        {
        if( tinP.bosFail )
        }
            if( !( tally % CbOStALLYpERlOG ) ) logTallyIF( tally , LF , tinP.bosFail , tinP.bosFail ? idMeFail : idMeOk , "ReadFile( (HANDLE)handleP.osF( ifcIDtYPEhANDLE_FILE ) , pbP + off , cbBite , &cbNew , 0 )" ) ;
            countT tally = pg1.pHome->tallyHo.tallyF( tinP.bosFail ? idMeFail : idMeOk ) ;
            static countT idMeFail ;
            static countT idMeOk ;
        {
        if( pg1.pHome )
        processGlobal1S& pg1 = processGlobal1S::_processGlobal1I_IF() ;
        BOSoK ;
        countT _brcRawExp = (countT)(ReadFile( (HANDLE)handleP.osF( ifcIDtYPEhANDLE_FILE ) , pbP + off , cbBite , &cbNew , 0 )) ;
        WHATsfr
        countT _idWhatSaveBos = tinP.monitor.idWhat1 ;
        tinP.brcLath = tinP.brcQuery = 0 ;
    {





            BOSnOvALUE( WHATsfr , SetLastError( 0 ) )
        #elif defined( __NT__ )
            BOSpOOP
            BOSI( WHATsfr , BOSfAIL , DosRead( (HFILE)handleP.osF( ifcIDtYPEhANDLE_FILE ) , pbP + off , cbBite , &cbNew ) )
        #ifdef __OS2__

static        ZE( ULONG , cbNew ) ;
        cbToDo > 8192 ? cbBite = 8192 : cbBite = cbToDo ;
        ZE( countT , cbBite ) ;
    {
    while( !POOP )
    ZE( countT , off ) ;
    countT cbToDo = cbP ;
    byteT bEnd = *pbP ;
linkedC& root = processGlobal4I._handleC_linked_sm ; //U:: TO FIND A BUG

}
    countT foo = 2 ;
{
if( idIn == 0x11 )
countT idIn = 1 + incv02AM( idInLath ) ;
static countT idInLath ;
//U:: TO FIND A BUG

    const countT cbSave = cbP ;

    _IO_

    }
        if( POOP ) return ;
        #endif
            __( sizeof( countT ) != sizeof( HANDLE ) || fnu ) ;
        #elif defined( __NT__ )
            __( sizeof( countT ) != sizeof( HFILE ) || fnu ) ;
        #ifdef __OS2__
        ZE( boolT , fnu ) ;
        __Z( handleP ) ;
        __Z( cbP ) ;
        __Z( pbP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
{
/*1*/voidT thirdC::dosReadIF( tinS& tinP , byteT* const pbP , countT& cbP , const handleC& handleP , boolT fStillHungryIsOkP )/*1*/

/**/
*/
  if was still hungry, a 0 will be written to terminate the bytes actually read
  else, will not fail, and cbP will be set to the number of bytes actually read
  if 0, will fail unless cbP bytes can be read
 fStillHungryIsOkP
 handleP
  if an error occured, will be reset to its initial value
  after evaluation, if no error occured, will contain the number of bytes actually read
  specifies the number of bytes to read
  must not be 0
 cbP
  must contain the address of cbP bytes of memory that this adam can write to
 pbP
arguments
it is illegal to read from stdin
\<A HREF=\"5.10200f8.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosReadIF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

