
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        #endif

            //U: IF bMonitoredP THEN DO THE MONITORING LOOP HERE AND REPLACE bMonitoredP WITH A POINTER TO THE CALLER'S HANDLER FUNCTION

            }
                }
                    hThread.resetF() ;
                    ((tin1S&)tin0P).pag4->_thirdC_grab_lOsTid.ungrabF( tin0P ) ;
                    *((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle = hThread.osF( ifcIDtYPEhANDLE_THREAD ) ; // THIS HANDLE NEEDS TO BE KEPT BECAUSE THERE IS NO WAY TO GET IT LATER
                    ((tin1S&)tin0P).pag1->_thirdC_.lOsTid = tidP ;
                    ((tin1S&)tin0P).pag4->_thirdC_grab_lOsTid.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                if( tidP && tidP != - 1 && F(flagsP) & flPROCESShIRE_REGISTERtHREADhANDLE )
    
                }
                    hProcess.resetF() ;
                    ((tin1S&)tin0P).pag4->_thirdC_grab_lOsPid.ungrabF( tin0P ) ;
                    *((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle = hProcess.osF( ifcIDtYPEhANDLE_PROCESS ) ;
                    ((tin1S&)tin0P).pag1->_thirdC_.lOsPid = pidP ;
                    ((tin1S&)tin0P).pag4->_thirdC_grab_lOsPid.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                if( pidP && pidP != - 1 && F(flagsP) & flPROCESShIRE_REGISTERpROCESShANDLE )

                tidP = pinfo.dwThreadId ;
                pidP = pinfo.dwProcessId ;
                INCoShANDLES
                INCoShANDLES
            {
            else
            }
                hProcess.closeIfF() ;
                hThread.closeIfF() ;
            {
            if( POOP )

            if( !hProcess ) __1
            hProcess.osF( ifcIDtYPEhANDLE_PROCESS , (countT)pinfo.hProcess ) ;
            handleC hProcess( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_PROCESS ) ;

            if( !hThread ) __1
            hThread.osF( ifcIDtYPEhANDLE_THREAD , (countT)pinfo.hThread ) ;
            handleC hThread( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_THREAD ) ;

            delF( tin0P , postAll ) ;
            }
                ((tin1S&)tin0P).pEther->traceF( tin0P , T("dosExecPgmF / could not launch process [postAll]:    \"")+T(postAll)+T("\"") ) ;
                //((tin1S&)tin0P).pEther->traceF( tin0P , T("dosExecPgmF / could not launch process:\r\n\"")+T(postAll)+T("\"") , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;

                //LOGrAW( "\"\r\n" ) ;
                //LOGrAW( postAll ) ;
                //LOGrAW( "could not launch process: \"" ) ;

                delF( tin0P , postp ) ;
                }
                    thirdC::c_strncpyIF( tin0P , postp , postm , costap ) ;
                    newF( tin0P , LF , postp , costap ) ; ___( postp ) ;
                    const countT costap = 1 + c_strlenIF( tin0P , postm ) ;
                    osTextT* postm = "there is no \"path\" environment variable for this process" ;
                {
                if( !postp )
                dosScanEnvF( tin0P , postp , "path" ) ; ___( postp ) ;
                ZE( osTextT* , postp ) ;
                //THIS CODE IS DUPLICATED IN 102006a AND 102005d

                ((tin1S&)tin0P).pEther->traceF( tin0P , T("dosExecPgmF / CreateProcess / failed [POOP]:    ")+TF2(POOP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(postRc) ) ;
                const osTextT* postRc = (const osTextT*)processGlobal4S::_processGlobal4I_IF().mapIfcCode( rc ) ;
                countT rc = POOP ;
            {
            if( POOP )

            }
                }
                    DeleteProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ) ;

                    }
                        }
                            BOSpOOP
                            BOS( WHATsfr , BOSoK , CreateProcess( 0 , postAll , &sa , &sa , bInherit , flags1 , 0 , 0 , (STARTUPINFO*)&sinfo , &pinfo ) )

                            boolT bInherit = 0 ;                                               //20250530@1521: THIS IS PROBLEMATIC DUE TO INHERITANCE OF HANDLES THAT HAPPEN TO BE OPEN WHEN I AM CALLED ; IF HANDLE INHERITANCE IS EVER NEEDED, EDIT ME TO OBEY A FLAG THAT TURNS ON INHERITANCE FOR A CALL
                                                                                               //20240731@1430: INHERIT UNLESS I AM CLOAK (W/O ANALYSIS)
                                                                                               //20200522@1422: AGAIN WITHOUT ANALYSIS, CHANGED "1" BACK TO "0" FOR bInherit BECAUSE WHEN CLOAK CALLS ifcHireF, ALL OF ITS HANDLE APPEAR TO BE DUPLICATED INTO THE CHILD PROCESS, WHICH DEFEATS CLOAK'S ATTEMPT TO CLOSE AND THEN REOPEN ITS HANDLE TO A CLOAKED DIRECTORY
                                                                                               //20200423@1807: WITHOUT ANALYSIS, CHANGED "0" TO "1" FOR bInherit

                                                                                               //20250530@1523: I DO NOT REMEMBER WHY I TURNED ON INHERITANCE 5 YEARS AGO


                            //CONoUTrAW( "\r\n" ) ;
                            //CONoUTrAW( postAll ) ;
                            //CONoUTrAW( "CreateProcess: " ) ;
                        {
                        else
                        }
                            //BOS( WHATsfr , BOSoK , CreateProcessWithLogonW( (wchar_t*)puntUser , (wchar_t*)puntDomainDot , (wchar_t*)puntPassword , flagsLogonP , 0 , (wchar_t*)puntAll                 , flags1 , 0 , 0 , (STARTUPINFOW*)&sinfo , &pinfo ) )

                            countT foo2 = sizeof( STARTUPINFOW ) ;
                            countT foo1 = sizeof( STARTUPINFOA ) ;
            
                            { ZE( countT , off ) ; while( postAll[       off ] && off < TUCK ) { puntAll[      off ] = postAll[       off ] ; off ++ ; } puntAll[       off ] = 0 ; }
                            { ZE( countT , off ) ; while( postPasswordP[ off ] && off < TUCK ) { puntPassword[ off ] = postPasswordP[ off ] ; off ++ ; } puntPassword[  off ] = 0 ; }
                            { ZE( countT , off ) ; while( postDomainP[   off ] && off < TUCK ) { puntDomain[   off ] = postDomainP[   off ] ; off ++ ; } puntDomain[    off ] = 0 ; }
                            { ZE( countT , off ) ; while( postUserP[     off ] && off < TUCK ) { puntUser[     off ] = postUserP[     off ] ; off ++ ; } puntUser[      off ] = 0 ; }

                            unTextT puntDomainDot[ TUCK ] = { '.' , 0 } ;

                            unTextT puntAll[      TUCK ] ;
                            unTextT puntPassword[ TUCK ] ;
                            unTextT puntDomain[   TUCK ] ;
                            unTextT puntUser[     TUCK ] ;

                            BLAMMO ; //NOT SUPPORTED AS A MATTER OF POLICY:  CreateProcessWithLogonW IS NOT AVAILABLE TO WINDOWS VERSION 0400 (PLAIN NT) WHICH IS THE DEFAULT REV LEVEL FOR THE WINDOWS VERSION HEADER FILE
                        {
                        if( postUserP )
                        BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

                        //LOGrAW( "\"\r\n" ) ;
                        //LOGrAW( postAll ) ;
                        //LOGrAW( "launching \"" ) ;

                        SECURITYaTTRIBUTE_saUNRESTRICTED( 0 ) ;

                        }
                            c_strcatIF( tin0P , postAll , ostoSay ) ;
                            OStEXTC(  ostoSay , processGlobal2I.idNumaNode , 0 ) ;
                            OStEXTAK( ostoSay , " !idNumaNode " ) ;
                            OStEXT(   ostoSay , TUCK << 2 ) ;
                        {
                        if( processGlobal2I.idNumaNode && c_strstrIF( tin0P , postExeP , "\\ideafarm." ) && ( c_strstrIF( tin0P , postExeP , ".ipdos-we" ) || c_strstrIF( tin0P , postExeP , ".ipdos-we" ) ) )
                        c_strcatIF( tin0P , postAll , postArgsP ) ;
                        c_strcatIF( tin0P , postAll , " " ) ;            //U::postExeP SHOULD BE PASSED AS WOTH PARAM TO CreateProcess TO AVOID SECURITY VULNERABILITY; SEE DOC FOR CreateProcess; THE ISSUE ARISES WHEN postExe CONTAINS A PATH THAT CONTAINS A SPACE, WHICH WILL CAUSE INCORRECTD PARSING
                        c_strcpyIF( tin0P , postAll , postExeP ) ;
                        newF( tin0P , LF , postAll , costae ) ; ___( postAll ) ;

                        costae += TUCK ; // FOR !idNumaNode 12345678

                        }
                            costae = ((tin1S&)tin0P).brcRaw + 1 ;
                            BOSdOnOTtEST( WHATgbo , strlen( postExeP ) )
                        {
                        else
                        }
                            costae = c1 + 1 + ((tin1S&)tin0P).brcRaw + 1 ;
                            BOSdOnOTtEST( WHATgbo , strlen( postArgsP ) )
                            countT c1 = ((tin1S&)tin0P).brcRaw ;
                            BOSdOnOTtEST( WHATgbo , strlen( postExeP ) )
                        {
                        if( postArgsP )
                        ZE( countT , costae ) ;

                        }
                            ;
                                : (HANDLE)GetStdHandle( STD_ERROR_HANDLE )
                                ? (HANDLE)phErrorP->osF( phErrorP->idTypeF() )
                            sinfo.StartupInfo.hStdError = phErrorP

                            ;
                                : (HANDLE)GetStdHandle( STD_OUTPUT_HANDLE )
                                ? (HANDLE)phOutP->osF( phOutP->idTypeF() )
                            sinfo.StartupInfo.hStdOutput = phOutP

                            ;
                                : (HANDLE)GetStdHandle( STD_INPUT_HANDLE )
                                ? (HANDLE)phInP->osF( phInP->idTypeF() )
                            sinfo.StartupInfo.hStdInput = phInP

                            sinfo.StartupInfo.dwFlags |= STARTF_USESTDHANDLES ;
                        {
                        if( phOutP || phInP || phErrorP )

                        sinfo.lpAttributeList = (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 ;
                        sinfo.StartupInfo.dwFillAttribute = BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED ;
                        sinfo.StartupInfo.dwYCountChars = 0x300 ;
                        sinfo.StartupInfo.dwXCountChars = 0x400 ;
                        sinfo.StartupInfo.dwY = sinfo.StartupInfo.dwX = 0 ;
                        sinfo.StartupInfo.wShowWindow = /*SW_SHOWMAXIMIZED*/ SW_SHOWMINNOACTIVE ;
                        sinfo.StartupInfo.dwFlags = STARTF_USESHOWWINDOW | STARTF_USEPOSITION | STARTF_USECOUNTCHARS | STARTF_USEFILLATTRIBUTE ;
                        sinfo.StartupInfo.cb = sizeof sinfo ;
                        c_memsetIF( tin0P , (byteT*)&sinfo , sizeof sinfo ) ;
                        STARTUPINFOEX sinfo ;
                    {
                    if( bOk )

                    }
                        }
                            bOk = 1 ;
                        {
                        if( UpdateProcThreadAttribute( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 0 , PROC_THREAD_ATTRIBUTE_PREFERRED_NODE , &offNodePreferred , sizeof offNodePreferred , 0 , 0 ) )
                        WORD offNodePreferred = (WORD)offNumaNodeValidChosen ;  // THE NEXT LINE WILL FAIL WITH ANY SIZE OTHER THAN WORD
                        bOk = 0 ;
                    {
                    if( offNumaNodeValidChosen != NUMA_NO_PREFERRED_NODE )
                    countT offNumaNodeValidChosen = thirdC::osOffNumaNodeValidChosenIF( processGlobal2I.idNumaNode ) ;
                    boolT bOk = 1 ;
                {
                if( InitializeProcThreadAttributeList( (_PROC_THREAD_ATTRIBUTE_LIST*)pcInfo2 , 1 , 0 , &cba ) )

                memset( pcInfo2 , 0 , cba ) ;
                unsigned pcInfo2[ 0x100 / sizeof( unsigned ) ] ;
            {
            if( cba < 0x100 )
            c_memsetIF( tin0P , (byteT*)&pinfo , sizeof pinfo ) ;
            PROCESS_INFORMATION pinfo ;
            ZE( osTextT* , postAll ) ;

            InitializeProcThreadAttributeList( 0 , 1 , 0 , &cba ) ;
            SIZE_T cba = 0 ;

            else if( !bSandbox                                      ) flags1 |= DETACHED_PROCESS   ;
                 if( F(flagsP) & flPROCESShIRE_VISIBLE              ) flags1 |= CREATE_NEW_CONSOLE ;

            boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;

            ;
                : DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS /*U: | CREATE_SUSPENDED */
                ? DEBUG_PROCESS                           /*U: | CREATE_SUSPENDED */
            if( F(flagsP) & flPROCESShIRE_MONITORtHIS ) flags1 |= F(flagsP) & flPROCESShIRE_MONITORkIDS

            flagsT flags1 = CREATE_DEFAULT_ERROR_MODE | NORMAL_PRIORITY_CLASS | EXTENDED_STARTUPINFO_PRESENT ;
            BOSnOvALUE( WHATgbo , SetLastError( 0 ) )

        #elif defined( __NT__ )

            pidP = info.codeTerminate ;
            BOSpOOP
            BOSI( WHATsfr , BOSfAIL , DosExecPgm( postBadGuy , sizeof postBadGuy , EXEC_ASYNCRESULT , postArgsP , 0 , &info , postExeP ) )
            RESULTCODES info ;
            osTextT postBadGuy[ 0x80 ] ;
            //U: ENSURE THAT KID PROCESS INHERITS THE PRIORITY OF THE CURRENT PROCESS

            __( F(flagsP) ) ; //U: SUPPORT

        #ifdef __OS2__
    {
    _IO_

    //LOGrAW( "\r\n" ) ;
    //LOGrAW( postArgsP ) ;
    //LOGrAW( "\r\n" ) ;
    //LOGrAW( postExeP ) ;
    //LOGrAW( "\r\n" ) ;
    //COMMENT OUT IN PRODUCTION.  TO FIND A BUG


    }
        if( POOP ) return ;
        FV( flPROCESShIRE , flagsP )
        __( !((tin1S&)tin0P).pag1->_thirdC_.pSwThreadHandle ) ;
        __( !((tin1S&)tin0P).pag1->_thirdC_.pSwProcessHandle ) ;
        __Z( postExeP ) ;
        __( pidP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL    
    SCOOP
{
/*1*/voidT thirdC::dosExecPgmF( tin0S& tin0P , countT& tidP , countT& pidP , const osTextT* const postExeP , const osTextT* const postArgsP , const flagsT flagsP , const handleC* phOutP , const handleC* phErrorP , const handleC* phInP , const osTextT* const postUserP , const osTextT* const postPasswordP , const flagsT flagsLogonP , const osTextT* const postDomainP )/*1*/

//U:COMBINE INTO A SINGLE API: 102006a AND 102005d

/**/

*/
  it is illegal to set a value other than the default when calling from the definition of an adam
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.00101db.flPROCESShIRE!||
 flagsP
 postArgsP
 postExeP
  the caller must close this handle when it is not going to use it any more
  must be 0
 hProcessP
  the caller must close this handle when it is not going to use it any more
  must be 0
 hThreadP
 pidP
 tidP
arguments
 conj: occasionally, these threads are never terminated, resulting in leakage (gradual accumulation of live threads)
operating system bug: on some os's, this call will cause threads to be launched that remain alive for about 6 tocks
this instruction returns immediately; it does not block until the process dies
constructs a process
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.102006a.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$dosExecPgmF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

