
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        etThread = 0 ;

        }
            }
                }
                    etThread.delF( tin0P , psttLog ) ;
                    //etThread.ifcSayF( tin0P , psttLog , flSAY_APPEND | flSAY_LOG ) ;
                    etThread.strConcatenateF( tin0P , psttLog , stPhrases ) ; ___( psttLog ) ;
                    ZE( strokeS* , psttLog ) ;

                    }
                        stPhrases << postOldC( tin0P , etThread , T(" ")+TF1(idMetric)+T("/")+TF1(swTotal1)+(swTotal2?T("/")+TF1(swTotal2):T("")) ) ;
                        idMetric = swTotal1.leverF( tin0P , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = swTotal1.cFlavorsF( tin0P ) ;
                    stackC stPhrases( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_byteT ) ;

                    }
                        etThread.osTimeNowF( tin0P , timeL1 , timeL2 ) ;
                        timeL1 = timeL2 = 0 ;
                    {
                    if( ether )
                {
                if( ether || etThread.osTimeTestF( tin0P , timeL1 , timeL2 , TICK ) )

                }
                    writeFishF( tin0P , etThread , lake , idMetric , swTotal1 , swTotal2 ) ;
                    if( total1 < total1Lag ) total2 ++ ;
                    total1 += value ;
                    countT total1Lag = total1 ;
                    countT& total2 = swTotal2 ;
                    countT& total1 = swTotal1 ;
                {
                if( idMetric )

                souli >> value ;
                souli >> idMetric ;
                ZE( countT , value ) ;
                idMetric = 0 ;

                soc.readF( tin0P , souli , idPort , nicName ) ;
                soulC souli( tin0P , TAG( TAGiDnULL ) ) ;
                nicNameC nicName ;
                ZE( countT , idPort ) ;
            {
            while( !ether && !etThread )
            ZE( sCountT , timeL2 ) ;
            ZE( countT , timeL1 ) ;

            soc.bindF( tin0P , ifcPORToLD2_IFC11CATCHmETRICS ) ;
            socketC soc( tin0P , etThread , TAG( TAGiDnULL ) , ifcSOCKETtYPE_DATAgRAM ) ;
        {

        lakeC lake( tin0P , etThread ) ;
    {
    while( !ether )

    loadDataF( tin0P , etThread , idMetric , swTotal1 , swTotal2 , tJournal ) ;
    TN( tJournal , "///d/ideafarm." ) ; tJournal += TF1(etherC::ifc_idHomeI_IF())+T(".log.journal.5240104") ;

    switchC swTotal2( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idMetric ) ;
    switchC swTotal1( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_null , idMetric ) ;
    ZE( countT , idMetric ) ;

    stateS state( tin0P , etThread ) ;
{

TODO

}
    etThread.delF( tin0P , postr ) ;
    lakeP.writeF( tin0P , count3S( DDNUMB , 1 ) , postr , costr , 1 , 1 ) ; //U:OPTIMIZE: ELIMINATE THE COPYING
    etThread.delF( tin0P , psttr ) ;
    countT costr = etThread.strMakeF( tin0P , LF , postr , psttr ) ; ___( postr ) ;
    ZE( osTextT* , postr ) ;

    }
        etThread.strFuseF( tin0P , psttr , t9           ) ; ___( psttr ) ;
        etThread.strFuseF( tin0P , psttr , tBody ) ; ___( psttr ) ;
        etThread.strFuseF( tin0P , psttr , t0+t1+ta+t2  ) ; ___( psttr ) ;

        etThread.strMakeF( tin0P , LF , psttr , T("") , t0.csF( tin0P ) + t1.csF( tin0P ) + ta.csF( tin0P ) + t2.csF( tin0P ) + tBody.csF( tin0P ) + 1 + t9.csF( tin0P ) ) ;

        //U: REMOVE UNUSED TN ITEMS IN THIS BLOCK
        textC t0 = T("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(t1.csF(tin0P)+ta.csF(tin0P)+t2.csF(tin0P)+tBody.csF(tin0P)+t9.csF(tin0P),flFORMAT_FILLzE|flFORMAT_NObASE|flFORMAT_FOREIGN,8,0xa)+T("\r\n\r\n") ;
        TN( t9 , "</PRE></BODY>" ) ;
        TN( t7 , /*".html"*/ "\">down to the root</A>\r\n" ) ;
        TN( t2 , "</TITLE>\r\n</HEAD>" postHTMLbODYpART1 "\r\n" ) ;
        textC t1 = T("<!-- ")+TF3(ta.csF(tin0P),flFORMAT_FILLzE,8)+T(" --><!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\r\n<HEAD><TITLE>") ; //THE LEADING 4 STROKES CAUSE 4 BYTES TO BE RESERVED IN THE HTML FILE FOR A countT VALUE
        TN( ta , "report by 5240104 on ifc11" ) ;
    {
    ZE( strokeS* , psttr ) ;

    }
        tBody += (idf==1?T(""):T("\r\n"))+T("idMetric ")+TF3(idMetricP&0xfffffff,flFORMAT_null,8)+T(" = ")+(swTotal2P?TF3(swTotal1P,flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+TF1(swTotal2P):TF1(swTotal1P)) ; //ASSUME: countT IS 4 BYTES
        idMetricP = swTotal1P.leverF( tin0P , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swTotal1P.cFlavorsF( tin0P ) ;
    TN( tBody , "report by 5240104 on ifc11 of metrics caught\r\n\r\n" ) ;
{
voidT writeFishF( tin0S& tin0P , etherC& etThread , lakeC& lakeP , countT& idMetricP , switchC& swTotal1P , switchC& swTotal2P )

}
    etThread.delF( tin0P , posti ) ;
    }
        etThread.delF( tin0P , psttl ) ;
        }
            }
                etThread.delF( tin0P , psttw ) ;
                }
                    etThread.delF( tin0P , psttw2 ) ;
                    }
                        }
                            }
                                swTotal2P = etThread.strDigitsToSCountF( tin0P , psttw2 ) ;
                                etThread.strSubstringF( tin0P , psttw2 , idf2 , sttq2 , sttSlash , psttw ) ; ___( psttw2 ) ;
                                etThread.delF( tin0P , psttw2 ) ;
                            {
                            if( idf2 )
                            swTotal1P = etThread.strDigitsToSCountF( tin0P , psttw2 ) ;
                            etThread.strSubstringF( tin0P , psttw2 , idf2 , sttq2 , sttSlash , psttw ) ; ___( psttw2 ) ;
                            etThread.delF( tin0P , psttw2 ) ;
                        {
                        if( idMetricP && idf2 )
                        idMetricP = etThread.strDigitsToSCountF( tin0P , psttw2 ) ;
                    {
                    if( psttw2 && psttw2->idAdam )
                    etThread.strSubstringF( tin0P , psttw2 , idf2 , sttq2 , sttSlash , psttw ) ; ___( psttw2 ) ;
                    ZE( strokeS* , psttw2 ) ;
                    countT idf2 = 1 ;
                    strokeS sttq2( (countT)0 , sc_IGNOREqUOTES ) ; //PARSE THE LINE AND FILL THE SWITCHES
                {
                if( etThread.strIdF( tin0P , countTC( 1 ) , sttSlash , psttw ) )

                etThread.strSubstringF( tin0P , psttw , idf , sttq , tDelim , psttl , 1 ) ; ___( psttw ) ;
            {
            while( !etThread && idf )
            ZE( strokeS* , psttw ) ;
            strokeS sttSlash( '/' ) ;
            //sttq = ze ;
            idf = 1 ;
            TN( tDelim , " " ) ;
        {
        if( psttl )

        if( !psttl ) { etThread.strSubstringLineF( tin0P , psttl , idf , sttq , T(posti) , - 1 ) ; ___( psttl ) ; } //JUST IN CASE THE FILE IS NOT TERMINATED BY A CRLF
                       etThread.strSubstringLineF( tin0P , psttl , idf , sttq , T(posti) , - 2 ) ; ___( psttl ) ;   //THE FILE SHOULD BE TERMINATED BY A CRLF
        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        countT idf = 1 ;
        ZE( strokeS* , psttl ) ;
    {
    else
    if( etThread ) etThread = 0 ;
    etThread.boxGetShadowF( tin0P , posti , costi , psttFileP , 1 ) ; ___( posti ) ;
    ZE( countT , costi ) ;
    ZE( byteT* , posti ) ;
{
voidT loadDataF( tin0S& tin0P , etherC& etThread , countT& idMetricP , switchC& swTotal1P , switchC& swTotal2P , const strokeS* const psttFileP )

STATE0

/*1*/WAKEhIDE( "city.catch.measurements" )/*1*/
/**/
*/
i use the measurements to update files
i live on ifc11 and am thrown measurements from all over the Internet
i catch measurements thrown at me
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

