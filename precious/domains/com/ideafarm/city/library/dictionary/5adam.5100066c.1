
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.strokeF( tin0P , T("loafing\r\n") ) ;
THREADmODE3rESTORE

}
    //selMeAll.walkF( tin0P , selectWalkCBF ) ;
    //selectC selMeAll = selCust | selTran ;

    //selectC selTran( tin0P , *pczfTranEmail , postEmailMe ) ;
    //puseC puseTran2( puseTran ) ; //-------------------------------------------------------------------------------------------------------------------------------------

    selCust.walkF( tin0P , selectWalkCBF ) ;
    selectC selCust( tin0P , *pczfCustEmail , postEmailMe ) ;
    //puseC puseCust2( puseCust ) ; //-------------------------------------------------------------------------------------------------------------------------------------

    chatterAllF( tin0P , etThread , puseCust /*, puseTran*/ , T("after creating new customer record") ) ;

    //}
    //    }
    //        entry << _fe_pushC( 2000 ) ;
    //        entry << *pczfTranQuantity ;
    //
    //        entry << _fe_pushC( 1 ) ;
    //        entry << *pczfTranIdProduct ;
    //
    //        entry << _fe_pushC( postEmailMe ) ;
    //        entry << *pczfTranEmail ;
    //    
    //        recordC entry( tin0P , count5S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , PUSE.dispenseUniqueListNameF() ) ) ;
    //    {
    //
    //    listC::dictionaryReplaceOsTextIF( tin0P , pczfTranQuantity ) ;
    //    listC::dictionaryReplaceOsTextIF( tin0P , pczfTranIdProduct ) ;
    //    listC::dictionaryReplaceOsTextIF( tin0P , pczfTranEmail ) ;
    //
    //    puseC puseTran1( puseTran ) ;
    //{
    //countT pczfTranQuantity[]  = { (countT)"quantity" , 0 } ;
    //countT pczfTranIdProduct[] = { (countT)"idProduct" , 0 } ;
    //countT pczfTranEmail[]     = { (countT)"email" , 0 } ;

    }
        //entry << _fe_pushC( "Wo'O Ideafarm" ) ;
        //entry << *pczfCustName ;

        entry << _fe_pushC( postEmailMe ) ;
        entry << *pczfCustEmail ;
    
        recordC entry( tin0P , count5S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION , PUSE.dispenseUniqueListNameF() ) ) ;
    {

    listC::dictionaryReplaceOsTextIF( tin0P , pczfCustName ) ;
    listC::dictionaryReplaceOsTextIF( tin0P , pczfCustEmail ) ;

    //puseC puseCust1( puseCust ) ; //-------------------------------------------------------------------------------------------------------------------------------------

    countT pczfCustName[]  = { (countT)"name" , 0 } ;
    countT pczfCustEmail[] = { (countT)"email" , 0 } ;

    //chatterAllF( tin0P , etThread , puseCust , puseTran , T("before anything") ) ;
    
    //puseC puseTran( tin0P , "transactions" , flPOOLc_null , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ;
    puseC puseCust( tin0P , "customers"    , flPOOLc_null , ifcIDsTATEsPACE_MULTIPLEaDAMS ) ; //--------------------------------------------------------------------------------------------------

    osTextT postEmailMe[] = "abcd" ;
{
THREADmODE3oN( flTHREADmODE3_UNLOCKpOOLiDENTITY )

TODO

}
    //etThread.strokeF( tin0P , T(psttP)+T("/-:\r\n") ) ;

    etThread.strokeF( tin0P , T("index/-:\r\n") ) ;
    listC::chatterIF( tin0P ) ;
    etThread.strokeF( tin0P , T("index/+:\r\n") ) ;
    puseC puseIndex( tin0P , ifcIDpOOL_HOMEtEMP ) ;
    
    //etThread.strokeF( tin0P , T("transactions/-\r\n") ) ;
    //listC::chatterIF( tin0P ) ;
    //etThread.strokeF( tin0P , T("transactions/+\r\n") ) ;
    //puseC puseTransactions( puseTransactionsP ) ;
    //
    //etThread.strokeF( tin0P , T("customers/-\r\n") ) ;
    //listC::chatterIF( tin0P ) ;
    //etThread.strokeF( tin0P , T("customers/+\r\n") ) ;
    //puseC puseCustomers( puseCustomersP ) ;

    //etThread.strokeF( tin0P , T(psttP)+T("/+:\r\n") ) ;
{
voidT chatterAllF( tin0S& tin0P , etherC& etThread , puseC& puseCustomersP /*, puseC& puseTransactionsP*/ , const strokeS* const psttP )

}
    return flSELECTwALKcALLbACKrc_null ;
    CONoUTrAW( "================== **** CHATTERING SELECTED RECORD (END) ==============================\r\n" ) ;
    POPtINaRGS
    flagsT flagsRC = listC::walkIF( tin0P , hRecordP ) ;
    ((tin9S&)tin0P).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
    ((tin9S&)tin0P).ta.pushed.u.listWalk.util.pcP[ 0 ] = ( (listC*)hRecordP.osF( ifcIDtYPEhANDLE_LISTING ) )->nameF() ;
    ((tin9S&)tin0P).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
    ((tin9S&)tin0P).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
    PUSHtINaRGS
    CONoUTrAW( "================== **** CHATTERING SELECTED RECORD (BEGIN) ==============================\r\n" ) ;

    if( tin0P.idTypeTin - ifcIDtYPEtIN_FULL ) { BLAMMOiD( tin0P.idTypeTin - ifcIDtYPEtIN_FULL ) ; }
{
flagsT selectWalkCBF( tin0S& tin0P , etherC& etThread , handleC& hRecordP )

/*1*/WAKEsHOWtEXT( "doodle.paypal.notices.to.listC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

