
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return cbFree ;

    }
        }
            thirdC::c_strncpyIF( tin0P , home.postHome , tHome , sizeof home.postHome ) ;

            delF( tin0P , psttNoSlash ) ;
            TN( tHome , psttNoSlash ) ;

            strSubstringF( tin0P , psttNoSlash , idf , idl , psttP ) ; ___( psttNoSlash ) ;
            countT idl = psttP->idAdam - 1 ;
            countT idf = 1 ;
            ZE( strokeS* , psttNoSlash ) ;
        {
        if( bIdeafarm && psttP )

        }
            DEL( pInfo ) ;
            if( pInfo ) cbFree = pInfo->cBytesPerSector * pInfo->cSectorsPerAllocationUnit * pInfo->cUnusedUnits ;
            diskInfoF( tin0P , pInfo , psttP ) ; ___( pInfo ) ;
            ZE( infoDiskS* , pInfo ) ;
        {

        delF( tin0P , psttEnv ) ;
        delF( tin0P , psttSetting ) ;
        }
            delF( tin0P , psttPath ) ;

            }
                strMakeF( tin0P , LF , psttP , psttPath ) ; ___( psttP ) ;
                diskMakeDirF( tin0P , psttPath ) ;
                delF( tin0P , psttDiskBest ) ;
                if( !POOP ) psttPath[ CSpREFIX + 3 ] = psttDiskBest[ CSpREFIX + 3 ] ;
                diskFindMostFreeSpaceF( tin0P , psttDiskBest ) ; ___( psttDiskBest ) ;
                ZE( strokeS* , psttDiskBest ) ;
            {
            if( !psttP )

            }
                delF( tin0P , pstt1List ) ;
                }
                    }
                        break ;
                        strMakeF( tin0P , LF , psttP , psttc1 ) ; ___( psttP ) ;
                    {
                    FORsTRINGSiN1( pstt1List )
                {
                if( pstt1List && pstt1List->idAdam )
                QUITOZ diskFindFileOrDirF( tin0P , pstt1List , fnLike.pathF() , &pat ) ; ___( pstt1List ) ; QUITR
                ZE( strokeS* , pstt1List ) ;
                
                patternC pat( tin0P , *this , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                fileNameC fnLike( tin0P , *this , psttPath ) ;
            {

            }
                strFuseF( tin0P , psttPath , tPath ) ; ___( psttPath ) ;
                }
                    __1 ;   //20231123@1755: ADDED BECAUSE AFAIK THE CODE NEVER USES A KEY OTHER THAN "ideafarm" ; IF THIS FUNCTIONALITY IS EVER NEEDED, DEFINE A THREADmODE FLAG TO ENABLE THIS (TO NOT WARN AND TO NOT BECOME IMPOTENT)
                    traceF( tin0P , T("diskChooseSiteF / warning: probable configuration error (missing drive letter?): unexpected key [pattern]: ")+tPath ) ;
                {
                if( strCompareF( tin0P , psttKeyP , T("ideafarm") ) )
                TN( tPath , "" ) ; tPath = T("///?/")+T(psttKeyP)+T(".home.")+TF2(idHomeDisk,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("/") ;
            {
            else
            if( psttPathP ) { strFuseF( tin0P , psttPath , psttPathP                                                 ) ; ___( psttPath ) ; }
            ZE( strokeS* , psttPath ) ;
            const countT idHomeDisk = ifc_idHomeIdisk_IF() ;
        {
        else
        //}
        //    strMakeF( tin0P , LF , psttP , psttEnv ) ; ___( psttP ) ;
        //    delF( tin0P , psttb ) ;
        //    if( psttb && !psttb->idAdam ) diskMakeDirF( tin0P , psttEnv ) ;
        //    diskFindFileOrDirF( tin0P , psttb , psttEnv ) ; ___( psttb ) ;
        //    ZE( strokeS* , psttb ) ;
        //    __( psttEnv[ CSpREFIX - 1 + psttEnv->idAdam ].idAdam - '/' ) ;
        //{
        //else if( psttEnv )
        //DEPRECATED FOR PORTABILITY: ALL "ENVIRONMENT" SETTINGS ARE PICKED UP FROM LITTLE FILES IN THE ROOT DIRECTORY "c"":\"
        }
            strMakeF( tin0P , LF , psttP , psttSetting ) ; ___( psttP ) ;
            delF( tin0P , psttb ) ;
            if( psttb && !psttb->idAdam ) diskMakeDirF( tin0P , psttSetting ) ;
            diskFindFileOrDirF( tin0P , psttb , fnLike.pathF() , &pat ) ; ___( psttb ) ;
            ZE( strokeS* , psttb ) ;

            patternC pat( tin0P , *this , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
            fileNameC fnLike( tin0P , *this , psttSetting ) ;

            __( psttSetting[ CSpREFIX - 1 + psttSetting->idAdam ].idAdam - '/' ) ;
        {
        if( psttSetting )

        //A: }
        //A:     else        POOPR
        //A:     if( !POOP ) { strMakeF( tin0P , LF , psttSetting , T(postValue) ) ; ___( psttSetting ) ; }
        //A: 
        //A:     thirdC::dosReadIF( tin0P , postValue , costValue , tFile ) ;
        //A:     POOPIE
        //A: 
        //A:     countT  costValue = sizeof postValue ;
        //A:     osTextT postValue[ 0x100 ] ;
        //A: 
        //A:     TN( tFile , "c" ":\\ideafarm." ) ; tFile += TF1(etherC::ifc_idHomeIdisk_IF())+T(".setting.keyValue.")+T(psttKeyP) ;
        //A: {
        //A: 20141129@2025: DISABLED TO KEEP SYNCH WITH diskFindHomeIF ; THE USE OF LITTLE SETTINGS FILES IS OBSOLETE ; IF A SETTING IS TO BE USED, QUERY THE SETTINGS bitTreeC

        ZE( strokeS* , psttSetting ) ;

        //osEnvironmentVariableF( tin0P , psttEnv , psttKeyP ) ; ___( psttEnv ) ;
        ZE( strokeS* , psttEnv ) ;
    {
    else
    if( bIdeafarm && home.postHome[ 0 ] ) { strMakeFromOsTextF( tin0P , psttP , T(ifFileNameC(tin0P,third,home.postHome))+T("/") ) ; ___( psttP ) ; }
    ZE( countT , cbFree ) ;

    boolT bIdeafarm = !psttPathP && !strCompareF( tin0P , psttKeyP , T("ideafarm") ) ;
    homeS& home = homeS::homeIF() ;

    _IO_

    }
        if( POOP ) return 0 ;
        __( !!psttKeyP && !psttKeyP->idAdam ) ;
        if( POOP ) return 0 ;
        __( psttPathP && psttPathP[ CSpREFIX - 1 + psttPathP->idAdam ].idAdam - '/' ) ;
        __( !psttPathP && !psttKeyP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/countT etherC::diskChooseSiteF( tin0S& tin0P , strokeS*& psttP , const strokeS* const psttKeyP , const strokeS* const psttPathP )/*1*/

/**/
*/
 psttPathP
   must not contain '/' or '.'
  must be alphanumeric or '_'
  example: T("103001f")
  example: T("ideafarm")
 psttKeyP
 psttP
arguments
evaluates to the number of bytes of free space
  \<A HREF=\"5.d210104.1.1.0.html\"\>d210104:  WAKEsHOW( "example.simplest.func.103001f.etherC.diskChooseSiteF" )\</A\>
 simplest
examples
\<A HREF=\"5.103001f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$diskChooseSiteF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

