
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.strokeF( tinBaseP , T("ok\r\n") ) ;
etThread.delF( tinBaseP , postx ) ;
etThread.boxPutF( tinBaseP , T("///ideafarm/precious/domains/com/ideafarm/city/library/snip/")+T(psttFileFrom)+T(".h") , postx , costx ) ;
etThread.delF( tinBaseP , pstto ) ;
//etThread.strokeF( tinBaseP , pstto ) ;
countT costx = etThread.strMakeF( tinBaseP , LF , postx , pstto ) ; ___( postx ) ;
ZE( osTextT* , postx ) ;

etThread.delF( tinBaseP , pstti ) ;
}
    }
        etThread.delF( tinBaseP , psttl ) ;
        }
            etThread.delF( tinBaseP , pstt1w ) ;
            }
                etThread.delF( tinBaseP , psttOldCode ) ;
                etThread.delF( tinBaseP , psttTitle ) ;
                etThread.strFuseF( tinBaseP , pstto , T(psttOldCode)+T(" , \"")+T(psttTitle)+(idf?T("\" ,\r\n"):T("\"\r\n")) ) ; ___( pstto ) ;

                }
                    }
                        }
                            else           { etThread.strMakeF( tinBaseP , LF , psttOldCode  , psttc1 ) ; ___( psttOldCode ) ; }
                            }
                                etThread.strWordF( tinBaseP , psttTitle , psttc1 , sttq2 , sttu , 2 ) ; ___( psttTitle ) ;
                            {
                            if( idw == 2 )
                            //sttq2 = ze ;
                            countT idf2 = 1 ;
                        {
                        if( ++ idw > 1 )
                    {
                    FORsTRINGSiN1( pstt1w )
                    ZE( countT , idw ) ;
                {
                ZE( strokeS* , psttOldCode  ) ;
                ZE( strokeS* , psttTitle ) ;
            {
            if( cWords == 3 )
            countT cWords = etThread.strWordsOldF( tinBaseP , pstt1w , psttl , sttq ) ; ___( pstt1w ) ;
            strokeS sttq ;
            ZE( strokeS* , pstt1w ) ;
        {
        if( psttl )
        etThread.strSubstringLineF( tinBaseP , psttl , idf , sttq , pstti ) ; ___( psttl ) ;
        ZE( strokeS* , psttl ) ;
    {
    while( idf && !etThread )
    strokeS sttu('_') ;
    strokeS sttq2( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf2 = 1 ;
    //sttq = ze ;
    idf = 1 ;

    etThread.strMakeF( tinBaseP , LF , pstto , T("") , csttSnip ) ; ___( pstto ) ;
{
ZE( strokeS* , pstto ) ;

__( pstti && !pstti->idAdam ) ;
__Z( pstti ) ;
__( idClass - 3 ) ;
etThread.delF( tinBaseP , psttSnip ) ;
countT csttSnip = psttSnip ? psttSnip->idAdam : 0 ;

while( !etThread && idClass && idClass != 3 ) ;
}
    etThread.strSubstringDelimitedF( tinBaseP , pstti , idClass , idf , sttq , psttSnip ) ; ___( pstti ) ;
    idClass = 0 ;
    etThread.delF( tinBaseP , pstti ) ;
{
do
strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
countT idf = 1 ;
ZE( countT , idClass ) ;
ZE( strokeS* , pstti ) ;

}
    //etThread.traceF( tinBaseP , psttSnip , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
    //etThread.traceF( tinBaseP , T("snip:") ) ;
    //etThread.boxPutF( tinBaseP , T("///d/tmp/foo.ttt") , tSnip2 , tSnip2.csF( tinBaseP ) ) ;
    //TN( tSnip2 , psttSnip ) ;
    etThread.strSubstringF( tinBaseP , psttSnip , idf , sttq , psttFileFrom , tIn ) ; ___( psttSnip ) ;
    etThread.delF( tinBaseP , psttSnip ) ;
    //etThread.boxPutF( tinBaseP , T("///d/tmp/foo.ttt") , tSnip1 , tSnip1.csF( tinBaseP ) ) ;
    //TN( tSnip1 , psttSnip ) ;
    //etThread.traceF( tinBaseP , psttSnip , flTRACE_NOpREFIX | flTRACE_KEEPcRlF ) ;
    //etThread.traceF( tinBaseP , T("snip:") ) ;
    etThread.strSubstringF( tinBaseP , psttSnip , idf , sttq , psttFileFrom , tIn ) ; ___( psttSnip ) ;
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;

    etThread.delF( tinBaseP , posti ) ;
    TN( tIn , posti ) ;    
    etThread.boxGetShadowF( tinBaseP , posti , costi , T("///ideafarm/precious/domains/com/ideafarm/city/library/snip/ipdos.h") ) ; ___( posti ) ;
    ZE( countT   , costi ) ;
    ZE( osTextT* , posti ) ;
{
ZE( strokeS* , psttSnip ) ;

etThread.traceF( tinBaseP , T("[psttFileFrom]:    ")+T(psttFileFrom) ) ;

__Z( psttFileFrom ) ;
}
    }
        else if( !psttFileFrom ) psttFileFrom = psttc1 ;
        if( cSkip && cSkip -- ) ;
        etThread.traceF( tinBaseP , T("param: \"")+T(psttc1)+T("\"\r\n") ) ;
    {
    FORsTRINGSiN1( pstt1p )
    countT cSkip = 4 ;
    ZE( countT , ids ) ;
    strokeS* const pstt1p = etThread.ether_pstt1_processParametersI_F( tinBaseP ) ;
{
ZE( const strokeS* , psttFileFrom ) ;

CONoUTrAW( "SYMBOL LOOKUP TABLE\r\n" ) ;

TODO

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_SYMBOLtABLE" )/*1*/
/**/
*/
writes a lookup array file from a snip file
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

