
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return bTagsStillExist ;
    delF( tin0P , psttOld ) ;

    __( STOP ) ;
    }
        }
            }
                delF( tin0P , psttKid ) ;
                if( !bTagsStillExist ){ idfTrim2 = 1 ; sttqTrim2 = sttq ; bTagsStillExist = !!strIdF( tin0P , 0 , flSTRmATCH_null , idfTrim2 , sttqTrim2 , T("/" "/" "|" "|" "!") , psttP ) ; }

                }
                    }
                        delF( tin0P , psttw ) ;
                        strFuseF( tin0P , psttP , psttw ) ;
                        strFuseF( tin0P , psttP , T(" ") ) ; ___( psttP ) ;
                        strIndentOldF( tin0P , psttw , 1 , strokeS() , 0 , 0 ) ;
                        strTrimF( tin0P , psttw , 0 , T(TbLACKnEWlINE) ) ;
                        strReplaceAnyF( tin0P , psttw , 0 , T(" ") , T(" ") ) ;
                        strSubstringF( tin0P , psttw , idfChunk , sttqc , idlChunk , psttKid ) ;
                        ZE( countT , idlChunk ) ;
                    {
                    if( idfChunk )

                    delF( tin0P , psttw ) ;
                    strFuseF( tin0P , psttP , T("\r\n") ) ; ___( psttP ) ;
                    strFuseF( tin0P , psttP , psttw ) ;
                    strFuseF( tin0P , psttP , T(" ") ) ; ___( psttP ) ;
                    strIndentOldF( tin0P , psttw , 1 , strokeS() , 0 , 0 ) ;
                    strTrimF( tin0P , psttw , 0 , T(TbLACKnEWlINE) , T("\t\x1a") , strokeS() ) ;
                    strSubstringF( tin0P , psttw , idfChunk , sttqc , T("*/") , psttKid ) ;

                    delF( tin0P , psttw ) ;
                    strSubstringF( tin0P , psttw , idfChunk , sttqc , T("/*") , psttKid ) ;

                    strokeS sttqc( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idfChunk = 1 ;
                    ZE( strokeS* , psttw ) ;
                {

                strAbridgeF( tin0P , psttKid , 0 , 0 ) ;
                strReplaceAutomaticallyF( tin0P , psttKid ) ;
                strReverseF( tin0P , psttKid , 0 , T("\r\n") ) ;
                delF( tin0P , postKid ) ;
                strMakeF( tin0P , LF , psttKid , T(postKid) ) ;
                ZE( strokeS* , psttKid ) ;
                delF( tin0P , psttw ) ;
                }
                    }
                        costKid = strMakeF( tin0P , LF , postKid , psttw ) ;
                        ifcSayIF( T("103002f ERROR: File \"")+T(psttw)+T("\" does not exist") , flSAY_APPEND | flSAY_LOG ) ;
                        POOPR
                    {
                    if( POOP )
                    ((tin123S&)tin0P).pEtScratch->boxGetShadowF( tin0P , postKid , costKid , psttw , 1 ) ; ___( postKid );
                    ZE( countT   , costKid ) ;
                    SCOOPS
                {
                IFsCRATCH
                ZE( osTextT* , postKid ) ;
                strSubstringF( tin0P , psttw , idf , sttq , T("!" "|" "|") , psttOld ) ; ___( psttw ) ;
                sttq = sttqTrim2 ;
                idf = idfTrim2 ;
            {
            else if( bTrim2 )            
            }
                delF( tin0P , psttKid ) ;
                else     { idfTrim = 1 ; sttqTrim = sttq ; bTagsStillExist |= !!strIdF( tin0P , 0 , flSTRmATCH_null , idfTrim , sttqTrim , T("/" "/" "|" "|" "!") , psttKid ) ; }
                if( bKt ){ idfKt   = 1 ; sttqKt   = sttq ; bTagsStillExist |= !!strIdF( tin0P , 0 , flSTRmATCH_null , idfKt   , sttqKt   , T("/" "/" "|" "|" "!") , psttKid ) ; }

                }
                    boxPutF( tin0P , T("///d/tmpe.b")  , tb  , tb.csF( tin0P  ) ) ; //U::
                    TN( tb  , "" ) ; tb  = T(psttP) ; //U::
                {
                if( bDebug )

                strFuseF( tin0P , psttP , psttKid ) ; ___( psttP ) ;
                strFuseF( tin0P , psttP , T(" ") ) ; ___( psttP ) ;
                }
                    boxPutF( tin0P , T("///d/tmpe.a")  , ta  , ta.csF( tin0P  ) ) ; //U::
                    TN( ta  , "" ) ; ta  = T(psttKid) ; //U::
                {
                if( bDebug )
                strReplaceF( tin0P , psttKid , 0 , T("@" "." " ") , T(" . ") ) ; ___( psttKid ) ;
                }
                    boxPutF( tin0P , T("///d/tmpe.9")  , t9  , t9.csF( tin0P  ) ) ; //U::
                    TN( t9  , "" ) ; t9  = T(psttKid) ; //U::
                {
                if( bDebug )
                strIndentOldF( tin0P , psttKid , 1 , strokeS() , 0 , 0 ) ; ___( psttKid ) ;
                }
                    boxPutF( tin0P , T("///d/tmpe.8")  , t8  , t8.csF( tin0P  ) ) ; //U::
                    TN( t8  , "" ) ; t8  = T(psttKid) ; //U::
                {
                if( bDebug )
                strRemoveBlankLinesF( tin0P , psttKid , 0 , 0 , T("/*") ) ; ___( psttKid ) ; // SUPPRESS THE "/*" AND "*/" LINES THAT DELIMIT THE FILE COMMENTS
                }
                    boxPutF( tin0P , T("///d/tmpe.7")  , t7  , t7.csF( tin0P  ) ) ; //U::
                    TN( t7  , "" ) ; t7  = T(psttKid) ; //U::
                {
                if( bDebug )
                else      { strTrimF( tin0P , psttKid , 0 , T(TbLACKnEWlINE) ) ; ___( psttKid ) ; }
                if( bKt ) { strTrimF( tin0P , psttKid , 0 , T(TbLACKnEWlINE) , T("\t\x1a")              , strokeS() ) ; ___( psttKid ) ; }
                }
                    boxPutF( tin0P , T("///d/tmpe.6")  , t6  , t6.csF( tin0P  ) ) ; //U::
                    TN( t6  , "" ) ; t6  = T(psttKid) ; //U::
                {
                if( bDebug )
                strReplaceF( tin0P , psttKid , 0 , T("/" "@" "@" "/") , T("/" "*" "*" "/") ) ; ___( psttKid ) ;
                }
                    boxPutF( tin0P , T("///d/tmpe.5")  , t5  , t5.csF( tin0P  ) ) ; //U::
                    TN( t5  , "" ) ; t5  = T(psttKid) ; //U::
                {
                if( bDebug )
                strAbridgeF( tin0P , psttKid , 0 , 0 ) ; ___( psttKid ) ;
                }
                    boxPutF( tin0P , T("///d/tmpe.4")  , t4  , t4.csF( tin0P  ) ) ; //U::
                    TN( t4  , "" ) ; t4  = T(psttKid) ; //U::
                {
                if( bDebug )
                strReplaceAutomaticallyF( tin0P , psttKid ) ; ___( psttKid ) ;

                }
                    boxPutF( tin0P , T("///d/tmpe.3")  , t3  , t3.csF( tin0P  ) ) ; //U::
                    TN( t3  , "" ) ; t3  = T(psttKid) ; //U::
                {
                if( bDebug )
                strReverseF( tin0P , psttKid , 0 , T("\r\n") ) ; ___( psttKid ) ;

                }
                    boxPutF( tin0P , T("///d/tmpe.2")  , t2  , t2.csF( tin0P  ) ) ; //U::
                    TN( t2  , "" ) ; t2  = T(psttKid) ; //U::

                    delF( tin0P , psttv ) ;
                    strInsertF( tin0P , psttKid , idtInsert , psttv ) ;

                    boxPutF( tin0P , T("///d/tmpe.1") , t1 , t1.csF( tin0P ) ) ; //U::
                    TN( t1 , "" ) ; t1 = T(psttKid) ; //U::

                    strReplaceF( tin0P , psttv , 0 , T("/" "/" "|" "|") , T("/" "/" "%" "%") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN "/" "/" "%" "%"
                    strReplaceF( tin0P , psttv , 0 , T("/" "*" "*" "/") , T("/" "@" "@" "/") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN "/" "@" "@" "/"

                    //if( bFound ) { strFuseF( tin0P , psttv , T("daffynition\r\n") ) ; ___( psttv ) ; }
                    //THIS WAS ENABLED IN ORDER TO FIX.  THE PRECEDING COMMENT (COMMENTED OUT BECAUSE...) APPEARS TO DOCUMENT A MISTAKE: THE FOLLOWING LINE IS NEEDED
                    // COMMENTED OUT BECAUSE THE "definition" LINK IS NOW INSERTED INTO ALL VISIBLE SOURCE BY bf30104/listVisibleDefinitionsFlistVisibleDefinitionsF

                    }
                        }
                            delF( tin0P , psttl ) ;
                            strFuseF( tin0P , psttv , T("@" "." " ")+T(psttl)+T("\r\n") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN WITH "@" "." " "
                            if( !bFound ) bFound = 1 ;
                        {
                        if( psttl )
                        strSubstringF( tin0P , psttl , idf , sttq , T("\r\n") , psttKid ) ; ___( psttl ) ;
                        ZE( strokeS* , psttl ) ;
                    {
                    while( idf && !POOP )
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                    ZE( boolT , bFound ) ;
                    strFuseF( tin0P , psttv , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ psttKid ? psttKid->idAdam * 2 : 0 ) ; ___( psttv ) ;
                    ZE( strokeS* , psttv ) ;
                    bDebug = 1 ; //U::
                {
                if( idtInsert )
                ZE( boolT , bDebug ) ; //U::

                }
                    }
                        }
                            else idtInsert -- ;
                            else if( psttKid[ CSpREFIX - 2 + idtInsert ] == sLF ) break ;
                            if( idtInsert == 1 ) idtInsert = 0 ;
                        {
                        while( idtInsert )
                        strokeS sLF( '\n' ) ;
                    {
                    if( idtInsert ) //MOVE CURSOR BACK TO THE BEGINNING OF THE CURRENT LINE
                    idtInsert = strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , tLink , psttKid ) ;
                    countT idf = 1 ;
                    TN( tLink , "" ) ; tLink = T(".1.0.html\\\"\\>definition\\</A\\>\r\n") ;
                {
                if( idtVisible )
                ZE( countT , idtInsert ) ; //"idt" = "ID TAG"

                }
                    idtVisible = strIdF( tin0P , 0 , flSTRmATCH_null , idf , sttq , T("\r\n//VISIBLE\r\n") , psttKid ) ;
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                {
                ZE( countT , idtVisible ) ; //"idt" = "ID TAG"
                // IF THIS FILE IS TO BE VISIBLE, AND THERE EXISTS A DEFINITION LINK, FORMAT AND INSERT IT

                }
                    }
                        idClass = 0 ;
                        delF( tin0P , psttSet ) ;
                        }
                            }
                                }
                                    delF( tin0P , psttl ) ;
                                    }
                                        delF( tin0P , psttw ) ;
                                        strFuseF( tin0P , psttKid , T("\r\n")+T(psttw) ) ;
                                        strWordF( tin0P , psttw , psttl , sttq , S1C(' ') , 2 ) ; ___( psttw ) ;
                                        ZE( strokeS* , psttw ) ;
                                        strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                                    {
                                    if( psttl->idAdam )
                                {
                                if( psttl )
                                strSubstringF( tin0P , psttl , idfs , sttqs , T("\r\n") , psttSet ) ; ___( psttl ) ;
                                ZE( strokeS* , psttl ) ;
                            {
                            while( idfs && !POOP )
                            strokeS sttqs( (countT)0 , sc_IGNOREqUOTES ) ;
                            countT idfs = 1 ;
                        {
                        if( psttSet && idClass == 3 )
                        strSubstringDelimitedF( tin0P , psttSet , idClass , idf , sttq , psttKid ) ; ___( psttSet ) ;
                        ZE( strokeS* , psttSet ) ;
                        ZE( countT , idClass ) ;
                    {
                    while( idf && !POOP )
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                {
                // IF A LISTS OF SYMBOLIC CONSTANTS IS FOUND, FORMAT AND APPEND THEM

                delF( tin0P , postKid ) ;
                strMakeF( tin0P , LF , psttKid , T(postKid) , costKid * 2 + 0x100 ) ; // 1 EXTRA FOR SYMBOLIC CONSTANTS, 1 EXTRA FOR VISIBLE, 0x100 FOR MISCELLANY
                ZE( strokeS* , psttKid ) ;
                delF( tin0P , psttw ) ;
                }
                    }
                        costKid = strMakeF( tin0P , LF , postKid , psttw ) ;
                        ifcSayIF( T("103002f WARNING 1: File \"")+T(psttw)+T("\" does not exist") , flSAY_APPEND | flSAY_LOG ) ;
                        POOPR
                    {
                    if( POOP )
                    ((tin123S&)tin0P).pEtScratch->boxGetShadowF( tin0P , postKid , costKid , psttw , 1 ) ; ___( postKid );
                    SCOOPS
                {
                IFsCRATCH
                ZE( countT   , costKid ) ;
                ZE( osTextT* , postKid ) ;
                strSubstringF( tin0P , psttw , idf , sttq , T("!" "|" "|") , psttOld ) ; ___( psttw ) ;
                else      sttq = sttqTrim ;
                if( bKt ) sttq = sttqKt ;
                else      idf = idfTrim ;
                if( bKt ) idf = idfKt ;
            {
            else if( bTrim || bKt )            
            }
                delF( tin0P , psttKid ) ;

                strFuseF( tin0P , psttP , psttKid ) ; ___( psttP ) ;
                strReplaceF( tin0P , psttKid , 0 , T("@" "." " ") , T(" . ") ) ; ___( psttKid ) ;
                strReplaceF( tin0P , psttKid , 0 , T("/" "@" "@" "/") , T("/" "*" "*" "/") ) ; ___( psttKid ) ;
                strReverseF( tin0P , psttKid , 0 , T("\r\n") ) ; ___( psttKid ) ;

                }
                    delF( tin0P , psttv ) ;
                    strMakeF( tin0P , LF , psttKid , psttv ) ; ___( psttKid ) ;
                    delF( tin0P , psttKid ) ;
                    strReplaceF( tin0P , psttv , 0 , T("/" "/" "|" "|") , T("/" "/" "%" "%") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN "/" "/" "%" "%"
                    strReplaceF( tin0P , psttv , 0 , T("/" "*" "*" "/") , T("/" "@" "@" "/") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN "/" "@" "@" "/"
                    }
                        }
                            delF( tin0P , psttl ) ;
                            strFuseF( tin0P , psttv , T("@" "." " ")+T(psttl)+T("\r\n") ) ; ___( psttv ) ; // ASSUME: NO SOURCE LINES WILL EVER CONTAIN WITH "@" "|" " "
                            if( !bFound ) bFound = 1 ;
                        {
                        if( psttl )
                        strSubstringF( tin0P , psttl , idf , sttq , T("\r\n") , psttKid ) ; ___( psttl ) ;
                        ZE( strokeS* , psttl ) ;
                    {
                    while( idf && !POOP )
                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                    ZE( boolT , bFound ) ;
                    strFuseF( tin0P , psttv , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ psttKid ? psttKid->idAdam * 2 : 0 ) ; ___( psttv ) ;
                    ZE( strokeS* , psttv ) ;
                {
                // FORMAT AND APPEND THE SPECIFIED FILE

                delF( tin0P , postKid ) ;
                strMakeF( tin0P , LF , psttKid , T(postKid) , costKid * 2 + 0x100 ) ; // 1 EXTRA FOR SYMBOLIC CONSTANTS, 1 EXTRA FOR VISIBLE, 0x100 FOR MISCELLANY
                ZE( strokeS* , psttKid ) ;
                delF( tin0P , psttw ) ;
                }
                    }
                        costKid = strMakeF( tin0P , LF , postKid , psttw ) ;
                        ifcSayIF( T("103002f WARNING 1: File \"")+T(psttw)+T("\" does not exist") , flSAY_APPEND | flSAY_LOG ) ;
                        POOPR
                    {
                    if( POOP )
                    ((tin123S&)tin0P).pEtScratch->boxGetShadowF( tin0P , postKid , costKid , psttw , 1 ) ; ___( postKid );
                    SCOOPS
                {
                IFsCRATCH
                ZE( countT   , costKid ) ;
                ZE( osTextT* , postKid ) ;
                strSubstringF( tin0P , psttw , idf , sttq , T("!" "|" "|") , psttOld ) ; ___( psttw ) ;
                sttq = sttqRaw ;
                idf = idfRaw ;
            {
            if( bRaw )            
            boolT bKt   = idf == strIdF( tin0P , 0 , flSTRmATCH_null , idfKt , sttqKt , T("kt|") , psttOld ) ;
            countT idfKt = idf ;
            strokeS sttqKt = sttq ;
            boolT bTrim2 = idf == strIdF( tin0P , 0 , flSTRmATCH_null , idfTrim2 , sttqTrim2 , T("trim2|") , psttOld ) ;
            strokeS sttqTrim2 = sttq ;
            countT idfTrim2 = idf ;
            boolT bTrim = idf == strIdF( tin0P , 0 , flSTRmATCH_null , idfTrim , sttqTrim , T("trim|") , psttOld ) ;
            strokeS sttqTrim = sttq ;
            countT idfTrim = idf ;
            boolT bRaw = idf == strIdF( tin0P , 0 , flSTRmATCH_null , idfRaw , sttqRaw , T("raw|") , psttOld ) ;
            strokeS sttqRaw = sttq ;
            countT idfRaw = idf ;
        {
        if( idf )

        delF( tin0P , psttw ) ;
        strFuseF( tin0P , psttP , psttw ) ;
        strSubstringF( tin0P , psttw , idf , sttq , T("/" "/" "|" "|" "!") , psttOld , 0 ) ; ___( psttw ) ;

        ZE( strokeS* , psttw ) ;
    {
    while( !STOP && !POOP && idf )
    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
    countT idf = 1 ;
    ZE( boolT , bTagsStillExist ) ;
    strFuseF( tin0P , psttP , T("") , 0 , 0 , strokeS() , 0 , 0 , /*U::SOUL?*/ psttOld->idAdam + csttExtraP ) ; // CALLER MUST TAG

    }
        psttP = 0 ;
        psttOld = psttP ;
    {
    else
    if( psttOldP ) { strFuseF( tin0P , psttOld , psttOldP ) ; ___( psttOld ) ; }
    ZE( strokeS* , psttOld ) ;

    _IO_

    }
        if( POOP ) return 0 ;
        __( !!psttP && !!psttOldP ) ;
        __( !psttP && !psttOldP ) ;
        if( POOP ) return 0 ;
    {
    IFbEcAREFUL
    SCOOP
{
/**//*1*/boolT etherC::strEvaluateF( tin0S& tin0P , strokeS*& psttP , const countT csttExtraP , const strokeS* const psttOldP )/*1*/
*/
  if psttP is 0 then psttOldP must not be 0
  can be 0
 psttOldP
 csttExtraP
  if psttOldP is 0 then psttP must not be 0
  can be 0
 psttP
arguments
 if a tag is raw, then it must be the only tag
it is illegal for a raw tag to occur along with another tag, raw or otherwise
the content of the file is edited and used to replace the symbol
the parameter is a file name
   each line will be prepended with a ". " so that leading blanks are preserved innocuously
  such files will be appended
  the file is visible if it contains a line that consists solely of "//VISIBLE"
 kt & trim: if the file is marked "visible" then it will be appended
 kt & trim: class 3 delimited substrings are assumed to be symbolic constant defines and will be formatted and appended
  strings of blanks are compressed, except in the file comments
  strokes above the file comments are trimmed for blanks as well as tabs and file eofs
  the file comments are trimmed for tab and end of file marks but not for blanks
  strokes prior to the file comments are discarded
  the referenced file must contain a file comment
 trim2: blanks are trimmed, except in the file comments, which are assumed to be at the base of the file
 trim: blanks are trimmed
 kt: blanks are not trimmed
 raw: each line is simply prepended with T(" | ")
the key indicates the type of replacement
the symbols contain a key and a parameter
replaces symbols in a string
 it is usually called repeatedly until it returns 0
 this function is not iterative
  if there is only one tag, and it is raw, then the return value is 0
 the occurance of a raw tag does not contribute to a nonze return value
evaluates to 1 iff the resulting string still contains tokens that could be evaluated
it is illegal to refer to this symbol in the definition of an adam
\<A HREF=\"5.103002f.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$strEvaluateF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

