
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 0 [pbP,cbP,offP]:    ")+tb4+TF2((countT)pbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(offP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            offP += cbP ;
            pbP = pbBody + offP ;
        {
        if( cbP || bAllowNullLength )                               //20250123@2222: ADDED W/O ANALYSIS TO FIX BUG OF OBSERVED cbuSnip IN booksC::readF, SO THAT I CANNOT EVER RETURN A NONZE pbP WITH A NULL cbP, EXCEPT WHEN NULL READ IS REQUESTED
    
        if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 1 [pbP,cbP,offP]:    ")+tb4+TF2((countT)pbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(offP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        if( cbP > cbMax ) cbP = cbMax ;

        if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 2 [cbMax]:    ")+tb4+TF2(cbMax,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        const countT cbMax = cbuSnap - offP ;
    {
    else
    }
        cbP = offP = 0 ;
        //if( ((tin1S&)tin0P).pc Utility[ 0 ] && ((tin1S&)tin0P).pEther ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF [cbuSnap,offP]:    ")+TF2(cbuSnap,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(offP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ") ) ;
        if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 3 [cbuSnap]:    ")+tb4+TF2(cbuSnap,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    if( cbuSnap <= offP )

    const boolT  bAllowNullLength = !cbP ;
    const countT cbuSnap = pHead->cbUsed - pHead->cbFill ;

    if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 4 [pbP,cbP,offP]:    ")+tb4+TF2((countT)pbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(offP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    _IO_

    }
        if( POOP ) return ;
        if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 5 [POOP]:    ")+tb4+TF2(POOP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        //__Z( cbP ) ;              //20231114@1142: ALLOW !cbP
        __NZ( pbP ) ;
        if( POOP ) return ;
        if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 6 [POOP]:    ")+tb4+TF2(POOP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    IFbEcAREFUL    

    if( ((tin123S&)tin0P).pcUtility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("book0C::readF / U:: 7 [pbP,cbP,offP]:    ")+tb4+TF2((countT)pbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cbP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(offP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    TN( tb4 , "    " ) ;
{
/*1*/voidT book0C::readF( tin0S& tin0P , const byteT*& pbP , countT& cbP , countT& offP ) const/*1*/

// FOR THIS DEFINITION, A VOLATILE offP THAT INCREASES COULD RESULT IN A READ ACCESS VIOLATION
// REFERENCE PARAMETERS ARE ASSUMED TO NOT BE VOLATILE W.R.T. THE CURRENT THREAD
// THIS DEFINITION EXEMPLIFIES AN ASSUMPTION MADE IMPLICITLY THROUGHOUT THE BASE DLL DEFINITION SET (DICTIONARY FOLDER)
// CODE CONFORMANCE STANDARD

/**/
*/
   repeatedly calling me will result in the data being cycled, delimited by a call that returns [0,0]
  if the book is exhausted by the read, the next call will reset to 0 and the call after that will read from the beginning
  is updated so that it will be ready for the next read
 offP
  use -1 to read all available bytes
  is interpreted as a maximum to be accepted and will be adjusted downward to the number of bytes actually read
  must not be 0
 cbP
  receives the address of the beginning of the requested blob
  must be 0
 pbP
 tin0P
params
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

