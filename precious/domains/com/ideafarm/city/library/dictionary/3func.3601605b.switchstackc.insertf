
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( pBaton ) pBaton->ungrabF( tinBaseP ) ;
    if( !third ) pStack->insertF( tinBaseP , valueP , idTypeP , idP , bOtherWayP ) ;
    }
        ( bTinHasLeverP ? swMe.forIfcThreadF( tinBaseP ) : (countT&)swMe ) = (countT)pStack ;
        __Z( pStack ) ;
        pStack = new( 0 , tinBaseP , LF ) stackC( tinBaseP , third , TAG( TAGiDnULL ) , flagsStack , idType , idGrabLayer , swMe.pLeverLathRefF( tinBaseP ) , 0 , pCbF ) ; ___BITScT( pStack , 0xf04 ) ;
    {
    if( !pStack )
    stackC* pStack = (stackC*)( bTinHasLeverP ? swMe.forIfcThreadF( tinBaseP ) : (countT)swMe ) ;
    _IO_
    else if( osTidOwner != ((tin9S&)tinBaseP).osTid && !bDying && !( F(flagsSwitch) & flSTACKc_ALLOWmULTIPLEuNSERIALIZED ) ) BLAMMO ;
    else if( !osTidOwner ) osTidOwner = ((tin9S&)tinBaseP).osTid ;
    if( pBaton ) pBaton->grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    }
        if( third ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT switchStackC::insertF( tin0S& tinBaseP , const countT valueP , const countT idTypeP , const countT idP , const boolT bOtherWayP , const boolT bTinHasLeverP )/*1*/
/**/
*/
like stackC::insertF but a distinct stack for each thread (or explicit lever) is used
\<A HREF=\"5.121005e.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$insertF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

