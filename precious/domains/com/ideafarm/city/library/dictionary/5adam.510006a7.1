
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("loafing") ) ;

}
    while( ~hFind && !ether ) ;
    }
        DEL( pInfo ) ;
        }
            }
                if( POOP ) ;
                etThread.traceF( tin0P , tNew ) ;
                etThread.traceF( tin0P , pInfo->psttIfoName ) ;
                etThread.traceF( tin0P , T("could not move:") ) ;
                POOPR ;
            {
            if( POOP )
            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tNew , pInfo->psttIfoName , 1 ) ;

            ;

                + tDotEdit
                + T(postOutcome)
                + tDot
                + T(postTimeHearing)
                + tDot
                + T(postTimeIncident)
                + tDot
                  T(pInfo->psttIfoName)

            TN( tNew , "" ) ; tNew =

            }
                if( *postCmd == 'r' ) break ;
                gets( postCmd ) ;
                puts( "\r\nkey r to indicate READINESS (CLOSE ALL SNAPOUTS): " ) ;
            {
            for(;;)

            }
                puts( postOutcome ) ;
                puts( postTimeHearing ) ;
                puts( postTimeIncident ) ;
                puts( "\r\nreceived:" ) ;

                cscanf( "%s %s %s" , postTimeIncident , postTimeHearing , postOutcome ) ;

                puts( "\r\n[incidentTime,hearingTime,outcome]: " ) ;
            {
            if( *postCmd != 'c' )

            gets( postCmd ) ;
            puts( "\r\nkey c to copy entries from prior snapout: " ) ;

            }
                system( postCmd ) ;
                strcat( postCmd , osf ) ;
                strcpy( postCmd , "start " ) ;
                osTextT postCmd[ TUCK << 1 ] ;
            {

            osFileNameC osf( tin0P , etThread , T(pInfo->psttIfoName) ) ;

            osTextT postCmd[ TUCK ] ;
        {
        )
            pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ] != '/'
            &&
            !etThread.strIdF( tin0P , tDotEdit          , pInfo->psttIfoName )
            &&
            !etThread.strIdF( tin0P , tSlashDotDotSlash , pInfo->psttIfoName )
            &&
            !etThread.strIdF( tin0P , tSlashDotSlash    , pInfo->psttIfoName )
            &&
            pInfo
        (
        if
        etThread.diskFindFileOrDirOldF( tin0P , pInfo , hFind , tLike ) ; ___( pInfo ) ;
        ZE( infoFileS* , pInfo ) ;
    {
    do
    osTextT postOutcome[ TUCK ] = "" ;
    osTextT postTimeHearing[ TUCK ] = "" ;
    osTextT postTimeIncident[ TUCK ] = "" ;
    handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    ZE( countT , idIn ) ;
    TN( tDotEdit , ".edit" ) ;
    TN( tDot , "." ) ;
    TN( tSlashDotSlash    , "/./" ) ;
    TN( tSlashDotDotSlash , "/../" ) ;
    TN( tLike , "" ) ; tLike = tPath+T("*") ;
{
TN( tPath , "///d/tmp/x.merge.archive/merged/archive/snapout/" ) ;

TODO

/*1*/WAKEsHOWtEXT( "tool.inspect.snapouts.to.annotate.name" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

