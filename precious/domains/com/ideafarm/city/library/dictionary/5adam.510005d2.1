
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

FIREmYSELF //U:: TO FIND A BUG

etThread.strokeF( tin0P , T("ok\r\n") ) ;

}
    FORsTRINGSiNsPANNEDcOMBINEDtAIL1
    }
        etThread.traceF( tin0P , T("11111111- ")+T(psttc1) ) ;
        FORsTRINGSiNsPANNEDcOMBINEDtAIL2
        }
            etThread.traceF( tin0P , T("22222222- ")+T(psttc2) ) ;
            FORsTRINGSiNsPANNEDcOMBINEDtAIL3
            }
                etThread.traceF( tin0P , T("33333333- ")+T(psttc3) ) ;
                }
                    FORsTRINGSiNsPANNEDcOMBINEDtAIL5
                    }
                        etThread.traceF( tin0P , T("55555555- ")+T(psttc5) ) ;
                        etThread.delF( tin0P , psttw1 ) ;
                        etThread.delF( tin0P , psttw2 ) ;
                        etThread.delF( tin0P , psttw4 ) ;
                        etThread.delF( tin0P , psttName ) ;
                        }
                            }
                                THREADmODE2rESTORE
                                THREADmODE3rESTORE
                                etThread.traceF( tin0P , T("done     : ")+T(psttName)+tcr ) ;
                                }
                                    listC::lintIF( tin0P ) ;
                                    countT pczName[] = { LISTnAMEsYS_ROOT , 0 } ;
                                    puseC puseReset( tin0P , postName , flPOOLc_DOnOTiNDEXdURINGcT | flPOOLc_RESETcrEF | flPOOLc_RESETiNDEXbITS , idStateSpace , - 1 , - 1 , 0 , idMemorySpace ) ; //U::CONJ: flPOOLc_RESETcrEF DOES NOT CAUSE ANY grabitC BITS TO BE RESET, WHICH IS THE MAIN ORIGINAL PURPOSE OF THIS PROGRAM (20180522@1348)
                                {
                
                                etThread.traceF( tin0P , T("PREPARElISTS cleaning: ")+T(psttName) ) ;
                                THREADmODE3oN( flTHREADmODE3_ALLOWeXPLICITmEMORYsPACE )
                                THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
                                osTextT* postName = tName ;
                                TN( tName , psttName ) ;
                            {
                            if( idStateSpace )
                            countT idStateSpace = etThread.strDigitsToSCountF( tin0P , psttw2 , 0 , 1 ) ; ;
                        {
                        if( bFound )
                        boolT bFound = etThread.strSubstringF( tin0P , psttName , idf , sttq , tSuffix , psttw1 ) ; ___( psttName ) ;
                        countT idf = 1 ;
                        ZE( strokeS* , psttName ) ;
                        etThread.strWordF( tin0P , psttw4 , psttc5 , sttq , sttSlash , - 4 ) ; ___( psttw4 ) ;
                        etThread.strWordF( tin0P , psttw2 , psttc5 , sttq , sttSlash , - 2 ) ; ___( psttw2 ) ;
                        etThread.strWordF( tin0P , psttw1 , psttc5 , sttq , sttSlash , - 1 ) ; ___( psttw1 ) ;
                        ZE( strokeS* , psttw4 ) ;
                        ZE( strokeS* , psttw2 ) ;
                        ZE( strokeS* , psttw1 ) ;
                        etThread.traceF( tin0P , T("55555555+ ")+T(psttc5) ) ;
                    {
                    FORsTRINGSiNsPANNEDcOMBINEDhEAD5( soul5m )
                    countT cFiles = etThread.boxMenuF( tin0P , soul5m , T(psttc3)+tStarFace , 0 , 0x10 ) ;
                    soulC soul5m( tin0P , TAG( TAGiDnULL ) ) ;
                {
                //CLEANING UP BACKING IMAGES (E.G. RESETTING grabitC BITS)

                }
                    FORsTRINGSiNsPANNEDcOMBINEDtAIL4
                    }
                        etThread.traceF( tin0P , T("aaaa -") ) ;
                        }
                            etThread.traceF( tin0P , T("PREPARElISTS deleted: ")+T(psttc4) ) ;
                            etThread.boxZapF( tin0P , psttc4 ) ;
                        {
                        if( !bOk )

                        }
                            DEL( pInfo ) ;
                            }
                                if( cbr == sizeof pc3 && ( getNegAM( pc3[ 2 ] ) == FINGERnEG_NAPKINiSfORMATTED || getNegAM( pc3[ 2 ] ) == - 1 ) ) bOk = 1 ;
                                etThread.fileReadF( tin0P , (byteT*)pc3 , cbr , hFile ) ;
                                countT cbr = sizeof pc3 ;
                                countT pc3[ 3 ] ;
                            {
                            if( pInfo && ( pInfo->cbUsed > 3 * sizeof( countT ) || pInfo->cbUsedHigh ) )
                            etThread.diskFileQueryF( tin0P , pInfo , hFile ) ; ___( pInfo ) ;
                            ZE( infoFileS* , pInfo ) ;
    
                            etThread.fileOpenF( tin0P , hFile , countTC() , psttc4 , ifcOPENaCCESS_R , 0 , flOPENdETAILS_DOnOTvALIDATE , ifcOPENhOW_nFeO ) ;
                            handleC hFile( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;
                        {
                        ZE( boolT , bOk ) ;
                        etThread.traceF( tin0P , T("PREPARElISTS inspecting: ")+T(psttc4) ) ;
                        etThread.traceF( tin0P , T("44444444 ")+T(psttc4) ) ;

                        }
                            }
                                continue ;
                                etThread.delF( tin0P , psttc4 ) ;
                                etThread.traceF( tin0P , T("aaaa -") ) ;
                            {
                            if( bSkip )
                            etThread.delF( tin0P , psttw ) ;
                            boolT bSkip = !etThread.strCompareF( tin0P , tBookSuffix , psttw ) ;
                            etThread.strWordF( tin0P , psttw , psttc4 , sttq , sttDot , - 1 ) ; ___( psttw ) ;
                            ZE( strokeS* , psttw ) ;
                        {
                        etThread.traceF( tin0P , T("aaaa +") ) ;
                    {
                    FORsTRINGSiNsPANNEDcOMBINEDhEAD4( soul4m )
                    countT cFiles = etThread.boxMenuF( tin0P , soul4m , T(psttc3)+tStar , 0 , 0x10 ) ;
                    soulC soul4m( tin0P , TAG( TAGiDnULL ) ) ;
                {
                //DELETE NAPKIN BACKING FILES THAT ARE NOT COMPLETELY FORMATTED
                etThread.traceF( tin0P , T("33333333+ ")+T(psttc3) ) ;
            {
            FORsTRINGSiNsPANNEDcOMBINEDhEAD3( soul3m )
            countT cFiles = etThread.boxMenuF( tin0P , soul3m , T(psttc2)+tStar , 0 , 0x10 ) ;
            soulC soul3m( tin0P , TAG( TAGiDnULL ) ) ;
            etThread.traceF( tin0P , T("22222222+ ")+T(psttc2) ) ;

            }
                continue ;
                etThread.delF( tin0P , psttc2 ) ;
            {
            if( psttc2[ CSpREFIX - 1 + psttc2->idAdam ].idAdam != '/' )
        {
        FORsTRINGSiNsPANNEDcOMBINEDhEAD2( soul2m )
        countT cFiles = etThread.boxMenuF( tin0P , soul2m , T(psttc1)+tStar , 0 , 0x10 ) ;
        soulC soul2m( tin0P , TAG( TAGiDnULL ) ) ;

        //CONoUTrAW3( "[idMemorySpace]: " , idMemorySpace , "\r\n" ) ;
        PUSE( tin0P , *(byteT**)&psttms ) ;
        countT idMemorySpace = etThread.strDigitsToSCountF( tin0P , psttms , 0 , 1 ) ;
        etThread.strWordF( tin0P , psttms , psttc1 , sttq , S1C('/') , - 2 ) ; ___( psttms ) ;
        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
        ZE( strokeS* , psttms ) ;

        etThread.traceF( tin0P , T("11111111+ ")+T(psttc1) ) ;

        }
            continue ;
            etThread.delF( tin0P , psttc1 ) ;
        {
        if( psttc1[ CSpREFIX - 1 + psttc1->idAdam ].idAdam != '/' )
    {
    FORsTRINGSiNsPANNEDcOMBINEDhEAD1( soul1m )
    TN( tBookSuffix , "bookC" ) ;
    TN( tSuffix , ".poolC.face" ) ;
    TN( tStarFace , "*.face" ) ;
    TN( tSlashStar , "/*" ) ;
    TN( tStar     , "*" ) ;
    TN( tcr   , "\r\n" ) ;
    strokeS sttDot( '.' ) ;
    strokeS sttSlash( '/' ) ;
    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
    
    countT cFiles = etThread.boxMenuF( tin0P , soul1m , T("///ideafarm/ephemeral/ipdos/memorySpaces/")+T(thirdC::postUserNameIF())+T("/*") , 0 , 0x10 ) ;
    soulC soul1m( tin0P , TAG( TAGiDnULL ) ) ;
{

TODO

/*1*/WAKEhIDE( "ifcIDaDAM_PREPARElISTS" )/*1*/
/**/
*/
i die after doing this, to conserve process resources
i reset the grabit bits in all persistent lists for this home
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

