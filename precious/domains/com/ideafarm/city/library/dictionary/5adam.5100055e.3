
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            //win.baton.ungrabF( tin0P ) ;
            //hintF( tin0P , etherP , cArgP , paramP.vtHintClockBanner , 0 ) ; //U::ELICITS HINT CORRUPTION
            //win.baton.grabF( tin0P , TAG( TAGiDnULL ) ) ;
            //windowOldC& win = *thirdC::pWinRootIF() ;

            cblIdRowMax = R( sadamStateP.prs->rsc.mIdRowHot - 1.0 + sadamStateP.prs->rsc.mRowsHot ) ;
            cblIdColMax = R( sadamStateP.prs->rsc.mIdColHot - 1.0 + sadamStateP.prs->rsc.mColsHot ) ;
            cblIdRowMin = R( sadamStateP.prs->rsc.mIdRowHot ) ;
            cblIdColMin = R( sadamStateP.prs->rsc.mIdColHot ) ;
            cblIdEvent  = idEventP ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClockBannerLabelCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            //win.baton.ungrabF( tin0P ) ;
            hintF( tin0P , etherP , cArgP , paramP.vtHintClockBanner ) ;
            //win.baton.grabF( tin0P , TAG( TAGiDnULL ) ) ;
            //windowOldC& win = *thirdC::pWinRootIF() ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
        }
            break ;
            }
                cblIdEvent = 0 ;

                if( bInP && idEventP == cblIdEvent && idColP >= cblIdColMin && idColP <= cblIdColMax && idRowP >= cblIdRowMin && idRowP <= cblIdRowMax ) bInP = 0 ;

                sCountT idRowP =          pcNotesP[ 4 ] ;
                sCountT idColP =          pcNotesP[ 3 ] ;
                boolT&  bInP   = *(boolT*)pcNotesP[ 2 ] ;
            {
            if( pcNotesP && pcNotesP[ 0 ] == 1 && pcNotesP[ 1 ] >= 3 )
        {
        case ifcIDtYPEsTROKEcALLbACK_INoUTqUERY :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClockBannerCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

sCountT cblIdRowMax ;
sCountT cblIdColMax ;
sCountT cblIdRowMin ;
sCountT cblIdColMin ;
countT  cblIdEvent ;
//A:ASSUME: FLYOVER NOTIFICATIONS ARE IN REVERSE RENDER ORDER
//USED ONLY BY buClockBannerCBF buClockBannerLabelCBF

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            //win.baton.ungrabF( tin0P ) ;
            hintF( tin0P , etherP , cArgP , paramP.vtHintClock , 0 ) ;
            //win.baton.grabF( tin0P , TAG( TAGiDnULL ) ) ;
            //windowOldC& win = *thirdC::pWinRootIF() ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClockCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( ++ paramP.offHullAimtTick >= paramP.cHullAimtTicks ) paramP.offHullAimtTick = 0 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("tilt to the right") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeTiltRightCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( -- paramP.offHullAimtTick == - 1 ) paramP.offHullAimtTick = paramP.cHullAimtTicks - 1 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("tilt to the left") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeTiltLeftCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( ++ paramP.offHullAimvTick >= paramP.cHullAimvTicks ) paramP.offHullAimvTick = 0 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("aim up") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeAimUpCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( -- paramP.offHullAimvTick == - 1 ) paramP.offHullAimvTick = paramP.cHullAimvTicks - 1 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("aim down") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeAimDownCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( ++ paramP.offHullAimhTick >= paramP.cHullAimhTicks ) paramP.offHullAimhTick = 0 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("aim to the right") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeAimRightCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;

            if( -- paramP.offHullAimhTick == - 1 ) paramP.offHullAimhTick = paramP.cHullAimhTicks - 1 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("aim to the left") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeAimLeftCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullAimTiltF( tin0P , angh , angv , angt ) ;
            measureT angt = - 1.0 + 2.0 * paramP.offHullAimtTick / paramP.cHullAimtTicks ;
            measureT angv = - 1.0 + 2.0 * paramP.offHullAimvTick / paramP.cHullAimvTicks ;
            measureT angh = - 1.0 + 2.0 * paramP.offHullAimhTick / paramP.cHullAimhTicks ;
            paramP.offHullAimtTick = paramP.cHullAimtTicks / 2 ;
            paramP.offHullAimvTick = paramP.cHullAimvTicks / 2 + AIMtICKvERTbIASdEBUG ;
            paramP.offHullAimhTick = paramP.cHullAimhTicks / 2 + AIMtICKhORZbIASdEBUG ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("reset hull aim and tilt") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeAimTiltResetCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.zHullAt += paramP.zMoveGrain * paramP.zMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move up (increase z)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveUpCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.zHullAt -= paramP.zMoveGrain * paramP.zMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move down (decrease z)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveDownCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.yHullAt += paramP.yMoveGrain * paramP.yMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move north (increase y)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveNorthCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.yHullAt -= paramP.yMoveGrain * paramP.yMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move south (decrease y)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveSouthCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.xHullAt += paramP.xMoveGrain * paramP.xMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move east (increase x)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveEastCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.xHullAt -= paramP.xMoveGrain * paramP.xMoveMultiplier ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move west (decrease x)") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveWestCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            paramP.eye.setHullLocationF( tin0P , paramP.xHullAt , paramP.yHullAt , paramP.zHullAt ) ;
            paramP.zHullAt = ZhULLaTiNIT ;
            paramP.yHullAt = YhULLaTiNIT ;
            paramP.xHullAt = XhULLaTiNIT ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("move to absolute origin") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeMoveResetCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            filterGrabMouseF( tin0P , cArgP ) ;
            popButtonsF( tin0P , etherP , cArgP ) ;
            paramP.flags &= ~( F(flPARAM_EYEbUTTONSrENDERED) ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;

            if( F(paramP.flags) & flPARAM_FULLsCREEN && paramP.idView == ifcIDvIEW_HUGE ) break ; // HOVER PAD FOR MOUSE SO MOUSE CAN BE USED TO AIM AND TILT
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("remove eye control buttons") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeEscapeCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            hintEyeF( tin0P , etherP , cArgP ) ;
            filterGrabMouseF( tin0P , cArgP ) ;
            paramP.flags |= flPARAM_EYEbUTTONSrENDERED ;
            pushButtonsF( tin0P , etherP , cArgP , paramP.buEyeEscape+T(" ")+paramP.buEyeMoveReset+T(" ")+paramP.buEyeAimTiltReset+T(" ")+paramP.buEyeMoveWest+T(" ")+paramP.buEyeMoveEast+T(" ")+paramP.buEyeMoveSouth+T(" ")+paramP.buEyeMoveNorth+T(" ")+paramP.buEyeMoveDown+T(" ")+paramP.buEyeMoveUp+T(" ")+paramP.buEyeAimLeft+T(" ")+paramP.buEyeAimRight+T(" ")+paramP.buEyeAimDown+T(" ")+paramP.buEyeAimUp+T(" ")+paramP.buEyeTiltLeft+T(" ")+paramP.buEyeTiltRight , CSTTmINbUTTONS , T("IdeaFarm " "(tm) Eye") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("display eye control buttons") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEyeEnterCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            replaceButtonsF( tin0P , etherP , cArgP , tButtons , CSTTmINbUTTONS , T("IPDOS (tm)  buttons") ) ;
            if(      paramP.treeKt.rightF( 1 , 1 ) ) tButtons += T(" ")+paramP.buClimbRight ;
            if(      paramP.treeKt.leftF(  1 , 1 ) ) tButtons += T(" ")+paramP.buClimbLeft  ;
            if( 2 == paramP.treeKt.upF(    2 , 1 ) ) tButtons += T(" ")+paramP.buClimbUp    ;
            if( 2 == paramP.treeKt.downF(  2 , 1 ) ) tButtons += T(" ")+paramP.buClimbDown  ;
            TN( tButtons , "" ) ; tButtons = paramP.buEscape+T(" ")+paramP.buF1/*+T(" ")+paramP.buF2*/+T(" ")+paramP.buSubscribe ;

            resizeIfF( tin0P , cArgP , etherP ) ;
            paramP.treeKt.rightF() ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("climb right") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClimbRightCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            replaceButtonsF( tin0P , etherP , cArgP , tButtons , CSTTmINbUTTONS , T("IPDOS (tm)  buttons") ) ;
            if(      paramP.treeKt.rightF( 1 , 1 ) ) tButtons += T(" ")+paramP.buClimbRight ;
            if(      paramP.treeKt.leftF(  1 , 1 ) ) tButtons += T(" ")+paramP.buClimbLeft  ;
            if( 2 == paramP.treeKt.upF(    2 , 1 ) ) tButtons += T(" ")+paramP.buClimbUp    ;
            if( 2 == paramP.treeKt.downF(  2 , 1 ) ) tButtons += T(" ")+paramP.buClimbDown  ;
            TN( tButtons , "" ) ; tButtons = paramP.buEscape+T(" ")+paramP.buF1/*+T(" ")+paramP.buF2*/+T(" ")+paramP.buSubscribe ;

            resizeIfF( tin0P , cArgP , etherP ) ;
            paramP.treeKt.leftF() ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("climb left") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClimbLeftCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            }
                replaceButtonsF( tin0P , etherP , cArgP , tButtons , CSTTmINbUTTONS , T("IPDOS (tm)  buttons") ) ;
                if(      paramP.treeKt.rightF( 1 , 1 ) ) tButtons += T(" ")+paramP.buClimbRight ;
                if(      paramP.treeKt.leftF(  1 , 1 ) ) tButtons += T(" ")+paramP.buClimbLeft  ;
                if( 2 == paramP.treeKt.upF(    2 , 1 ) ) tButtons += T(" ")+paramP.buClimbUp    ;
                if( 2 == paramP.treeKt.downF(  2 , 1 ) ) tButtons += T(" ")+paramP.buClimbDown  ;
                TN( tButtons , "" ) ; tButtons = paramP.buEscape+T(" ")+paramP.buF1/*+T(" ")+paramP.buF2*/+T(" ")+paramP.buSubscribe ;

                resizeIfF( tin0P , cArgP , etherP ) ;
                paramP.treeKt.upF( 2 ) ;
            {
            if( 2 == paramP.treeKt.upF( 2 , 1 ) )

            if( paramP.b1tutorial ) paramP.b1tutorial = 0 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("climb up") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClimbUpCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            doDownF( tin0P , etherP , cArgP ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("climb down") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buClimbDownCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            }
                }
                    }
                        hintF( tin0P , etherP , cArgP , tReply ) ;
                        TN( tReply , "" ) ; tReply = T("\"")+S2(ifcRGB_B4|ifcRGB_G3,scOld_cPUSHcOLOR)+T(psttValue)+S2(0,scOld_POPcOLOR)+T("\" is not the key.  please join us by subscribing at www.ideafarm.com") ;
                        strokeS*& psttValue = *(strokeS**)paramP.prPrompt ;
                    {
                    else
                    //else popButtonsF( tin0P , etherP , cArgP ) ;
                    }
                        setFloorF( tin0P , etherP , cArgP , ifcIDfLOOR_DISCLOSURE ) ;
                        paramP.bInside = 1 ; //U::CONJ: bInside IS OBSOLETED BY setFloorF

                        paramP.prPrompt.freshF( tin0P ) ;
                        etherP.delF( tin0P , psttValue ) ;
                    {
                    if( !etherP.strCompareF( tin0P , paramP.ppsttLoginSecret[ paramP.offLoginSecret ] , psttValue ) )
                
                    strokeS*& psttValue = *(strokeS**)paramP.prPrompt ;
                {
                if( sttNew.idAdam == saA1_TOOLENTER || sttNew.idAdam == saA1_TOOLENTERnUM )
                strokeS sttNew = strokeS::strokeIF( tin0P , idTool ) ;
            {
            if( idAction == ifcIDtYPEaCTION_DOWN )
            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_KEYBOARD :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("enter the key to the city gate (get it from a friend or by becoming a resident") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
        }
            break ;
            //U::WON'T COMPILE CAUSE pPulp IS PRIVATE: if( idIn == 1 ) sadamStateP.prs->rsc.pPaper->x1.pPulp.x1.back.filterKeepNormalKeysF( tin0P , sadamStateP.ssc.idAdam , 1 ) ;
            //U::COMPLETE DEVELOPMENT OF FILTERING TO CONCEAL ARCHITECTURE BY ELIMINATING SPECIAL KEYS FROM APPEARING IN PROMPT SADAM
            countT idIn = 1 + incv02AM( idInLath ) ;
            static countT idInLath ;
        {
        case ifcIDtYPEsTROKEcALLbACK_RENDER :

    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT prPromptCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            etherP.osHttpViewF( tin0P , T(postSay) , 1 ) ;

            //++ etherC::ether_cUtility_IF( tin0P ) ; //U:: TO STUDY CPU LOADING BY freshVolatileTextIF

            if( paramP.bInside )                           postSay = postInsider ;
            const osTextT* postSay = postNormal ;

            const osTextT postInsider[]   = "ideafarm.com//http/index.html" ;
            const osTextT postFamily[]    = "ideafarm.com//http/index.html" ;
            const osTextT postAdSpecial[] = "ideafarm.com//http/index.html" ;
            const osTextT postNormal[]    = "ideafarm.com//http/index.html" ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("click here while online to become a resident and obtain each new secret key") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buSubscribeCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            //LOGrAW( T("secret: \"")+T(paramP.ppsttLoginSecret[paramP.offLoginSecret])+T("\"\r\n") ) ; //U::

            setFloorF( tin0P , etherP , cArgP , ifcIDfLOOR_PROMPTfORsECRET ) ;
            paramP.offLoginSecret = (tcButtonC*)sadamStateP.ssc.pOwner - &paramP.buLoginKey1 ;
            paramP.bQuitTmUsers = 1 ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("click your name to enter the gate") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buLoginKeyCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            setFloorF( tin0P , etherP , cArgP , ifcIDfLOOR_USERS ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("click here to approach the city gate") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buGateCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            loadSpeechF( tin0P , etherP , cArgP , ifcIDsPEECH_CREDITS ) ;
            hintF( tin0P , etherP , cArgP , T("the credits will begin in a moment") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("derivative work, and other, credits") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buCreditsCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            loadSpeechF( tin0P , etherP , cArgP , ifcIDsPEECH_SERMON ) ;
            hintF( tin0P , etherP , cArgP , T("the \"Sermon on the Font\" will begin in a moment") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("Sermon on the Font") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buSermonCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            loadSpeechF( tin0P , etherP , cArgP , ifcIDsPEECH_INTRODUCTION ) ;
            hintF( tin0P , etherP , cArgP , T("the introduction will begin in a moment") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("introduction for new operators") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buIntroCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            SW
            SW etherP.strokeF( tin0P , T("\f")+tConsole ) ;
            TN( tConsole , "" ) ;  setConsoleF( tin0P , etherP , tConsole , cArgP ) ;

            paramP.vtView.setF( tin0P , T("")+S2(1+incv02AM(paramP.idEventViewSelectLath),sc_NULL) ) ;

            hintF( tin0P , etherP , cArgP , paramP.tHintDefault , 0 ) ;
            setTmLongF( tin0P , paramP.tHintDefault ) ;

            paramP.stSpeech.ungrabF( tin0P ) ;
            purgeSpeechF( tin0P , etherP , cArgP ) ;
            paramP.stSpeech.grabF( tin0P , TAG( TAGiDnULL ) ) ;

            paramP.rReachRemaining = 1.0 / 16.0 ;
            etherP.strMakeF( tin0P , LF , paramP.psttLabelRemaining , T("CITY") ) ; ___( paramP.psttLabelRemaining ) ; //THIS IS DONE HERE BECAUSE TIME REMAINING CLOCK IS ALSO USED ON BANNER AND AT BANNER TIME THE NOTE SHOULD BE ""

            setFloorF( tin0P , etherP , cArgP , ifcIDfLOOR_CONSOLE ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("IPDOS (tm) operator's console") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buConsoleCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("test button") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buTestCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            etherP.boxPutF( tin0P , T("///d/ideafarm.home.")+TF1(etherC::ifc_idHomeIdisk_IF())+T(".setting.flag.secure") , "." , 1 ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("secure this public access computer") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buSecureCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            paramP.vt2bigitHelp.setF( tin0P ) ;
            paramP.bGameStarted = 1 ;

            doDownF( tin0P , etherP , cArgP ) ;

            }
                resizeIfF( tin0P , cArgP , etherP ) ;
                filterGrabMouseF( tin0P , cArgP ) ;
                paramP.idView = ifcIDvIEW_HUGE ;
            {
            if( paramP.idView != ifcIDvIEW_HUGE )
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("start the bigit game!") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buStartGameCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buFcCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buFbCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buFaCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF9CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF8CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF7CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF6CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF5CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF4CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T(":") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF3CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            SW
            SW etherP.strokeF( tin0P , T("\f")+tConsole ) ;

            else                                       setConsoleF(           tin0P , etherP , tConsole , cArgP ) ;
            if( F(paramP.flags) & flPARAM_FULLsCREEN ) setFullScreenConsoleF( tin0P , etherP , tConsole , cArgP ) ;
            //vtButtonsF( tin0P , etherP , cArgP ) ;
            TN( tConsole , "" ) ;

            filterGrabMouseF( tin0P , cArgP ) ;
            else                                            paramP.flags &= ~( F(flPARAM_FULLsCREEN) ) ;
            if( !( F(paramP.flags) & flPARAM_FULLsCREEN ) ) paramP.flags |= flPARAM_FULLsCREEN ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("1: toggle full screen presentation of the knowledge tree") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF2CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            resizeIfF( tin0P , cArgP , etherP ) ;
            filterGrabMouseF( tin0P , cArgP ) ;
            if( ++ paramP.idView > ifcIDvIEW_max ) paramP.idView = ifcIDvIEW_min ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("2: cycle through alternate knowledge tree presentation formats") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buF1CBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;

            else                                                                                                   ((thirdC&)etherP).winShowWindowF( tin0P , paramP.win , idcWINsHOW_HIDE ) ;
            else if( etherC::ifc_idHomeIdisk_IF() == 1 && IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 == etherP.diskIdF( tin0P , T("///c") ) ) FIREmYSELF ;
            if( paramP.idFloor > ifcIDfLOOR_BANNER )                                                               setFloorF( tin0P , etherP , cArgP , 0 , flSETfLOOR_ESCAPE ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , paramP.psttHintEscape ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buEscapeCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            loadSpeechF( tin0P , etherP , cArgP , ifcIDsPEECH_ACCEPTANCE ) ;
            hintF( tin0P , etherP , cArgP , T("welcome.  your orientation will begin in a moment") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("please do not lie to me when clicking here") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buAgreeCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

}
    if( ((tin1S&)tin0P).fingerprint && etherP && cArgP && idTypeCallP && idEventP && pcNotesP && flTcStateNewP && flTcStateOldP && sadamStateP.ssc.idAdam ) ;

    }
        }
            break ;
            loadSpeechF( tin0P , etherP , cArgP , ifcIDsPEECH_REFUSAL ) ;
            hintF( tin0P , etherP , cArgP , T("thank you for being honest with me") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_HOTkEY :
        }
            if( idTool != ifcIDtYPEtOOL_MOUSEbUTTONlEFT || idAction != ifcIDtYPEaCTION_DOWN ) break ;

            const countT& idAction = pcNotesP[ 3 ] ;
            const countT& idTool   = pcNotesP[ 2 ] ;
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            hintF( tin0P , etherP , cArgP , T("please do not lie to me when clicking here") ) ;
        {
        case ifcIDtYPEsTROKEcALLbACK_FLYOVER :
    {
    switch( idTypeCallP )
    ARGgET( cArgP )
{
voidT buDisagreeCBF( tin0S& tin0P , etherC& etherP , const countT cArgP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , const flagsT flTcStateNewP , const flagsT flTcStateOldP , const sadamStateOldS& sadamStateP )

#include postADAMhEADER

/*1*//*callbacks*//*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

