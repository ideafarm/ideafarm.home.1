
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        etThread.traceF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS6bOOKbYcONTAINERuRI napped") ) ;
        ++ s ; ether.osSleepF( tinBaseP , TOCK << 2 ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        etThread.traceF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS6bOOKbYcONTAINERuRI napping [cIn,cOut]:    ")+TF2(cIn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cOut,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        if( bQuit ) break ;

        while( !bQuit && ~hFind && !POOP ) ;
        }
            DEL( pInfo ) ;
            }
                }
                    etThread.traceF( tinBaseP , T("all workers are gone") ) ;
                    }
                        ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
                    {
                    while( ws.cWorkers )
                    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
                    etThread.traceF( tinBaseP , T("waiting for workers") ) ;
                    ws.bFireWorkers = 1 ;

                    THREADmODE2rESTORE
                    }
                        }
                            }
                                ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 3 ) ;
                                etThread.traceF( tinBaseP , T("waiting for queue to shrink [cPending]:    ")+TF2(ws.st_pPageEvent,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            {
                            while( ws.st_pPageEvent > TUCK )
                            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
                        {
                        if( ws.st_pPageEvent > ( TUCK << 1 ) )                // THE QUEUE LENGTH MUST BE SMALL SO THAT IT IS IMPOSSIBLE FOR A QUEUED ITEM TO BE IN A BOOK OTHER THAN THE BOOK IMMEDIATELY PRECEDING THE BOOK BEING READ, ASSUMING THAT I ONLY KEEP WO INACTIVE BOOK

                        bPrefix = !bPrefix ;

                        else          pbi = 0 ;
                        if( bDelete ) PUSE( tinBaseP , *(byteT**)&pbi ) ;

                        ;
                            : sizeof( countT )
                            ? *(countT*)pbi
                        cbi = bPrefix

                        }
                            //if( ws.idIn < TUCK || !( ws.idIn % TUCK ) ) etThread.traceF( tinBaseP , T("[ws.idIn,cOutputFlavors]:    ")+TF2(ws.idIn,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(ws.swBooksByIdjContainerIdjUri.cFlavorsF(tinBaseP),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            ++ ws.idIn ;
                            cIn ++ ;
                            ws.st_pPageEvent << *(countT*)&pPageEvent ;

                            __( (countT)*pPageEvent - cbiSave ) ; //SHOULD ALWAYS GET THE ENTIRE SHEBANG

                            }
                                break ;
                                hRead = hReadSave ;
                                cbi = cbiSave ;

                                THREADmODE4rESTORE
                                DEL( pPageEvent ) ;
                                THREADmODE4oN( flTHREADmODE4_DOnOTrEGISTERpAGEc )
                                BLAMMO ;                                                //SHOULD BE IMPOSSIBLE SINCE "ALL OR NONE" USED FOR WRITING BOOKTOGETHER AND I'VE ALREADY READ THE PREFIX
                            {
                            if( !(const byteT*)*pPageEvent )

                            THREADmODE4rESTORE
                            bksAccessEventsIn.readF( tinBaseP , *pPageEvent , hRead , flBOOKScrEAD_null , &bQuit , &hCursor , idCursor ) ;
                            pPageEvent = new( 0 , tinBaseP , LF ) pageC( tinBaseP , bksAccessEventsIn , cbi ) ; ___( pPageEvent ) ;
                            THREADmODE4oN( flTHREADmODE4_DOnOTrEGISTERpAGEc )
                            ZE( pageC* , pPageEvent ) ;
                        {
                        else
                        }
                            __( cbi - cbiSave ) ; //SHOULD ALWAYS GET THE ENTIRE SHEBANG

                            }
                                break ;
                                hRead = hReadSave ;
                                cbi = cbiSave ;
                            {
                            if( !pbi )
                            bDelete = bksAccessEventsIn.readF( tinBaseP , pbi , cbi , hRead , flBOOKScrEAD_STILLhUNGRYiSoK , &bQuit , &hCursor , idCursor ) ;
                        {
                        if( bPrefix )
                        ZE( boolT , bDelete ) ;

                        HANDLEaPPnOTEScOUNTcLASS ch = hRead ;

                        handleC hReadSave = hRead ;
                        countT cbiSave = cbi ;
                    {
                    while( !bQuit && !POOP )
                    boolT bPrefix = 1 ;
                    countT cbi = sizeof( countT ) ;
                    ZE( const byteT* , pbi ) ;

                    // *****************************************************************************************************************************************************************************************************************************************************
                    // *****************************************************************************************************************************************************************************************************************************************************
                    // ********                    *************************************************************************************************************************************************************************************************************************
                    // ********  EAT BOOK ENTRIES  *************************************************************************************************************************************************************************************************************************
                    // ********                    *************************************************************************************************************************************************************************************************************************
                    // *****************************************************************************************************************************************************************************************************************************************************
                    // *****************************************************************************************************************************************************************************************************************************************************

                    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )

                    handleC hCursor( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKSrEADcURSOR ) ;
                    handleC hRead( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKS ) ;
                    //etThread.traceF( tinBaseP , T("book by uri / enering loop to read events") ) ;

                    }
                        etThread.osThreadF( tinBaseP , countTC() , tmWorkerF , 0 , 0 , 0  , flTHREADlAUNCH_INHERITjOTrEGISTRATIONS , TOCK , (countT)&ws , (countT)&bksAccessEventsIn ) ;
                        inc02AM( ws.cWorkers ) ;
                    {
                    while( cDo -- )
                    countT cDo = 0x10 ;
                    //etThread.traceF( tinBaseP , T("book by uri / launching workers") ) ;

                    workS ws( tinBaseP , etThread ) ;
                    //etThread.traceF( tinBaseP , T("book by uri / ct ws") ) ;

                    TN( tb4 , "    " ) ;
                    booksC bksAccessEventsIn( tinBaseP , TAG( TAGiDnULL ) , tShorter , ifcIDsTATEsPACE_MULTIPLEaDAMS , flBOOKSc_null , 0 , 4 , 0 , 0 , 0 , 0 , &bQuit ) ;
                    //etThread.traceF( tinBaseP , T("book by uri / ct bksAccessEvents") ) ;

                    }
                        etThread.delF( tinBaseP , psttCursor3 ) ;
                        etThread.delF( tinBaseP , psttCursor2 ) ;
                        etThread.delF( tinBaseP , psttCursor1 ) ;
                        idCursor = BM_HIGH | etThread.strDigitsToSCountF( tinBaseP , psttCursor1 , 0 , 0 ) << 0x10 | etThread.strDigitsToSCountF( tinBaseP , psttCursor2 , 0 , 0 ) << 8 | etThread.strDigitsToSCountF( tinBaseP , psttCursor3 , 0 , 0 ) ;
                        //etThread.traceF( tinBaseP , T("[psttCursor3]:    ")+T(psttCursor3) ) ;
                        //etThread.traceF( tinBaseP , T("[psttCursor2]:    ")+T(psttCursor2) ) ;
                        //etThread.traceF( tinBaseP , T("[psttCursor1]:    ")+T(psttCursor1) ) ;

                        etThread.strWordF( tinBaseP , psttCursor3 , tShorter , sttq , strokeS( '.' ) , 6 , 0 ) ; ___( psttCursor3 ) ;
                        etThread.strWordF( tinBaseP , psttCursor2 , tShorter , sttq , strokeS( '.' ) , 5 , 0 ) ; ___( psttCursor2 ) ;
                        etThread.strWordF( tinBaseP , psttCursor1 , tShorter , sttq , strokeS( '.' ) , 4 , 0 ) ; ___( psttCursor1 ) ;
                        strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                        ZE( strokeS* , psttCursor3 ) ;
                        ZE( strokeS* , psttCursor2 ) ;
                        ZE( strokeS* , psttCursor1 ) ;
                    {
                    ZE( countT , idCursor ) ;

                    //etThread.traceF( tinBaseP , T("[tShorter]:    ")+tShorter ) ;

                    }
                        etThread.delF( tinBaseP , psttShorter ) ;
                        tShorter = T(psttShorter) ;
                        etThread.delF( tinBaseP , psttnu ) ;
                        etThread.strBisectF( tinBaseP , psttShorter , psttnu , tShort , tDot , 7 , flSTRbISECT_null ) ; ___( psttShorter ) ; ___( psttnu ) ;
                        ZE( strokeS* , psttnu ) ;
                        ZE( strokeS* , psttShorter ) ;
                    {
                    TN( tShorter , "" ) ;            // bksAccessEvents.4.hash123.00.00.00.accessEvents
                {
                if( !bDir )

                }
                    etThread.delF( tinBaseP , psttShort ) ;
                    tShort = T(psttShort) ;
                    etThread.delF( tinBaseP , psttnu ) ;
                    etThread.strBisectF( tinBaseP , psttnu , psttShort , pInfo->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
                    ZE( strokeS* , psttShort ) ;
                    ZE( strokeS* , psttnu ) ;
                {
                TN( tShort , "" ) ;            // bksAccessEvents.4.hash123.00.00.00.accessEvents.booksC.1.book.00000001.00000001.bookC

                const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;

                TN( tIfoName , pInfo->psttIfoName ) ;
            {
            else
            }
                break ;
                DEL( pInfo ) ;
            {
            if( !pInfo || !pInfo->psttIfoName )

            etThread.diskFindFileOrDirF( tinBaseP , pInfo , hFind , fnLike.pathF() , &pat ) ;
            ZE( infoFileS* , pInfo ) ;
        {
        do
        handleC hFind( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
    {
    while( !bQuit && !POOP )
    const boolT& bQuit = *(const boolT*)&(const countT&)ether ;

    patternC pat( tinBaseP , etThread , fnLike , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
    fileNameC fnLike( tinBaseP , etThread , tLike ) ;

    ZE( countT , idIn ) ;
    TN( tDot , "." ) ;
    TN( tSlash , "/" ) ;
    TN( tLike , "" ) ; tLike = T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/ipdos/memorySpaces/")+tUser+T("/" ifcSTR( ifcIDmEMORYsPACE_APPLICATION ) "/stateSpaces/ffffefff/bksAccessEvents.4.hash123.??.??.??.accessEvents.booksC.1.book.00000001.00000001.bookC") ;
    TN( tUser , thirdC::postUserNameIF() ) ;
{

ether.ifcHireF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS6bOOKbYcONTAINERuRI") , ifcIDaDAM_ACCESSeVENTS7rEPORTbYcONTAINERuRI , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO , nicNameC() ) ; // flHIRE_DISPLAYaUTO CAN BE COMMENTED OUT TO AVOID WDW FOR ROOT CLOUD INSTANCE WHICH IS USUALLY NOT INTERESTING

TODO

DONE( tmWorkerF )
}
    dec02AM( wsP.cWorkers ) ;
    }
        }
            THREADmODE2rESTORE
            }
                wsP.st_pPageEvent.ungrabF( tinBaseP ) ;
                }
                    wsP.st_pPageEvent.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                    }
                        THREADmODE4rESTORE
                        DEL( pPageEvent ) ;
                        THREADmODE4oN( flTHREADmODE4_DOnOTrEGISTERpAGEc )

                        }
                            }
                                wsP.swBooksByIdjContainerIdjUri.ungrabF( tinBaseP ) ;

                                inc02AM( cOut ) ;

                                booksOut.writeF( tinBaseP , (byteT*)&cbo , sizeof cbo , WS( sBookEntryOut ) , flBOOKScwRITE_ALLOWoDDlENGTH | flBOOKScwRITE_ALLoRnONE | flBOOKScwRITE_ELSEfILLtOeND , 0 ) ;
                                countT cbo = sBookEntryOut.cbF( tinBaseP ) ;

                                //etThread.traceF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS6bOOKbYcONTAINERuRI: writing an event") ) ;

                                booksC& booksOut = *(booksC*)&(countT&)wsP.swBooksByIdjContainerIdjUri ;

                                }
                                    }
                                        booksC* pBooks = new( 0 , tinBaseP , pba , sizeof( booksC ) ) booksC( tinBaseP , TAG( TAGiDnULL ) , tBooksOut , ifcIDsTATEsPACE_MULTIPLEaDAMS , flBOOKSc_WRITER , TOCK >> 0 ) ; ___( pBooks ) ;

                                        TN( tBooksOut , "" ) ; tBooksOut = T("bksAccessEvents.5.containerUri.")+TF3(idjContainer,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+tDot+TF3(idjUri,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8) ;
                                    {
                                    if( !POOP )

                                    __Z( pba ) ;
                                    byteT* pba = (byteT*)&(countT&)wsP.swBooksByIdjContainerIdjUri ;
                                {
                                if( !wsP.swBooksByIdjContainerIdjUri.idSlotOfLeverF( tinBaseP , (countT)wsP.lever_pbIdjContainerIdjUri ) )
                                wsP.lever_pbIdjContainerIdjUri = (const byteT*)&c2lever ;
                                count2S c2lever( idjUri , idjContainer ) ;                                          // CONTAINER IS HIGH ORDER BECAUSE IT VARIES LESS, SO MISMATCH WILL BE DETECTED FASTER BY switchC, WHICH WILL COMPARE THE LEVER BYTES FROM LOW ORDER TO HIGH ORDER
                                wsP.swBooksByIdjContainerIdjUri.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                                sBookEntryOut << cbReply ;
                                sBookEntryOut << code ;
                                sBookEntryOut << idjQuery ;
                                sBookEntryOut << idjBucket ;
                                sBookEntryOut << idjMethod ;
                                sBookEntryOut << idjProtocol ;
                                sBookEntryOut << idjBrowser ;
                                sBookEntryOut << nnHe ;
                                sBookEntryOut << timeW2 ;
                                sBookEntryOut << timeW1 ;
                                sBookEntryOut << idFormat ;
                                sBookEntryOut << fingerOut ;
                                soulC sBookEntryOut( tinBaseP , TAG( TAGiDnULL ) ) ;

                                putNegAM( fingerOut , FINGERnEG_ACCESSeVENTiDjOTfORaLLsTRINGS ) ;
                                ZE( countT , fingerOut ) ;

                                inc02AM( wsP.pczTallyByDuck[ timeW2 >> 8 & 0xff ] ) ;

                                _IO_
                            {
                            else
                            if( getNegAM( finger ) != FINGERnEG_ACCESSeVENTiDjOTfORmOstsTRINGS || idFormat != 1 ) etThread.traceF( tinBaseP , T("unexpected format [finger,idFormat]:    ")+TF2(finger,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(idFormat,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                            sBookEntryIn >> cbReply      ;
                            sBookEntryIn >> code         ;
                            sBookEntryIn >> idjQuery     ;
                            sBookEntryIn >> idjUri       ;
                            sBookEntryIn >> idjContainer ;
                            sBookEntryIn >> idjBucket    ;
                            sBookEntryIn >> idjMethod    ;
                            sBookEntryIn >> idjProtocol  ;
                            sBookEntryIn >> idjBrowser   ;
                            sBookEntryIn >> nnHe         ;
                            sBookEntryIn >> timeW2       ;
                            sBookEntryIn >> timeW1       ;
                            sBookEntryIn >> hashUri      ;
                            sBookEntryIn >> idFormat     ;
                            sBookEntryIn >> finger       ;

                            ZE( countT , cbReply      ) ;
                            ZE( countT , code         ) ;
                            ZE( countT , idjQuery     ) ;
                            ZE( countT , idjUri       ) ;
                            ZE( countT , idjContainer ) ;
                            ZE( countT , idjBucket    ) ;
                            ZE( countT , idjMethod    ) ;
                            ZE( countT , idjProtocol  ) ;
                            ZE( countT , idjBrowser   ) ;
                            nicNameC nnHe ;
                            ZE( countT , timeW2       ) ;
                            ZE( countT , timeW1       ) ;
                            ZE( countT , hashUri      ) ;
                            ZE( countT , idFormat     ) ;
                            ZE( countT , finger       ) ;

                            //    sBookEntryOut << cbReply ;                          // f CB REPLY BODY
                            //    sBookEntryOut << code ;                             // e HTTP RESPONSE CODE
                            //    sBookEntryOut << pidj[ 4 ] ;                        // d QUERY
                            //    sBookEntryOut << pidj[ 3 ] ;                        // c URI
                            //    sBookEntryOut << pidj[ 2 ] ;                        // b CONTAINER
                            //    sBookEntryOut << pidj[ 1 ] ;                        // a BUCKET
                            //    sBookEntryOut << pidj[ 0 ] ;                        // 9 METHOD
                            //    sBookEntryOut << pidj[ 5 ] ;                        // 8 PROTOCOL
                            //    sBookEntryOut << pidj[ 6 ] ;                        // 7 BROWSER
                            //    sBookEntryOut << nnHe ;                             // 6 
                            //    sBookEntryOut << *(countT*)&timeW2 ;                // 5 
                            //    sBookEntryOut << timeW1 ;                           // 4 
                            //    sBookEntryOut << ph[ 3 ] ;                          // 3 URI HASH:  THIS IS AN OPTIMIZATION TO AVOID MULTIPLE RETRIEVALS FROM jotC AS PROCESSING PROCEEDS THROUGH SORTING TO FINAL OUTPUT
                            //    sBookEntryOut << (countT)1 ;                        // 2 
                            //    sBookEntryOut << finger ;       finger = 0 ;        // 1 
                            //
                            // RECORD LAYOUT (FROM 745)

                            }
                                etThread.delF( tinBaseP , pbPageCopy ) ;
                                }
                                    sBookEntryIn.shiftLeftF( tinBaseP , ifcIDtYPEsOULiTEM_soulC , pbPageCopy , 0 , 0 , flSOULsHIFTlEFTmODE_UNPACKsOULiMAGE ) ;

                                    bksAccessEventsP.unlockF( tinBaseP ) ;
                                    etThread.memCopyF( tinBaseP , pbPageCopy , pbzPage , cbzPage ) ;
                                    const byteT* pbzPage = *pPageEvent ;
                                    bksAccessEventsP.lockF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                {
                                if( !POOP )

                                __Z( pbPageCopy ) ;
                                etThread.newF( tinBaseP , LF , pbPageCopy , cbzPage ) ; ___( pbPageCopy ) ;
                                ZE( byteT* , pbPageCopy ) ;

                                countT cbzPage = *pPageEvent ;
                            {
                            soulC sBookEntryIn( tinBaseP , TAG( TAGiDnULL ) ) ;
                        {

                        _IO_
                    {
                    if( pPageEvent )

                    wsP.st_pPageEvent.ungrabF( tinBaseP ) ;
                    wsP.st_pPageEvent >> *(countT*)&pPageEvent ;
                    ZE( pageC* , pPageEvent ) ;
                    _IO_
                {
                while( wsP.st_pPageEvent )
                wsP.st_pPageEvent.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                _IO_
            {
            THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
            _IO_
        {
        else
        }
            //etThread.traceF( tinBaseP , T("napped") ) ;
            ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
            //etThread.traceF( tinBaseP , T("napping") ) ;

            if( wsP.bFireWorkers ) break ;
        {
        if( !wsP.st_pPageEvent )
        _IO_
    {
    while( !etThread && !POOP )

    TN( tDot , "." ) ;
    TN( tb4 , "    " ) ;

    booksC& bksAccessEventsP = *(booksC*)pTaskP->c2 ;
    workS&  wsP              =  *(workS*)pTaskP->c1 ;
    _IO_
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmWorkerF )

}
    __Z( pczTallyByDuck ) ;
    etherP.delF( tinBaseP , pcZe ) ;
    }
        bkTallyByDuck.readF( tinBaseP , *(const byteT**)&pczTallyByDuck , cbzi , offi ) ;
        ZE( countT , offi ) ;
        countT cbzi = cbZe ;

        bkTallyByDuck.writeF( tinBaseP , flResult , (byteT*)pcZe , cb1 , 0 , countTC() , flBOOK0cwRITE_ALLoRnONE ) ; //FORMATS IFF NOT YET FORMATTED
        countT cb1 = cbZe ;
        ZE( flagsT , flResult ) ;

        thirdC::c_memsetIF( tinBaseP , (byteT*)pcZe , cbZe ) ;
        const countT cbZe = sizeof( countT ) * TUCK ;
    {
    if( pcZe )
    etherP.newF( tinBaseP , LF , pcZe , TUCK ) ; ___( pcZe ) ;
    ZE( countT* , pcZe ) ;
{
swBooksByIdjContainerIdjUri( tinBaseP , etherP , TAG( TAGiDnULL ) , flSTACKc_null , lever_pbIdjContainerIdjUri , 2 * sizeof( countT ) , 0 , sizeof( booksC ) , ifcIDgRABlAYER_7BASEmISC3 )
st_idjUri( tinBaseP , etherP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_countT ) ,
idOut( 0 ) ,
idIn( 0 ) ,
cWorkers( 0 ) ,
bFireWorkers( 0 ) ,
st_pPageEvent( tinBaseP , etherP , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_countT ) ,

pczTallyByDuck( 0 ) ,
bkTallyByDuck( tinBaseP , TAG( TAGiDnULL ) , "bkTallyByDuck" , ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) , flBOOKc_WRITER | flBOOKc_PRIORbOOKnOTcONTINUEDhERE , sizeof( countT ) * TUCK ) ,

jhsOther(      tinBaseP , "jotAccessEvents.hash.string.other"   , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 , ifcIDgRABlAYER_7BASEmISC2 ) ,   // [STRING]; WO JOT PER UNIQUE STRING
jhsBrowser(    tinBaseP , "jotAccessEvents.hash.string.browser" , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 , ifcIDgRABlAYER_7BASEmISC2 ) ,   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
jhsQuery(      tinBaseP , "jotAccessEvents.hash.string.query"   , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 , ifcIDgRABlAYER_7BASEmISC2 ) ,   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
jhsUri(        tinBaseP , "jotAccessEvents.hash.string.uri"     , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 , ifcIDgRABlAYER_7BASEmISC2 ) ,   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)
workS::workS( tinBaseS& tinBaseP , etherC& etherP ) :

}
    swBooksByIdjContainerIdjUri.ungrabF( tinBaseP ) ;

    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("destroyed  all output books [idOut,cFlavors,heap.cNew-cDel]:    ")+TF2(idOut,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(processGlobal4S::_processGlobal4I_IF().heap.cNewF()-processGlobal4S::_processGlobal4I_IF().heap.cDelF(),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    swBooksByIdjContainerIdjUri.freeAllF( tinBaseP ) ;

    }
        //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("destroying a book [idf,cFlavors]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        //((tinFullS&)tinBaseP).pc Utility[ 0 ] -- ; //U:: TO FIND A BUG
        DELzOMBIE( pBooks ) ;
        //((tinFullS&)tinBaseP).pc Utility[ 0 ] ++ ; //U:: TO FIND A BUG
        booksC* pBooks = (booksC*)&(countT&)swBooksByIdjContainerIdjUri ;
        lever_pbIdjContainerIdjUri = (const byteT*)swBooksByIdjContainerIdjUri.leverF( tinBaseP , idf ) ;
        //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("destroying a book [idf,cFlavors]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )

    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("destroying all output books [idOut,cFlavors]:    ")+TF2(idOut,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    countT cFlavors = swBooksByIdjContainerIdjUri.cFlavorsF( tinBaseP ) ;

    swBooksByIdjContainerIdjUri.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
{
voidT workS::destroyBooksF( tinBaseS& tinBaseP )

}
    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("~workS: called  destroyBooksF") ) ;
    destroyBooksF( tinBaseP ) ;
    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("~workS: calling destroyBooksF") ) ;
    TINSL
{
workS::~workS( voidT )

countT cOut ;
countT cIn ;

;
}
    voidT destroyBooksF( tinBaseS& tinBaseP ) ;
    workS( tinBaseS& tinBaseP , etherC& etherP ) ;
    ~workS( voidT ) ;

    switchC       swBooksByIdjContainerIdjUri ;
    const byteT*  lever_pbIdjContainerIdjUri ;

    stackC        st_idjUri ;

    countT        idOut ;
    countT        idIn ;
    countT        cWorkers ;
    boolT         bFireWorkers ;

    stackC        st_pPageEvent ;

    countT*       pczTallyByDuck ;
    bookC         bkTallyByDuck ;

    jotC          jhsOther   ;
    jotC          jhsBrowser ;
    jotC          jhsQuery   ;          //CS:CODEsYNC: 73a 740 (THESE MUST BE CT IN THE SAME ORDER SO THAT THE SAME TAG VALES ARE ASSIGNED
    jotC          jhsUri     ;          // EVERY JOT INSTANCE CONTAINS HASH PREFIXED STRINGS TO KEEP CODE SIMPLE EVEN THOUGH THE HASH IS NOT USEFUL FOR THE STRINGS IN jhsOther
{
struct workS

//I AM STEP 2: INPUT: BYTE1 SORT; OUTPUT: BYTE2 SORT

/*1*/WAKEhIDE( "ifcIDaDAM_ACCESSeVENTS6bOOKbYcONTAINERuRI" )/*1*/
/**/
*/
 if this happens, all page books must be manually deleted and then regenerated (by editing my code to make me enabled during the initial reading)
 it is critically important to never fire me when new events have been booked but i have not yet "page booked" them
 i enable myself only after reading all existing booked events, when i nap for the woth time
during initialization, i assume that all existing booked events have already been "page booked' and ignore them
 on output, each access event is written to a book dedicated to the corresponding idJot pair that identifies [container] [uri]
 the idJot values identify strings that i place into jotC instances
 on output, each access event soulC contains idJot values rather than string values
 on input, each access event soulC is self sufficient in that it contains string values
i "divide and conquer" by distributing access events to a dedicated booksC instance for each hash of [container] || [uri]
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
