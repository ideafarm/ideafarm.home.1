
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        }
            }
                CONoUTrAW( "================== CHATTERING SELECTED RECORD (END) ==============================\r\n" ) ;
                POPtINaRGS
                flagsT flagsRC = listC::walkIF( tinBaseP , hRecord ) ; //U::BUG: NEED pcP[ 0 ] AND pcP[ 1 ]
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] = record.nameF() ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
                PUSHtINaRGS
                CONoUTrAW( "================== CHATTERING SELECTED RECORD (BEGIN) ==============================\r\n" ) ;
            {
            else
            if( pSelectWalkCBFP ) (*pSelectWalkCBFP)( tinBaseP , *((tinFullS&)tinBaseP).pEther , hRecord ) ;

            puseC puseRecord( tinBaseP , *((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;
            
            record.openF( tinBaseP , hRecord , 0 , ((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.idGrabLayer ) ;
            handleC hRecord( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
            
            grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;

            __( !listingC::bIsListingIF( tinBaseP , &record ) ) ;
            listC& record = *(listC*)(const listingC*)spRecord ;

            listingVSP spRecord = entry ;
            listing_listingVSP_C& entry = *(listing_listingVSP_C*)pListing ;
        {
        else
        }
            }
                CONoUTrAW( "================== CHATTERING SELECTED RECORD (END) ==============================\r\n" ) ;
                POPtINaRGS
                flagsT flagsRC = listC::walkIF( tinBaseP , hRecord ) ; //U::BUG: NEED pcP[ 0 ] AND pcP[ 1 ]
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 1 ] = flLISTwALKcHATTER_null ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] = record.nameF() ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkChatterCBF ;
                PUSHtINaRGS
                CONoUTrAW( "================== CHATTERING SELECTED RECORD (BEGIN) ==============================\r\n" ) ;
            {
            else
            if( pSelectWalkCBFP ) (*pSelectWalkCBFP)( tinBaseP , *((tinFullS&)tinBaseP).pEther , hRecord ) ;

            puseC puseRecord( tinBaseP , *((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;
            
            record.openF( tinBaseP , hRecord , 0 , ((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.idGrabLayer ) ;
            handleC hRecord( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
            
            grabitC grabitx( tinBaseP , TAG( TAGiDnULL ) ) ;

            __( !listingOfSetC::bIsListingIF( tinBaseP , &record ) ) ;
            listOfSetC& record = *(listOfSetC*)(const listingC*)spRecord ;

            listingVSP spRecord = entry ;
            listingOfSet_listingVSP_C& entry = *(listingOfSet_listingVSP_C*)pListing ;
        {
        if( bOfSet )
    {
    if( pListing && !( pListing->flagsF() & fliLISTINGc_MIXINlIST ) && pListing->idTypeDatumF() == ifcIDtYPEmIXINdATUM_listingVSP )

    selectWalkCBFT pSelectWalkCBFP = (selectWalkCBFT)((tinFullS&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] ;
    listingC*      pListing        =                 ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = !((tinFullS&)tinBaseP).pPoolUse ? 0 : PUSE.flagsPoolFormatF() ;

    if( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) { BLAMMOiD( 0x12121212 ) ; }
{
/*1*/flagsT _export listWalkSelectWalkCBF( tinBaseS& tinBaseP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

