
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return pbNapkin && ((napkinHeaderS*)pbNapkin)->cbData ? pbNapkin + sizeof( napkinHeaderS )     : 0 ;

    }
        }
            if( !incv02AM( ((napkinHeaderS*)pbNapkin)->cRef ) ) { BLAMMO ; } // BLAMMO BECAUSE WHOEVER CREATED THE SHARED MEMORY HAS NOT FORMATTED IT

            if( (sCountT)((napkinHeaderS*)pbNapkin)->cRef < 0 ) { BLAMMO ; } //IT MIGHT BE 0, BUT IT SURE AS HELL BETTER NOT BE NEGATIVE!
        {
        else
        }
            ((napkinHeaderS*)pbNapkin)->bFormatted = 0   ;
            ((napkinHeaderS*)pbNapkin)->cRef       = 1   ;
            ((napkinHeaderS*)pbNapkin)->cbData     = cbData ;

            if( ((napkinHeaderS*)pbNapkin)->cRef ) { BLAMMO ; } // BLAMMO BECAUSE SOMEONE HAS INCREMENTED cRef BEFORE I GOT A CHANCE TO FORMAT

            }
                pzbMemorySpaceUse->grabF( tin0P , TAG( TAGiDnULL ) ) ;   // CALLER MUST CALL formattingIsDoneF
                //if( ((tin123S&)tin0P).pc Utility[ 0 ] ) ((tin1S&)tin0P).pEther->traceF( tin0P , T("operator byteT* / grabbing [pzbMemorySpaceUse]:    ")+TF2((countT)pzbMemorySpaceUse,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            {
            if( !( F(flagsCt) & flNAPKINc_DOnOTsERIALIZEcT ) )

            tin0S& tin0P = *pTin ;
            ;
                        : 0
                        ? &processGlobal4I.tin9VeryVeryEarlyLateMain
                    :                               F(processGlobal2I.flCt) & flCTdTg_tin9VeryVeryEarlyLateMainI && !( F(processGlobal2I.flDt) & flCTdTg_tin9VeryVeryEarlyLateMainI )
                    ? &processGlobal5I.tin9VeryEarlyLateMain
                :                                   F(processGlobal2I.flCt) & flCTdTg_tin9VeryEarlyLateMainI && !( F(processGlobal2I.flDt) & flCTdTg_tin9VeryEarlyLateMainI )
                ? &thirdC::third_tin0S_ref_IF()
            tin0S* pTin =                            F(processGlobal2I.flCt) & flCTdTg_tinMainInPool && !( F(processGlobal2I.flDt) & flCTdTg_tinMainInPool )
        {
        if( !( F(flagsSharedMemory) & flOPENsHAREDmEMORYrESULT_ALREADYeXISTED ) )
        //CS:CODEsYNC: 3603e003 3603e007

        flagsState &= ~F(flNAPKINcsTATE_NOTyETcOMMITTED) ;

        thirdC::memCommitIF( countTC() , pbNapkin , cbData ) ; //A:ASSUME: NO OTHER PROCESS OR INSTANCE HAS REFERENCED THIS SHARED MEMORY DURING THE TIME BETWEEN CT AND NOW

        // 
        // 
        // IF MULTIPLE PROCESSES OR INSTANCES CT THIS UNCOMMITTED SHARED MEMORY, THE MEMORY WILL BE COMMITTED WHEN THE WOTH CLIENT CALLS ME
        // THIS LACK OF PROTECTION IS HARMLESS BECAUSE flNAPKINcsTATE_NOTyETcOMMITTED CAN ONLY BE USED FOR SHARED MEMORY BACKED BY THE PAGING FILE
        // THIS MECHANISM CANNOT BE USED WHEN flNAPKINcsTATE_NOTyETcOMMITTED BECAUSE AN ARBITRARY AMOUNT OF TIME (DAYS) CAN ELAPSE BETWEEN CT AND NOW
        // pzbMemorySpaceUse IS USED TO SERIALIZE THE CT AND FORMATTING OF SHARED MEMORY
    {
    if( F(flagsState) & flNAPKINcsTATE_NOTyETcOMMITTED )

    }
        }
            if( POOP ) return 0 ;
        {
        IFbEcAREFUL
        SCOOP
        TINSL
    {
{
/*1*/napkinC::operator byteT*( voidT )/*1*/

// TINSL CANNOT BE USED BECAUSE THAT BLOWS THE STACK DUE TO CYCLIC RECURSION INVOLVING slabC DURING CT OF GLOBALS

/**/

*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

