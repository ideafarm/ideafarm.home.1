
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.traceF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS1gATHERuNPACK / -") ) ;

while( ~hFind && !POOP ) ;
}
    }
        }
            etThread.diskMoveFileOrDirF( tinBaseP , tToAll+tShort , tIfoName , 0 ) ;
            DEL( pInfo ) ;
            }
                etThread.delF( tinBaseP , pstt1Lines ) ;

                }
                    etThread.traceF( tinBaseP , T("[idJot]:    ")+TF2(idJot,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                    etThread.delF( tinBaseP , pstt1Entry ) ;
                    }
                        idJot = (countT)pbEncoded ;
                        etThread.strEncodeF( tinBaseP , pbEncoded , pstt1Entry , 0 , sizeof( countT ) , (const byteT*)&hash ) ; ___( pbEncoded ) ;
                        ZEJ( byteT* , pbEncoded , jotHashString ) ;
                    {
                    if( !idJot )

                    }
                        }
                            }
                                etThread.delF( tinBaseP , pstt1EntryHe ) ;
                                if( !etThread.strCompareF( tinBaseP , pstt1Entry , pstt1EntryHe ) ) idJot = jotHashString.idLathReadF() ;
                                etThread.strDecodeF( tinBaseP , pstt1EntryHe , pbEncodedHe + sizeof( countT ) ) ; ___( pstt1EntryHe ) ;
                                ZE( strokeS* , pstt1EntryHe ) ;
                            {
                            else if( *(countT*)pbEncodedHe == hash )
                            if( !pbEncodedHe || !cbEncodedHe ) break ;

                            countT       cbEncodedHe = pageHe ;
                            const byteT* pbEncodedHe = pageHe ;
                            
                            pageC pageHe = jotHashString ;
                        {
                        while( !idJot )
                        jotHashString.resetLathReadF() ;
                    {
                    ZE( countT , idJot ) ;

                    //etThread.traceF( tinBaseP , T("[hash]:    ")+TF2(hash,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    countT hash = hashF( (byteT*)pstt1Entry , sizeof( strokeS ) * ( CSpREFIX + pstt1Entry->idAdam ) , 0 ) ;

                    etThread.strFuseSeparateF( tinBaseP , pstt1Entry , tURIContainerPlus ) ;
                    etThread.strFuseSeparateF( tinBaseP , pstt1Entry , tContainer        ) ;
                    etThread.strFuseSeparateF( tinBaseP , pstt1Entry , tLogBucket        , 0 , 0 , 0 , 0 , CSpREFIX * 2 + tContainer.csF( tinBaseP ) + tURIContainerPlus.csF( tinBaseP ) ) ; ___( pstt1Entry ) ;
                    ZE( strokeS* , pstt1Entry ) ;

                    }
                        etThread.delF( tinBaseP , psttGot ) ;
                        tURIContainerPlus = T(psttGot) ;
                        etThread.strSubstringF( tinBaseP , psttGot , idf , idl , tURIContainerPlus , 0 ) ; ___( psttGot ) ;
                        countT idl = idHit - 1 ;
                        countT idf = 1 ;
                        ZE( strokeS* , psttGot ) ;
                    {
                    if( idHit > 1 )
                    idHit = tURIContainerPlus.csF( tinBaseP ) && etThread.strIdF( tinBaseP , idf , sttq , tBlankHttpSlash , tURIContainerPlus , 0 , 1 ) ;
                    idf = 1 ;

                    }
                        etThread.delF( tinBaseP , psttGot ) ;
                        tURIContainerPlus = T(psttGot) ;
                        etThread.strSubstringF( tinBaseP , psttGot , idf , idl , tURIContainerPlus , 0 ) ; ___( psttGot ) ;
                        countT idl = idHit - 1 ;
                        countT idf = 1 ;
                        ZE( strokeS* , psttGot ) ;
                    {
                    if( idHit > 1 )
                    countT idHit = tURIContainerPlus.csF( tinBaseP ) && etThread.strIdF( tinBaseP , idf , sttq , sttDoubleQuote , tURIContainerPlus , 0 , 1 ) ;
                    idf = 1 ;

                    etThread.traceF( tinBaseP , tURIContainerPlus ) ;
                    }
                        etThread.delF( tinBaseP , psttGot ) ;
                        tURIContainerPlus = T(psttGot) ;
                        etThread.strSubstringF( tinBaseP , psttGot , idf , idl , tURIContainerPlus , 0 ) ; ___( psttGot ) ;
                        ZE( countT , idl ) ;
                        countT idf = tContainer.csF( tinBaseP ) + 1 ;
                        ZE( strokeS* , psttGot ) ;
                    {
                    if( !etThread.strCompareF( tinBaseP , tLogBucket , tLogBucketAccessLogs ) && tContainer.csF( tinBaseP ) && tURIContainerPlus.csF( tinBaseP ) && 1 == etThread.strIdF( tinBaseP , tContainer , tURIContainerPlus , 1 ) && tContainer.csF( tinBaseP ) < tURIContainerPlus.csF( tinBaseP ) )

                    etThread.traceF( tinBaseP , tURIContainerPlus ) ;
                    }
                        etThread.delF( tinBaseP , psttGot ) ;
                        tURIContainerPlus = T(psttGot) ;
                        etThread.delF( tinBaseP , psttnu ) ;
                        etThread.strBisectF( tinBaseP , psttnu , psttGot , tMethodPlus , tSlash , !etThread.strCompareF( tinBaseP , tLogBucket , tLogBucketAccessLogs ) ? 3 : 2 , flSTRbISECT_null ) ; ___( psttnu ) ; ___( psttGot ) ;
                        ZE( strokeS* , psttGot ) ;
                        ZE( strokeS* , psttnu ) ;
                    {
                    TN( tURIContainerPlus , "" ) ;

                    etThread.traceF( tinBaseP , tMethodPlus ) ;

                    }
                        etThread.delF( tinBaseP , psttGot ) ;
                        tMethodPlus = T(psttGot) ;
                        etThread.strSubstringF( tinBaseP , psttGot , idf , idl , psttc1 , 0 ) ; ___( psttGot ) ;
                        ZE( countT , idl ) ;
                        ZE( strokeS* , psttGot ) ;
                    {
                    if( psttc1->idAdam && etThread.strIdF( tinBaseP , idf , sttq , sttDoubleQuote , psttc1 , 0 , 1 ) )
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;

                    // 216.244.66.247 - - [21/01/2018:19:08:26 +0000] "GET /838a98a1c3503d5080fc-0120a6193262fb464e305f722f61adc1.r53.cf5.rackcdn.com/2016/3/pages/index.z.white.4069b4cf.10000000.html HTTP/1.1" 200 13548 "-" "Mozilla/5.0 (compatible; DotBot/1.1; http://www.opensiteexplorer.org/dotbot, help@moz.com)"
                    // 204.213.85.999 - - [21/01/2018:23:58:02 +0000] "GET /v1/MossoCloudFS_921871/ipdos.home.registry?format=json HTTP/1.0" 200 7174 "-" "-"
                    TN( tMethodPlus , "" ) ;

                    //etThread.traceF( tinBaseP , psttc1 ) ;
                {
                FORsTRINGSiN1( pstt1Lines )

                etThread.delF( tinBaseP , posti ) ;
                etThread.strWordsF( tinBaseP , pstt1Lines , T(posti) , sttq , tCRLF , flSTRwORDS_null , 0 , 0 , 0 , 0 , 0 ) ; ___( pstt1Lines ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                ZE( strokeS* , pstt1Lines ) ;

                etThread.boxGetShadowF( tinBaseP , posti , costi , pInfo->psttIfoName ) ; ___( posti ) ;
                ZE( countT   , costi ) ;
                ZE( osTextT* , posti ) ;
            {

            etThread.traceF( tinBaseP , tLogBucket+tb4+tContainer ) ;
            etThread.traceF( tinBaseP , tContainerPlus ) ;
            etThread.traceF( tinBaseP , tAfterHey ) ;
            etThread.traceF( tinBaseP , tLogBucket ) ;

            }
                etThread.delF( tinBaseP , psttGot ) ;
                tContainer = T(psttGot) ;
                etThread.delF( tinBaseP , psttnu ) ;
                etThread.strBisectF( tinBaseP , psttGot , psttnu , tContainerPlus , tDot , -6 , flSTRbISECT_null ) ; ___( psttGot ) ; ___( psttnu ) ;
                ZE( strokeS* , psttnu ) ;
                ZE( strokeS* , psttGot ) ;
            {
            TN( tContainer , "" ) ;

            }
                etThread.delF( tinBaseP , psttGot ) ;
                tContainerPlus = T(psttGot) ;
                etThread.strSubstringF( tinBaseP , psttGot , idf , idl , tAfterHey , 0 ) ; ___( psttGot ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                ZE( countT , idl ) ;
                countT idf = 0x2e ; ;
                ZE( strokeS* , psttGot ) ;
            {
            TN( tContainerPlus , "" ) ;     // web.archiveview.2018.01.21.20.53c96b155170cfa84d4a67396da97101.log

            }
                etThread.delF( tinBaseP , psttGot ) ;
                tAfterHey = T(psttGot) ;
                etThread.strSubstringF( tinBaseP , psttGot , idf , idl , tShort , 0 ) ; ___( psttGot ) ;
                ZE( countT , idl ) ;

                etThread.delF( tinBaseP , psttGot ) ;
                tLogBucket = T(psttGot) ;
                etThread.strSubstringF( tinBaseP , psttGot , idf , sttq , tDotHeyDot , tShort , 0 , 0 ) ; ___( psttGot ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                countT idf = 1 ;
                ZE( strokeS* , psttGot ) ;  // 0              1               2
            {                               // 123456789abcdef0123456789abcdef0123456789abcdef
            TN( tAfterHey , "" ) ;          // 00b0d3bc.21f75cd8.9d7e9628.0a810000.4a810000.web.archiveview.2018.01.21.20.53c96b155170cfa84d4a67396da97101.log
            TN( tLogBucket , "" ) ;         // .CDN_ACCESS_LOGS
        {
        if( !bDir )

        }
            etThread.delF( tinBaseP , psttShort ) ;
            tShort = T(psttShort) ;
            etThread.delF( tinBaseP , psttnu ) ;
            etThread.strBisectF( tinBaseP , psttnu , psttShort , pInfo->psttIfoName , tSlash , - 1 - bDir , flSTRbISECT_APPENDdELIMITER ) ; ___( psttnu ) ; ___( psttShort ) ;
            ZE( strokeS* , psttShort ) ;
            ZE( strokeS* , psttnu ) ;
        {
        TN( tShort , "" ) ;            // .CDN_ACCESS_LOGS.!.00b0d3bc.21f75cd8.9d7e9628.0a810000.4a810000.web.archiveview.2018.01.21.18.0f687d0ce0e187c640bbe7d56b250a52.log

        const boolT bDir = pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam == '/' ;

        TN( tIfoName , pInfo->psttIfoName ) ;
    {
    else
    }
        break ;
        DEL( pInfo ) ;
    {
    if( !pInfo || !pInfo->psttIfoName )

    etThread.diskFindFileOrDirOldF( tinBaseP , pInfo , hFind , tToPending+T("*") ) ;
    ZE( infoFileS* , pInfo ) ;
{
do
handleC hFind( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

strokeS sttDoubleQuote( '\"' ) ;
const countT tagHighNibble = jotHashString.tagHighNibbleF() ;
jotC jotHashString( tinBaseP , "hash.string.triplets" , flJOTc_WRITE , TICK << 2 , TOCK << 6 , 1 ) ;   // [HASH,STRING]; WO JOT PER UNIQUE STRING (A GIVEN HASH VALUE MIGHT APPEAR IN MULTIPLE JOTS)

}
    etThread.traceF( tinBaseP , T("called  gzip to unpack all gz files in ")+tToPending ) ;
    thirdC::c_systemIF( tinBaseP , tCmd ) ;
    //etThread.traceF( tinBaseP , tCmd ) ;
    }
        tCmd += T(osfn)+T("*") ;
        osFileNameC osfn( tinBaseP , etThread , tToPending ) ;
    {
    TN( tCmd , "gzip -d " ) ;
    etThread.traceF( tinBaseP , T("calling gzip to unpack all gz files in ")+tToPending ) ;

    etThread.diskFileOrDirDeleteF( tinBaseP , tFrom , flFILEoRdIRdELETE_RECURSE ) ;
    etThread.traceF( tinBaseP , T("deleting ")+tFrom+T("; WARNING: i assume that no other process is downloading or otherwise modifying the contents of ")+tFrom ) ;

    etThread.traceF( tinBaseP , T("new access logs [cDirs,cFiles]:    ")+TF2(cDirs,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    etThread.diskWalkGatherF( tinBaseP , cDirs , cFiles , countTC() , tToPending , tFrom , 0 , pcArgs ) ;
    countT pcArgs[] = { 2 } ;
    ZE( countT , cFiles ) ;
    ZE( countT , cDirs ) ;
    etThread.traceF( tinBaseP , T("gathering the poured files into the single directory ")+tToPending+T(" from ")+tFrom ) ;
{

TN( tBlankHttpSlash ," HTTP/" ) ;
TN( tLogBucketCDNAccessLogs , ".CDN_ACCESS_LOGS" ) ;
TN( tLogBucketAccessLogs , ".ACCESS_LOGS" ) ;
TN( tCRLF , "\r\n" ) ;
TN( tDotHeyDot , ".!." ) ;
TN( tDot   , "." ) ;
TN( tSlash , "/" ) ;
TN( tb4 , "    " ) ;
TN( tToAll     , "///d/tmp/cloud.access.log.entries.all/" ) ;
TN( tToPending , "///d/tmp/cloud.access.log.entries.new/" ) ;
TN( tFrom      , "///d/tmp/cloud.access.log.entries.incoming/" ) ;

etThread.traceF( tinBaseP , T("ifcIDaDAM_ACCESSeVENTS1gATHERuNPACK / +") ) ;

TODO

// OBSOLETED BY 51000738

/*1*/WAKEhIDE( "ifcIDaDAM_ACCESSeVENTS1gATHERuNPACK" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

