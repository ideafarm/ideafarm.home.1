
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmPaperOpenCatchF )
}
    TELL( "tmPaperOpenCatchF: cleaning up" )
    // ASSUME: SIGN WILL BE GIVEN EVEN IF IMPOTENT

    pbo->ungrabF( tinBaseP ) ;
    DEL( pso ) ;
    pbo->grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    TELL( "grabbing pbo" )

    }
        }
            ep.delF( tinBaseP , psttri ) ;
            }
                }
                    }
                        st_psttIn << psttw ;
                        ep.strMakeF( tinBaseP , LF , psttw , psttOne ) ; ___( psttw ) ;
                        ZE( strokeS* , psttw ) ;
                        psttOne[ CSpREFIX ] = psttri[ off ] ;
                        SETpREFIX( psttOne , 1 , 0 ) ;
                        strokeS psttOne[ CSpREFIX + 1 ] ;
                    {
                    for( countT off = 0 ; off < psttPrefix->idAdam ; off ++ )
                {
                if( !ep )

                pso->readF( tinBaseP , (byteT*)psttri , sizeof( strokeS ) * psttPrefix->idAdam ) ;
                TELL( "reading the remainder of a strokeS string" )
            {
            if( psttri )
            ep.newF( tinBaseP , LF , psttri , psttPrefix->idAdam ) ; ___( psttri ) ;
            ZE( strokeS* , psttri ) ;
        {
        else
        else if( !psttPrefix->idAdam ) break ;
        if( ep ) ;

        __( psttPrefix[ 0 ].idCaste - sc_PREFIXlENGTH ) ;
        pso->readF( tinBaseP , (byteT*)psttPrefix , sizeof psttPrefix ) ;
        TELL( "reading the prefix strokeS's" )
    {
    while( !ep )

    strokeS psttPrefix[ CSpREFIX ] ;

    pso->etherF( tinBaseP , ep ) ;

    socketC*& pso      = (socketC*&)pc5s->c4 ;
    batonC*&  pbo      = (batonC*&) pc5s->c3 ;
    count5S*& pc5s     = (count5S*&)hFace ;

    etherC&  ep        = *(etherC*)pTaskP->c3 ;
    stackC&  st_psttIn = *(stackC*)pTaskP->c2 ;
    countT&  hFace     = *(countT*)pTaskP->c1 ;
    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
/*1*/TASK( tmPaperOpenCatchF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

