
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

while( ~hFind && !ether && !POOP ) ;
}
    DEL( pInfo ) ;
    }
        etThread.delF( tin0P , psttShort ) ;
        }
            fileC( tin0P , (strokeS*)( tFolderTo+T(psttShort) ) , ifcOPENaCCESS_W , 0 , flOPENdETAILS_DOnOTvALIDATE | flOPENdETAILS_DOnOTrEGISTER /*flOPENdETAILS_null*/ , ifcOPENhOW_nCeR ) ;
        {

        if( !( idFile % TUCK ) ) etThread.traceF( tin0P , psttShort ) ;

        etThread.delF( tin0P , psttPath ) ;
        ___( psttShort ) ;
        ___( psttPath ) ;
        etThread.strBisectF( tin0P , psttPath , psttShort , pInfo->psttIfoName , tSlash , - 1 , flSTRbISECT_APPENDdELIMITER ) ;
        ZE( strokeS* , psttShort ) ;
        ZE( strokeS* , psttPath ) ;
    {
    if( pInfo && pInfo->psttIfoName && pInfo->psttIfoName[ CSpREFIX - 1 + pInfo->psttIfoName->idAdam ].idAdam != '/' )
    etThread.diskFindFileOrDirOldF( tin0P , pInfo , hFind , tLike ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;

    idFile ++ ;
{
do
handleC hFind( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;
ZE( countT , idFile ) ;
TN( tSlash , "/" ) ;
TN( tFolderTo , "///d/tmp/x/ghost/" ) ;
TN( tLike , "///d/ideafarm.home.101/IdeaFarm (tm)/SYSTEM/2.1. Drop Files Here To Archive Them/*" ) ;

TODO

// OBSOLETED BY 6ef

/*1*/WAKEsHOWtEXT( "tool.make.ghost.copy.of.archive" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

