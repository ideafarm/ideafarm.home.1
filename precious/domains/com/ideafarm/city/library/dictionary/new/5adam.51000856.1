
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

etThread.traceF( tin0P , T("2 [pFoo,name]:    ")+TfORsTRING((countT)pFoo2)+T("    ")+T(pFoo2->sayF(fi2)) ) ;
etThread.traceF( tin0P , T("1 [pFoo,name]:    ")+TfORsTRING((countT)pFoo1)+T("    ")+T(pFoo1->sayF(fi1)) ) ;

fooC* pFoo2 = new( 0 , tin0P , pbFooShared , sizeof pbFooShared ) fooC( fi2 ) ;
fooC* pFoo1 = new( 0 , tin0P , pbFooShared , sizeof pbFooShared ) fooC( fi1 ) ;

thirdC::c_memsetIF( tin0P , pbFooShared , sizeof pbFooShared ) ;
byteT pbFooShared[ sizeof( fooC ) ] ;

fooiC fi2( "myName2" ) ;
fooiC fi1( "myName1" ) ;

TODO

}
    return fiP.postName ;
    CONoUTrAW( "\r\n" ) ;
    CONoUTrAW( fiP.postName ) ;
    CONoUTrAW( "\r\nmy name is:\r\n" ) ;
{
const osTextT* fooC::sayF( fooiC& fiP )

}
    CONoUTrAW( "\r\n" ) ;
    CONoUTrAW( fiP.postName ) ;
    CONoUTrAW9( "\r\nconstructing [&fiP,cSharing,idMe,name]:    " , &fiP , "    " , cSharing , "    " , fiP.idMe , "    " , &fiP , "    " ) ;

    fiP.idMe = ++ cSharing ;
{
fooC::fooC( fooiC& fiP )

NEWdELcLASS( 1 , fooC ) ;

;
}
    const osTextT* sayF( fooiC& fiP ) ;
                   fooC( fooiC& fiP ) ;
                   NEWdELcLASSpROTOS

    public :

    countT         cSharing ;
{
class fooC

;
}
    friend class fooC ;

    inline fooiC( const osTextT* const postNameP ) : postName( postNameP ) , idMe( 0 ) {}

    public :

    countT               idMe     ;
    const osTextT* const postName ;
{
class fooiC

class fooC ;

/*1*/WAKEsHOWtEXT( "example.simplest.sharable.class.instance" )/*1*/
/**/
*/
 the approach is to define a "per instance" class and to pass a reference to its instances as a parameter to every membee function that must access any of the per instance "members"
 the intended application is to rewrite napkinC, sexC, slotsC, and poolC so that ifcIDpOOL_HOMEtEMP works correctly when ct'd by multiple processes
i demonstrate a technique for defining a class for which the instance image is shared by multiple instances yet some "members" are private to each instance
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
