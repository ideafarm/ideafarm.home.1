
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    bArm = 1 ;    

    //etThread.traceF( tin0P , T("[cNapping1,cNapping2]: ")+TF2(cNapping1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb+TF2(cNapping2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    etThread.traceF( tin0P , TF3(++icCycle,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+T("speed [mean,cDoneNew,time1E,cDonePerTime,cDone1,cDone2]: ")+TF3(mean,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb+TF3(cDoneNew,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb+TF3(time1E,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb+TF3(cDonePerTime,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tb+TF3(cDone1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8)+tDot+TF3(cDone2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,8) ) ;

    mean /= cGot ;
    for( countT offi = 0 ; offi < cGot ; offi ++ ) mean += pcDonePerTime[ offi ] ;
    ZE( countT , mean ) ;

    ;
        : sizeof pcDonePerTime / sizeof pcDonePerTime[ 0 ]
        ? ccDonePerTime
    countT cGot = ccDonePerTime < sizeof pcDonePerTime / sizeof pcDonePerTime[ 0 ]

    ccDonePerTime ++ ;
    pcDonePerTime[ ccDonePerTime % ( sizeof pcDonePerTime / sizeof pcDonePerTime[ 0 ] ) ] = cDonePerTime ;

    countT cDonePerTime = cDoneNew /** TUCK*/ / time1E ; // REALLY PER TUCK, NOT PER TIME, DUE TO "* TUCK"

    etThread.osTimeSubtractF( tin0P , time1E , time2E , time1LathSave , time2LathSave ) ;

    cDone1Lag = cDone1Snap ;
    countT cDoneNew = cDone1Snap - cDone1Lag ;
    if( cDone1Snap < cDone1Lag ) cDone2 ++ ;
    countT cDone2Snap = cDone2 ;
    countT cDone1Snap = cDone1 ;

    time2Lath = time2E ;
    time1Lath = time1E ;
    etThread.osTimeNowF( tin0P , time1E , time2E ) ;
    ZE( sCountT , time2E ) ;
    ZE( countT  , time1E ) ;

    sCountT time2LathSave = time2Lath ;
    countT  time1LathSave = time1Lath ;

    }
        ++ s ; ether.osSleepF( tin0P , TOCK << 0 ) ;
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    {
{
while( !ether )
ZE( countT , icCycle ) ;

ZE( countT , ccDonePerTime ) ;
countT pcDonePerTime[ 0x10 ] ;

cDone2Lag = cDone2 ;
cDone1Lag = cDone1 ;

etThread.osTimeNowF( tin0P , time1Lath , time2Lath ) ;
ZE( sCountT , time2Lath ) ;
ZE( countT  , time1Lath ) ;
TN( tDot , "." ) ;
TN( tb , " " ) ;

//etherC::loafIF( tin0P ) ;
//etThread.traceF( tin0P , T("ok") ) ;

//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_SHUTDOWN ) ;

//WAITuNTILaLMOSTaLONE( 2 )

while( cDo -- ) etThread.osThreadF( TaRG1( tmGorilla5F ) /*, (countT)&grabFoo*/ ) ;

//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_SETUP , flETHERwHERE_null , cDo ) ;
//countT cDo = 12 ;
countT cDo = 2 ;
//countT cDo = 1 ;

//grabC grabFoo( tin0P , TAG( TAGiDnULL ) ) ;

etThread.traceF( tin0P , T("[offo,bitsReally]: ")+TF2(idBit-ifcIDgRABITbIT_00,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(bitsReally,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
bitsReally = 0 ;

TODO

DONE( tmGorilla999F )

}
    inc02AM( cDone1 ) ;

    //((tin1S&)tin0P).cYield = 0 ;
    //thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) , 0 ) ;
    //((tin1S&)tin0P).cYield = 0 ;

    //gg.ungrabF( tin0P ) ;

    //((tin1S&)tin0P).cYield = 0 ;
    //thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) , 0 ) ;
    //((tin1S&)tin0P).cYield = 0 ;

    //gg.grabF( tin0P , TAG( TAGiDnULL ) ) ;

    //}
    //    }
    //        dec02AM( cNapping2 ) ;
    //        ++ s ; ether.osSleepF( tin0P , TICK ) ;
    //        inc02AM( cNapping2 ) ;
    //
    //        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    //    {
    //    if( bDoze )
    //
    //    etThread.traceF( tin0P , TF2(((tin1S&)tin0P).glass.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb+TF2(idCycle,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(bDoze?" uh oh: will sleep for tick":"") ) ;
    //
    //                  idtLath =  ((tin1S&)tin0P).glass.idThread ;
    //    boolT bDoze = idtLath == ((tin1S&)tin0P).glass.idThread ;
    //
    //    static countT idtLath ;
    //{
    //if( !( idCycle % TOCK ) )
    idCycle ++ ;

    //}
    //    dec02AM( cNapping1 ) ;
    //    ++ s ; ether.osSleepF( tin0P , TOCK ) ;
    //    inc02AM( cNapping1 ) ;
    //
    //    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
    //{
    //if( setIfEqualsAM( bArm , 0 , 1 ) )
{
while( !ether )
countT idCycle ;
TN( tb , " " ) ;

//grabitC gg( tin0P , TAG( TAGiDnULL ) , bb , ifcIDgRABITbIT_00 , 0 , 0 , flGRABITc_SUPPRESScTdT , TUCK , ifcIDgRABlAYER_7BASEmISC1 ) ;

TASK( tmGorilla999F )

DONE( tmGorilla6F )
}
    }
        grabFooP.ungrabF( tin0P ) ;
        inc02AM( cDone1 ) ;
        grabFooP.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        idCycle ++ ;
    {
    while( !ether )
    countT idCycle ;
    TN( tb , " " ) ;

    grabC& grabFooP = *(grabC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmGorilla6F )             // SPEED: 

DONE( tmGorilla5F )

//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_UNREGISTERtHREAD ) ;

//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_UNWATCH ) ;
}
    gg.ungrabF( tin0P ) ;
    inc02AM( cDone1 ) ;
    gg.grabF( tin0P , TAG( TAGiDnULL ) ) ;
    idCycle ++ ;
{
while( !ether /*&& cDo --*/ )
countT cDo = TOCK << 2 ;
//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_WATCH ) ;
countT idCycle ;
TN( tb , " " ) ;

gNewC   gg ;
//grabitC gg( tin0P , TAG( TAGiDnULL ) , bb , idBit , *(grabitC*)0 , 0 , 0 , 0 , flGRABITc_SUPPRESScTdT , TUCK , ifcIDgRABlAYER_7BASEmISC1 ) ;

//etThread.etherWhereF( tin0P , ifcIDaCTIONwHERE_REGISTERtHREAD ) ;

TASK( tmGorilla5F )             // SPEED: 3

DONE( tmGorilla4F )

}
    if( !was1 ) { BLAMMO ; }
    countT was1 = btrKeyedAM( &bb , keyIdThread , 0 , ((tin1S&)tin0P).glass.idThread ) ;

    cDone1 ++ ;
    //inc02AM( cDone1 ) ;

    }
        OSsLEEPf( 0 ) ;
    {
    while( btsKeyedAM( &bb , keyIdThread , 0 , ((tin1S&)tin0P).glass.idThread ) )
    idCycle ++ ;
{
while( !ether )
countT idCycle ;
TN( tb , " " ) ;

countT keyIdThread ;

TASK( tmGorilla4F )             // SPEED: 19 (58 when 12_9 gorillas)

DONE( tmGorilla3F )

}
    inc02AM( cDone1 ) ;
    OSsLEEPf( 0 ) ;
    idCycle ++ ;
{
while( !ether )
countT idCycle ;
TN( tb , " " ) ;

TASK( tmGorilla3F )             // SPEED: 3b1

DONE( tmGorilla2F )

}
    inc02AM( cDone1 ) ;
    idCycle ++ ;
{
while( !ether )
countT idCycle ;
TN( tb , " " ) ;

TASK( tmGorilla2F )             // SPEED: 1d3

DONE( tmGorilla1F )

}
    if( !was1 ) { BLAMMO ; }
    countT was1 = btrAM( &bb , 0 ) ;

    ((tin1S&)tin0P).cYield = 0 ;
    }
        thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) , 0 ) ;
    {
    while( btsAM( &bb , 0 ) )
    ((tin1S&)tin0P).cYield = 0 ;

    if( !( idCycle % TICK ) ) etThread.traceF( tin0P , TF2(((tin1S&)tin0P).glass.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb+TF2(idCycle,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    idCycle ++ ;
{
while( !ether )
countT idCycle ;
TN( tb , " " ) ;

thirdC::dosPriorityIF( tin0P , ifcTHREADpRIORITY_SPINLOCK ) ;
TASK( tmGorilla1F )

}
    if( !was1 ) { BLAMMO ; }
    countT was1 = btrAM( &bb , 0 ) ;
{
voidT gNewC::ungrabF( tin0S& tin0P )

}
    ((tin1S&)tin0P).cYield = 0 ;
    }
        //thirdC::osThreadYieldIF( tin0P , TAG( TAGiDnULL ) , 0 ) ;
        OSsLEEPf( 0 ) ; //U:: TO FIND A BUG
    {
    while( btsAM( &bb , 0 ) )
    ((tin1S&)tin0P).cYield = 0 ;
{
voidT gNewC::grabF( tin0S& tin0P , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP )

}
{
gNewC::gNewC( voidT )

}
{
gNewC::~gNewC( voidT )

;
}
    voidT ungrabF( tin0S& tin0P ) ;
    voidT grabF( tin0S& tin0P , const countT idLineP , const countT idiFileP , const byteT* const pbBitsP ) ;
    gNewC( voidT ) ;
    ~gNewC( voidT ) ;

    public :
{
class gNewC

countT cNapping2 ;
countT cNapping1 ;
countT cDone2Lag ;
countT cDone2 ;
countT cDone1Lag ;
countT cDone1 ;
boolT bArm ;

byteT& bb = *(byteT*)&bitsReally ;
countT bitsReally = -1 & ~( 1 << ( idBit - ifcIDgRABITbIT_00 ) ) ;
const countT idBit = ifcIDgRABITbIT_00 ;

/*1*/WAKEsHOWtEXT( "doodle.grabit.gorillas" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

