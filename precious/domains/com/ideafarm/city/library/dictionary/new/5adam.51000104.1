
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

etThread.delF( tin0P , psttnu ) ;
etThread.faceHearF( tin0P , psttnu ) ;
ZE( strokeS* , psttnu ) ;
etThread.strokeF( tin0P , T("\r\n\r\npress the enter key") ) ;

etThread.osSleepF( tin0P , TOCK * 2 ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , ++ idt ) ; }
sayF( tin0P , etThread , 1 ) ;
thThread.dosPriorityIF( tin0P , ifcTHREADpRIORITY_SPINLOCK   ) ;

etThread.osSleepF( tin0P , TOCK * 2 ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , ++ idt ) ; }
sayF( tin0P , etThread , 1 ) ;
thThread.dosPriorityIF( tin0P , ifcTHREADpRIORITY_RUSH   ) ;

etThread.osSleepF( tin0P , TOCK * 2 ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , ++ idt ) ; }
sayF( tin0P , etThread , 1 ) ;
thThread.dosPriorityIF( tin0P , ifcTHREADpRIORITY_NORMAL ) ;

etThread.osSleepF( tin0P , TOCK * 2 ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , ++ idt ) ; }
sayF( tin0P , etThread , 1 ) ;
thThread.dosPriorityIF( tin0P , ifcTHREADpRIORITY_LAZIEST   ) ;

etThread.osSleepF( tin0P , TOCK * 2 ) ;
{ ZE( countT , tnu ) ; etThread.osThreadF( tin0P , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , ++ idt ) ; }
sayF( tin0P , etThread , 1 ) ;

countT idt = 1 ;
thirdC& thThread = etThread ;

TODO

DONE( tmF )
etThread.strokeF( tin0P , T("---------------------------------------------------\r\n") ) ;
sayF( tin0P , etThread , idt ) ;
countT idt = pTaskP ? pTaskP->c1 : 0 ;
TASK( tmF )

}
    }
        default                     : { __1                                                                     ; break ; }
        case ifcTHREADpRIORITY_SPINLOCK  : { etThread.strokeF( tin0P , T("thread ")+TF1(idtP)+T("'s priority is now RUDE\r\n"  ) ) ; break ; }
        case ifcTHREADpRIORITY_RUSH  : { etThread.strokeF( tin0P , T("thread ")+TF1(idtP)+T("'s priority is now RUSH\r\n"  ) ) ; break ; }
        case ifcTHREADpRIORITY_NORMAL: { etThread.strokeF( tin0P , T("thread ")+TF1(idtP)+T("'s priority is now NORMAL\r\n") ) ; break ; }
        case ifcTHREADpRIORITY_LAZIEST  : { etThread.strokeF( tin0P , T("thread ")+TF1(idtP)+T("'s priority is now IDLE\r\n"  ) ) ; break ; }
    {
    switch( thThread.dosPriorityIF( tin0P ) )
    thirdC& thThread = etThread ;
    etThread.osSleepF( tin0P , TOCK ) ;
{
voidT sayF( tin0S& tin0P , etherC& etThread , countT idtP )

/*1*/WAKEhIDE( "example.simplest.func.1020080.thirdC.dosPriorityIF" )/*1*/
/**/
*/
\<A HREF=\"5.4010104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

