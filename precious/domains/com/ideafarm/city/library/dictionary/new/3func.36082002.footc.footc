
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
      if( FINGERnEG_FOOTc2 != getNegAM( *(countT*)( pbFoot + cbFoot           ) ) ) { BLAMMO ; }      // FOOT MUST BE FOLLOWED  BY FINGER2
      if( FINGERnEG_FOOTc1 != getNegAM( *(countT*)( pbFoot - sizeof( countT ) ) ) ) { BLAMMO ; }      // FOOT MUST BE PRECEEDED BY FINGER1
    //if( !pbaFootP && (byteT*)this != (byteT*)&fingerFoot3                       ) { BLAMMO ; }      // U::20240711@1529: THIS CHECK IS NOT NEEDED AS IT CANNOT FAIL
      if( cbaFootP && cbaFootP != cbFootP + 2 * sizeof( countT )                  ) { BLAMMO ; }      // ALLOCATION MUST BE SIZED EXACTLY TO [finger1,foot,finger2]
{
cbFoot( cbFootP )
,
)
    ) 
            : (byteT*)this - sizeof( countT ) - cbFootP     // pbFoot POINTS INTO THE (STACK) MEMORY IMMEDIATELY BELOW ME, WHICH WILL BE FORMATTED AS [finger1,foot,finger2]
            ? pbaFootP + sizeof( countT )                   // pbFoot POINTS INTO THE ALLOCATION                         , WHICH WILL BE FORMATTED AS [finger1,foot,finger2]
        pbaFootP
        ,
        putNegAM( fingerFoot3 , FINGERnEG_FOOTc3 )
    (
(
pbFoot
fingerFoot3( 0 ) ,
/*1*/footC::footC( const countT cbFootP , byteT* const pbaFootP , const countT cbaFootP ) :/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

