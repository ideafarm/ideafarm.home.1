
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.osSleepF( tin0P , TOCK ) ;
etThread.strokeF( tin0P , T("ok\r\n") ) ;
etThread.strokeF( tin0P , T("just returned from destructor\r\n") ) ;
}
    etThread.osSleepF( tin0P , TOCK ) ;
    etThread.strokeF( tin0P , T("about to call destructor in 1 tock\r\n") ) ;
    etThread.loafIF( tin0P ) ;
    etThread.strokeF( tin0P , T("news has been constructed\r\n") ) ;
    newsC news( tin0P , etThread ) ;
{

TODO

}
    ether.osThreadF( tin0P , countTC() , tmVolunteerAsSingularityF  , &sgnDone_tmVolunteerAsSingularityF  , flTHREADlAUNCH_null , 0 , 0 , (countT)&bFired ) ;

    }
        if( ether ) return ;
    {
    IFbEcAREFUL
{
sgnDone_tmVolunteerAsSingularityF( tin0P , TAG( TAGiDnULL ) )
bFired( 0 ) ,
ether( etherP ) ,
/*1*/newsC::newsC( tin0S& tin0P , etherC& etherP ) :/*1*/
/**/
*/
/*

}
    sgnDone_tmVolunteerAsSingularityF.waitF( tin0P ) ;
    bFired = 1 ;
    TINSL
{
/*1*/newsC::~newsC( voidT )/*1*/
/**/
*/
/*

DONE( tmVolunteerAsSingularityF )
}
    etThread.ifcJobF( tin0P , stCourses , 0x4010452 , sOrderPrimary , stOrders , T("newsC: volunteer to be the singularity at ")+TT(timeN1,timeN2) ) ;
    etThread.osThreadF( tin0P , countTC() , tmChatAsVolunteerF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&bFired , (countT)&stOrders , (countT)&stCourses ) ;
    
    etThread.osTimeNowF( tin0P , timeN1 , timeN2 ) ;
    ZE( sCountT , timeN2 ) ;
    ZE( countT , timeN1 ) ;
    
    sOrderPrimary << etThread.sockNicNameF( tin0P ) ;
    sOrderPrimary << (strokeS*)T("!iWillBeSingularity") ;
    sOrderPrimary << (countT)ifcIDcMDjOBoRDER_NAMED ;
    
    boolT& bFired = *(boolT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
soulC sOrderPrimary( tin0P , TAG( TAGiDnULL ) ) ;
stackC stOrders(  tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
stackC stCourses( tin0P , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
TASK( tmVolunteerAsSingularityF )

DONE( tmChatAsVolunteerF )
}
    }
        }
            DEL( psCourse ) ;
            }
                }
                    stOrders.ungrabF( tin0P ) ;
                    etThread.strokeF( tin0P , T("stOrders contains ")+TF1(stOrders)+T(" plates after pushing\r\n") ) ;
                    stOrders << new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) ) ;
                    stOrders << new( 0 , tin0P , LF ) soulC( tin0P , TAG( TAGiDnULL ) , flSOUL_null , (countT)1 ) ; //U: THE ORDER NEEDS TO CONTAIN SOMETHING SO THAT IT WILL REACH 2540104
                    stOrders.grabF( tin0P , TAG( TAGiDnULL ) ) ;
                {
                if( bOrderNull )

                }
                    etThread.strokeF( tin0P , T("stOrders contains ")+TF1(stOrders)+T(" plates; data received: ")+TF1(vv)+T("\r\n") ) ;
                    sData >> vv ;
                    ZE( countT , vv ) ;
                {
                else
                }
                    if( !sData ) etThread.strokeF( tin0P , T("my volunteer was rejected\r\n") ) ;
                    bOrderNull = 1 ;
                {
                if( !sData || bFired )

                etThread.strokeF( tin0P , T("unstacked an sData containing ")+TF1(sData)+T(" items\r\n") ) ;
        
                *psCourse >> sNotesData ;
                *psCourse >> sNotesText ;
                *psCourse >> sData ;
                *psCourse >> sCodes ;
                soulC sNotesData( tin0P , TAG( TAGiDnULL ) ) ;
                soulC sNotesText( tin0P , TAG( TAGiDnULL ) ) ;
                soulC sData( tin0P , TAG( TAGiDnULL ) ) ;
                soulC sCodes( tin0P , TAG( TAGiDnULL ) ) ;
            {
            if( psCourse )
            stCourses >> psCourse ;
            ZE( soulC* , psCourse ) ;
        {
        while( stCourses && !bOrderNull )
        stCourses.waitF( tin0P ) ;
    {
    while( !etThread && !bOrderNull )
    ZE( boolT , bOrderNull ) ;

    stackC& stCourses = *(stackC*)pTaskP->c3 ;
    stackC& stOrders  = *(stackC*)pTaskP->c2 ;
    boolT&  bFired    =  *(boolT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmChatAsVolunteerF )

;
}
    newsC( tin0S& tin0P , etherC& etherP ) ;
    ~newsC( voidT ) ;

    public :

    boolT               bFired ;
    signC               sgnDone_tmVolunteerAsSingularityF ;
    etherC&             ether ;
{
/*1*/class __export newsC/*1*/
/**/
*/
/*

/*1*/WAKEhIDE( "doodle.newsC" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

