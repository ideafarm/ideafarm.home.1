
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.delF( tin0P , psttw ) ;

}
    }
        }
            etThread.strokeF( tin0P , TF1(vv)+T("\r\n") ) ;
            *pSoul >> vv ;
            ZE( countT , vv ) ;
        {
        while( (countT)*pSoul )

        soulC* pSoul = (soulC*)psttw[ CSpREFIX - 1 + ids ].idAdam ;
        BLAMMO ; //U::REWRITE TO SUPPORT NEW FUNCTION OF sc_cADAM
    {
    if( psttw[ CSpREFIX - 1 + ids ].idCaste == sc_cADAM )
{
for( countT ids = 1 ; ids <= psttw->idAdam ; ids ++ )

cReplaced = etThread.strReplaceF( tin0P , psttw , 0 , ifcIDtYPEsTRrEPLACE_MAKEiMPORT ) ; ___( psttw ) ;

// psttw IS NOW IN A FORM THAT CAN BE EXPORTED, E.G. PUSHED INTO A soulC OBJECT AND TRANSMITTED TO ANOTHER MEMORY SPACE (E.G. ANOTHER COMPUTER)

countT cReplaced = etThread.strReplaceF( tin0P , psttw , 0 , ifcIDtYPEsTRrEPLACE_MAKEeXPORT ) ; ___( psttw ) ;

}
    etThread.strFuseF( tin0P , psttw , stts ) ; ___( psttw ) ;
    strokeS stts( pSoul ) ;

    for( countT ii = 1 ; ii <= 4 ; ii ++ ) *pSoul << ii ;

    etThread( tin0P , pSoul , TAG( TAGiDnULL ) ) ;
    ZE( soulC* , pSoul ) ;
{
ZE( strokeS* , psttw ) ;

TODO

/*1*/WAKEhIDE( "example.other.func.1030174.etherC.strReplaceF.export.import" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

