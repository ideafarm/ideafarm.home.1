
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            __1
            __( idActionP ) ;
        {
        default:
        }
            break ;
            dec02AM( ((tin1S&)tin0P).pag1->_etherC_.cEnabledWhere ) ;
            THREADmODEwHEREoFF( flTHREADmODEwHERE_WHEREiSwATCHING )
        {
        case ifcIDaCTIONwHERE_UNWATCH :
        }
            break ;
            THREADmODEwHEREoN( flTHREADmODEwHERE_WHEREiSwATCHING )
            inc02AM( ((tin1S&)tin0P).pag1->_etherC_.cEnabledWhere ) ;
        {
        case ifcIDaCTIONwHERE_WATCH :
        }
            break ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.ungrabF( tin0P ) ;
            __( off == ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere ) ;
            for( ; off < ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere ; off ++ ) if( (countT)&tin0P == setIfEqualsAM( *(countT*)&((tin1S&)tin0P).pag1->_etherC_.ppTinWhere[ off ] , 0 , (countT)&tin0P ) ) break ;
            ZE( countT , off ) ;
            THREADmODEwHEREoFF( flTHREADmODEwHERE_REGISTEREDwITHwHERE )
            __Z( cWhereSetup ) ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        {
        case ifcIDaCTIONwHERE_UNREGISTERtHREAD :
        }
            break ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.ungrabF( tin0P ) ;
            __( off == ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere ) ;
            THREADmODEwHEREoN( flTHREADmODEwHERE_REGISTEREDwITHwHERE )
            }
                if( !old ) break ;
                countT old = setIfZeAM( *(countT*)&((tin1S&)tin0P).pag1->_etherC_.ppTinWhere[ off ] , (countT)&tin0P ) ;
            {
            for( ; off < ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere ; off ++ )
            ZE( countT , off ) ;
            __Z( cWhereSetup ) ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        {
        case ifcIDaCTIONwHERE_REGISTERtHREAD :
        }
            break ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.ungrabF( tin0P ) ;
            delF( tin0P , (countT*&)((tin1S&)tin0P).pag1->_etherC_.ppTinWhere ) ;
            THREADmODE1rESTORE
            DEL( ((tin1S&)tin0P).pag1->_etherC_.pSgnDone_tmWhere ) ;
            ((tin1S&)tin0P).pag1->_etherC_.pSgnDone_tmWhere->waitF( tin0P ) ;
            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
            ((tin1S&)tin0P).pag1->_etherC_.bQuitWhere = 1 ;
            __( !( cWhereSetup -- ) ) ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        {
        case ifcIDaCTIONwHERE_SHUTDOWN :
        }
            break ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.ungrabF( tin0P ) ;
            __( cWhereSetup ++ ) ;
            THREADmODEwHERErESTORE
            THREADmODE1rESTORE                                                                            // CBsTACK IS MINIMIZED
            sgnReady.waitF( tin0P ) ;
            osThreadF( TaRG3sGNdONEcBsTACK( tmWhereF , *((tin1S&)tin0P).pag1->_etherC_.pSgnDone_tmWhere , CBsTACKmIN << 4 ) , (countT)&((tin1S&)tin0P).pag1->_etherC_.bQuitWhere , (countT)&sgnReady , (countT)&((tin1S&)tin0P).pag1->_etherC_.cEnabledWhere , (countT)&((tin1S&)tin0P).pag1->_etherC_.idTypeReportWhere , (countT)((tin1S&)tin0P).pag1->_etherC_.ppTinWhere , (countT)&((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere , (countT)&((tin1S&)tin0P).pag4->_etherC_grabWhere ) ;
            THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )
            THREADmODEwHEREoN( flTHREADmODEwHERE_NOwHERE )
            signC sgnReady( tin0P , TAG( TAGiDnULL ) , 0 , ifcIDgRABlAYER_7BASEmISC3 ) ;
            ((tin1S&)tin0P).pag1->_etherC_.pSgnDone_tmWhere = new( 0 , tin0P , LF ) signC( tin0P , TAG( TAGiDnULL ) , 0 , ifcIDgRABlAYER_7BASEmISC2 ) ; ___( ((tin1S&)tin0P).pag1->_etherC_.pSgnDone_tmWhere ) ;
            memSetF( tin0P , (byteT*)((tin1S&)tin0P).pag1->_etherC_.ppTinWhere , ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere * sizeof( countT ) ) ;
            newF( tin0P , LF , (countT*&)((tin1S&)tin0P).pag1->_etherC_.ppTinWhere , ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere ) ; ___( ((tin1S&)tin0P).pag1->_etherC_.ppTinWhere ) ;
            ((tin1S&)tin0P).pag1->_etherC_.cThreadsMaxWhere = cThreadsMaxP ;
            ((tin1S&)tin0P).pag4->_etherC_grabWhere.grabF( tin0P , TAG( TAGiDnULL ) ) ;
        {
        case ifcIDaCTIONwHERE_SETUP :
    {
    switch( idActionP )
    static countT cWhereSetup ;
    _IO_

    }
        if( POOP ) return ;
        FV(flETHERwHERE,flagsP)
        else                                      { __(  cThreadsMaxP ) ; }
        if( idActionP == ifcIDaCTIONwHERE_SETUP ) { __Z( cThreadsMaxP ) ; }
        __Z( idActionP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT etherC::etherWhereF( tin0S& tin0P , const countT idActionP , const flagsT flagsP , const countT cThreadsMaxP )/*1*/

/**/
*/
 cThreadsMaxP
 //||!kt|///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/1snip.001024d.ifcIDaCTIONwHERE!||
 idActionP
 tin0P
arguments
\<A HREF=\"5.10301b5.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$etherWhereF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

