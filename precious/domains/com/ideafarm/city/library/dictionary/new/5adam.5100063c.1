
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tin0P ) ;

}
    CONoUTrAW( "\r\nDESTROYING af2 THEN af1\r\n" ) ;
    
    af1 -= af2 ;
    CONoUTrAW( "\r\naf1 UNBEFRIENDS af2\r\n" ) ;
    
    af2.walkF( tin0P , associateCBF ) ;
    CONoUTrAW( "\r\nWALKING af2's FRIENDS\r\n" ) ;
    
    af1.walkF( tin0P , associateCBF ) ;
    CONoUTrAW( "\r\nWALKING af1's FRIENDS\r\n" ) ;
    
    af1 += af2 ;
    CONoUTrAW( "\r\naf1 BEFRIENDS af2\r\n" ) ;
    
    aFooS af2( tin0P , etThread ) ;
    aFooS af1( tin0P , etThread ) ;
{

TODO

}
    return 0 ;
    CONoUTrAW3( "associateCBF [idMeViewed]: " , (*(const vFooS*)&assViewP).idMeViewed , "\r\n" ) ;
{
boolT associateCBF( tin0S& tin0P , const assViewC& assViewP , const associateC& viewerP , const countT cArgP )

}
    CONoUTrAW3( " vFooS [idMeViewed]: " , idMeViewed , "\r\n" ) ;
{
idMeViewed( idMeViewedP )
assViewC( IDG_vFooS , idGroupSubjectP , cbaP ) ,
vFooS::vFooS( countT idGroupSubjectP , countT cbaP , countT idMeViewedP ) :

}
    CONoUTrAW3( "~vFooS [idMeViewed]: " , idMeViewed , "\r\n" ) ;
{
vFooS::~vFooS( voidT )

NEWdELcLASS( 1 , vFooS )

}
    }
        new( 0 , tin0P , pbaViewP , sizeof( vFooS ) ) vFooS( idGroup , sizeof( vFooS ) , idMe ) ;
        CONoUTrAW5( "viewF [this,pbaViewP]: " , this , " " , pbaViewP , "\r\n" ) ;
    {
    if( cbaViewP >= sizeof( vFooS ) )
{
voidT aFooS::viewF( tin0S& tin0P , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP )

}
{
idMe( 1 + incv02AM( idMeLath ) )
associateC( tin0P , etherP , IDG_aFooS , sizeof( vFooS ) ) ,
aFooS::aFooS( tin0S& tin0P , etherC& etherP ) :

;
}
    vFooS( countT idGroupSubjectP , countT cbaP , countT idMeViewedP ) ;
    virtual ~vFooS( voidT ) ;
    NEWdELcLASSpROTOS

    const countT idMeViewed ;
{
struct vFooS : public assViewC

;
}
    virtual voidT viewF( tin0S& tin0P , byteT* const pbaViewP , countT cbaViewP , associateC& viewerP ) ;
    aFooS( tin0S& tin0P , etherC& etherP ) ;

    const countT idMe ;
{
struct aFooS : public associateC

countT idMeLath ;

#define IDG_vFooS               2
#define IDG_aFooS               1

/*1*/WAKEsHOWtEXT( "example.other.associateC.with.assViewC.homogeneous" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

