
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

                            
REST

etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

}
    etThread.delF( tin0P , pcArray ) ;

    }
        etThread.traceF( tin0P , T("out [cbUsed[0],cbUsed[1],tShort]:    ")+TF2(((countT*)&c4CbUsed)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(((countT*)&c4CbUsed)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tShort ) ;

        TN( tShort , "" ) ; tShort = T(pbIn+sizeof(count04T)) ;

        const byteT* pbIn = pageIn ;
        pageC pageIn = jotIn[ idJot ] ;

        count04T c4CbUsed = *(count04T*)pco ; pco += 2 ; 
        countT   idJot    = *( pco ++ ) ;
    {
    for( countT* pco = pcArray ; pco < pce ; )
    countT* pce = pcArray + ccArray ;

    etThread.ifcSortaF( tin0P , bQuit , (byteT*)pcArray , ccArray * sizeof( countT ) , 0 , 0 , 3 * sizeof( countT ) , flSORTAc_NOwORKERS ) ;
    ZE( boolT , bQuit ) ;

    }
        }
            etThread.traceF( tin0P , T("in  [cbUsed[0],cbUsed[1],idJot,tShort]:    ")+TF2(idJotMe,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(((countT*)&c4CbUsed)[0],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(((countT*)&c4CbUsed)[1],flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tShort ) ;

            }
                }
                     *(count04T*)pcCursor      = c4CbUsed ; pcCursor += 2 ;
                    idJotMe = *( pcCursor ++ ) = jotIn.idLathReadF() ;

                    tShort = T(pbIn+sizeof(count04T)) ;
                    c4CbUsed = *(count04T*)pbIn ;
                {
                else
                if( !pbIn ) ether.traceF( tin0P , T("TODO / !exception: could not obtain blob so ignoring this page") ) ;
                const byteT* pbIn = pageIn ;
                pageC pageIn = jotIn ;
            {
            TN( tShort , "" ) ;
            ZE( count04T , c4CbUsed ) ;
            ZE( countT , idJotMe ) ;

            _IO_
        {
        while( cDo -- )
        countT cDo = cShortNames ;
        countT* pcCursor = pcArray ;
        
        etThread.memSetF( tin0P , (byteT*)pcArray , ccArray * sizeof( countT ) ) ;
        etThread.newF( tin0P , LF , pcArray , ccArray ) ; ___( pcArray ) ;
        ccArray = cShortNames * 3 ;

        etThread.traceF( tin0P , T("[cShortNames]:    ")+TF2(cShortNames,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        const countT cShortNames = jotIn.cElementsF() ;
        jotIn.resetLathReadF() ;

    {
    jotC jotIn( tin0P , T("healarchive.sorted.short.filenames.dut1.1234") , flJOTc_null , 0 , 0 , 0 , ifcIDgRABlAYER_7BASEmISC1 , flGRABc_null , 0 ) ;
    ZE( countT  , ccArray ) ;
    ZE( countT* , pcArray ) ;

    // THIS LAYOUT EXPLOITS THE FACT THAT THE SORT VALUE OF THE TEXT IS AN INCREASING FUNCTION OF idJot, SO INCLUDING idJot AS THE LOWEST ORDER countT OF THE SORT KEY PRODUCES A SORT INCREASING IN KEY AND, WITHIN EACH KEY VALUE, INCREASING IN THE TEXT VALUE
    //
    // 2        [end]
    // 1        c4CbUsed
    // 0        idJot
    // OFFSET   DESCRIPTION
    // ELEMENT LAYOUT

    TN( tb4 , "    " ) ;

    _IO_
{
TODO



/*1*/WAKEhIDE( "doodle.display.short.filenames.sorted.by.filesize" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
