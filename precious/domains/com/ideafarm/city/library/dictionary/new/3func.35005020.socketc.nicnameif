
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            }
                ether.delF( tin0P , pNicName ) ;

                }
                    pNicNameP[ offo ++ ] = pNicName[ offj ] ;
                {
                else if( pNicName && cNicName ) for( countT offj = 0 ; offj < cNicName ; offj ++ )
                if( !offPass ) cNicNameP += cNicName ;

                socketC::nicNameIF( tin0P , ether , pNicName , cNicName , psttc1 ) ; ___( pNicName ) ;
                ZE( countT    , cNicName ) ;
                ZE( nicNameC* , pNicName ) ;
            {
            FORsTRINGSiN1( psttP )
            ZE( countT , offo ) ;

            if( offPass && cNicNameP ) { ether.newF( tin0P , LF , *(byteT**)&pNicNameP , cNicNameP * sizeof( nicNameC ) ) ; ___( pNicNameP ) ; }
        {
        for( countT offPass = 0 ; offPass <= 1 ; offPass ++ )
    {
    else
    }
        else ether.sockNicNameF( tin0P , pNicNameP , cNicNameP , psttP ) ;
        }
            }
                CONoUTrAW3( "" , ((tin1S&)tin0P).pag1->idAdam , tSay ) ;
                TN( tSay , "" ) ; tSay = T("/nicNameIF: mapping ")+T(psttP)+T(" to ")+T(*pNicNameP)+T("\r\n") ;
                cNicNameP = 1 ;
                *pNicNameP = pMap->nnHome ;
            {
            if( pNicNameP )
            ether.newF( tin0P , LF , pNicNameP , 1 ) ; ___( pNicNameP ) ;
        {
        if( pMap )

        }
            if( !cToDo || F(pMap->flagsHome) & flIPmAPhOMEs_NOmAPPING ) pMap = 0 ;

            }
                cToDo -- ;
                pMap ++ ;
                if( !ether.strCompareF( tin0P , T(psttP) , T(pMap->postDomainName) ) ) break ; //U::flagsP TO TELL ME TO USE postMxName INSTEAD
            {
            while( cToDo )
            countT cToDo = CiPmAPhOME ;
            pMap = (ipMapHomeS*)(byteT*)processGlobal8I._socketC_napIpMapHome ;
        {
        if( psttP && psttP->idAdam )
        ZE( ipMapHomeS* , pMap ) ;
        //CS:CODEsYNC: PSEUDODUPLICATED CODE: 1070008 1070023
    {
    if( !ISsTRINGoFsTRINGS( psttP ) )

    _IO_

    }
        if( ether ) return ;
        __( psttP && !psttP->idAdam ) ;
        __( cNicNameP ) ;
        __NZ( pNicNameP ) ;
        if( ether ) return ;
    {
    IFbEcAREFUL    
{
/*1*/voidT socketC::nicNameIF( tin0S& tin0P , etherC& ether , nicNameC*& pNicNameP , countT& cNicNameP , const strokeS* const psttP )/*1*/

/**/
*/
 only wo of these need be tested
caller must verify that pNicNameP and cNicNameP are not ze before using pNicNameP
impotence will not occur if the domain name server replies "not found"
\<A HREF=\"5.1070023.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$nicNameIF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

