
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    }
        }
            else if( !( -- cTries ) ) break ;
            }
                break ;
                replyP.idSnipHttpLocation = idSnipLocation ;
            {
            if( idSnipLocation )

            }
                }
                    etThread.traceF( tin0P , idSnipLocation ? T("verified  that ")+tNameDNS+T(" is responsive") : T("error: ")+tNameDNS+T(" is NOT responsive") ) ;
                    }
                        etThread.delF( tin0P , pbi ) ;
                        }
                            //etThread.traceF( tin0P , T("deadman received [pbi]: ")+T(pbi) ) ;
                        {
                        else
                        }
                            idSnipLocation = 0 ;
                            etThread.traceF( tin0P , T("unresponsive http server (unexpected text) [tNameDNS]: ")+tNameDNS ) ;
                        {
                        else if( !pbi || !cbi || etThread.strCompareF( tin0P , T(pbi) , T("IdeaFarm (tm)") ) )
                        }
                            idSnipLocation = 0 ;
                            etThread.traceF( tin0P , T("unresponsive http server (impotence) [tNameDNS]: ")+tNameDNS ) ;
                            POOPR ;
                        {
                        if( POOP )

                        ((tin1S&)tin0P).pEtScratch->boxGetShadowF( tin0P , pbi , cbi , tNameDNS+T("//http/deadman1") , 1 , TUCK >> 2 ) ; ___( pbi ) ; //U:: 20190903@2233: BLAMMO IN HERE
                        ZE( countT   , cbi ) ;
                        ZE( osTextT* , pbi ) ;

                        SCOOPS
                    {
                    IFsCRATCHoK
                    etThread.traceF( tin0P , T("verifying that ")+tNameDNS+T(" is responsive") ) ;
                {
                if( etThread.strCompareF( tin0P , tNameNetBIOS , (textC&)meP ) )

                etThread.traceF( tin0P , T("[meP]: ")+(textC&)meP ) ;
                etThread.traceF( tin0P , T("[tNameNetBIOS]: ")+tNameNetBIOS ) ;
                etThread.traceF( tin0P , T("[tNameDNS]:     ")+tNameDNS ) ;

                }
                    etThread.delF( tin0P , pstt1w ) ;
                    }
                        break ;
                        tNameNetBIOS = T(psttc1) ;

                        //etThread.traceF( tin0P , T("word [psttc1]: ")+T(psttc1) ) ;
                    {
                    FORsTRINGSiN1( pstt1w )
                    etThread.strWordsF( tin0P , pstt1w , tNameDNS , sttq , T(".") ) ; ___( pstt1w ) ;
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                    ZE( strokeS* , pstt1w ) ;
                {
                TN( tNameNetBIOS , "" ) ;

                DEL( prPostsHttpLocation ) ;
                }
                    etThread.delF( tin0P , pstt1w ) ;
                    }
                        }
                            break ;
                            tNameDNS = T(psttc1) ;
                        {
                        else
                        if( cSkip -- ) ;

                        //etThread.traceF( tin0P , T("word [psttc1]: ")+T(psttc1) ) ;
                    {
                    FORsTRINGSiN1( pstt1w )
                    countT cSkip = 1 ;
                    etThread.delF( tin0P , psttLocation ) ;
                    etThread.strWordsF( tin0P , pstt1w , psttLocation , sttq , T("/") ) ; ___( pstt1w ) ;
                    strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                    ZE( strokeS* , pstt1w ) ;

                    etThread.traceF( tin0P , T("location [psttLocation]: ")+T(psttLocation) ) ;
                    etThread.strMakeFromOsTextF( tin0P , psttLocation , POSTS( *prPostsHttpLocation ) ) ; ___( psttLocation ) ;
                    ZE( strokeS* , psttLocation ) ;

                    // "http://factory 2.ideafarm.com/home.3.html"
                {
                TN( tNameDNS , "" ) ;

                countT costLocation = COSTS( *prPostsHttpLocation ) ;

                }
                    meP.getSnipF( tin0P , prPostsHttpLocation , idSnipLocation ) ; ___( prPostsHttpLocation ) ;
                    idSnipLocation = pIdSnip[ ( offi ++ ) % cIdSnip ] ;
                {
                ZE( pbRefC* , prPostsHttpLocation ) ;
            {
            ZE( countT , idSnipLocation ) ;
        {
        for(;;)
        countT cTries = cIdSnip ; // I WILL TRY EVERY SERVER AND THEN GIVE UP

        }
            cIdSnip = sizeof pIdSnipBalance / sizeof pIdSnipBalance[ 0 ] ;
            pIdSnip = pIdSnipBalance ;
        {
        else
        }
            cIdSnip = sizeof pIdSnipNoBalance / sizeof pIdSnipNoBalance[ 0 ] ;
            pIdSnip = pIdSnipNoBalance ;
        {
        if( idLoadMode == ifcIDhTTPlOADmODE_NObALANCE )
        ZE( countT  , cIdSnip ) ;
        ZE( countT* , pIdSnip ) ;

        //idLoadMode = ifcIDhTTPlOADmODE_NObALANCE ; //REMOVE IN PRODUCTION

        } ;
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY16 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY15 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY14 ,        //U:: ENABLE WO OR MORE OF THESE TO CRAFT AND TEST CODE THAT DETECTS AND SKIPS OFFLINE SERVER
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY13 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY12 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY11 ,  //10-16 SERVERS DON'T EXIST, BUT I DISCOVER THEIR NONRESPONSIVENESS JUST AS I WOULD DISCOVER AN EXISTING SERVER THAT BECOMES UNRESPONSIVE.  I DO THIS TO TEST MY ABILITY TO HANDLE A SERVER THAT GOES DOWN
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY10 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY9 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY8 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY7 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY6 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY5 ,
            ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY4 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY3 ,
            //ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY2 ,

            // 4: GORILLA
            // 3: STANDALONE TEST (SERVES HTTP WITHOUT HELP FROM OTHER SERVERS)
            // 2: WINDOWS SERVER 2016 SERVES MULTIMEDIA FROM ARCHIVE
            // 1: CRAFTWORK
            // 20200312@1643: THESE COMMENTS ARE OBSOLETE
        {
        static countT pIdSnipBalance[] =

        } ;
            ifcIDsNIPpREDEFINED_REDIRECTlOCATIONfACTORY1
        {
        static countT pIdSnipNoBalance[] =

        static countT offi ;

        }
            etThread.delF( tin0P , psttHttpLoadMode ) ;
            ;
                : ifcIDhTTPlOADmODE_bALANCE
                ? ifcIDhTTPlOADmODE_NObALANCE
            idLoadMode = bSandbox || ( psttHttpLoadMode && !etThread.strCompareF( tin0P , psttHttpLoadMode , T("nobalance") ) )
            ZE( strokeS* , psttHttpLoadMode ) ; etThread.querySettingF( tin0P , psttHttpLoadMode , T("!ipdos.serve.http.load.mode")  ) ; ___( psttHttpLoadMode ) ;
        {
        if( !idLoadMode )
        static boolT idLoadMode ;

        replyP.idSnipHttpPrefix = ifcIDsNIPpREDEFINED_HTTPfAILmOVEDtEMP ;

        etThread.traceF( tin0P , T("redirecting") ) ;

#endif
        }
            if( POOP ) { POOPR }
            ((tin1S&)tin0P).pEtScratch->diskMoveFileOrDirF( tin0P , tListHumanFileLong , tListBlockFileLong , 1 ) ;
            SCOOPS
        {
        IFsCRATCHoK

        tListHumanFileLong += T("////factory6/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/human/")+T(nnPeerP) ;
        tListHumanFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/human/")+T(nnPeerP) ;
        tListHumanFileLong += T("////factory2/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/human/")+T(nnPeerP) ;
        TlIST( tListHumanFileLong ) ;

        tListBlockFileLong += T("////factory6/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/block/")+T(nnPeerP) ;
        tListBlockFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/block/")+T(nnPeerP) ;
        tListBlockFileLong += T("////factory2/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/block/")+T(nnPeerP) ;
        TlIST( tListBlockFileLong ) ;
#if defined( NEVERdEFINED )
    {

#endif
    else
    }
        DEL( prPosts ) ;
        if( prPosts ) meP.pushSnipF( tin0P , stBodyP , *prPosts ) ;

        etThread.strMakeF( tin0P , LF , prPosts , tSay , 0 , flSTRmAKE_PREFIXlENGTH ) ; ___( prPosts ) ;
        ZE( pbRefC* , prPosts ) ;

        ) ;

            "</body>\r\n"
                "Then please report your experience on the Talk page, so that the problem can be fixed for you and others.\r\n"
                "If you are still blocked, try yet another computer and be sure to use a current version of the Firefox browser.\r\n"
                "<p>\r\n"
                "If you get blocked, use another computer and then post a request for help on the Wo'O's Table Talk page.\r\n"
                "<p>\r\n"
                "This is to eliminate computer generated requests, including attacks on our servers.\r\n"
                "The IDEAFARM.COM servers will only allow one more request from your IP address.\r\n"
                "Refreshing this page will cause you to be \"blocked\" for an indefinite period from viewing this web site.\r\n"
                "Do not refresh this page!\r\n"
                "<p>\r\n"
                "</form>\r\n"
                    "<input id=\"submitcaptcha\" name=\"submitcaptcha\" type=\"submit\" value=\"Click if you're human.\"/>\r\n"
                "<form action=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/?redirect=yes\" id=\"captcha\" method=\"post\" name=\"captcha\">\r\n"
                "<p>\r\n"
                "Please prove that you are a human by clicking this button:\r\n"
                "<br>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.8\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.7\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.6\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.5\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.4\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.3\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.2\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect.1\"></a>\r\n"
                "<a href=\"https://")+T(bSandbox?postCRAFTWORKfACTORY".":"")+T("ideafarm.com/home.force.redirect\"></a>\r\n"          //THESE ARE TRAPS TO ENSURE THAT BOT DOES NOT "ACTIVATE" THE BUTTON
            "<body style=\"background-color:#000 ; color:#ff6 ; font-family: sans-serif ;\">\r\n"
            "</head>\r\n"
                "<meta name=\"keywords\" content=\"conversation chat Wo'O's Table uncensored\">\r\n"
                "<meta name=\"description\" content=\"Wo'O's Table Captcha\">\r\n"
                "<title>Wo'O's Table Captcha</title>\r\n"
            "<head>\r\n"
            "<!doctype html>\r\n"

        tSay = T(

        etThread.traceF( tin0P , T("displaying captcha") ) ;

        etThread.boxPutF( tin0P , tListWoMoreFileLong , tSay , tSay.csF( tin0P ) ) ;
        TN( tSay , "home not redirected, so wo more request allowed" ) ;

        tListWoMoreFileLong += T("////factory6/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/allowWoMore/")+T(nnPeerP) ;
        tListWoMoreFileLong += T("////factory4/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/allowWoMore/")+T(nnPeerP) ;
        tListWoMoreFileLong += T("////factory2/d/ideafarm.home.101/ephemeral/domains/com/ideafarm/ipdos/attackers/allowWoMore/")+T(nnPeerP) ;
        TlIST( tListWoMoreFileLong ) ;
    {
    if( !bRedirect )
#if defined( NEVERdEFINED )

    }
        bRedirect = !etThread.strCompareF( tin0P , tValueRedirect , tYes ) ;

        }
            }
                if( !etThread.strCompareF( tin0P , psttLeverKVP , *pptKey[ offk ] ) ) *pptValue[ offk ] = T((strokeS*)(countT)swKVP) ;
            {
            for( countT offk = 0 ; offk < sizeof pptKey / sizeof pptKey[ 0 ] ; offk ++ )

            psttLeverKVP = (strokeS*)swKVP.leverF( tin0P , idf ) ;
        {
        for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
        countT cFlavors = swKVP.cFlavorsF( tin0P ) ;

        } ;
            &tValueRedirect ,
        {
        textC* pptValue[] =

        } ;
            &tKeyRedirect ,
        {
        textC* pptKey[] =

        TN( tYes , "yes" ) ;
        TN( tValueRedirect , "" ) ;
        TN( tKeyRedirect   , "redirect" ) ;
    {
    if( !bRedirect )
    boolT bRedirect = !etThread.strCompareF( tin0P , psttNameP , T("/home.force.redirect") ) ;
    boolT bSandbox = etherC::ifc_idHomeI_IF() & fliIDhOME_HOMELESS ;

    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /****                                                                                           ****/
    /****  RECEIVE QUERY PARAMETERS                                                                 ****/
    /****                                                                                           ****/
    /***************************************************************************************************/
    /***************************************************************************************************/
    /***************************************************************************************************/
    etThread.traceF( tin0P , T("[psttNameP]:    ")+T(psttNameP) ) ;

    _IO_
{
/*1*/voidT homeCBF( tin0S& tin0P , etherC& etThread , const boolT& bQuitP , httpServerC& meP , countT& cArgP , httpReplyS& replyP , stackC& stBodyP , const strokeS* const psttKVReportP , switchC& swKVP , strokeS*& psttLeverKVP , sessionsC& sessionsP , nicNameC& nnPeerP , const strokeS* const psttNameP , const strokeS* const psttQueryKVP , const strokeS* const psttPeerAgentP , osTextT*& postBodyP )/*1*/


#define ifcIDhTTPlOADmODE_bALANCE           2
#define ifcIDhTTPlOADmODE_NObALANCE         1


/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

