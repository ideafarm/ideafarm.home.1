
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

//etherC::loafIF( tin0P ) ;
etThread.traceF( tin0P , T("ok") ) ;

#endif

THREADmODE1rESTORE
THREADmODE2rESTORE
}

    listC::deleteIF( tin0P , pczName ) ;
    listC::chatterIF( tin0P , pczName ) ;
    countT pczName[] = { LISTnAMEsYS_ROOT , 0 } ;
    //puseC puseUse( puseMaster ) ;

//#endif
    }
        break ; //U:: TO FIND A BUG

        PUSE( tin0P , *(byteT**)&pczHash ) ;
        }
            }
                }
                    DELlIST( fieldEditParamOutC , pOut ) ;
                    puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ;     //20240807@1521: ADDED W/O ANALYSIS OR TESTING

                    SAYfIELDoUT( "\r\nyabba dabba doo!    " )

                    //puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ;

                    //{ puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ; etThread.traceF( tin0P , T("queried  idJot") ) ; }
                    listC::fieldIF( tin0P , pOut , hList , pczfIdJot ,  _fe_queryC() , LF ) ; ___( pOut ) ;
                    //{ puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ; etThread.traceF( tin0P , T("querying idJot") ) ; }
                    ZE( fieldEditParamOutC* , pOut ) ;

                    listC::openIF( tin0P , hList , pczHash ) ;
                    handleC hList( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;

                    grabitC grabitx( tin0P , TAG( TAGiDnULL ) ) ;
                {

                //puseC puseUse( puseMaster ) ;
            {

            etThread.traceF( tin0P , T("[pczHash]:    ")+TF2(pczHash,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            etherC::strStretchIF( tin0P , pczHash , count3S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION ) , pcHash[ offi ] ) ;
            pczHash[ offo ] = 0 ;
            for( offo = 0 ; offo < cczHash ; offo ++ ) pczHash[ offo ] = LISTnAMEsYS_PLACEhOLDER ;
            ZE( countT , offo ) ;
        {
        if( pczHash )
        PUSE.newF( tin0P , LF , *(byteT**)&pczHash , sizeof( countT ) * ( cczHash + 1 ) ) ; ___( pczHash ) ;
        ZE( countT* , pczHash ) ;
        const countT cczHash = 4 + sizeof pcHash[ offi ] ;
    {
    for( countT offi = 0 ; offi < sizeof pcHash / sizeof pcHash[ 0 ] ; offi ++ )
//#if defined( NEVERdEFINED )

    }
        break ; //U:: TO FIND A BUG

        PUSE( tin0P , *(byteT**)&pczHash ) ;
        }
            }
                }
                    }
                        break ; //U:: TO FIND A BUG

//#endif
                        DELlIST( fieldEditParamOutC , pOut ) ;
                        puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ;     //20240807@1521: ADDED W/O ANALYSIS OR TESTING
                        //puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ;
                        //{ puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ; etThread.traceF( tin0P , T("registered  idJot") ) ; }
//#if defined( NEVERdEFINED )
                        listC::fieldIF( tin0P , pOut , hList , pczfIdJot , _fe_pushC( pcHash[ offi ] | ( jj << 0x10 ) ) + _fe_modePushSinkC() , LF ) ; ___( pOut ) ;
                        //{ puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ; etThread.traceF( tin0P , T("registering idJot") ) ; }

                        ZE( fieldEditParamOutC* , pOut ) ;
                    {
                    for( countT jj = 1 ; jj <= 4 ; jj ++ )

                    listC::openIF( tin0P , hList , pczHash ) ;
                    handleC hList( tin0P , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;

                    grabitC grabitx( tin0P , TAG( TAGiDnULL ) ) ;
                {

                //puseC puseUse( puseMaster ) ;
            {

            etThread.traceF( tin0P , T("[pczHash]:    ")+TF2(pczHash,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            etherC::strStretchIF( tin0P , pczHash , count3S( LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTaPPLICATION ) , pcHash[ offi ] ) ;
            pczHash[ offo ] = 0 ;
            for( offo = 0 ; offo < cczHash ; offo ++ ) pczHash[ offo ] = LISTnAMEsYS_PLACEhOLDER ;
            ZE( countT , offo ) ;
        {
        if( pczHash )
        PUSE.newF( tin0P , LF , *(byteT**)&pczHash , sizeof( countT ) * ( cczHash + 1 ) ) ; ___( pczHash ) ;
        ZE( countT* , pczHash ) ;
        const countT cczHash = 4 + sizeof pcHash[ offi ] ;
    {
    for( countT offi = 0 ; offi < sizeof pcHash / sizeof pcHash[ 0 ] ; offi ++ )

    countT pcHash[] = { 0x10 , 0xf , 0xe , 0xd , 0xc , 0xb , 0xa , 0x9 , 0x8 , 0x7 , 0x6 , 0x5 , 0x4 , 0x3 , 0x2 , 0x1 } ;

    //puseC puseAT( tin0P , ifcIDpOOL_ADAMtEMP ) ;

    listC::dictionaryReplaceOsTextIF( tin0P , pczfIdJot ) ;
    countT pczfIdJot[] = { (countT)"idJot" , 0 } ;

    //puseC puseMaster( tin0P , "list.rax.traffic.hash.to.idjot" , flPOOLc_DOnOTiNDEXdURINGcT , ifcIDsTATEsPACE_SINGLEaDAM( tin0P ) ) ;
{
THREADmODE2oN( flTHREADmODE2_UNLOCKpOOLiDENTITY )
THREADmODE1oN( flTHREADmODE1_ALLOWsTOPwHILEgRABBING )

#if defined( NEVERdEFINED )

TODO



/*1*/WAKEsHOWtEXT( "was.scratch.8.archived.20180508@1202.scr" )/*1*/
/**/
*/
/*


//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

