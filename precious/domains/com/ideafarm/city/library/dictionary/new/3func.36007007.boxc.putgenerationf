
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    else __1
    }
        ether.boxPutF( tin0P , psttGeneratedNameP , pbP , cbw ) ;
        ether.strMakeF( tin0P , LF , psttGeneratedNameP , T("///")+T(psttName)+T(".")+TF3(++idMax,flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+T(psttSuffixP) ) ; ___( psttGeneratedNameP ) ;
        ether.boxMenuIdRangeF( tin0P , idMin , idMax , T("///")+T(psttName)+T(".*") , csttEstimateP ) ;
        ZE( countT , idMax ) ;
        ZE( countT , idMin ) ;
    {
    else if( !psttHost->idAdam && !psttType->idAdam )
    }
        verifyReplyF( tin0P , 226 ) ;
        }
            }
                __( rc != 150 ) ;
                ether.delF( tin0P , psttg ) ;
                }
                    ether.delF( tin0P , psttPrefix ) ;
                    ether.strFuseF( tin0P , psttGeneratedNameP , T(psttPrefix)+T(psttg) ) ; ___( psttGeneratedNameP ) ;
                    ether.strSubstringF( tin0P , psttPrefix , idf , idl , psttAll ) ; ___( psttPrefix ) ;
                    ZE( strokeS* , psttPrefix ) ;
                    __Z( idl ) ;
                    countT idl = ether.strIdF( tin0P , countTC( 1 ) , sttq , S1C('/') , psttAll , 0 , - 1 ) ;

                    strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
                    countT idf = 1 ;
                {
                ether.delF( tin0P , psttReply ) ;
                stouGeneratedFileNameF( tin0P , psttg , psttReply ) ; ___( psttg ) ;
                ZE( strokeS* , psttg ) ;
                countT rc = pSControl->readWoReplyF( tin0P , psttReply ) ; ___( psttReply ) ;
                ZE( strokeS* , psttReply ) ;
            {
            if( !POOP )
            sData.writeF( tin0P , pbP , cbw ) ;
            sData.connectF( tin0P , idPortData , nicNameData ) ;
            socketC sData( tin0P , ether , TAG( TAGiDnULL ) ) ;
        {

        ether.delF( tin0P , psttLike ) ;
        { textC txt = T("stou ")+T(psttLike)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }

        }
            verifyReplyF( tin0P , 250 ) ;
            ether.delF( tin0P , psttDir ) ;
            { textC txt = T("cwd ")+T(psttDir)+T("\r\n") ; pSControl->writeF( tin0P , (osTextT*)txt ) ; }
            ether.strSubstringF( tin0P , psttLike , idf , idLathI , psttName ) ; ___( psttLike ) ;
            idLathI = 0 ;
            idf = idBetween + 1 ;
            ether.strSubstringF( tin0P , psttDir , idf , idLathI , psttName ) ; ___( psttDir ) ;
            ZE( strokeS* , psttDir ) ;
            countT idLathI = idBetween - 1 ;
            countT idf = 1 ;
            countT idBetween = ether.strIdF( tin0P , countTC( 1 ) , sttq , S1C('/') , psttName , 0 , - 1 ) ;

            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
        {
        ZE( strokeS* , psttLike ) ;

        }
            __Z( idPortData ) ;
            __Z( nicNameData ) ;
            __( rc != 227 ) ;
            ether.delF( tin0P , psttReply ) ;
            readNicNameIdPortF( tin0P , nicNameData , idPortData , psttReply ) ;
            countT rc = pSControl->readWoReplyF( tin0P , psttReply ) ; ___( psttReply ) ;
            ZE( strokeS* , psttReply ) ;
        {
        if( !POOP )
        ZE( countT , idPortData ) ;
        nicNameC nicNameData ;

        pSControl->writeF( tin0P , (osTextT*)T("pasv\r\n") ) ;
    {
    if( psttHost->idAdam && !ether.strCompareF( tin0P , psttType , T("ftp") ) && pSControl )
    // PUT THE BACKING FILE BYTES

    if( !cbw ) cbw = ether.strBodyLengthF( tin0P , pbP ) ;
    countT cbw = cbP ;
    _IO_

    }
        if( POOP ) return ;
        __Z( psttType ) ;
        __Z( psttHost ) ;
        __Z( pbP ) ;
        __NZ( psttGeneratedNameP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
    SCOOP
{
/*1*/voidT boxC::putGenerationF( tin0S& tin0P , strokeS*& psttGeneratedNameP , const countT csttEstimateP , const byteT* const pbP , const countT cbP , const strokeS* const psttSuffixP )/*1*/
/**/
*/
 cbP
 pbP
  must be large enough to hold a list of the names of all generations
 csttEstimateP
 psttGeneratedNameP
arguments
   nnnnnnnn is the highest current generation number, plus 1
   boxName is the name specified in the boxC constructor
  the generated name will be of the form boxName.nnnnnnnn
 local files
  the generated name depends upon the name generated by the ftp peer
 ftp
can be used with ftp boxes and local file boxes
puts the bytes to a box with a unique, generated name
  \<A HREF=\"5.8120104.1.1.0.html\"\>8120104:  WAKEsHOW( "example.simplest.func.1090007.boxC.putGenerationF" )\</A\>
 simplest
examples
\<A HREF=\"5.1090007.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$putGenerationF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

