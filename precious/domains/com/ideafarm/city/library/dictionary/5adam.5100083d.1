
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;


#endif

    }
        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
    {
    while( cWalkers )
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    etThread.delF( tinBaseP , pstt1PseudoVolumes ) ;
    }
        etThread.osThreadF( TaRG1( tmWalkerF ) , (countT)&cWalkers , (countT)psttRootFolder , (countT)pcArg ) ; psttRootFolder = 0 ;
        inc02AM( cWalkers ) ;
        etThread.strMakeF( tinBaseP , LF , psttRootFolder , T(psttc1)+T("ideafarm.archives.rejects/") ) ; ___( psttRootFolder ) ;
        ZE( strokeS* , psttRootFolder ) ;

        if( ether ) break ;
    {
    FORsTRINGSiN1( pstt1PseudoVolumes )
    etThread.diskFindFileOrDirF( tinBaseP , pstt1PseudoVolumes , tLikePseudoVolumes ) ; ___( pstt1PseudoVolumes ) ;
    ZE( strokeS* , pstt1PseudoVolumes ) ;
    TN( tLikePseudoVolumes , "///d/ideafarm.home.101/devices/" ) ;

    ZE( countT , cWalkers ) ;

#else

    etThread.diskWalkF( tinBaseP , cDirs , cFiles , T("///e/") , ether , flDISKwALK_null , walkCBF , pcArg , 0 , 0 ) ;
    ZE( countT , cFiles ) ;
    ZE( countT , cDirs  ) ;

#if defined( PRELUDE )

countT pcArg[] = { (countT)&stJob } ;

while( cDo -- ) etThread.osThreadF( TaRG1( tmZapperF ) , (countT)&stJob ) ;
countT cDo = 0x20 ;

stackC stJob( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO , ifcSTACKtYPE_PTR_strokeS ) ;

TODO

DONE( tmZapperF )
}
    }
        stJobP.ungrabF( tinBaseP ) ;
        }
            stJobP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

            etThread.delF( tinBaseP , pstt1Job ) ;
            }
                while( !ether && ~hFindFile && !POOP ) ;
                }
                    DEL( pInfoFile ) ;
                    }
                        }
                            }
                                }
                                    //etThread.traceF( tinBaseP , T("zapped:     ")+tLong ) ;
                                    etThread.boxZapF( tinBaseP , tLong ) ;
                                    //etThread.traceF( tinBaseP , T("zapping:    ")+tLong ) ;

                                    TN( tLong , psttLong ) ;
                                {
                                else
                                }
                                    etThread.traceF( tinBaseP , T("found2: [timeWritten,name]:    ")+TT(timeWrittenArchive.time1,timeWrittenArchive.time2)+tb4+tShort ) ;
                                    etThread.traceF( tinBaseP , T("found1: [timeWritten,name]:    ")+TT(pInfoFile->timeWritten1,pInfoFile->timeWritten2)+tb4+tShort ) ;
                                    etThread.traceF( tinBaseP , T("elapse:                        ")+TT(timeE.time1,timeE.time2) ) ;
                                {
                                if( timeE.time2 > 0 || ( !timeE.time2 && timeE.time1 > TICK ) )
                                etThread.osTimeSubtractF( tinBaseP , timeE.time1 , timeE.time2 , timeWrittenArchive.time1 , timeWrittenArchive.time2 ) ;
                                timeS timeE = timeWrittenReject ;

                                }
                                    thirdC::getFileTimeIF( tinBaseP , fir , &timeWrittenReject , 0 , 0 ) ;
                                    fileC fir( tinBaseP , psttLong , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 0 , 0 ) ;
                                {
                                timeS timeWrittenReject = timeS() ;

                                }
                                    thirdC::getFileTimeIF( tinBaseP , fir , &timeWrittenArchive , 0 , 0 ) ;
                                    fileC fir( tinBaseP , pInfoFile->psttIfoName , ifcOPENaCCESS_R , ifcOPENsHARE_R , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO , flFILEaTTR1_null, flFILEaTTR2_null , flFILEc_null , 0 , 0 ) ;
                                {
                                timeS timeWrittenArchive = timeS() ;
                            {
                            else
                            }
                                etThread.traceF( tinBaseP , T("folder found: ")+tShort ) ;

                                }
                                    etThread.delF( tinBaseP , psttShort ) ;
                                    etThread.delF( tinBaseP , psttnu ) ;
                                    tShort  = T(psttShort) ;
                                    etThread.strBisectF( tinBaseP , psttnu , psttShort , pInfoFile->psttIfoName , T("/") , - 2 , flSTRbISECT_null ) ; ___( psttnu ) ; ___( psttShort ) ;
                                    ZE( strokeS* , psttShort ) ;
                                    ZE( strokeS* , psttnu ) ;
                                {
                            {
                            if( !tShort.csF( tinBaseP ) )        // IF A DIRECTORY

                            }
                                etThread.delF( tinBaseP , psttShort ) ;
                                etThread.delF( tinBaseP , psttnu ) ;
                                tShort  = T(psttShort) ;
                                etThread.strBisectF( tinBaseP , psttnu , psttShort , pInfoFile->psttIfoName , T("/") , - 1 , flSTRbISECT_null ) ; ___( psttnu ) ; ___( psttShort ) ;
                                ZE( strokeS* , psttShort ) ;
                                ZE( strokeS* , psttnu ) ;
                            {
                            TN( tShort , "" ) ;
                        {
                        else
                        if( !pInfoFile || !pInfoFile->psttIfoName ) etThread.traceF( tinBaseP , T("not found") ) ;
                        bDone = 1 ;                                                                             // IN THE UNLIKELY EVENT THAT THERE ARE MULTIPLE FILES IN THE ARCHIVE WITH THE SAME PATTERN (TIMESTAMPS PLUS HASH), I DON'T CARE ; MY LOGIC JUST CARES WHETHER THE PATTERN EXISTS IN THE ARCHIVE
                    {
                    if( !bDone )

                    //etThread.traceF( tinBaseP , T("called  diskFindFileOrDirF") ) ;
                    //((tin9S&)tinBaseP).pc Utility[ 0 ] -- ;
                    //etThread.diskFindFileOrDirF( tinBaseP , pInfoFile , hFindFile , tPath , &pat ) ; ___( pInfoFile ) ;
                    //((tin9S&)tinBaseP).pc Utility[ 0 ] ++ ;

                    }
                        }
                            etThread.strMakeFromOsTextF( tinBaseP , pInfoFile->psttIfoName , iffn ) ; ___( pInfoFile->psttIfoName ) ;
                            ifFileNameC iffn( tinBaseP , etThread , pInfoFile->postOsName ) ;
                        {
                        if( pInfoFile && !pInfoFile->psttIfoName )

                        ((thirdC&)etThread).dosFindFileOrDirPrivateF( tinBaseP , pInfoFile , hFindFile , osfnLike ) ;

                        //etThread.traceF( tinBaseP , T("osfnLike:    ")+T(osfnLike) ) ;
                        osFileNameC osfnLike( tinBaseP , etThread , tLike ) ;
                        //etThread.traceF( tinBaseP , T("tLike:       ")+tLike ) ;
                        TN( tLike , "" )  ; tLike = tPath+T(psttPattern) ;
                    {

                    //etThread.traceF( tinBaseP , T("calling diskFindFileOrDirF") ) ;
                    ZE( infoFileS* , pInfoFile ) ;
                {
                do
                ZE( boolT , bDone ) ;
                handleC hFindFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILEfIND ) ;

                patternC pat( tinBaseP , etThread , psttPattern , ifcIDtYPEpATTERN_FOREIGNwILDCARDsTRICT ) ;
                TN( tPath , "" ) ; tPath = T("///e/ideafarm.archives/wo.ideafarm/")+T(psttYear)+T("/") ;

                //etThread.traceF( tinBaseP , T("job:    ")+T(psttYear)+tb4+T(psttPattern)+tb4+T(psttLong) ) ;

                }
                    else                    { BLAMMO ; }
                    else if( !psttLong    ) psttLong    = (strokeS*)psttc1 ;
                    else if( !psttPattern ) psttPattern = (strokeS*)psttc1 ;
                         if( !psttYear    ) psttYear    = (strokeS*)psttc1 ;
                {
                FORsTRINGSiN1( pstt1Job )
                ZE( strokeS* , psttLong    ) ;
                ZE( strokeS* , psttPattern ) ;
                ZE( strokeS* , psttYear    ) ;
            {
            if( !ether )

            stJobP.ungrabF( tinBaseP ) ;

            stJobP >> pstt1Job ;
            ZE( strokeS* , pstt1Job ) ;
        {
        while( stJobP && !ether )
        stJobP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    while( !ether )
    TN( tb4   , "    " ) ;
    
    stackC& stJobP = *(stackC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmZapperF )

DONE( tmWalkerF )
}
    etThread.traceF( tinBaseP , T("end:      ")+TF2(cWalkersP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+tRootFolder ) ;
    dec02AM( cWalkersP ) ;

    }
        }
            etThread.traceF( tinBaseP , T("failed:   ")+tRootFolder ) ;
            POOPRqUIET
        {
        if( POOP )
        ((tin9S&)tinBaseP).pEtScratch->diskWalkF( tinBaseP , cDirs , cFiles , tRootFolder , ether , flDISKwALK_null , walkCBF , pcArgP , 0 , 0 ) ;
        SCOOPS
    {
    IFsCRATCH    
    ZE( countT , cFiles ) ;
    ZE( countT , cDirs  ) ;

    etThread.traceF( tinBaseP , T("begin:    ")+tRootFolder ) ;

    etThread.delF( tinBaseP , psttRootFolderP ) ;
    TN( tRootFolder , psttRootFolderP ) ;
    TN( tb4    , "    " ) ;

    countT*  pcArgP          =  (countT*)pTaskP->c3 ;
    strokeS* psttRootFolderP = (strokeS*)pTaskP->c2 ;
    countT&  cWalkersP       = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWalkerF )

}
    return 0 ;

    }
        }
            }
                etThread.delF( tinBaseP , psttLower ) ;
                etThread.delF( tinBaseP , pstt1w ) ;
                }
                    }
                        }
                            }
                                etThread.delF( tinBaseP , psttFind ) ;
                                }
                                    stJobP << pstt1Job ; pstt1Job = 0 ;
                                    etThread.strFuseSeparateF( tinBaseP ,      pstt1Job , tLong    ) ;
                                    etThread.strFuseSeparateF( tinBaseP ,      pstt1Job , tPattern ) ;
                                    etThread.strFuseSeparateF( tinBaseP ,      pstt1Job , tYear    ) ;
                                    etThread.strMakeF(         tinBaseP , LF , pstt1Job , 0 , 3 * CSpREFIX + tYear.csF( tinBaseP ) + tPattern.csF( tinBaseP ) + tLong.csF( tinBaseP ) ) ; ___( pstt1Job ) ;
                                    ZE( strokeS* , pstt1Job ) ;
                                
                                    }
                                        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
                                    {
                                    while( stJobP > ( TUCK >> 4 ) )
                                    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
                                {

                                //etThread.traceF( tinBaseP , tPath+tb4+tPattern ) ;
                                TN( tPattern , "" ) ; tPattern = T("*")+T(psttFind)+T("*") ;
                                TN( tPath    , "" ) ; tPath    = T("///e/ideafarm.archives/wo.ideafarm/")+tYear+T("/") ;

                                //etThread.traceF( tinBaseP , tYear+tb4+T(psttFind) ) ;
                                etThread.strSubstringF( tinBaseP , psttFind , idf , idl , psttc1 , 0 ) ; ___( psttFind ) ;
                                ZE( strokeS* , psttFind ) ;

                                countT idl = etThread.strIdF( tinBaseP , T(".") , psttc1 , 8 ) ;
                                countT idf = etThread.strIdF( tinBaseP , T(".") , psttc1 , 5 ) ;

                                // !ideafarm.a.2.00000000.00000001.20001231@1617.20170131@0335.9a088138d0158dd07a8035d87a7cbdce.001.fset.zip
                                //                                |------------------------------------------------------------|

                                //etThread.traceF( tinBaseP , tYear+tb4+T(psttc1) ) ;

                                if( !( cRejectsWas % TUCK ) ) etThread.traceF( tinBaseP , TF2(cRejectsWas,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                countT cRejectsWas = incv02AM( cRejects ) ;
                            {
                            else
                            if( 1 != etThread.strIdF( tinBaseP , T("!ideafarm.") , psttc1 , 1 ) ) bNope = 1 ;
                        {
#endif

                        case 9:
                        case 8: { tYear = T(psttc1)                                                                          ; break ; }
                        case 7: { if( 1 != etThread.strIdF( tinBaseP , T("wo.ideafarm"              ) , psttc1 , 1 ) ) bNope = 1 ; break ; }
                        case 5: { if( 1 != etThread.strIdF( tinBaseP , T("ideafarm.archives.rejects") , psttc1 , 1 ) ) bNope = 1 ; break ; }

                        // | 9        !ideafarm.a.2.00000000.00000001.20001231@1617.20170131@0335.9a088138d0158dd07a8035d87a7cbdce.001.fset.zip
                        // | 8        2008
                        // | 7        wo.ideafarm
                        // | 6        000b46a0.f01ba6aa.3c259f6f.8f010000.0d010000
                        // | 5        ideafarm.archives.rejects
                        // | 4        ssd2.arc.209901
                        // | 3        devices
                        // | 2        ideafarm.home.101
                        // | 1        d
                        // | ///d/ideafarm.home.101/devices/ssd2.arc.209901/ideafarm.archives.rejects/000b46a0.f01ba6aa.3c259f6f.8f010000.0d010000/wo.ideafarm

#else
                        case 7:
                        case 6: { tYear = T(psttc1)                                                                          ; break ; }
                        case 5: { if( 1 != etThread.strIdF( tinBaseP , T("wo.ideafarm"              ) , psttc1 , 1 ) ) bNope = 1 ; break ; }
                        case 3: { if( 1 != etThread.strIdF( tinBaseP , T("ideafarm.archives.rejects") , psttc1 , 1 ) ) bNope = 1 ; break ; }
                        case 2: { if( 1 != etThread.strIdF( tinBaseP , T("from."                    ) , psttc1 , 1 ) ) bNope = 1 ; break ; }

                        // | 7        !ideafarm.a.2.00000000.00000001.20001231@1617.20170131@0335.9a088138d0158dd07a8035d87a7cbdce.001.fset.zip
                        // | 6        2008
                        // | 5        wo.ideafarm
                        // | 4        000b46d2.b5f08edd.3c259f6f.40c10000.09a20000
                        // | 3        ideafarm.archives.rejects
                        // | 2        from.hdd4.arc.2021062201
                        // | 1        e
                        // | ///e/from.hdd4.arc.2021062201/ideafarm.archives.rejects/000b46d2.b5f08edd.3c259f6f.40c10000.09a20000/wo.ideafarm/2008/!ideafarm.a.2.00000000.00000001.20001231@1617.20170131@0335.9a088138d0158dd07a8035d87a7cbdce.001.fset.zip

#if defined( PRELUDE )
                    {
                    switch( ++ idw )

                    //etThread.traceF( tinBaseP , TF3((countT)(idw+1),flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+T(psttc1) ) ;

                    if( bNope ) break ;
                {
                FORsTRINGSiN1( pstt1w )
                TN( tYear  , ""     ) ;
                ZE( boolT  , bNope  ) ;
                ZE( countT , idw    ) ;

                etThread.strWordsF( tinBaseP , pstt1w , psttLower , sttq , T("/") ) ; ___( pstt1w ) ;
                strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
                ZE( strokeS* , pstt1w ) ;

                // ///e/from.ssd2.arc.years01/ideafarm.archives.rejects/000b46a1.f1086dbc.3c259f6f.45b00000.05700000/wo.ideafarm/2009/!ideafarm.a.2.00000000.00000001.20090508@2258.20150910@0342.23a33919970b0e2827e5350b0079f255.001.fset.zip

                //etThread.traceF( tinBaseP , psttLower ) ;
                etThread.strConvertToLowerCaseF( tinBaseP , psttLower , psttzLong ) ; ___( psttLower ) ;
                ZE( strokeS* , psttLower ) ;

                //etThread.traceF( tinBaseP , tLong ) ;

                TN( tb4    , "    " ) ;
            {
            if( !bDir )
            boolT bDir = psttzLong[ CSpREFIX - 1 + psttzLong->idAdam ].idAdam == '/' ;

            strokeS* psttzLong = tLong ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            TN( tLong , iffn ) ;
            ifFileNameC iffn( tinBaseP , etThread , postNameP ) ;
        {
        if( !bQuitP )

        stackC& stJobP   = *(stackC*)pcArgP[ 0 ] ;
        etherC& ether    = etherC::etPrimeIF() ;
        etherC& etThread = *((tin9S&)tinBaseP).pEther ;

        _IO_
    {
    if( postNameP && *postNameP )

    _IO_
{
boolT walkCBF( tin0S& tinBaseP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

countT cRejects ;

#define PRELUDE

/*1*/WAKEsHOWtEXT( "tool.archives.purge.rejected.files.faster" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
