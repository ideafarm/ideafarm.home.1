
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST
etThread.osProcessIdPhaseAdamF( tinBaseP , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

HEAReNTER( ether )
etThread.strokeF( tinBaseP , T("\r\n\r\npress the enter key") ) ;

}
    }
        etThread.delF( tinBaseP , pc4w ) ;
        if( pc4w ) etThread.strokeF( tinBaseP , T("lever= ")+TF1(lever)+T("    pc4w->c1= \"")+TF1(pc4w->c1)+T("\"\r\n") ) ;
        swsMe >> pc4w ;
        ZE( count4S* , pc4w ) ;
    {
    while( swsMe )

    lever = swsMe.leverF( tinBaseP , idf ) ;
{
for( countT idf = 1 ; idf <= cFlavors ; idf ++ )

__( cFlavors != CtRIES ) ;
countT cFlavors = swsMe.cFlavorsF( tinBaseP ) ;

swsMe.replaceLeverF( tinBaseP , lever ) ;
ZE( countT , lever ) ;

while( cDone < CtRIES ) etThread.osSleepF( tinBaseP , TUCK * 0x20 ) ;

for( countT idTry = 1 ; idTry <= CtRIES ; idTry ++ ) { ZE( countT , tnu ) ; etThread.osThreadF( tinBaseP , tnu , tmF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)&swsMe , (countT)&cDone , (countT)&baton ) ; }

batonC baton( tinBaseP , TAG( TAGiDnULL ) ) ;
ZE( countT , cDone ) ;
switchStackC swsMe( ether , tinBaseP , TAG( TAGiDnULL ) , flSTACKc_null , flSTACKc_null , ifcSTACKtYPE_PTR_count4S ) ;

TODO

#define CtRIES 0x4

DONE( tmF )

}
    cDone ++ ;

    baton.ungrabF( tinBaseP ) ;

    etThread.delF( tinBaseP , pc4w ) ;
    if( pc4w ) etThread.strokeF( tinBaseP , T("thread ")+TF1(((tinFullS&)tinBaseP).monitor.idThread)+T("    pulled pc4w->c1= \"")+TF1(pc4w->c1)+T("\"\r\n") ) ;
    swsMe.pullF( tinBaseP , pc4w , 1 ) ; ___( pc4w ) ;
    ZE( count4S* , pc4w ) ;

    }
        swsMe.pushF( tinBaseP , pc4w , 1 ) ;
        if( pc4w ) pc4w->c2 = pc4w->c1 = ( ((tinFullS&)tinBaseP).monitor.idThread << 8 ) + ( ++ cFooeyLast ) ;
        etThread.newF( tinBaseP , LF , pc4w ) ;
        ZE( count4S* , pc4w ) ;
    {
    for( countT idp = 1 ; idp <= CpLATES ; idp ++ )

    baton.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

    static countT cFooeyLast ;

    batonC& baton = *(batonC*)            pTaskP->c3 ;    
    countT& cDone = *(countT*)            pTaskP->c2 ;
    switchStackC& swsMe = *(switchStackC*)pTaskP->c1 ;
{
if( !etThread )
__( pTaskP && !pTaskP->c3 ) ;
__( pTaskP && !pTaskP->c2 ) ;
__( pTaskP && !pTaskP->c1 ) ;
__Z( pTaskP ) ;

TASK( tmF )

#define CpLATES 4

/*1*/WAKEhIDE( "example.simplest.func.1210044.switchStackC.pullF" )/*1*/
/**/
*/
\<A HREF=\"5.b330104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

