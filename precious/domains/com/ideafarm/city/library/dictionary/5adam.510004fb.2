
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmHireF )
}
    //#endif

    }
        etThread.traceF( tinBaseP , T("event capture ended [cEnded,cBegun,cIgnored1,cIgnored2]:    ")+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cIgnored1,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cIgnored2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        }
            bKidsSuspendedP = 0 ;
            }
                }
                    etThread.traceF( tinBaseP , T("ContinueDebugEvent failed [rc]:    ")+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    rc = GetLastError() ;
                {
                else
                if( bOk ) ; //etThread.traceF( tinBaseP , T("called ContinueDebugEvent aok") ) ;

                bOk = ContinueDebugEvent( info3.dwProcessId , info3.dwThreadId , DBG_EXCEPTION_NOT_HANDLED ) ;
                //etThread.traceF( tinBaseP , T("calling ContinueDebugEvent") ) ;

                }
                    }
                        stOsPidP.ungrabF( tinBaseP ) ;
                        }
                            stOsPidP.extractF( 0 , tinBaseP ) ;
                            etThread.traceF( tinBaseP , T("deregistering IPDOS (tm) process 3 [osPid]:    ")+TF2((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        {
                        if( ids )
                        stOsPidP.sinkF( tinBaseP , ids , (countT)info3.dwProcessId , flSTACKsINK_QUERY , 0 , 0 ) ;
                        stOsPidP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        ZE( countT , ids ) ;
                    {
                    }
                        stOsPidZombieP.ungrabF( tinBaseP ) ;
                        }
                            stOsPidZombieP.extractF( 0 , tinBaseP ) ;
                            etThread.traceF( tinBaseP , T("deregistering IPDOS (tm) process 2 [osPid]:    ")+TF2((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        {
                        if( ids )
                        stOsPidZombieP.sinkF( tinBaseP , ids , (countT)info3.dwProcessId , flSTACKsINK_QUERY , 0 , 0 ) ;
                        stOsPidZombieP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        ZE( countT , ids ) ;
                    {
                {
                if( info3.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT )

                }
                    //if( bBlammo ) { BLAMMO ; } //U:: TO FIND A BUG

                    }
                        etThread.traceF( tinBaseP , T("resuming execution of the excepting process") ) ;

                        }
                            ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
                        {
                        while( !ether && fliPendingSnapShotRequestP )
                        etThread.traceF( tinBaseP , T("waiting for all exception freeze reports to be written") ) ;

                        tEventP     = tEvent ;
                        osTidEventP = info3.dwThreadId ;                                    //U::BUG: 20210710@1309: RACE
                        osPidEventP = info3.dwProcessId ;                                   //U::BUG: 20210710@1309: RACE
                        thirdC::c_strcpyIF( tinBaseP , postSnapShotRequestP , "exception" ) ;   //U::BUG: 20210710@1309: RACE

                        }
                            ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
                        {
                        while( setIfZeAM( fliPendingSnapShotRequestP , mask ) )
                        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

                        while( cSpace -- ) mask = mask << 1 | 1 ;
                        countT cSpace = ifcIDmEMORYsPACE_max - ifcIDmEMORYsPACE_min + 1 - ( ifcIDmEMORYsPACE_RESERVEDmAX - ifcIDmEMORYsPACE_RESERVEDmIN + 1 ) ;
                        ZE( flagsT , mask ) ;

                        etThread.traceF( tinBaseP , T("requesting exception freeze report") ) ;     //REQUEST SNAPSHOTS WHILE KEEPING EXCEPTING PROCESS FROZEN
                    {
                    )
                        )
                            stOsPidP( (countT)info3.dwProcessId )
                            ||
                            stOsPidZombieP( (countT)info3.dwProcessId )
                        (
                        &&
                        )
                            ( info3.dwDebugEventCode == EXCEPTION_DEBUG_EVENT && !info3.u.Exception.dwFirstChance )      //P:PERSONALITY: IF THE PROCESS EXITS EXPLICITLY THEN IT IS RESPONSIBLE FOR GLASS (REVEALING WHY)
                        (
                        &&
                        !ether
                        //&&
                        //bNever
                    (
                    if
                    //ZE( boolT , bNever ) ;
                    //20230809@1252: ENABLED THIS BECAUSE HEAL DIED ACCESS VIOLATION WITH NO EXCEPTION REPORT

                    }
                        etThread.traceF( tinBaseP , T(bHuh?"!exception:  unexpected process exit code [exitCode]:    ":"process [exitCode]:    ")+tExitCode ) ;

                        }
                            default                                                    : { bHuh = 1 ; tExitCode = TF2(processExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED ) ; break ; }
                            case ifcEXITcODE_EXITpROCESStOOhIGH                        : {            tExitCode = T("EXITpROCESStOOhIGH"                                       ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOeLDER       : {            tExitCode = T("EXITpROCESSdTtINSnOTpOINTINGtOeLDER"                      ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSpOURfAILED               : {            tExitCode = T("EXITpROCESSdTtINSpOURfAILED"                              ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSuNEXPECTEDrECYCLEtYPE    : {            tExitCode = T("EXITpROCESSdTtINSuNEXPECTEDrECYCLEtYPE"                   ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSsOMETHINGgRABBED         : {            tExitCode = T("EXITpROCESSdTtINSsOMETHINGgRABBED"                        ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSnOTpOINTINGtOmE          : {            tExitCode = T("EXITpROCESSdTtINSnOTpOINTINGtOmE"                         ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSdTtINSkIDSeXISTdURINGclEANUP   : {            tExitCode = T("EXITpROCESSdTtINSkIDSeXISTdURINGclEANUP"                  ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSeXCEPTION                      : {            tExitCode = T("EXITpROCESSeXCEPTION"                                     ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSsIGNAL                         : {            tExitCode = T("EXITpROCESSsIGNAL"                                        ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSiMPOTENT                       : {            tExitCode = T("EXITpROCESSiMPOTENT"                                      ) ; break ; }
                            case ifcEXITcODE_EXITpROCESSaOK                            : {            tExitCode = T("EXITpROCESSaOK"                                           ) ; break ; }
                            case ifcEXITcODE_EXITpROCESStOOlOW                         : {            tExitCode = T("EXITpROCESStOOlOW"                                        ) ; break ; }
                            //CS:CODEsYNC: 510004FB 112000EF
                        {
                        switch( processExitCode )
                        ZE( boolT , bHuh ) ;
                        TN( tExitCode , "" ) ;
                    {
                    if( info3.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT )

                    else etThread.traceF( tinBaseP , T("event (debug) [cBegun,cEnded,osPid,osTid,chance,event]:    ")+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF4((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+tb4+TF4((countT)info3.dwThreadId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(info3.u.Exception.dwFirstChance?"    WOTH        ":"        OOTH    ")+tEvent ) ;
                         etThread.traceF( tinBaseP , T("event         [cBegun,cEnded,osPid,osTid,chance,event]:    ")+TF2(cBegun,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cEnded,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF4((countT)info3.dwProcessId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+tb4+TF4((countT)info3.dwThreadId,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(info3.u.Exception.dwFirstChance?"    WOTH        ":"        OOTH    ")+tEvent ) ;
                    )
                        )
                            !info3.u.Exception.dwFirstChance                    //P:PERSONALITY: I AM SILENT FOR WOTH CHANCE EXCEPTION EVENTS BECAUSE THESE MIGHT BE WAD WAC ("WORKING AS DESIGNED WORKING AS CODED").  I AM ONLY INTERESTED IN EXCEPTIONS THAT THE MONITORED PROCESS DOES NOT HANDLE
                            &&
                            info3.dwDebugEventCode == EXCEPTION_DEBUG_EVENT
                        (
                        ||
                        info3.dwDebugEventCode == EXIT_PROCESS_DEBUG_EVENT
                        ||
                        info3.dwDebugEventCode == RIP_EVENT
                    (
                    if

                    }
                        }
                            }
                                break ;

                                }
                                    }
                                        }
                                            break ;
                                            }
                                                tEvent += tb4+tException ;

                                                ;
                                                    : TF2(idException,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
                                                    ? T(postException)
                                                TN( tException , "" ) ; tException = postException

                                                const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapBosCodeWindows( idException ) ;
                                                countT idException = (countT)info3.u.Exception.ExceptionRecord.ExceptionInformation[ ii ] ;
                                            {
                                            if( ii == info3.u.Exception.ExceptionRecord.NumberParameters - 1 )
                                        {
                                        case EXCEPTION_IN_PAGE_ERROR :
                                    {
                                    switch( info3.u.Exception.ExceptionRecord.ExceptionCode )

                                    }
                                        default : { tEvent += tb4+TF2(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                        ; break ; }
                                        case 8  : { tEvent += tb4+TF4(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) ; break ; }
                                        case 7  :
                                        case 5  : { tEvent += tb4+T(processGlobal4S::_processGlobal4I_IF().mapTinName(vv))                ; break ; }
                                    {
                                    else switch( ii )
                                    if( ifcUnexpectedExceptionCode != ifcIDeVENTeXCEPTIONmONITORED_BLAMMO ) tEvent += tb4+TF2(vv,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

                                    countT vv = (countT)info3.u.Exception.ExceptionRecord.ExceptionInformation[ ii ] ;

                                    }
                                        }
                                            case EXCEPTION_IN_PAGE_ERROR    : { tEvent += T("    [bWrite1OrDataExecution8,at,osStatusCode]:") ; break ; }
                                            case EXCEPTION_ACCESS_VIOLATION : { tEvent += T("    [bWrite1OrDataExecution8,at]:"             ) ; break ; }
                                        {
                                        else switch( info3.u.Exception.ExceptionRecord.ExceptionCode )
                                        }
                                            default                                  : { tEvent += T("    notes:"                                                                                                          ) ; break ; }
                                            case ifcIDeVENTeXCEPTIONmONITORED_BLAMMO : { tEvent += T("    [idLine,idiFile,idLineCt,idiFileCt,idBlammo,((tinFullS&)tinBaseP).idTinNamed,tinName,((tinFullS&)tinBaseP).monitor.idThread,((tinFullS&)tinBaseP).osTid,osTidIF()]:") ; break ; }
                                            case ifcIDeVENTeXCEPTIONmONITORED_GRUNT  : { tEvent += T("    [idLine,idiFile,idSubType,idType]:"                                                                              ) ; break ; }
                                        {
                                        if( ifcUnexpectedExceptionCode ) switch( ifcUnexpectedExceptionCode )
                                    {
                                    if( !ii )
                                {
                                for( countT ii = 0 ; ii < info3.u.Exception.ExceptionRecord.NumberParameters ; ii ++ )
                                tEvent += tb4+T("[flags,at,cNotes]:    ")+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionFlags,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionAddress,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2((countT)info3.u.Exception.ExceptionRecord.NumberParameters,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ;

                                }
                                    }
                                        break ;             

                                        ;
                                            : T("(unexpected exception code) [code]:    ")+TF2((countT)info3.u.Exception.ExceptionRecord.ExceptionCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)
                                            ? T(postException)
                                        tEvent += postException
                                        const osTextT* const postException = processGlobal4S::_processGlobal4I_IF().mapExceptionType( ifcUnexpectedExceptionCode ) ;

                                        ifcUnexpectedExceptionCode = info3.u.Exception.ExceptionRecord.ExceptionCode & ~( 0xf0000000 ) | 0xd0000000 ;       //A:ASSUME: 02 BITS
                                    {
                                    default                                   :
                                    case STATUS_SXS_INVALID_DEACTIVATION     /* 0xC0150010L */ : { tEvent += T("STATUS_SXS_INVALID_DEACTIVATION     ") ; break ; }
                                    case STATUS_SXS_EARLY_DEACTIVATION       /* 0xC015000FL */ : { tEvent += T("STATUS_SXS_EARLY_DEACTIVATION       ") ; break ; }
                                    case STATUS_ASSERTION_FAILURE            /* 0xC0000420L */ : { tEvent += T("STATUS_ASSERTION_FAILURE            ") ; break ; }
                                    case STATUS_INVALID_CRUNTIME_PARAMETER   /* 0xC0000417L */ : { tEvent += T("STATUS_INVALID_CRUNTIME_PARAMETER   ") ; break ; }
                                    case STATUS_STACK_BUFFER_OVERRUN         /* 0xC0000409L */ : { tEvent += T("STATUS_STACK_BUFFER_OVERRUN         ") ; break ; }
                                    case STATUS_REG_NAT_CONSUMPTION          /* 0xC00002C9L */ : { tEvent += T("STATUS_REG_NAT_CONSUMPTION          ") ; break ; }
                                    case STATUS_FLOAT_MULTIPLE_TRAPS         /* 0xC00002B5L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_TRAPS         ") ; break ; }
                                    case STATUS_FLOAT_MULTIPLE_FAULTS        /* 0xC00002B4L */ : { tEvent += T("STATUS_FLOAT_MULTIPLE_FAULTS        ") ; break ; }
                                    case STATUS_DLL_INIT_FAILED              /* 0xC0000142L */ : { tEvent += T("STATUS_DLL_INIT_FAILED              ") ; break ; }
                                    case STATUS_CONTROL_C_EXIT               /* 0xC000013AL */ : { tEvent += T("STATUS_CONTROL_C_EXIT               ") ; break ; }
                                    case STATUS_ENTRYPOINT_NOT_FOUND         /* 0xC0000139L */ : { tEvent += T("STATUS_ENTRYPOINT_NOT_FOUND         ") ; break ; }
                                    case STATUS_ORDINAL_NOT_FOUND            /* 0xC0000138L */ : { tEvent += T("STATUS_ORDINAL_NOT_FOUND            ") ; break ; }
                                    case STATUS_DLL_NOT_FOUND                /* 0xC0000135L */ : { tEvent += T("STATUS_DLL_NOT_FOUND                ") ; break ; }
                                    case EXCEPTION_STACK_OVERFLOW            /* 0xC00000FDL */ : { tEvent += T("EXCEPTION_STACK_OVERFLOW            ") ; break ; }
                                    case EXCEPTION_PRIV_INSTRUCTION          /* 0xC0000096L */ : { tEvent += T("EXCEPTION_PRIV_INSTRUCTION          ") ; break ; }
                                    case EXCEPTION_INT_OVERFLOW              /* 0xC0000095L */ : { tEvent += T("EXCEPTION_INT_OVERFLOW              ") ; break ; }
                                    case EXCEPTION_INT_DIVIDE_BY_ZERO        /* 0xC0000094L */ : { tEvent += T("EXCEPTION_INT_DIVIDE_BY_ZERO        ") ; break ; }
                                    case EXCEPTION_FLT_UNDERFLOW             /* 0xC0000093L */ : { tEvent += T("EXCEPTION_FLT_UNDERFLOW             ") ; break ; }
                                    case EXCEPTION_FLT_STACK_CHECK           /* 0xC0000092L */ : { tEvent += T("EXCEPTION_FLT_STACK_CHECK           ") ; break ; }
                                    case EXCEPTION_FLT_OVERFLOW              /* 0xC0000091L */ : { tEvent += T("EXCEPTION_FLT_OVERFLOW              ") ; break ; }
                                    case EXCEPTION_FLT_INVALID_OPERATION     /* 0xC0000090L */ : { tEvent += T("EXCEPTION_FLT_INVALID_OPERATION     ") ; break ; }
                                    case EXCEPTION_FLT_INEXACT_RESULT        /* 0xC000008FL */ : { tEvent += T("EXCEPTION_FLT_INEXACT_RESULT        ") ; break ; }
                                    case EXCEPTION_FLT_DIVIDE_BY_ZERO        /* 0xC000008EL */ : { tEvent += T("EXCEPTION_FLT_DIVIDE_BY_ZERO        ") ; break ; }
                                    case EXCEPTION_FLT_DENORMAL_OPERAND      /* 0xC000008DL */ : { tEvent += T("EXCEPTION_FLT_DENORMAL_OPERAND      ") ; break ; }
                                    case EXCEPTION_ARRAY_BOUNDS_EXCEEDED     /* 0xC000008CL */ : { tEvent += T("EXCEPTION_ARRAY_BOUNDS_EXCEEDED     ") ; break ; }
                                    case EXCEPTION_INVALID_DISPOSITION       /* 0xC0000026L */ : { tEvent += T("EXCEPTION_INVALID_DISPOSITION       ") ; break ; }
                                    case EXCEPTION_NONCONTINUABLE_EXCEPTION  /* 0xC0000025L */ : { tEvent += T("EXCEPTION_NONCONTINUABLE_EXCEPTION  ") ; break ; }
                                    case EXCEPTION_ILLEGAL_INSTRUCTION       /* 0xC000001DL */ : { tEvent += T("EXCEPTION_ILLEGAL_INSTRUCTION       ") ; break ; }
                                    case STATUS_NO_MEMORY                    /* 0xC0000017L */ : { tEvent += T("STATUS_NO_MEMORY                    ") ; break ; }
                                    case STATUS_INVALID_PARAMETER            /* 0xC000000DL */ : { tEvent += T("STATUS_INVALID_PARAMETER            ") ; break ; }
                                    case EXCEPTION_INVALID_HANDLE            /* 0xC0000008L */ : { tEvent += T("EXCEPTION_INVALID_HANDLE            ") ; break ; }
                                    case EXCEPTION_IN_PAGE_ERROR             /* 0xC0000006L */ : { tEvent += T("EXCEPTION_IN_PAGE_ERROR             ") ; break ; }
                                    case EXCEPTION_ACCESS_VIOLATION          /* 0xC0000005L */ : { tEvent += T("EXCEPTION_ACCESS_VIOLATION          ") ; break ; }
                                    case DBG_EXCEPTION_NOT_HANDLED           /* 0x80010001L */ : { tEvent += T("DBG_EXCEPTION_NOT_HANDLED           ") ; break ; }
                                    case STATUS_UNWIND_CONSOLIDATE           /* 0x80000029L */ : { tEvent += T("STATUS_UNWIND_CONSOLIDATE           ") ; break ; }
                                    case STATUS_LONGJMP                      /* 0x80000026L */ : { tEvent += T("STATUS_LONGJMP                      ") ; break ; }
                                    case EXCEPTION_SINGLE_STEP               /* 0x80000004L */ : { tEvent += T("EXCEPTION_SINGLE_STEP               ") ; break ; }
                                    case EXCEPTION_BREAKPOINT                /* 0x80000003L */ : { tEvent += T("EXCEPTION_BREAKPOINT                ") ; break ; }
                                    case EXCEPTION_DATATYPE_MISALIGNMENT     /* 0x80000002L */ : { tEvent += T("EXCEPTION_DATATYPE_MISALIGNMENT     ") ; break ; }
                                    case EXCEPTION_GUARD_PAGE                /* 0x80000001L */ : { tEvent += T("EXCEPTION_GUARD_PAGE                ") ; break ; }
                                    case DBG_COMMAND_EXCEPTION               /* 0x40010009L */ : { tEvent += T("DBG_COMMAND_EXCEPTION               ") ; break ; }
                                    case DBG_CONTROL_BREAK                   /* 0x40010008L */ : { tEvent += T("DBG_CONTROL_BREAK                   ") ; break ; }
                                    case DBG_RIPEXCEPTION                    /* 0x40010007L */ : { tEvent += T("DBG_RIPEXCEPTION                    ") ; break ; }
                                    case DBG_PRINTEXCEPTION_C                /* 0x40010006L */ : { tEvent += T("DBG_PRINTEXCEPTION_C                ") ; break ; }
                                    case DBG_CONTROL_C                       /* 0x40010005L */ : { tEvent += T("DBG_CONTROL_C                       ") ; break ; }
                                    case DBG_TERMINATE_PROCESS               /* 0x40010004L */ : { tEvent += T("DBG_TERMINATE_PROCESS               ") ; break ; }
                                    case DBG_TERMINATE_THREAD                /* 0x40010003L */ : { tEvent += T("DBG_TERMINATE_THREAD                ") ; break ; }
                                    case STATUS_SEGMENT_NOTIFICATION         /* 0x40000005L */ : { tEvent += T("STATUS_SEGMENT_NOTIFICATION         ") ; break ; }
                                    case DBG_CONTINUE                        /* 0x00010002L */ : { tEvent += T("DBG_CONTINUE                        ") ; break ; }
                                    case DBG_EXCEPTION_HANDLED               /* 0x00010001L */ : { tEvent += T("DBG_EXCEPTION_HANDLED               ") ; break ; }
                                    case STATUS_PENDING                      /* 0x00000103L */ : { tEvent += T("STATUS_PENDING                      ") ; break ; }
                                    case STATUS_TIMEOUT                      /* 0x00000102L */ : { tEvent += T("STATUS_TIMEOUT                      ") ; break ; }
                                    case STATUS_USER_APC                     /* 0x000000C0L */ : { tEvent += T("STATUS_USER_APC                     ") ; break ; }
                                    case STATUS_ABANDONED_WAIT_0             /* 0x00000080L */ : { tEvent += T("STATUS_ABANDONED_WAIT_0             ") ; break ; }
                                    case STATUS_WAIT_0                       /* 0x00000000L */ : { tEvent += T("STATUS_WAIT_0                       ") ; break ; }
                                {
                                switch( info3.u.Exception.ExceptionRecord.ExceptionCode )
                                ZE( countT , ifcUnexpectedExceptionCode ) ;                               //CALCULATED FROM OS EXCEPTION CODE
                            {
                            case EXCEPTION_DEBUG_EVENT :
                        {
                        switch( info3.dwDebugEventCode )

                        }
                            default                          : {                                                                tEvent = T("<unknown (coding error)>   [eventCode]:")+TF2((countT)info3.dwDebugEventCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ; break ; }
                            case RIP_EVENT                   : {                                                                tEvent = T("RIP_EVENT                  ")                                                                                          ; break ; }
                            case OUTPUT_DEBUG_STRING_EVENT   : {                                                                tEvent = T("OUTPUT_DEBUG_STRING_EVENT  ")                                                                                          ; break ; }
                            case UNLOAD_DLL_DEBUG_EVENT      : {                                                                tEvent = T("UNLOAD_DLL_DEBUG_EVENT     ")                                                                                          ; break ; }
                            case LOAD_DLL_DEBUG_EVENT        : {                                                                tEvent = T("LOAD_DLL_DEBUG_EVENT       ")                                                                                          ; break ; }
                            case EXIT_PROCESS_DEBUG_EVENT    : { cEnded ++ ; processExitCode = info3.u.ExitProcess.dwExitCode ; tEvent = T("EXIT_PROCESS_DEBUG_EVENT   [exitCode]: ")+TF2(processExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                ; break ; }
                            case EXIT_THREAD_DEBUG_EVENT     : {             threadExitCode  = info3.u.ExitThread.dwExitCode  ; tEvent = T("EXIT_THREAD_DEBUG_EVENT    [exitCode]: ")+TF2(threadExitCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)                 ; break ; }
                            case CREATE_PROCESS_DEBUG_EVENT  : { cBegun ++ ;                                                    tEvent = T("CREATE_PROCESS_DEBUG_EVENT ")                                                                                          ; break ; }
                            case CREATE_THREAD_DEBUG_EVENT   : {                                                                tEvent = T("CREATE_THREAD_DEBUG_EVENT  ")                                                                                          ; break ; }
                            case EXCEPTION_DEBUG_EVENT       : {                                                                tEvent = T("EXCEPTION_DEBUG_EVENT      ")                                                                                          ; break ; }
                        {
                        switch( info3.dwDebugEventCode )
                    {
                    ZE( countT , threadExitCode ) ;
                    ZE( countT , processExitCode ) ;
                    TN( tEvent , "" ) ;
                    //ZE( boolT , bBlammo ) ; //U:: TO FIND A BUG
                {

                //}
                //    if( rc ) ;
                //    countT rc = GetLastError() ;
                //{
                //if( !bOk2 )                                                   //THIS DOODLE IS A WORKAROUND TO ALLOW BUNDLE TO CALL A 64 BIT PROCESS
                //boolT bOk2 = DebugActiveProcessStop( info3.dwProcessId ) ;    //U::REMOVE THIS DOODLE AND ENHANCE IPDOS thirdC::dosExecProcessF TO TELL ME TO TEMPORARILY STOP DEBUGGING A PROCESS THAT IS ABOUT TO LAUNCH AN 04-BIT PROCESS SUCH AS pkzipc.exe
            {
            else
            }
                else                             { cIgnored2 ++ ; etThread.traceF( tinBaseP , T("called WaitForDebugEvent (failed) [rc]:    "           )+TF2(rc,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ; }
                if( rc == ERROR_INVALID_HANDLE ) { cIgnored1 ++ ; etThread.traceF( tinBaseP , T("called WaitForDebugEvent (failed) ERROR_INVALID_HANDLE")                                                  ) ; }  // THESE EVENTS SEEM TO BE GENERATED WHEN THE ADAM BEING DEBUGGED IS A WINDOWED PROCESS
                rc = GetLastError() ;
            {
            if( !bOk )

            bKidsSuspendedP = 1 ;
            bOk = WaitForDebugEvent( &info3 , INFINITE ) ;
            //etThread.traceF( tinBaseP , T("calling WaitForDebugEvent") ) ;
        {
        while( !cBegun || cEnded < cBegun )
        ZE( countT , cIgnored2 ) ;
        ZE( countT , cIgnored1 ) ;
        TN( tb4 , "    " ) ;
        ZE( countT , cEnded ) ;
        ZE( countT , cBegun ) ;
        memset( (char*)&info3 , 0 , sizeof info3 ) ;
        DEBUG_EVENT info3 ;
        ZE( countT , rc ) ;
        ZE( boolT , bOk ) ;
    {
    else
    else if( !cHired   ) { FIREmYSELF ; }
         if( bConsoleP ) { FIREmYSELF ; }  // SINCE I WAITED FOR CONSOLE TO END, AND THAT HAS OCCURED, THERE'S NOTHING TO MONITOR AND IT'S TIME TO DIE

    //#if defined( NEVERdEFINED )
    //DISABLED TEMPORARILY 20240322@1536 TO ALLOW KID TO HIRE 04 BIT PROCESS (pkczip.exe)

    }
        }
            }
                etThread.traceF( tinBaseP , T("could not hire") ) ;
                POOPR
            {
            else
            if( !POOP ) cHired ++ ;

            //ether.osThreadF( tinBaseP , countTC() , tmFireMyselfF ) ;
            
            //homeS::homeIF().flags |= flHOMEs_FIREtHIShOME ;
            //CONoUTrAW( "setting flHOMEs_FIREtHIShOME\r\n" ) ;
            //U::TO FIND A BUG

            //IT IS ILLEGAL TO NOT HIRE AN ADAM

            /*PROD*/ /*if( idMe == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0 || idMe == IDcOMPUTER_IPDOSmASTERcRAFTWORKoLD0sERVER )*/ etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_MEMBRANEgLASS , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_ROOTmAILoUT , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_HEALaRCHIVES , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_TOOLmIGRATEaRCHIVEfORMAT9tOfORMATa , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , 0x5100081f , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_SCRATCH0f , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_SCRATCH0c , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_SCRATCH06 , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_TIME , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_ROOTmAILoUT , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_GORILLAbANG , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_3BANG , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_ROOThTTPsERVER , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_CLOUD , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_CODEmEASUREMENTS , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_SCRATCH0f , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_SCRATCH0d , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;

            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_ACCESSeVENTS3bOOKbYhASHbYTE1 , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            
            //else                                          homeS::homeIF().flags |= flHOMEs_FIREtHIShOME ;
            //else                                          ether.osThreadF( tinBaseP , countTC() , tmFireMyselfF ) ;
            
            // /*if( 1 < etherC::ifc_idHomeIdisk_IF() )*/    etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_MEMBRANEgLASS , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            //THIS WAS THE PRODUCTION LINE UNTIL 2010.12.23, WHEN LOCAL LIST DEVELOPMENT WAS FINISHED AND DEVELOPMENT RESUMED ON THE RELAY SUBSYSTEM
        
            //ether.osThread AdamF( tinBaseP , ifcIDaDAM_MEMBRANEgLASS ) ;
            
            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , 0x4010ffe , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            
            //else                                             etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_3PANICdOOR , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            //if( 0xffffff == etherC::ifc_idHomeI_IF() ) etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_TIMEcARD         , T("!noTells !ignoreFireByOperator")   , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            
            //else                                             etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_NEWcONSOLE , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            //if( 0xffffff == etherC::ifc_idHomeI_IF() ) etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_TIMEcARD   , T("!noTells !ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
        
            //etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_HOMEfLAGS , T("!ignoreFireByOperator") , flagsUse , 0 , 0 , 1 , nicNameC() ) ;
            // 
            // b. OBJECTIVE: MIGRATE THIS ADAM SET TO THE PRODUCT WHILE ENSURING ROCK SOLID BEHAVIOR IN FIELD
            // a. INCREMENTALLY ADD THE REMAINDER OF THIS ADAM SET TO THE PRODUCT
            // 9. FIELD TEST AND TUNE SO USER CANNOT SEE ANY LOADING OR OTHER EFFECTS OF THE RELAY SUBSYSTEM
            // 8. "TURN ON" RELAY CAPABILITY IN THE PRODUCT
            // 7. LEASE AND CONFIGURE A DEDICATED SERVER TO SERVE AS THE ROOT RELAY
            // 6. ADD RELAY CAPABILITY TO THE PRODUCT
            // 5. TEST AND TUNE THE RELAY SYSTEM
            // 4. REWRITE THE MONITOR (005 CODE INTO 105), ENHANCING TO DETECT CPU SPINS
            // 3. ESTABLISH RELIABLE REVENUE STREAM
            // 2. ESTABLISH QUALITY REPUTATION IN THE MARKET
            // 1. RELEASE A KT VIEWER/EDITOR PRODUCT
            // 
            // PLAN
            // DO NOT DELETE THIS COMMENT; IT POINTS TO THE OLD ADAM CHAIN, WHICH IS ALMOST COMPLETELY DEBUGGED
            // 
            // IT WILL HAVE NO RELAY OR NETWORKING CAPABILITY
            // THIS INITIAL PRODUCT IS ENVISIONED AS LIKE ADOBE ACROBAT BUT FOR KNOWLEDGE TREES
            // COMMENTED OUT WITH INTENT TO REDESIGN THE PACKAGE TO GET STABLE AND QUICK INITIAL PRODUCT
            // CONSOLE ONLY SUPPORTS IO VIA CIO, WHICH IS UNNECESSARILY SLOW FOR LOCAL WORK
            // STATUS: WORKS AOK ON MY COMPUTER BUT PEGS CPU ON DANIEL'S
            // 
            // THIS IS THE OLD PRODUCT, WITH FULL RELAY CAPABILITY INCLUDING CIO SUPPORT FOR CONSOLE IO

            const flagsT flagsUse = flHIRE_DISPLAYaUTO | flHIRE_MONITORtHIS | flHIRE_MONITORkIDS ;              //THIS WILL PREVENT THE LAUNCH OF 64-BIT KIDS SUCH AS pkzipc.exe
        {
        else
        }
            }
                etThread.traceF( tinBaseP , T("could not hire") ) ;
                POOPR
            {
            else
            if( !POOP ) cHired ++ ;
            etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_CONSOLE , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO | flHIRE_WAIT , 0 , 0 , 1 , nicNameC() ) ;
        {
        else if( bConsoleP )
        }
            }
                etThread.traceF( tinBaseP , T("could not hire") ) ;
                POOPR
            {
            else
            if( !POOP ) cHired ++ ;
            etScratch.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , idAdamRequested   , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO               , nicNameC() ) ;
        {
        if( idAdamRequested )

        etherC& etScratch = *((tinFullS&)tinBaseP).pEtScratch ;

        SCOOPS
    {
    IFsCRATCH
    ZE( countT , cHired ) ;

    }
        }
            else if( !etThread.strCompareF( tinBaseP , psttc1 , tTest ) ) bArmed = 1 ;
            }
                break ;
                idAdamRequested = etThread.strDigitsToSCountF( tinBaseP , psttc1 , 0 , 1 ) ;
                bArmed = 0 ;
            {
            if( bArmed )
            //etThread.traceF( tinBaseP , T("process parameter: \"")+T(psttc1)+T("\"") ) ;
        {
        FORsTRINGSiN1( pstt1p )
        ZE( boolT , bArmed ) ;

        strokeS*& pstt1p = etThread.ether_pstt1_processParametersI_F( tinBaseP ) ;

        TN( tTest , "!idAdamMonitor" ) ;
    {
    ZE( countT , idAdamRequested ) ;

    }    
        //U:: while( !ether && ( !save || save + 0x10 <= cHamburgersP ) ) ;
        //U:: }
        //U::     CONoUTrAW5( "tmHireF [save,cHamburgersP]: " , save , " " , cHamburgersP , "\r\n" ) ;
        //U::     ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
        //U::     save = cHamburgersP ;
        //U:: {
        //U:: do
        //U:: ZE( countT , save ) ;
        //U:: //SLEEP TO GIVE TELEMETRY EATERS TIME TO READ ALL TELEMETRY ALREADY BOOKED
        
        ++ s ; ether.osSleepF( tinBaseP , TOCK * 0x4 ) ; //SLEEP TO GIVE INSTALLER TIME TO GO AWAY
    
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    
    //U::if( !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_NOsYSTEMtHREADS ) ) { __( ((tinFullS&)tinBaseP).monitor.idThread - ifcIDtHREADlOW_tmHireF ) ; }

    boolT&   bKidsSuspendedP            =  *(boolT*)pTaskP->ca ;
    boolT    bConsoleP                  =    (boolT)pTaskP->c9 ;
    stackC&  stOsPidZombieP             = *(stackC*)pTaskP->c8 ;
    stackC&  stOsPidP                   = *(stackC*)pTaskP->c7 ;
    textC&   tEventP                    =  *(textC*)pTaskP->c6 ;
    countT&  osTidEventP                = *(countT*)pTaskP->c5 ;
    countT&  osPidEventP                = *(countT*)pTaskP->c4 ;
    osTextT* postSnapShotRequestP       = (osTextT*)pTaskP->c3 ;
    flagsT&  fliPendingSnapShotRequestP = *(flagsT*)pTaskP->c2 ;
    countT&  cHamburgersP               = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 && pTaskP->c4 && pTaskP->c5 && pTaskP->c6 && pTaskP->c7 && pTaskP->c8 && pTaskP->ca )
TASK( tmHireF )

DONE( tmChatterF )
}
    bChatterP = 0 ;

    }
        if( POOP ) POOPRqUIET
        ((tinFullS&)tinBaseP).pEtScratch->boxZapF( tinBaseP , tFileChattering , 1 ) ;

        if( POOP ) POOPRqUIET
        ((tinFullS&)tinBaseP).pEtScratch->boxZapF( tinBaseP , tFileChatterOn , 1 ) ;
        SCOOPS
    {
    IFsCRATCH

    }
        ++ s ; etThread.osSleepF( tinBaseP , TOCK ) ;

        bChatteringLag = bChattering ;
        bChatterLag  = bChatterP ;

        }
            if( bChattering != bChatteringLag ) etThread.traceF( tinBaseP , T("unchattering ; this will not affect chattering that is in progress") ) ;
            }
                if( POOP ) POOPRqUIET
                ((tinFullS&)tinBaseP).pEtScratch->boxZapF( tinBaseP , tFileChattering , 1 ) ;
                SCOOPS
            {
            IFsCRATCH
            bChattering = 0 ;
        {
        else
        }
            if( bChattering != bChatteringLag ) etThread.traceF( tinBaseP , T("chattering") ) ;
            etThread.boxPutF( tinBaseP , tFileChattering , tSay , tSay.csF( tinBaseP ) + 1 ) ;
            TN( tSay , "IdeaFarm (tm) Glass2 is currently chattering." ) ;
            bChattering = 1 ;
        {
        if( bChatterP )
        ZE( boolT , bChattering ) ;

        }
            if( bChatterP != bChatterLag ) etThread.traceF( tinBaseP , T("unchattering on request") ) ;
            bChatterP = 0 ;
        {
        else
        }
            if( bChatterP != bChatterLag ) etThread.traceF( tinBaseP , T("chattering on request") ) ;
            bChatterP = 1 ;
        {
        if( etThread.diskFileExistsF( tinBaseP , tFileChatterOn ) )
    {
      while(                            bChatterIfP )
    //while( ( !ether || bChatterP ) && bChatterIfP )
    ZE( boolT , bChatteringLag ) ;
    ZE( boolT , bChatterLag ) ;

    }
        etThread.boxPutF( tinBaseP , tFileChatterOff , tSay , tSay.csF( tinBaseP ) + 1 ) ;
        TN( tSay , "To tell IdeaFarm (tm) Glass2 to chatter, move this file from the \"off\" folder to the \"on\" folder.\r\nTo suppress chattering, move this file back to the \"off\" folder.\r\nThe contents of this file have no effect." ) ;
    {
    )
        && !etThread.diskFileExistsF( tinBaseP , tFileChatterOff )
           !etThread.diskFileExistsF( tinBaseP , tFileChatterOn  )
    (
    if

    }
        }
            if( POOP ) POOPRqUIET
            ((tinFullS&)tinBaseP).pEtScratch->boxZapF( tinBaseP , tFileChattering , 1 ) ;

            if( POOP ) POOPRqUIET
            ((tinFullS&)tinBaseP).pEtScratch->boxZapF( tinBaseP , tFileChatterOn , 1 ) ;

            SCOOPS
        {
        IFsCRATCH
    {
    //PERSONALITY: I ALWAYS DELETE THE ON CHATTER FILE TO MINIMIZE POWER AND SSD UTILIZATION ; TO GET MINUTE REPORTS, THE OPERATOR MUST MOVE THE CHATTER FILE TO THE "ON" FOLDER EACH TIME I AM HIRED

    etThread.diskMakeDirIfNeededF( tinBaseP , tFileChatterOn  ) ;
    etThread.diskMakeDirIfNeededF( tinBaseP , tFileChatterOff ) ;
    TN( tFileChattering    , ""  ) ; tFileChattering   = tFolderControlsOn+T("/message.chattering.txt") ;
    TN( tFileChatterOn     , ""  ) ; tFileChatterOn    = tFolderControlsOn+T("/chatter.txt") ;
    TN( tFileChatterOff    , ""  ) ; tFileChatterOff   = tFolderControlsOff+T("/chatter.txt") ;

    TN( tFolderControlsOn  , ""  ) ; tFolderControlsOn  = T("///ideafarm/controls/")+tUser+T("/on/") ;
    TN( tFolderControlsOff , ""  ) ; tFolderControlsOff = T("///ideafarm/controls/")+tUser+T("/off/") ;

    TN( tUser , thirdC::postUserNameIF() ) ;
    TN( tSlash , "/" ) ;

    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    boolT&  bChatterP   = *(boolT*)pTaskP->c2 ;
    boolT&  bChatterIfP = *(boolT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmChatterF )

#endif

    DONE( tmGorillasRawF )
    }
        }
            ++ s ; ether.osSleepF( tinBaseP , TOCK << 1 ) ;
    
            }
                }
                    LOGrAW3( "[idError]: " , idError , "\r\n" ) ;
                    countT idError = ((tinFullS&)tinBaseP).brcRaw ;
                    BOSdOnOTtEST( WHATgbo , GetLastError() )
                {
                else
                }
                    BOSpOOP
                    BOS( WHATgbo , BOSoK , CloseHandle( oshThread ) )
                {
                if( oshThread )
                HANDLE oshThread = (HANDLE)((tinFullS&)tinBaseP).brcRaw ;
                BOSpOOP
                BOS( WHATgbo , BOSoK , CreateThread( &sa , TOCK , tmGorillaRawF , 0 , 0 , &osTid ) )
                ZE( DWORD , osTid ) ;
                BOSnOvALUE( WHATgbo , SetLastError( 0 ) )
                SECURITYaTTRIBUTE_saUNRESTRICTED( 0 ) ;
            {
            while( cDo -- )
            countT cDo = TUCK >> 4 ;
        {
        while( !ether && !POOP )
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    {
    if( pTaskP )
    TASK( tmGorillasRawF )
    }
        return 0 ;
    {
    DWORD WINAPI tmGorillaRawF( VOID* pvP )
    //U::REMOVE IN PRODUCTON ; THIS IS FOR RESOURCE LEAK TESTING

DONE( tmKillYourselfImmediatelyF )

BLAMMO ;
home.flags |= flHOMEs_KILLsELFiMMEDIATELY ;
etThread.traceF( tinBaseP , T("setting flHOMEs_KILLsELFiMMEDIATELY") ) ;

}
    ++ s ; ether.osSleepF( tinBaseP , TICK << 3 ) ;
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
{

etThread.emailFactoryReportF( tinBaseP , T("dying in 1/2 hour") ) ;

}
    ++ s ; ether.osSleepF( tinBaseP , TICK << 7 ) ;
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    if( !cDo ) etThread.emailFactoryReportF( tinBaseP , T("dying in 1/2 day") ) ;
{
while( cDo -- )
countT cDo = 8 ;

homeS& home = homeS::homeIF() ;

etThread.osThreadSwitchingDesireF( tinBaseP , ifcTHREADpRIORITY_RUDE ) ;

TASK( tmKillYourselfImmediatelyF )
    
DONE( tmTestImpotenceF )

}
    __1
    etThread.emailFactoryReportF( tinBaseP , T("testing impotence") ) ;
{
if( !ether )

++ s ; ether.osSleepF( tinBaseP , TOCK << 4 ) ;
sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

etThread.emailFactoryReportF( tinBaseP , T("i will test impotence after napping TOCK << 4") ) ;

TASK( tmTestImpotenceF )

#if defined( NEVERdEFINED )

DONE( tmFireMyselfF )
YELL( "cleaning up")
FIREmYSELF ;
//CONoUTrAW( "firing myself\r\n" ) ;
YELL( "firing myself")
}
    //++ s ; ether.osSleepF( tinBaseP , TOCK * 0xd /*, 0 , flSLEEP_TALK*/ ) ;
    ++ s ; ether.osSleepF( tinBaseP , TOCK * 0x8 /*, 0 , flSLEEP_TALK*/ ) ;
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
{
YELL( "napping before firing myself")
etThread.osThreadSwitchingDesireF( tinBaseP , ifcTHREADpRIORITY_SPINLOCK ) ;
TASK( tmFireMyselfF )

DONE( tmFireAllF )
//CONoUTrAW( "tmFireAllF/-" ) ; //U::

}
    }
        }
            }
                }
                    ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 0 ) ; //PRESUMED DEAD IF NO CHANGE DURING THIS INTERVAL AND !bKidsSuspendedP
                    //20240331@1737: >> 2 ----> >> 0

                    }
                        cHeartBeatsLag = cHeartBeatsNow ;

                        }
                            }
                                etRock.traceF( tinBaseP , T("some beating hearts remain [idg,cHearts,cHeartBeatsNow,cHeartBeatsLag]:    ")+TF2(idg,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHearts,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHeartBeatsNow,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHeartBeatsLag,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                            {
                            else
                            }
                                break ;

                                //U:: EDIT THIS CODE TO IGNORE UNCHANGED HEARTbEATS IF A DEBUGGING EVENT HAS OCCURRED (WHICH WOULD SUSPEND EXECUTION)

                                etRock.traceF( tinBaseP , T("some hearts remain but none of them are beating [idg,cHearts,cHeartBeatsNow,cHeartBeatsLag]:    ")+TF2(idg,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHearts,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHeartBeatsNow,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(cHeartBeatsLag,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                            {
                            else if( cHeartBeatsNow == cHeartBeatsLag )
                            }
                                break ;
                                etRock.traceF( tinBaseP , T("0 hearts remain [idg]:    ")+TF2(idg,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                            {
                            if( !cHearts )
                            countT cHearts = home.pFireAll[ idg - 1 ].cHearts ;
                        {
                        if( cHeartBeatsLag )
                    {
                    if( !bKidsSuspendedP )

                    countT cHeartBeatsNow = home.pFireAll[ idg - 1 ].cHeartBeats ;

                    }
                        break ;
                        etRock.traceF( tinBaseP , T("etThread is impotent") ) ;
                    {
                    if( etThread )

                    }
                        break ;
                        etRock.traceF( tinBaseP , T("POOP is set") ) ;
                    {
                    if( POOP )
                {
                for(;;)
                ZE( countT , cHeartBeatsLag ) ;
                sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

                etThread.etherFireGroupIF( tinBaseP , idg ) ;
                etThread.traceF( tinBaseP , T("firing group ")+TF1(idg) ) ;

                etRock.traceF( tinBaseP , T("firing group by setting home.pFireAll[ idg - 1 ].bFire [idg]:    ")+TF2(idg,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                //CONoUTrAW3( "firing group " , idg , "\r\n" ) ;
            {
            if( home.pFireAll[ idg - 1 ].cHearts && home.pFireAll[ idg - 1 ].cHeartBeats )
        {
        for( countT idg = 1 ; idg <= CfIREaLLrANKS - 3 ; idg ++ ) //I DO NOT FIRE THE HIGHEST RE GROUPS, WHICH ARE USED BY CLOAK AND GLASS1 AND ME
        homeS& home = homeS::homeIF() ;
    {
    //CODE SYNC: ec40104 ME
    
    TN( tb , " " ) ;
    TN( tc , "\r\n" ) ;

    }
        }
            etThread.boxPutF( tinBaseP , T("///desk/IdeaFarm " "(tm) Warning (disabled).txt") , postNote , sizeof postNote - 1 ) ;

            } ;

                "Thank you for using IPDOS (tm).\r\n"
                "\r\n"
                "a current version.  This version has been disabled.\r\n"
                "An old version of IPDOS (tm) is active on this computer.  Please download\r\n"
                "\r\n"
                "http://ideafarm.com\r\n"
                "IPDOS (tm)\r\n"
                postIPDOSlONG "\r\n"
            {
            osTextT postNote[] =
        {
        if( home.idVersionIpdosMe && home.idVersionIpdosBan && home.idVersionIpdosMe <= home.idVersionIpdosBan )

        //home.flags |= flHOMEs_SUPPRESStELLS ;

        //etRock.traceF( tinBaseP , T("tmFireAllF called  FIREmYSELF") ) ;
        FIREmYSELF ;
        //etRock.traceF( tinBaseP , T("tmFireAllF calling FIREmYSELF") ) ;

        //}
        //    etRock.traceF( tinBaseP , T("tmFireAllF/ perhaps connected to idPortGlass2") ) ;
        //    sockm.connectF( tinBaseP , home.idPortGlass2 , socketC::nicNameIF( tinBaseP , etThread , T("10.1.1.1") ) ) ;
        //    socketC sockm( tinBaseP , etThread , TAG( TAGiDnULL ) ) ;
        //
        //    etRock.traceF( tinBaseP , T("tmFireAllF/ awakened ; connecting to idPortGlass2: ")+TF2(home.idPortGlass2,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
        //{   //20160419@1731: ADDED THIS BLOCK AND REMOVED idpKiller VARIABLE WHICH WAS NOT USED; DONE TO FIX QUIT QUALITY ; CONJ: THIS BLOCK WAS ACCIDENTALLY DELETED
        //THIS IS NOT NEEDED BECAUSE sListen IS A QUITTER SOCKET SO tmWatchF WILL CONNECT TO IT

        //etRock.traceF( tinBaseP , T("tmFireAllF stopped napping") ) ;

        }
            ether.osSleepF( tinBaseP , TOCK >> 3 ) ;
            //etThread.traceF( tinBaseP , T("U::tock") ) ;
        {
        )
            //&& cDo --
            && ( !home.idVersionIpdosBan || !home.idVersionIpdosMe || home.idVersionIpdosBan < home.idVersionIpdosMe )
            && !( F(home.flags) & flHOMEs_FIREtHIShOME )
            && !( slab.flagsi & fliSLABs_QUIT )
            && !etThread
            !ether
        (
        while
        //countT cDo = TUCK >> 4 ;

        //etRock.traceF( tinBaseP , T("tmFireAllF is napping; wake me up by setting flHOMEs_FIREtHIShOME") ) ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        homeS& home = homeS::homeIF() ;
        slabS& slab = slabS::slabIF() ;
    {

    //U::if( !( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_NOsYSTEMtHREADS ) ) { __( ((tinFullS&)tinBaseP).monitor.idThread - ifcIDtHREADlOW_tmFireAllF ) ; }
    etherC& etRock = etherC::etRockIF( tinBaseP ) ;

    boolT& bKidsSuspendedP = *(boolT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmFireAllF )

DONE( tmEatTelemetrySysF )
//etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 0") ) ;
TELL( "cleaning up 0" )
}
    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 1 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    TELL( "cleaning up 1" )
    }
        while( ~hWalk && -- cToDo ) ;
        }
            stPeriodData.extractF( 0 , tinBaseP ) ;
            DELzOMBIE( ppd ) ;
            periodDataS* ppd = (periodDataS*)&stPeriodData.upF( tinBaseP , hWalk ) ;
        {
        do
        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        countT cToDo = stPeriodData ;
    {
    if( stPeriodData )
    TELL( "purging period data" )

    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 2 / sgnDone_tmReportF_ seen [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    sgnDone_tmReportF_.waitF( tinBaseP ) ;
    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 3 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    TELL( "waiting for tmReportF to end" )

    THREADmODE4rESTORE
    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 4 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    }
        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 5 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        if( idMemorySpaceP == ifcIDmEMORYsPACE_GLASS2 ) bksTelemetrySys.fileFlagsRefF() &= ~flFILEc_DELETE ; // I AM PROBABLY READING THE CURRENT bookC, WHICH IS STILL OPEN FOR WRITING SO CANNOT BE DELETED NOW
        //U::THE NEXT LINE NO LONGER WILL WORK BECAUSE THE DELETE FLAG HAS ALREADY BEEN SPECIFIED WHEN CT fileC ; IT ALSO WOULDN'T WORK BECAUSE IT DOES NOT CHANGE THE FLAGS THAT ARE USED TO CT bookC INSTANCE

        }
            //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 6 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            }
                //CONoUTrAW( "." ) ;
                ++ s ; etThread.osSleepF( tinBaseP , TOCK >> 2 ) ;
                TELL( "napping for a quarter tock" )
            
                if( bQuitEatingP ) break ;

                }
                    bBookHead = !bBookHead ;
            
                    }
                        else          pbi = 0 ;
                        if( bDelete ) PUSE( tinBaseP , *(byteT**)&pbi ) ;
                        TELL( "maybe deleting hamburger" )
            
                        }
                            cbi = sizeof( telemetryBookHeadS ) ;
    
                            }
                                }
                                    }
                                        break ;
                                        }    
                                            }
                                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                                //etRock.traceF( tinBaseP , T("after  ++++ [swsProcessGlobal3.cFlavors,swsProcessGlobal3] :    ")+TF2(memorySpace.swsProcessGlobal3.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsProcessGlobal3,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("swsProcessGlobal3 ++++ [cPlatesNew]:    ")+TF2(memorySpace.swsProcessGlobal3,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                memorySpace.swsProcessGlobal3.sinkF( tinBaseP , countTC() , (byteT*)&entry , flSTACKsINK_UNIQUE , subtract_processGlobal4EntryS_F ) ;
                                                //etRock.traceF( tinBaseP , T("before ++++ [swsProcessGlobal3.cFlavors,swsProcessGlobal3] :    ")+TF2(memorySpace.swsProcessGlobal3.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsProcessGlobal3,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , note.osPid , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                
                                                processGlobal4EntryS entry( tinBaseP , note.osPid , note.pbEarlyGrain , note.cGrains ) ;
                                            {
                                            tellInfoSysProcessGlobal1S& note = *(tellInfoSysProcessGlobal1S*)pbNote ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysProcessGlobal1S ) )
                                        TELL( "ifcIDtYPEtELLsYS_PROCESSgLOBAL3scT" )
                                    {
                                    case ifcIDtYPEtELLsYS_PROCESSgLOBAL1scT :
                                    }
                                        break ;
                                        }    
                                            }
                                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                                //etRock.traceF( tinBaseP , T("after  ---- [swsNapkin.cFlavors,swsNapkin] :    ")+TF2(memorySpace.swsNapkin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsNapkin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                }
                                                    //etRock.traceF( tinBaseP , T("error: entry not found in swsNapkin") ) ;
                                                    _IO_
                                                {
                                                else
                                                }
                                                    if( !memorySpace.swsNapkin ) memorySpace.swsNapkin.freeF( tinBaseP ) ;
                                                    memorySpace.swsNapkin.extractF( 0 , tinBaseP ) ;
                                                    //etRock.traceF( tinBaseP , T("swsNapkin ---- [cPlatesOld,ids]:    ")+TF2(memorySpace.swsNapkin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(ids,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                {
                                                if( ids )
                                                memorySpace.swsNapkin.sinkF( tinBaseP , ids , (byteT*)&entry , flSTACKsINK_QUERY , subtract_napkinEntryS_F ) ;
                                                //etRock.traceF( tinBaseP , T("before ---- [swsNapkin.cFlavors,swsNapkin] :    ")+TF2(memorySpace.swsNapkin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsNapkin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , note.osPid , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                                ZE( countT , ids ) ;
                        
                                                napkinEntryS entry( tinBaseP , note.osPid , note.postName , note.pbData , note.cbData , note.idLineCt , note.idiFileCt ) ;
                                            {
                                            tellInfoSysNapkinS& note = *(tellInfoSysNapkinS*)pbNote ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysNapkinS ) )
                                        TELL( "ifcIDtYPEtELLsYS_NAPKINfORMAT ifcIDtYPEtELLsYS_NAPKINaTTACH" )
                                    {
                                    case ifcIDtYPEtELLsYS_NAPKINdETACH :
                                    }
                                        break ;
                                        }    
                                            }
                                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                                //etRock.traceF( tinBaseP , T("after  ++++ [swsNapkin.cFlavors,swsNapkin] :    ")+TF2(memorySpace.swsNapkin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsNapkin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("swsNapkin ++++ [cPlatesNew]:    ")+TF2(memorySpace.swsNapkin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                memorySpace.swsNapkin.sinkF( tinBaseP , countTC() , (byteT*)&entry , flSTACKsINK_UNIQUE , subtract_napkinEntryS_F ) ;
                                                //etRock.traceF( tinBaseP , T("before ++++ [swsNapkin.cFlavors,swsNapkin] :    ")+TF2(memorySpace.swsNapkin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsNapkin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , note.osPid , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                
                                                napkinEntryS entry( tinBaseP , note.osPid , note.postName , note.pbData , note.cbData , note.idLineCt , note.idiFileCt ) ;
                                            {
                                            tellInfoSysNapkinS& note = *(tellInfoSysNapkinS*)pbNote ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysNapkinS ) )
                                        TELL( "ifcIDtYPEtELLsYS_NAPKINfORMAT ifcIDtYPEtELLsYS_NAPKINaTTACH" )
                                    {
                                    case ifcIDtYPEtELLsYS_NAPKINaTTACH :
                                    case ifcIDtYPEtELLsYS_NAPKINfORMAT :
                                    }
                                        break ;
                                        }    
                                            }
                                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                                //etRock.traceF( tinBaseP , T("after  ---- [swsSex.cFlavors,swsSex] :    ")+TF2(memorySpace.swsSex.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsSex,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                }
                                                    //etRock.traceF( tinBaseP , T("error: entry not found in swsSex") ) ;
                                                    _IO_
                                                {
                                                else
                                                }
                                                    if( !memorySpace.swsSex ) memorySpace.swsSex.freeF( tinBaseP ) ;
                                                    memorySpace.swsSex.extractF( 0 , tinBaseP ) ;
                                                    //etRock.traceF( tinBaseP , T("swsSex ---- [cPlatesOld,ids]:    ")+TF2(memorySpace.swsSex,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(ids,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                {
                                                if( ids )
                                                memorySpace.swsSex.sinkF( tinBaseP , ids , (byteT*)&entry , flSTACKsINK_QUERY , subtract_sexEntryS_F ) ;
                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                //etRock.traceF( tinBaseP , T("before ---- [swsSex.cFlavors,swsSex] :    ")+TF2(memorySpace.swsSex.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsSex,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , note.osPid , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                                ZE( countT , ids ) ;
                        
                                                sexEntryS entry( tinBaseP , note.osPid , note.postName , note.expCbDrop , note.expSlots , note.pSex , note.idLineCt , note.idiFileCt ) ;
                                            {
                                            tellInfoSysSexS& note = *(tellInfoSysSexS*)pbNote ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysSexS ) )
                                        TELL( "SEXdT" )
                                    {
                                    case ifcIDtYPEtELLsYS_SEXdT :
                                    }
                                        break ;
            
                                        }
                                            }
                                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                                //etRock.traceF( tinBaseP , T("swsSex ++++ [cPlatesNew]:    ")+TF2(memorySpace.swsSex,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                //etRock.traceF( tinBaseP , T("after  ++++ [swsSex.cFlavors,swsSex] :    ")+TF2(memorySpace.swsSex.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsSex,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                memorySpace.swsSex.sinkF( tinBaseP , countTC() , (byteT*)&entry , flSTACKsINK_UNIQUE , subtract_sexEntryS_F ) ;
                                                //etRock.traceF( tinBaseP , T("before ++++ [swsSex.cFlavors,swsSex] :    ")+TF2(memorySpace.swsSex.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsSex,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , note.osPid , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                
                                                sexEntryS entry( tinBaseP , note.osPid , note.postName , note.expCbDrop , note.expSlots , note.pSex , note.idLineCt , note.idiFileCt ) ;
                                            {
            
                                            tellInfoSysSexS& note = *(tellInfoSysSexS*)pbNote ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysSexS ) )
                                        TELL( "SEXcT" )
                                    {
                                    case ifcIDtYPEtELLsYS_SEXcT :
                                    }
                                        break ;
                                        }    
                                            }
                                                //LOGrAW5( "TINdTP [cFlavors,cPlatesAll]:" , memorySpace.swsTin.cFlavorsF( tinBaseP ) , " " , memorySpace.swsTin.cPlatesAllF( tinBaseP ) , "\r\n" ) ;

                                                //}
                                                //    CONoUTrAW( ostoSay ) ;
                                                //
                                                //    OStEXTAK( ostoSay , "\"\r\n" ) ;
                                                //    OStEXTA(  ostoSay , entry.postThreadName ) ;
                                                //    OStEXTAK( ostoSay , " , \"" ) ;
                                                //    OStEXTC(  ostoSay , entry.osTid , 0 ) ;
                                                //    OStEXTAK( ostoSay , " , " ) ;
                                                //    OStEXTC(  ostoSay , entry.idTin , 0 ) ;
                                                //    OStEXTAK( ostoSay , " , " ) ;
                                                //    OStEXTC(  ostoSay , entry.idThread , 0 ) ;
                                                //    OStEXTAK( ostoSay , "- [idThread,idTin,osTid,postThreadName]: " ) ;
                                                //    OStEXT(  ostoSay , TUCK ) ;
                                                //{
                                                //if( !etThread.strCompareF( tinBaseP , T(entry.postThreadName) , T("tm1F") ) )
        
                                                memorySpace.grab.ungrabF( tinBaseP ) ;

                                                //etRock.traceF( tinBaseP , T("after  ---- [swsTinWhere.cFlavors,swsTinWhere] :    ")+TF2(memorySpace.swsTinWhere.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTinWhere,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("after  ---- [swsTin.cFlavors     ,swsTin     ] :    ")+TF2(memorySpace.swsTin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("after ---- swsTin [cPlates,pczLeverAdam]:    ")+TF2(memorySpace.swsTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(memorySpace.pczLeverAdam) ) ;

                                                }
                                                    //etRock.traceF( tinBaseP , T("error: entrty not found in swsTinWhere") ) ;
                                                    _IO_
                                                {
                                                else
                                                }
                                                    if( !memorySpace.swsTinWhere ) memorySpace.swsTinWhere.freeF( tinBaseP ) ;
                                                    memorySpace.swsTinWhere.extractF( 0 , tinBaseP ) ;
                                                {
                                                if( ids )
                                                memorySpace.swsTinWhere.sinkF( tinBaseP , ids , (byteT*)&entry , flSTACKsINK_QUERY , subtract_tinEntryS_F ) ;
                                                ids = 0 ; // memorySpace.swsTin memorySpace.swsTinWhere ARE REDUNDANT SO THAT tmWhereF tmWhereRptF DO NOT TOUCH THE stackC OBJECT THAT tmRptMainF USES

                                                //}
                                                //    while( !ether && ~hDown ) ;
                                                //    }
                                                //        if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) ) etRock.traceF( tinBaseP , T("w  [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(wo.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                //        tinEntryS& wo = *(tinEntryS*)&memorySpace.swsTin.downF( tinBaseP , hDown ) ;
                                                //    {
                                                //    do
                                                //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                //{
                                                //if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) )

                                                }
                                                    //etRock.traceF( tinBaseP , T("error: tinFullS destruction told but entry not found in swsTin [idThread,postThreadName]: ")+TF2(told.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                    _IO_
                                                {
                                                else
                                                }
                                                    if( !memorySpace.swsTin ) memorySpace.swsTin.freeF( tinBaseP ) ;
                                                    memorySpace.swsTin.extractF( 0 , tinBaseP ) ;
                                                    //if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) ) etRock.traceF( tinBaseP , T("-- [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(entry.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                {
                                                if( ids )
                                                memorySpace.swsTin.sinkF( tinBaseP , ids , (byteT*)&entry , flSTACKsINK_QUERY , subtract_tinEntryS_F ) ;

                                                //}
                                                //    while( !ether && ~hDown ) ;
                                                //    }
                                                //        if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) ) etRock.traceF( tinBaseP , T("w  [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(wo.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                //        tinEntryS& wo = *(tinEntryS*)&memorySpace.swsTin.downF( tinBaseP , hDown ) ;
                                                //    {
                                                //    do
                                                //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                //{
                                                //if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) )

                                                //etRock.traceF( tinBaseP , T("before ---- [swsTinWhere.cFlavors,swsTinWhere] :    ")+TF2(memorySpace.swsTinWhere.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTinWhere,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("before ---- [swsTin.cFlavors     ,swsTin     ] :    ")+TF2(memorySpace.swsTin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;

                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , told.osPid , told.idThread , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                                ZE( countT , ids ) ;
                        
                                                //}
                                                //    etRock.traceF( tinBaseP , T("thread    ")+TF2(told.idThread,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+T(note.postThreadName)+T("    ----") ) ;
                                                //    _IO_
                                                //{
                
                                                //if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) ) etRock.traceF( tinBaseP , T("-  [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(entry.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                tinEntryS entry( tinBaseP , note.idSerial , told.osTid , told.osPid , told.idType == ifcIDtYPEtELLsYS_TINdTI , note.ip , note.idTin , told.idThread , note.postThreadName , note.idTinNamed , note.idLineCt , note.idiFileCt ) ;
                                            {

                                            }
                                                stOsPidP.ungrabF( tinBaseP ) ;
                                                }
                                                    stOsPidP.extractF( 0 , tinBaseP ) ;
                                                    etThread.traceF( tinBaseP , T("deregistering IPDOS (tm) process 1 [osPid]:    ")+TF2(told.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                {
                                                if( ids )
                                                stOsPidP.sinkF( tinBaseP , ids , told.osPid , flSTACKsINK_QUERY , 0 , 0 ) ;
                                                stOsPidP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                                ZE( countT , ids ) ;

                                                stOsPidZombieP.sinkF( tinBaseP , countTC() , told.osPid , flSTACKsINK_null , 0 , 0 ) ;
                                            {
                                            if( note.idTinNamed == ifcIDtINnAMED_tinNormalVeryEarlyLateMainI )

                                            tellInfoSysTinS& note = *(tellInfoSysTinS*)pbNote ;
                                            //etRock.traceF( tinBaseP , T("ifcIDtYPEtELLsYS_TINdTP/I") ) ;

                                        {
                                        if( told.cbNote == sizeof( tellInfoSysTinS ) )
                                        TELL( "TINdTI TINdTP" )
                                    {
                                    case ifcIDtYPEtELLsYS_TINdTP :
                                    case ifcIDtYPEtELLsYS_TINdTI :
                                    }
                                        break ;
            
                                        }
                                            }
                                                //etRock.traceF( tinBaseP , T("U::: tinFullS ct told [&told,idThread,postThreadName]: ")+TF2((countT)&told,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(told.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                //LOGrAW5( "TINcTP [cFlavors,cPlatesAll]:" , memorySpace.swsTin.cFlavorsF( tinBaseP ) , " " , memorySpace.swsTin.cPlatesAllF( tinBaseP ) , "\r\n" ) ;

                                                //}
                                                //    CONoUTrAW( ostoSay ) ;
                                                //
                                                //    OStEXTAK( ostoSay , "\"\r\n" ) ;
                                                //    OStEXTA(  ostoSay , entry.postThreadName ) ;
                                                //    OStEXTAK( ostoSay , " , \"" ) ;
                                                //    OStEXTC(  ostoSay , entry.osTid , 0 ) ;
                                                //    OStEXTAK( ostoSay , " , " ) ;
                                                //    OStEXTC(  ostoSay , entry.idTin , 0 ) ;
                                                //    OStEXTAK( ostoSay , " , " ) ;
                                                //    OStEXTC(  ostoSay , entry.idThread , 0 ) ;
                                                //    OStEXTAK( ostoSay , "+ [idThread,idTin,osTid,postThreadName]: " ) ;
                                                //    OStEXT(  ostoSay , TUCK ) ;
                                                //{
                                                //if( !etThread.strCompareF( tinBaseP , T(entry.postThreadName) , T("tm1F") ) )
        
                                                memorySpace.grab.ungrabF( tinBaseP ) ;

                                                //}
                                                //    while( !ether && ~hDown ) ;
                                                //    }
                                                //        if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) ) etRock.traceF( tinBaseP , T("w  [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(wo.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(wo.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ;
                                                //        tinEntryS& wo = *(tinEntryS*)&memorySpace.swsTin.downF( tinBaseP , hDown ) ;
                                                //    {
                                                //    do
                                                //    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                                //{
                                                //if( !etThread.strCompareF( tinBaseP , T("tmHireF") , T(note.postThreadName) ) )

                                                //etRock.traceF( tinBaseP , T("after  ++++ [swsTinWhere.cFlavors,swsTinWhere] :    ")+TF2(memorySpace.swsTinWhere.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTinWhere,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("after  ++++ [swsTin.cFlavors     ,swsTin     ] :    ")+TF2(memorySpace.swsTin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("after ++++ swsTin [cPlates,pczLeverAdam]:    ")+TF2(memorySpace.swsTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(memorySpace.pczLeverAdam) ) ;

                                                memorySpace.swsTinWhere.sinkF( tinBaseP , countTC() , (byteT*)&entry , flSTACKsINK_UNIQUE , subtract_tinEntryS_F ) ;

                                                //else     { etRock.traceF( tinBaseP , T("++ [idSerial,bIda,ip,idTin,idThread,postThreadName]: ")+TF2(entry.idSerial,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.bIda,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.ip,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+TF2(entry.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T(" ")+T(note.postThreadName) ) ; }
                                                if( !ids ) { BLAMMO ; }
                                                memorySpace.swsTin.sinkF( tinBaseP , ids , (byteT*)&entry , flSTACKsINK_UNIQUE , subtract_tinEntryS_F ) ;
                                                ZE( countT , ids ) ;

                                                //etRock.traceF( tinBaseP , T("before ++++ [swsTinWhere.cFlavors,swsTinWhere] :    ")+TF2(memorySpace.swsTinWhere.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTinWhere,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("before ++++ [swsTin.cFlavors     ,swsTin     ] :    ")+TF2(memorySpace.swsTin.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(memorySpace.swsTin,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                                //etRock.traceF( tinBaseP , T("before ++++ swsTin [cPlates,pczLeverAdam]:    ")+TF2(memorySpace.swsTin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(memorySpace.pczLeverAdam) ) ;

                                                memorySpace.pczLeverAdam = pczLeverAdamMe ;
                                                countT pczLeverAdamMe[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , told.osPid , told.idThread , 0 } ;
                                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                                                //}
                                                //    etRock.traceF( tinBaseP , T("thread    ")+TF2(told.idThread,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+T(note.postThreadName)+T("    ++++") ) ;
                                                //    _IO_
                                                //{
                
                                                tinEntryS entry( tinBaseP , note.idSerial , told.osTid , told.osPid , told.idType == ifcIDtYPEtELLsYS_TINcTI , note.ip , note.idTin , told.idThread , note.postThreadName , note.idTinNamed , note.idLineCt , note.idiFileCt ) ;
                                            {

                                            }
                                                stOsPidP.sinkF( tinBaseP , countTC() , told.osPid , flSTACKsINK_null , 0 , 0 ) ;
                                                etThread.traceF( tinBaseP , T("registering IPDOS (tm) process [osPid]:    ")+TF2(told.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                            {
                                            if( note.idTinNamed == ifcIDtINnAMED_tinNormalVeryEarlyLateMainI )

                                            tellInfoSysTinS& note = *(tellInfoSysTinS*)pbNote ;
                                            //etRock.traceF( tinBaseP , T("ifcIDtYPEtELLsYS_TINcTP/I") ) ;
                                        {
                                        if( told.cbNote == sizeof( tellInfoSysTinS ) )
                                        TELL( "TINcTP TINcTI" )
                                    {
                                    case ifcIDtYPEtELLsYS_TINcTI :
                                    case ifcIDtYPEtELLsYS_TINcTP :
                                    }
                                        break ;
                                        //CONoUTrAW( T("log: \"")+T(pbNote)+T("\"\r\n") ) ; //U::
            
                                        stPeriodData.ungrabF( tinBaseP ) ;
                                        //etRock.traceF( tinBaseP , T("after  ++++ [swsLog.cFlavors,swsLog] :    ")+TF2(pd.swsLog.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(pd.swsLog,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                        pd.swsLog << postEntry ; postEntry = 0 ;
                                        //etRock.traceF( tinBaseP , T("before ++++ [swsLog.cFlavors,swsLog] :    ")+TF2(pd.swsLog.cFlavorsF(tinBaseP),flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+tb4+TF2(pd.swsLog,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                                        pd.pczLeverThread = pczLever ;
                                        periodDataS& pd = *(periodDataS*)&stPeriodData[ 1 ] ;
                                        stPeriodData.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                                        countT pczLever[] = { told.idAdamRoot ? told.idAdamRoot : - 1 , told.idAdam ? told.idAdam : - 1 , told.idThread , 0 } ;
                                        osTextT* postEntry = postOldC( tinBaseP , etThread , pbNote ) ; ___( postEntry ) ;
                                        TELL( "LOG" )
                                    {
                                    case ifcIDtYPEtELLsYS_LOG :
                                    }
                                        break ;
                                        }
                                            LOGrAW( T("snapshot: \"")+T(pbNote)+T("\"\r\n") ) ; //U::
                                            thirdC::c_strcpyIF( tinBaseP , postSnapShotRequestP , pbNote ) ;
                                        {
                                        if( !setIfZeAM( fliPendingSnapShotRequestP , mask ) )
                                        while( cSpace -- ) mask = mask << 1 | 1 ;
                                        countT cSpace = ifcIDmEMORYsPACE_max - ifcIDmEMORYsPACE_min + 1 - ( ifcIDmEMORYsPACE_RESERVEDmAX - ifcIDmEMORYsPACE_RESERVEDmIN + 1 ) ;
                                        ZE( flagsT , mask ) ;

                                        TELL( "SNAPsHOT" )
                                    {
                                    case ifcIDtYPEtELLsYS_SNAPsHOT :
                                {
                                switch( told.idType )

                                //}
                                //    etRock.traceF( tinBaseP , T("telemetry [idType]:    ")+(postSay?T(postSay):TF2(told.idType,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)) ) ;
                                //    const osTextT* postSay = ps3.mapSay( told.idType ) ;
                                //    processGlobal4S& ps3 = processGlobal4S::_processGlobal4I_IF() ;
                                //{
                                //if( bChatter )
                                //
                                //;
                                //    || told.idType == ifcIDtYPEtELLsYS_TINdTI
                                //    || told.idType == ifcIDtYPEtELLsYS_TINdTP
                                //    || told.idType == ifcIDtYPEtELLsYS_TINcTI
                                //       told.idType == ifcIDtYPEtELLsYS_TINcTP
                                //boolT bChatter =
    
                                byteT* pbNote = (byteT*)( &told + 1 ) ;
                            {
                            else
                            }
                                }
                                    }
                                        break ;
                                        //etRock.traceF( tinBaseP , T("ifcIDtYPEtELLsYS_GLObEGINdT [osPid]: ")+TF4(told.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) ) ;
                                        _IO_
                                    {
                                    case ifcIDtYPEtELLsYS_GLObEGINdT :
                                    }
                                        break ;
                                          if( told.osPid != ((tinFullS&)tinBaseP).osPid ) etThread.osThreadF( TaRG2cBsTACK( tmVultureF , CBsTACKmIN << 3 ) , (countT)&bQuitEatingP , told.osPid ) ;
                                        //if( told.osPid != ((tinFullS&)tinBaseP).osPid ) etThread.osThreadF( TaRG2cBsTACK( tmVultureF , CBsTACKmIN << 2 ) , (countT)&bQuitEatingP , told.osPid ) ;
                                        //if( told.osPid != ((tinFullS&)tinBaseP).osPid ) etThread.osThreadF( TaRG2cBsTACK( tmVultureF , CBsTACKmIN << 1 ) , (countT)&bQuitEatingP , told.osPid ) ;
                                        //if( told.osPid != ((tinFullS&)tinBaseP).osPid ) etThread.osThreadF( TaRG1( tmVultureF ) , (countT)&bQuitEatingP , told.osPid ) ;
                                        //etRock.traceF( tinBaseP , T("ifcIDtYPEtELLsYS_GLObEGINcT [osPid]: ")+TF4(told.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) ) ;
                                        _IO_
                                    {
                                    case ifcIDtYPEtELLsYS_GLObEGINcT :
                                {
                                switch( told.idType )
                            {
                            if( !told.cbNote )
        
                            //}
                            //    CONoUTrAW( ostoSay ) ;
                            //
                            //    OStEXTAK( ostoSay , "\r\n" ) ;
                            //    OStEXTA(  ostoSay , processGlobal4S::_processGlobal4I_IF().mapSay( told.idType ) ) ;
                            //    OStEXTAK( ostoSay , " " ) ;
                            //    OStEXTC(  ostoSay , told.idType , 0 ) ;
                            //    OStEXTAK( ostoSay , " " ) ;
                            //    OStEXTC(  ostoSay , told.idTell , 0 ) ;
                            //    OStEXTAK( ostoSay , " bytes [idTell,idType]: " ) ;
                            //    OStEXTC(  ostoSay , cbi , 0 ) ;
                            //    OStEXTAK( ostoSay , " received " ) ;
                            //    OStEXTC(  ostoSay , idCycle , 0 ) ;
                            //    OStEXTAK( ostoSay , " cycle " ) ;
                            //    OStEXTC(  ostoSay , idMemorySpaceP , 0 ) ;
                            //    OStEXTAK( ostoSay , "memory space " ) ;
                            //    OStEXT(   ostoSay , TUCK * 2 ) ;
                            //{
                            //)
                            //    told.idType == ifcIDtYPEtELLsYS_TINdTP
                            //    told.idType == ifcIDtYPEtELLsYS_TINdTI      ||
                            //    told.idType == ifcIDtYPEtELLsYS_TINcTI      ||
                            //    told.idType == ifcIDtYPEtELLsYS_TINcTP      ||
                            //(
                            //if
        
                            stPeriodData.ungrabF( tinBaseP ) ;
                            ++ pd.swEventTally ;
                            pd.cLeverIdType = told.idType ;
                            periodDataS& pd = *(periodDataS*)&stPeriodData[ 1 ] ;
                            stPeriodData.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                            TELL( "tallying" )
    
                            __( getNegAM( fingerTail ) - FINGERnEG_BOOK0cwRITEtAIL ) ;
                            if( bQuitEatingP ) break ;
                            while( !fingerTail && !bQuitEatingP ) { ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ; }
                            countT& fingerTail = *(countT*)( pbi + sizeof( tellS ) + told.cbNote ) ;
        
                            __( getNegAM( told.finger2 ) - FINGERnEG_TELEMETRY2 ) ;
                            __( getNegAM( told.finger1 ) - FINGERnEG_TELEMETRY1 ) ;
                            TELL( "checking fingers" )
                            if( bQuitEatingP ) break ;
                            while( !told.finger2 && !bQuitEatingP ) { ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ; }
                            tellS& told = *(tellS*)pbi ;
                            TELL( "waiting for finger2 to be set in telemetry" )
        
                            ++ idCycle ;
    
                            //CONoUTrAW5( "tmEatTelemetrySysF [idMemorySpace,idHamburger]: " , idMemorySpaceP , " " , idHamburger , "\r\n" ) ;
                            countT idHamburger = incv02AM( cHamburgersP ) ; // OPERATOR ++ CAN BE USED FOR SPEED IF ACCURACY IS NOT NEEDED; AS OF THIS WRITING ACCURACY IS NOT NEEDED
                            TELL( "got a hamburger" )
                            //etRock.traceF( tinBaseP , T("read returned body") ) ;
                        {
                        else
                        }
                            cbi = head.cbBooked + sizeof( countT ) ;

                            }
                                __1

                                etThread.delF( tinBaseP , psttd ) ;
                                LOGrAW( T("dump of head:\r\n" DASH79 "\r\n")+T(psttd)+T("\r\n" DASH79 "\r\n") ) ;
                                etThread.strDumpIF( tinBaseP , psttd , (byteT*)&head , sizeof head ) ; ___( psttd ) ;
                                ZE( strokeS* , psttd ) ;

                                LOGrAW9( "tmEatTelemetrySysF bad header [bBad1,bBad2,bBad3,bBad4]: " , bBad1 , "    " , bBad2 , "    " , bBad3 , "    " , bBad4 , "\r\n" ) ;
                            {
                            if( bBad1 || bBad2 || bBad3 || bBad4 )
        
                            boolT bBad4 = !head.cbBooked ;
                            boolT bBad3 = head.idFormat - ifcIDfORMAT_BOOK0hEAD ;
                            boolT bBad2 = getNegAM( head.finger2 ) - FINGERnEG_BOOK0cwRITEhEAD2 ;
                            boolT bBad1 = getNegAM( head.finger1 ) - FINGERnEG_BOOK0cwRITEhEAD1 ;

                            if( bQuitEatingP ) break ;
                            while( !head.finger2 && !bQuitEatingP ) { ++ s ; thirdC::dosSleepWinkIF( tinBaseP ) ; }
                            telemetryBookHeadS& head = *(telemetryBookHeadS*)pbi ;
                            TELL( "parsing head" )
                            //etRock.traceF( tinBaseP , T("read returned head") ) ;
                        {
                        if( bBookHead )
        
                        __( cbi - cbiSave ) ; //SHOULD ALWAYS GET THE ENTIRE SHEBANG
                        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF: readF returned telemetry") ) ; //U:: TO FIND A BUG
                        TELL( "readF returned telemetry" )
                    {
                    else
                    }
                        break ;
                        hRead = hReadSave ;
                        cbi = cbiSave ;
                        TELL( "readF returned null" )
                        //etRock.traceF( tinBaseP , T("read returned null") ) ;
                    {
                    if( !pbi )
                    TELL( "waiting to read a new telemetry item / U:: 0" )
    
                    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 7") ) ;
                    //((tinFullS&)tinBaseP).pc Utility[ 0 ] -- ; //U::TO FIND A BUG
                    TELL( "waiting to read a new telemetry item / U:: 1" )
                    boolT bDelete = bksTelemetrySys.readF( tinBaseP , pbi , cbi , hRead , flBOOKScrEAD_STILLhUNGRYiSoK ) ;
                    //etRock.traceF( tinBaseP , T("eating telemetry at [idDebug,off,idBook]:    ")+TF2(idDebug,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(ch.c1,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("    ")+TF2(ch.c2,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
                    TELL( "waiting to read a new telemetry item / U:: 2" )
                    HANDLEaPPnOTEScOUNTcLASS ch = hRead ;
                    TELL( "waiting to read a new telemetry item / U:: 3" )
                    //((tinFullS&)tinBaseP).pc Utility[ 0 ] ++ ; //U::TO FIND A BUG
                    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 8") ) ;
                    TELL( "waiting to read a new telemetry item" )

                    }
                        countT foo = 2 ;
                    {
                    if( ++ idDebug == 0x90 )

                    handleC hReadSave = hRead ;
                    countT cbiSave = cbi ;
                {
                while( !bQuitEatingP && !POOP )
                TELL( "eating 1" )
            {
            while( !bQuitEatingP && !POOP )
            //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / 9 [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
            ZE( countT , idDebug ) ;
            TELL( "eating 0" )
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
            ZE( countT , idCycle ) ;
            boolT bBookHead = 1 ;
            countT cbi = sizeof( telemetryBookHeadS ) ;
            ZE( const byteT* , pbi ) ;
            handleC hRead( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_BOOKS ) ;
            TELL( "preparing to eat" )
        {
        if( !(const poopC&)bksTelemetrySys )

//((tinFullS&)tinBaseP).pc Utility[ 0 ] -- ; //U:: TO FIND A BUG
        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / ct'ed bksTelemetrySys [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        booksC bksTelemetrySys( tinBaseP , TAG( TAGiDnULL ) , "bksTelemetrySys" , ifcIDsTATEsPACE_MULTIPLEaDAMS , idMemorySpaceP == ifcIDmEMORYsPACE_GLASS2 ? flBOOKSc_null : flBOOKSc_USEgRABmEMORYsPACEoVERRIDE , 0 , 0 , 0 , 0 , 0 , idMemorySpaceP , &bQuitEatingP ) ;
        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / ct'ing bksTelemetrySys [idMemorySpaceP,cKidThreads]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
//((tinFullS&)tinBaseP).pc Utility[ 0 ] ++ ; //U:: TO FIND A BUG

        //U:: THE NEXT LINE USED TO SPECIFY THE DELETE FLAG, BUT AS OF 20131222@1558 THIS CAUSES FAILURES ; DELETE FLAG REMOVED WITHOUT ANALYSIS

        TELL( "constructing telemetry books" ) //THE NEXT LINE WILL BLOCK UNTIL A BOOK ENTRY IS WRITTEN , SO I WILL NOT BE ABLE TO QUIT UNTIL THAT HAPPENS
    {
    THREADmODE4oN( flTHREADmODE4_ALLOWeXPLICITmEMORYsPACE )

    }
        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / launched  tmReportF [idMemorySpace,cKidThreads]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

          etThread.osThreadF( tinBaseP , countTC() , tmReportF , &sgnDone_tmReportF_ , 0  , flTHREADlAUNCH_null , CBsTACKmIN << 3 , 0 , (countT)pcArg ) ;
        //etThread.osThreadF( tinBaseP , countTC() , tmReportF , &sgnDone_tmReportF_ , 0  , flTHREADlAUNCH_null , CBsTACKmIN << 2 , 0 , (countT)pcArg ) ;
        //etThread.osThreadF( tinBaseP , countTC() , tmReportF , &sgnDone_tmReportF_ , 0  , flTHREADlAUNCH_null , CBsTACKmIN << 1 , 0 , (countT)pcArg ) ;

        //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / launching tmReportF [idMemorySpace,cKidThreads]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

        pcArg[ 0xb ] = (countT)&bChatterP ;
        pcArg[ 0xa ] = (countT)&tEventP ;
        pcArg[ 0x9 ] = (countT)&osTidEventP ;
        pcArg[ 0x8 ] = (countT)&osPidEventP ;
        pcArg[ 0x7 ] = (countT)&bCompileReportP ;
        pcArg[ 0x6 ] = (countT)postSnapShotRequestP ;
        pcArg[ 0x5 ] = (countT)&fliPendingSnapShotRequestP ;
        pcArg[ 0x4 ] = idMinuteZeP ;
        pcArg[ 0x3 ] = (countT)&memorySpace ;
        pcArg[ 0x2 ] = (countT)&stPeriodData ;
        pcArg[ 0x1 ] = idMemorySpaceP ;
        pcArg[ 0x0 ] = (countT)&bQuitEatingP ;
        etThread.newF( tinBaseP , LF , pcArg , 0xb ) ; ___( pcArg ) ;
        ZE( countT* , pcArg ) ;
    {

    signC sgnDone_tmReportF_( tinBaseP , TAG( TAGiDnULL ) ) ;
    TELL( "launching tmReportF" )

    new( 0 , tinBaseP , (byteT*)&stPeriodData[ 1 ] , sizeof( periodDataS ) ) periodDataS( tinBaseP , etThread ) ;
    stPeriodData << (byteT*)0 ;
    stackC stPeriodData( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_BLOB|flSTACKc_ALLOWzE , sizeof( periodDataS ) ) ;
    TELL( "constructing period data structure" )

    swMemorySpaceP.ungrabF( tinBaseP ) ;
    memorySpaceS& memorySpace = *(memorySpaceS*)&(countT&)swMemorySpaceP ;
    cLeverIdMemoryP = idMemorySpaceP ;
    __( !swMemorySpaceP.idSlotOfLeverF( tinBaseP , idMemorySpaceP ) ) ;
    swMemorySpaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
    TELL( "getting memory space structure" )

    etThread.osThreadSwitchingDesireF( tinBaseP , ifcTHREADpRIORITY_SPINLOCK ) ;
    TELL( "setting rush" )

    //if( idMemorySpaceP == ifcIDmEMORYsPACE_GLASS2 ) etThread.osThreadF( TaRG1( tmYellF ) ) ;

    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / ++ [idMemorySpace,cKidThreads]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

    //CONoUTrAW3( "tmEatTelemetrySysF [idMemorySpaceP]: " , idMemorySpaceP , "\r\n" ) ;

    TN( tb4 , "    " ) ;

    ((tinFullS&)tinBaseP).c4Tell.c1 = idMemorySpaceP ;

    //etRock.traceF( tinBaseP , T("tmEatTelemetrySysF / i just called TRACEmYtHREAD [idMemorySpace,cKidThreads]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(((tinFullS&)tinBaseP).cKidThreads,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
    //TRACEmYtHREAD ;

    etThread.delF( tinBaseP , pcArgP ) ;
    stackC&      stOsPidZombieP             =  *(stackC*)pcArgP[ 0xe ] ;
    stackC&      stOsPidP                   =  *(stackC*)pcArgP[ 0xd ] ;
    boolT&       bChatterP                  =   *(boolT*)pcArgP[ 0xc ] ;
    textC&       tEventP                    =   *(textC*)pcArgP[ 0xb ] ;
    countT&      osTidEventP                =  *(countT*)pcArgP[ 0xa ] ;
    countT&      osPidEventP                =  *(countT*)pcArgP[ 0x9 ] ;
    batonC&      bCompileReportP            =  *(batonC*)pcArgP[ 0x8 ] ;
    osTextT*     postSnapShotRequestP       =  (osTextT*)pcArgP[ 0x7 ] ;
    flagsT&      fliPendingSnapShotRequestP =  *(flagsT*)pcArgP[ 0x6 ] ;
    countT&      cHamburgersP               =  *(countT*)pcArgP[ 0x5 ] ;
    countT       idMinuteZeP                =            pcArgP[ 0x4 ] ;
    switchC&     swMemorySpaceP             = *(switchC*)pcArgP[ 0x3 ] ;
    countT&      cLeverIdMemoryP            =  *(countT*)pcArgP[ 0x2 ] ;
    countT       idMemorySpaceP             =            pcArgP[ 0x1 ] ;
    boolT&       bQuitEatingP               =   *(boolT*)pcArgP[ 0x0 ] ;
    countT* pcArgP = (countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmEatTelemetrySysF )

#endif
DONE( tmCloakF )
}
    }
        //etThread.traceF( tinBaseP , T("this computer has been told to shut down (not really)") ) ;    
        //U::etThread.osFireF( tinBaseP , 1 ) ;
        //etThread.traceF( tinBaseP , T("shutting down this computer for security (not really)") ) ;    
        //etThread.traceF( tinBaseP , T("i have not yet been fired, so cloak's death is unexplained") ) ;
    {
    if( !ether )
    ether.osSleepF( tinBaseP , TOCK ) ;
    //etThread.traceF( tinBaseP , T("cloak has died ; napping for a TOCK") ) ;

    //U:: TEST idDeathType AND IF CLOAK WAS MURDERED THEN DON'T NAP BEFORE SHUTTING DOWN
    //U:: BUG: idDeathType IS 0 WHEN CLOAK IS KILLED WITHIN PROCESS EXPLORER
    //etThread.traceF( tinBaseP , T("error: cloak has died [idDeathType]:    ")+TF2(idDeathType,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;    
    countT& idDeathType = c4Result.c4 ;
    count4S c4Result = etThread.ifcHireF( tinBaseP , T("ifcIDaDAM_2GLASS2") , ifcIDaDAM_CLOAK , T("!ignoreFireByOperator") , flHIRE_DISPLAYaUTO | flHIRE_WAIT , nicNameC() ) ;
    //etThread.traceF( tinBaseP , T("hiring cloak") ) ;
{
if( pTaskP )
TASK( tmCloakF )
// ... YOU GET THE IDEA.  COME UP WITH WO OR MORE SCHEMES TO ENSURE THAT THE TERMINATION OF A CLOAK PROCESS IS DETECTED AND TRIGGERS SHUTDOWN OR SOME OTHER DEFENSE
// THIS CAN BE A DEDICATED COMPUTER ON THE LAN THAT IS NEVER LOGGED ON TO AND DOESN'T RUN ANY SOFTWARE SO HAS A VERY SMALL ATTACK SURFACE
// ALT: A DEDICATED HOME CAN CLOAK ALL OTHER HOMES ON THE LOCAL COMPUTER
// BUT IF THE IDEAFARM HOME IS TO BE CLOAKED, THE SERVICE PROGRAM (OR SOME OTHER PROGRAM LAUNCHED BY SERVICE) WILL HAVE TO DO IT.
// THE INITIAL PLAN WAS FOR MONITOR (THIS ADAM) TO DO THAT
// OBJECTIVE: DETECT WHEN CLOAK PROCESS TERMINATES ON LOCAL HOST OR ON ANY OTHER HOST ON THE LAN.  IF SO, SHUTDOWN THAT HOST TO PREVENT IT FROM BEING ONLINE IN AN UNCLOAKED STATE
//U:: ALT: MOVE THIS FUNCTIONALITY INTO A SIMPLE ADAM THAT JUST DOES IT AND COOPERATES WITH OTHER ADAM CELLS ON LOCAL (LAN) COMPUTERS, SUCH AS THE FACTORIES ON THE IDEAFARM SUBNET
#if defined( NEVERdEFINED )

DONE( tmYellF )
}
    //CONoUTrAW( "tmYell/-\r\n" ) ;

    }
        ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;

        //CONoUTrAW( "tmYell/yell/-\r\n" ) ;
        THREADmODE2rESTORE
        YELL( "yippee!" ) ;
        THREADmODE2oN( flTHREADmODE2_YELL )
        //CONoUTrAW( "tmYell/yell/+\r\n" ) ;
    {
    while( !ether )
    sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

    //CONoUTrAW( "tmYell/+\r\n" ) ;
{
if( pTaskP )
TASK( tmYellF )

DONE( tmVultureF )
}
    }
        CloseHandle( osh ) ;

        }
            etThread.traceF( tinBaseP , T("process [osPid] ")+TF4(osPidPrey,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(" terminated with code    ")+TF2((countT)rc2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF4((countT)rc2,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa) ) ;
            boolT bOk = GetExitCodeProcess( osh , &rc2 ) ;
            ZE( DWORD , rc2 ) ;
        {
        if( !POOP && bDead )

        }
            }
                case WAIT_OBJECT_0  : { bDead = 1 ; break ; }
                case WAIT_TIMEOUT   : {           ; break ; }
                case WAIT_ABANDONED : { __1       ; break ; }
                case WAIT_FAILED    :
            {
            switch( rc )
            countT rc = WaitForSingleObject( osh , 500 ) ; // 500 MILLISECOND TIMEOUT
        {
        while( !bQuitEatingP && !bDead && !POOP )
        ZE( boolT , bDead ) ;
    {
    if( osh )
    HANDLE osh = OpenProcess( PROCESS_TERMINATE | SYNCHRONIZE | PROCESS_QUERY_LIMITED_INFORMATION , 0 , osPidPrey ) ;

    //etThread.traceF( tinBaseP , T("tmVultureF [osPid]:")+TF4(osPidPrey,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(": waiting for death") ) ;

    const countT  osPidPrey    =                 pTaskP->c2 ;
    const countT& bQuitEatingP = *(const countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmVultureF )

DONE( tmReportF )
}
    //etRock.traceF( tinBaseP , T("tmReportF 0/ ") ) ; //U:: TO FIND A BUG
    }
        }
            if( bSerialize ) bCompileReportP.ungrabF( tinBaseP ) ;

            }
                }
                    }
                        //etRock.traceF( tinBaseP , T("tmReportF 1/ ") ) ; //U:: TO FIND A BUG
                        //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  0\r\n" ) ;
                        //CONoUTrAW5( "tmReportF idMemorySpace:" , idMemorySpaceP , " idMinute:" , idMinute , " written\r\n" ) ;

                        PUSE( tinBaseP , pbBookOut ) ;
                        }
                            //bkReport.writeF( tinBaseP , pbBookOut , cbBookOut , 0 , 0 , flBOOKScwRITE_HEADfINGER1 | flBOOKScwRITE_HEADiDfORMAT | flBOOKScwRITE_HEADcBdATA | flBOOKScwRITE_HEADfINGER2 | flBOOKScwRITE_TAILfINGER | flBOOKScwRITE_ALLOWoDDlENGTH ) ;

                            //LOGrAW3( "report written to disk []: " , idMemorySpaceP , "\r\n" ) ;
                            //etRock.traceF( tinBaseP , T("tmReportF 2/ ") ) ; //U:: TO FIND A BUG
                            _IO_
                        {
                        if( !bQuitEatingP )

                        }
                            }
                                }
                                    etThread.delF( tinBaseP , postr ) ;
                                    etThread.fileWriteF( tinBaseP , hFile1 , postr , costr ) ;
                                        
                                    etThread.delF( tinBaseP , psttr ) ;
                                    countT costr = etThread.strMakeF( tinBaseP , LF , postr , psttr ) ; ___( postr ) ;
                                    ZE( osTextT* , postr ) ;
                                
                                    sRpt >> psttr ; ___( psttr ) ;
                                    ZE( strokeS* , psttr ) ;
                                {
                                while( sRpt )

                                //etRock.traceF( tinBaseP , T("report pulled [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRpt,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                sReports >> sRpt ;
                                soulC sRpt( tinBaseP , TAG( TAGiDnULL ) ) ;
                                _IO_
                            {
                            while( sReports && !bQuitEatingP )
                            OPENfILEwRITE1( tFile )
                            _IO_
                        {
                        if( !bQuitEatingP )

                        }
                            //REMOVE: etThread.boxPutF( tinBaseP , tFile , (osTextT*)sReports , sReports.csF( tinBaseP ) ) ;

                            //LOGrAW( "\"\r\n" ) ;
                            //LOGrAW( tFile ) ;
                            //LOGrAW5( "tmReportF idMemorySpace:" , idMemorySpaceP , " idMinute:" , idMinute , " writing file \"" ) ;

                            //CONoUTrAW( "\"\r\n" ) ;
                            //CONoUTrAW( tFile ) ;
                            //CONoUTrAW5( "tmReportF idMemorySpace:" , idMemorySpaceP , " idMinute:" , idMinute , " writing file \"" ) ;
                            //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  1\r\n" ) ;
                            //etRock.traceF( tinBaseP , T("tmReportF 3/ ") ) ; //U:: TO FIND A BUG

                            }
                                if( !fliPendingSnapShotRequestP ) *postSnapShotRequestP = 0 ;   //A:ASSUME: FLAGS ARE SET BEFORE SETTING STRING

                                }
                                    if( oldf == setIfEqualsAM( fliPendingSnapShotRequestP , newf , oldf ) ) break ;
                                    flagsT newf = oldf & ~fliMyBit ;
                                    flagsT oldf = fliPendingSnapShotRequestP ;
                                {
                                for(;;)
                                _IO_
                            {
                            if( bSnapShot )
                            //etRock.traceF( tinBaseP , T("tmReportF 4/ ") ) ; //U:: TO FIND A BUG

                            tFile += T(".rpt.idMemorySpace.")+TF3(idMemorySpaceP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,3)+tDot+TF2(idMinute,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE)+T(".txt") ;
                            if( bEvent ) tFile += T(".event") ;
                            else                                                              tFile += T("minute") ;
                            if( bSnapShot || F(home.flagsUtility) & flHOMEsuTILITY_SNAPsHOT ) tFile += T(postSnapShotRequestP&&*postSnapShotRequestP?postSnapShotRequestP:"snapshot") ;  //U:: BUG: RACE: THIS CODE RACES WITH REQUESTOR SETTING STRING
                            tFile = T("///ideafarm/ephemeral/reports/")+tUser+tSlash+TF3(idRpt,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,8)+tDot+textC(ifcIDtEXTgEN_TIMEnOWfOREIGN,tinBaseP,TAG(TAGiDnULL))+tDot ;
                            //etRock.traceF( tinBaseP , T("tmReportF 5/ ") ) ; //U:: TO FIND A BUG

                            // BUG: RACE: WO WAY TO ELIMINATE THE RACE IS TO NAP HERE (IFF bSnapShot) UNTIL STRING IS NOT NULL ; THIS CHANGE WOULD REQUIRE ALL REQUESTERS TO SET THE STRING

                            TN( tUser , thirdC::postUserNameIF() ) ;
                            TN( tSlash , "/" ) ;
                            TN( tDot , "." ) ;
                            countT idRpt = 1 + incv02AM( idRptLath ) ;
                            static countT idRptLath ;

                            //LOGrAW3( "tmReportF 2 [flHOMEsuTILITY_SNAPsHOT]: " , F(home.flagsUtility) & flHOMEsuTILITY_SNAPsHOT , "\r\n" ) ;

                            //20121126@1750: I VAGUELY RECALL THAT I FOUND THIS BUG; HAVEN'T SEEN IT LATELY
                            //U::BUG: boxPutF OCCASIONALLY FAILS: diskMakeDirF/lath prior slash is at position less than 4: "///d/"
                            //etRock.traceF( tinBaseP , T("tmReportF 6/ ") ) ; //U:: TO FIND A BUG
                        {
                        if( !bQuitEatingP )
                        TN( tFile , "" ) ;

                        if( !bQuitEatingP ){ _IO_ sReports << sRptTin    ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptNapkin ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptSex    ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptAdd    ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptLog    ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptEvent  ; }
                        if( !bQuitEatingP ){ _IO_ sReports << sRptTitle  ; }

                        //if( idMemorySpaceP == 3 ) etRock.traceF( tinBaseP , T("report Tin    [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptTin   ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Napkin [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptNapkin,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Sex    [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptSex   ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Add    [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptAdd   ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Log    [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptLog   ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Event  [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptEvent ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                        //etRock.traceF( tinBaseP , T("report Title  [idMemorySpaceP,cFields]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2((countT)sRptTitle ,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                        soulC sReports(   tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileReports , TICK ) ; //20200920@1726: INCREASED FROM ( TOCK << 4 )
                        //etRock.traceF( tinBaseP , T("tmReportF 7/ ") ) ; //U:: TO FIND A BUG

                        OStEXTC(  ostoFileReports  , idMemorySpaceP , 0 ) ;
                        OStEXTAK( ostoFileReports  , ".soul.reports." ) ;
                        OStEXTC(  ostoFileReports  , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                        OStEXT(   ostoFileReports  , TUCK >> 3 ) ;

                        _IO_
                    {
                    if( !bQuitEatingP )

                    }
                        etThread.delF( tinBaseP , psttRpt ) ;
                        sRptAdd << (strokeS*)( T("\r\n\r\nProcess [osPid]:    ")+TF2(cLeverGrainCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF4(cLeverGrainCode,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FOREIGN,0,0xa)+T(psttRpt) ) ;

                        etThread.strFuseF( tinBaseP , psttRpt , tcr ) ;
                        }
                            etThread.strFuseF( tinBaseP , psttRpt , T(post2) ) ;
                            osTextT post2[ 2 ] = { pbzGrainCode[ offg ] , 0 } ;

                            }
                                etThread.strFuseF( tinBaseP , psttRpt , TF3(offRow,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,3) ) ;
                                }
                                    etThread.strFuseF( tinBaseP , psttRpt , tcr ) ;
                                    offRow ++ ;
                                {
                                if( offg )
                            {
                            if( !( offg % cColsGrainCode ) )
                        {
                        for( countT offg = 0 ; offg < cbGrainCode && !bQuitEatingP ; offg ++ )
                        ZE( countT , offRow ) ;

                        etThread.strMakeF( tinBaseP , LF , psttRpt , (const strokeS*)T("\r\n\r\n") , cbGrainCode << 1 ) ; ___( psttRpt ) ;
                        ZE( strokeS* , psttRpt ) ;

                        byteT* pbzGrainCode = (byteT*)&(countT&)sw_pbzGrainCode ;
                        cLeverGrainCode = sw_pbzGrainCode.leverF( tinBaseP , idf ) ;
                        _IO_
                    {
                    for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                    countT cFlavors = sw_pbzGrainCode.cFlavorsF( tinBaseP ) ;

                    TN( tcr  , "\r\n" ) ;
                    //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  2\r\n" ) ;
                    //etRock.traceF( tinBaseP , T("tmReportF 8/ ") ) ; //U:: TO FIND A BUG

                    stPeriodDataP.ungrabF( tinBaseP ) ;
                    }
                        }
                            sRptLog << (strokeS*)( T("\r\n") ) ;
                            while( ~hWalk ) ;
                            do sRptLog << (strokeS*)( T((osTextT*)pd.swsLog.downF(tinBaseP,hWalk))+T("\r\n") ) ;
                            handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            
                            sRptLog << (strokeS*)( T(pd.pczLeverThread)+T(":\r\n\r\n") ) ;
                            pd.pczLeverThread = (const countT*)pd.swsLog.leverF( tinBaseP , idf ) ;
                        {
                        for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                        cFlavors = pd.swsLog.cFlavorsF( tinBaseP ) ;

                        sRptEvent << (strokeS*)( TF3(total,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+T("total\r\n") ) ;
                        }
                            total += tally ;
                            sRptEvent << (strokeS*)( TF3(tally,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+T(processGlobal4S::_processGlobal4I_IF().mapSay(idType))+T("\r\n") ) ;
                            countT tally = pd.swEventTally ;
                            countT idType = pd.cLeverIdType = pd.swEventTally.leverF( tinBaseP , idf ) ;
                        {
                        for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                        ZE( countT , total ) ;
                        countT cFlavors = pd.swEventTally.cFlavorsF( tinBaseP ) ;

                        periodDataS& pd = *(periodDataS*)&stPeriodDataP[ 2 ] ;
                        _IO_
                    {
                    if( stPeriodDataP > 1 && !bQuitEatingP )

                    //U::CONJ: THIS IS OBSOLETED BY THE PRECEDING SNIP: stPeriodDataP.purgeF( tinBaseP , 0x10 ) ; //U::DESTROY THE periodDataS INSTANCES

                    }
                        while( ~hWalk && -- cToDo ) ;
                        }
                            stPeriodDataP.extractF( 0 , tinBaseP ) ;
                            DELzOMBIE( ppd ) ;
                            periodDataS* ppd = (periodDataS*)&stPeriodDataP.upF( tinBaseP , hWalk ) ;
                        {
                        do
                        handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                        countT cToDo = stPeriodDataP - CpERIODSrETAIN ;
                        _IO_
                    {
                    if( stPeriodDataP > CpERIODSrETAIN )

                    new( 0 , tinBaseP , (byteT*)&stPeriodDataP[ 1 ] , sizeof( periodDataS ) ) periodDataS( tinBaseP , *stPeriodDataP.third.third_pEtherContainsMe_F() ) ;
                    stPeriodDataP << (byteT*)0 ;
                    //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  3\r\n" ) ;

                    stPeriodDataP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                    //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  4\r\n" ) ;
                    //etRock.traceF( tinBaseP , T("tmReportF 9/ ") ) ; //U:: TO FIND A BUG
                    _IO_
                {
                if( !bQuitEatingP )

                swTinCopy.freeAllF( tinBaseP ) ;
                //etRock.traceF( tinBaseP , T("tmReportF a/ 0") ) ; //U:: TO FIND A BUG
                }
                    PUSE( tinBaseP , pbBookOut ) ;
                    }
                        //U::__( pbBookOut + cbBookOut - pbc ) ;

                        }
                            countT foo = 2 ;
                        {
                        if( pbBookOut + cbBookOut - pbc )

                        //etRock.traceF( tinBaseP , T("tmReportF a/ 1") ) ; //U:: TO FIND A BUG
                        }
                            }
                                sRptTin << (strokeS*)( T("\r\n") ) ;
                                }
                                    }
                                        sRptTin << (strokeS*)( T(ostoLine) ) ;

                                        OStEXTAK( ostoLine , "\r\n" ) ;
                                        }
                                            OStEXTA( ostoLine , postTitle ) ;
                                        {
                                        if( postTitle )
                                        const osTextT* postTitle = processGlobal8S::_processGlobal8I_IF().source.postFileTitleF( tinBaseP , processGlobal8S::_processGlobal8I_IF().source.idFileRankF( tinBaseP , idiFile ) ) ;
                                        OStEXTAK(   ostoLine , "    " ) ;
                                        OStEXTCmIN( ostoLine , idiFile , 7 ) ;
                                        OStEXTAK(   ostoLine , "." ) ;
                                        OStEXTCmIN( ostoLine , idLine , 4 ) ;
                                        OStEXTA(    ostoLine , ( bOut ? "\\ " : ( bIn ? "/ " : "| " ) ) ) ;
                                
                                        }
                                            ++ cIndent ;
                                        {
                                        if( bOut )

                                        }
                                            }
                                                OStEXTAK( ostoLine , " " ) ;
                                            {
                                            while( cToDo -- )
                                            countT cToDo = cIndent ;
                                        {
                                        else
                                        }
                                            OStEXTC( ostoLine , cIndent , ' ' ) ;
                                        {
                                        if( cIndent > TUCK >> 2 )

                                        if( bIn && cIndent ) { -- cIndent ; }
                                
                                        idLine &= ~fliSTEP_FLAGmASK ;
                                        }
                                            bIn  = !bOut ;
                                            bOut = idLine & fliSTEP_NESToUT ;
                                        {
                                        else
                                        }
                                            bIn = bOut = 0 ;
                                        {
                                        if( !( idLine & fliSTEP_NESTcHANGE ) )
                                        boolT bIn ;
                                        boolT bOut ;
                                
                                        countT idiFile = ((tinFullS&)tinBaseCopy).pLFstep[ offe + 1 ] ;
                                        countT idLine  = ((tinFullS&)tinBaseCopy).pLFstep[ offe     ] ;
                                        countT offe = ( ids & OFFsLOTtINsTEPmAX ) << 1 ;

                                        OStEXT( ostoLine , TUCK << 2 ) ;            //20230908@1445: 2 <- 1 DUE TO EXHAUSTION
                                    {
                                    for( countT ids = ((tinFullS&)tinBaseCopy).monitor.idStep ; cDo -- ; ids -- )
                                    countT cDo = OFFsLOTtINsTEPmAX + 1 ;                          // IF idStep IS SMALL AND NOT BECAUSE OF WRAP THEN SOME REPORT LINES WILL BE FROM [0,0] PAIRS ; TO KISS, I DO NOT TEST FOR THIS SO I WILL REPORT EVEN IF pLFstep HAS BEEN TRASHED
                                    countT cIndent = ((tinFullS&)tinBaseCopy).monitor.cInNest ;
                                
                                    sRptTin << (strokeS*)( T("Execution Steps:\r\n \r\n") ) ;
                                    _IO_
                                {
                                //CS:CODEsYNC: PSEUDOdUPLICATE: 35001155 510004fb.2

                                //etRock.traceF( tinBaseP , T("tmReportF a/ 2") ) ; //U:: TO FIND A BUG
                                sRptTin << (strokeS*)( T("\r\n") ) ;
                                }
                                    sRptTin << (strokeS*)( T(ostoRpt) ) ;
                                    OStEXTAK( ostoRpt , "\r\n" ) ;
                                    }
                                        OStEXTA( ostoRpt , postTitle ) ;
                                    {
                                    if( postTitle )
                                    const osTextT* postTitle = processGlobal8S::_processGlobal8I_IF().source.postFileTitleF( tinBaseP , processGlobal8S::_processGlobal8I_IF().source.idFileRankF( tinBaseP , idiFile ) ) ;
                                    OStEXTAK(   ostoRpt , "    " ) ;
                                    OStEXTCmIN( ostoRpt , idiFile , 7 ) ;
                                    OStEXTAK(   ostoRpt , "." ) ;
                                    OStEXTCmIN( ostoRpt , idLine , 4 ) ;
                                    OStEXTAK(   ostoRpt , "'th: " ) ;
                                    OStEXTC(    ostoRpt , ((tinFullS&)tinBaseCopy).pIdInNest[ offez ] , ' ' ) ;
                                    OStEXTAK(   ostoRpt , " | " ) ;
                                    OStEXTC(    ostoRpt , ((tinFullS&)tinBaseCopy).pEIPInNest[ offez ] , ' ' ) ;
                                    OStEXT(     ostoRpt , OFFsLOTtINnESTmAX * TUCK )
                                        
                                    countT idiFile = ((tinFullS&)tinBaseCopy).monitor.pLFnest[ offe + 1 ] ;
                                    countT idLine  = ((tinFullS&)tinBaseCopy).monitor.pLFnest[ offe     ] ;
                                    countT offe = ( idn & OFFsLOTtINnESTmAX ) << 1 ;
                                    countT offez = idn & OFFsLOTtINnESTmAX ;
                                    _IO_
                                {
                                for( countT idn = ((tinFullS&)tinBaseCopy).monitor.cInNest ; idn >= idnf && !bQuitEatingP ; idn -- )
                                if( (sCountT)idnf < 1 ) idnf = 1 ;
                                countT idnf = ((tinFullS&)tinBaseCopy).monitor.cInNest - OFFsLOTtINnESTmAX ;
                                if( bDash ) sRptTin << (strokeS*)( T(DASH256 "\r\n") ) ;
                                //etRock.traceF( tinBaseP , T("tmReportF a/ 3") ) ; //U:: TO FIND A BUG
                    
                                }
                                    PUSE( tinBaseP , pbCopy ) ;
                                    }
                                        }
                                            }
                                                }
                                                    BLAMMO ;
                                                    //2009.12.20: 105 tmReportF unexpected value [pbg->idTypeCt]: 0
                                                    LOGrAW3( "105 tmReportF unexpected value [pbg->idTypeCt]: " , pbg->idTypeCt , "\r\n" ) ;
                                                    _IO_
                                                {
                                                default :
                                                }
                                                    break ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 4") ) ; //U:: TO FIND A BUG
                                                    PUSE( tinBaseP , pbCopy ) ;
                                                    }
                                                        }
                                                            countT foo = 2 ; //U::
                    
                                                            grabotC& grabot = *(grabotC*)pbCopy ;
                                                        {
                                                        if( bOk )
                                                        }
                                                            thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , sizeof( grabotC ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                            _IO_
                                                        {
                                                        ZE( boolT , bOk ) ;
                                                        _IO_
                                                    {
                                                    if( pbCopy )
                                                    PUSE.newF( tinBaseP , LF , pbCopy , sizeof( grabotC ) ) ; ___( pbCopy ) ;
                                                    ZE( byteT* , pbCopy ) ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 5") ) ; //U:: TO FIND A BUG
                                                    _IO_
                                                {
                                                case ifcIDtYPEdERIVEDbASEgRABc_grabotC :
                                                }
                                                    break ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 6") ) ; //U:: TO FIND A BUG
                                                    PUSE( tinBaseP , pbCopy ) ;
                                                    }
                                                        }
                                                            countT foo = 2 ; //U::
                    
                                                            grabitC& grabit = *(grabitC*)pbCopy ;
                                                        {
                                                        if( bOk )
                                                        }
                                                            thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , sizeof( grabitC ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                            _IO_
                                                        {
                                                        ZE( boolT , bOk ) ;
                                                        _IO_
                                                    {
                                                    if( pbCopy )
                                                    PUSE.newF( tinBaseP , LF , pbCopy , sizeof( grabitC ) ) ; ___( pbCopy ) ;
                                                    ZE( byteT* , pbCopy ) ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 7") ) ; //U:: TO FIND A BUG
                                                    _IO_
                                                {
                                                case ifcIDtYPEdERIVEDbASEgRABc_grabitC :
                                                }
                                                    break ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 8") ) ; //U:: TO FIND A BUG
                                                    PUSE( tinBaseP , pbCopy ) ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 0") ) ; //U:: TO FIND A BUG
                                                    }
                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 1") ) ; //U:: TO FIND A BUG
                                                        }
                                                            //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 2") ) ; //U:: TO FIND A BUG
                                                            }
                                                                //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 3") ) ; //U:: TO FIND A BUG
                                                                }
                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 4") ) ; //U:: TO FIND A BUG
                                                                    sRptTin << (strokeS*)( T("this is grabbed by a thread that is gone [osTid]: ")+TF1(grab.osTidF())+T("\r\n") ) ;
                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 5") ) ; //U:: TO FIND A BUG
                                                                {
                                                                else
                                                                }
                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 6") ) ; //U:: TO FIND A BUG
                                                                    sRptTin << (strokeS*)( T("this is grabbed by osTid:")+TF1(grab.osTidF())+T(" idAdamRoot:")+TF1(idAdamRoot)+T(" idAdam:")+TF1(idAdam)+T(" idThread:")+TF1(((tinFullS&)tinBaseCopy).monitor.idThread)+T(" postThreadName:\"")+TF1(((tinFullS&)tinBaseCopy).postThreadName)+T("\"\r\n") ) ;
                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 7") ) ; //U:: TO FIND A BUG

                                                                    }
                                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 8") ) ; //U:: TO FIND A BUG
                                                                        PUSE( tinBaseP , pbCopy1 ) ;
                                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / 9") ) ; //U:: TO FIND A BUG
                                                                        }
                                                                            //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / a") ) ; //U:: TO FIND A BUG
                                                                            }
                                                                                //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / b") ) ; //U:: TO FIND A BUG
                                                                                PUSE( tinBaseP , pbCopy2 ) ;
                                                                                }
                                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / c") ) ; //U:: TO FIND A BUG
                                                                                    }
                                                                                        idAdamRoot = pg1.idAdamRoot ;
                                                                                        processGlobal1S& pg1 = *(processGlobal1S*)pbCopy2 ;
                                                                                    {
                                                                                    if( bOk )
                                                                                    }
                                                                                        thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy2 , sizeof( processGlobal1S ) , bOk , (voidT*)ag1.pProcessGlobal1 , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                                                        _IO_
                                                                                    {
                                                                                    ZE( boolT , bOk ) ;
                                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / d") ) ; //U:: TO FIND A BUG
                                                                                    //etThread.traceF( tinBaseP , T("using pool drop") ) ;
                                                                                    _IO_
                                                                                {
                                                                                if( pbCopy2 )
                                                                                //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / e") ) ; //U:: TO FIND A BUG

                                                                                __( bFail ) ;
                                                                                }
                                                                                    //}
                                                                                    //    bFail = 1 ;
                                                                                    //    etThread.traceF( tinBaseP , T("request for pool drop failed [cbaDebug]:    ")+TF2(cbaDebug,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                                                    //    POOPR
                                                                                    //{
                                                                                    //else
                                                                                    //if( !POOP ) etThread.traceF( tinBaseP , T("requested pool drop aok [cbaDebug]:    ")+TF2(cbaDebug,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                                                    PUSE.newF( tinBaseP , LF , pbCopy2 , cbaDebug ) ; ___( pbCopy2 ) ;
                                                                                    SCOOPS
                                                                                {
                                                                                IFsCRATCH
                                                                                ZE( boolT , bFail ) ;
                                                                                //etThread.traceF( tinBaseP , T("requesting pool drop [cbaDebug]:    ")+TF2(cbaDebug,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                                                countT cbaDebug = sizeof( processGlobal1S ) ;

                                                                                ZE( byteT* , pbCopy2 ) ;
                        
                                                                                idAdam = ag1.idAdam ;
                                                                                adamGlobal1S& ag1 = *(adamGlobal1S*)pbCopy1 ;
                                                                                //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / f") ) ; //U:: TO FIND A BUG
                                                                                _IO_
                                                                            {
                                                                            if( bOk )
                                                                            }
                                                                                thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy1 , sizeof( adamGlobal1S ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).pag1 , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                                                _IO_
                                                                            {
                                                                            ZE( boolT , bOk ) ;
                                                                            //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / g") ) ; //U:: TO FIND A BUG
                                                                            _IO_
                                                                        {
                                                                        if( pbCopy1 )
                                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / h") ) ; //U:: TO FIND A BUG
                                                                        PUSE.newF( tinBaseP , LF , pbCopy1 , sizeof( adamGlobal1S ) ) ; ___( pbCopy1 ) ;
                                                                        ZE( byteT* , pbCopy1 ) ;
                                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / i") ) ; //U:: TO FIND A BUG
                                                                        _IO_
                                                                    {
                                                                    ZE( countT , idAdam ) ;
                                                                    ZE( countT , idAdamRoot ) ;
                    
                                                                    tinBaseS&   tinBaseCopy     = *(tinBaseS*)( pbFrom + sizeof( copyHeadS ) ) ;
                                                                    copyHeadS& head     = *(copyHeadS*)pbFrom ;
                                                                    byteT* pbFrom = (byteT*)&(countT&)swTinCopy ;
                                                                    cLeverOsTid = grab.osTidF() ;
                                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / j") ) ; //U:: TO FIND A BUG
                                                                    _IO_
                                                                {
                                                                if( swTinCopy.idSlotOfLeverF( tinBaseP , grab.osTidF() ) )
                                                                //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / k") ) ; //U:: TO FIND A BUG
                                                                _IO_
                                                            {
                                                            if( grab.cGrabbedF() )
                    
                                                            grabC& grab = *(grabC*)pbCopy ;
                                                            //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / l") ) ; //U:: TO FIND A BUG
                                                            _IO_
                                                        {
                                                        if( bOk )
                                                        }
                                                            thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , sizeof( grabC ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                            _IO_
                                                        {
                                                        ZE( boolT , bOk ) ;
                                                        //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / m") ) ; //U:: TO FIND A BUG
                                                        _IO_
                                                    {
                                                    if( pbCopy )
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / n") ) ; //U:: TO FIND A BUG
                                                    PUSE.newF( tinBaseP , LF , pbCopy , sizeof( grabC ) ) ; ___( pbCopy ) ;
                                                    ZE( byteT* , pbCopy ) ;
                                                    //etRock.traceF( tinBaseP , T("tmReportF a/ 9 / o") ) ; //U:: TO FIND A BUG
                                                    _IO_
                                                {
                                                case ifcIDtYPEdERIVEDbASEgRABc_grabC :
                                            {
                                            switch( pbg->idTypeCt ) //CS:CODEsYNC: 00104c9 1050104.2
                                            _IO_
                                        {
                                        if( pbg && !bQuitEatingP )
                                        //etRock.traceF( tinBaseP , T("tmReportF a/ a") ) ; //U:: TO FIND A BUG
            
                                        }
                                            if( !bOk || getNegAM( recheck ) != FINGERnEG_GRABc ) pbg = 0 ;
                                            }
                                                thirdC::dosReadProcessMemoryIF( tinBaseP , (byteT*)&recheck , sizeof( recheck ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).osPid ) ;
                                                _IO_
                                            {
                                            ZE( countT , recheck ) ;
                                            bOk = 0 ;
                                            _IO_
                                        {
                                        else
                                        if( !bOk || getNegAM( pbg->finger ) != FINGERnEG_GRABc ) pbg = 0 ;
                                        }
                                            thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , sizeof( baseGrabC ) , bOk , (voidT*)((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).osPid ) ;
                                            _IO_
                                        {
                                        ZE( boolT , bOk ) ;
            
                                        baseGrabC* pbg = (baseGrabC*)pbCopy ;
                                        //etRock.traceF( tinBaseP , T("tmReportF a/ b") ) ; //U:: TO FIND A BUG
                                        _IO_
                                    {
                                    if( pbCopy && !bQuitEatingP )
                                    PUSE.newF( tinBaseP , LF , pbCopy , sizeof( baseGrabC ) ) ; ___( pbCopy ) ;
                                    ZE( byteT* , pbCopy ) ;
            
                                    bDash |= reportGrabF( tinBaseP , sRptTin , T("grabbing:") , pcPanLifi ) ;
                                    //countT pcPanLifi[] = { 0 , ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 1 ] , ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 2 ] } ; // THE PAN IS NOT USED BECAUSE HERE IT IS ALWAYS baseGrabC*, UNLIKE WHAT IS DONE IN THE GRABBED ARRAY
                                    countT pcPanLifi[] = { ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] , ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 1 ] , ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 2 ] } ;
                                    //etRock.traceF( tinBaseP , T("tmReportF a/ c") ) ; //U:: TO FIND A BUG
                                    _IO_
                                {
                                if( ((tinFullS&)tinBaseCopy).monitor.pPanLifiGrabbing[ 0 ] && !bQuitEatingP )
                                //etRock.traceF( tinBaseP , T("tmReportF a/ d") ) ; //U:: TO FIND A BUG
            
                                }
                                    }
                                        }
                                            bDash |= reportGrabF( tinBaseP , sRptTin , T("got     :") , ((tinFullS&)tinBaseCopy).pPanLifiRecurseGrabbedLevel + off , ((tinFullS&)tinBaseCopy).osPid ) ;
                                        {
                                        if( ((tinFullS&)tinBaseCopy).pPanLifiRecurseGrabbedLevel[ off ] )
                                    {
                                    for( countT off = 0 ; off < offEnd ; off += 5 )
                                    const countT offEnd = OFFgRABBEDmAX * 5 ;
                                    _IO_
                                {
                                if( ((tinFullS&)tinBaseCopy).monitor.cGrabbed )
                    
                                ZE( boolT , bDash ) ;
                            
                                }
                                    sRptTin << (strokeS*)( T("event:    ")+tEventP+T("\r\n") ) ;
                                    bEvent = 1 ;
                                    _IO_
                                {
                                if( osPidEventP == ((tinFullS&)tinBaseCopy).osPid && osTidEventP == ((tinFullS&)tinBaseCopy).osTid )
                    
                                sRptTin << (strokeS*)( T("\r\n\r\n")+TF3(((tinFullS&)tinBaseCopy).monitor.idThread,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+TP(((tinFullS&)tinBaseCopy).postThreadName,0x10)+T(" ")+TF3(((tinFullS&)tinBaseCopy).monitor.idStep,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+TF3(head.cStepsNew,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES,9)+tc4+T(((tinFullS&)tinBaseCopy).postTell)+T("\r\n" DASH256 "\r\n") ) ;

                                //CONoUTrAW( TF2(idCycle,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(": ")+TF2(head.idAdamRoot,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(".")+TF2(head.idAdam,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+T(((tinFullS&)tinBaseCopy).postThreadName)+T("\r\n") ) ;
                    
                                }
                                    sRptTin << (strokeS*)( T("\r\n")+TF2(head.idAdamRoot,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("/")+TF2(head.idAdam,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n\r\n") ) ;
                    
                                    idAdamLath     = head.idAdam ;
                                    idAdamRootLath = head.idAdamRoot ;
                                    _IO_
                                {
                                if( idAdamLath != head.idAdam || idAdamRootLath != head.idAdamRoot )
            
                                WRITEaRRAY( pIdProgressNest )                                                                                                                                               /*L*/
                                WRITEaRRAY( pEIPInNest )                                                                                                                                                    /*K*/
                                WRITEaRRAY( pIdInNest )                                                                                                                                                     /*J*/
                                WRITEaRRAY( pFlagsThreadLevelMode )                                                                                                                                         /*I*/
                                WRITEaRRAY( pLFstep )                                                                                                                                                       /*H*/
                                WRITEaRRAYmONITOR( pLFnest )                                                                                                                                                       /*G*/
                
                                costai = 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTellIf        ) ; thirdC::c_memcpyIF( tinBaseP , pbc , ((tinFullS&)tinBaseCopy).postTellIf       , costai )  ; pbc += costai ;               /*F*/
                                costai = 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTellWait      ) ; thirdC::c_memcpyIF( tinBaseP , pbc , ((tinFullS&)tinBaseCopy).postTellWait     , costai )  ; pbc += costai ;               /*E*/
                                costai = 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTell          ) ; thirdC::c_memcpyIF( tinBaseP , pbc , ((tinFullS&)tinBaseCopy).postTell         , costai )  ; pbc += costai ;               /*D*/
                                costai = 1 + tc4.csF( tinBaseP )                                        ; thirdC::c_memcpyIF( tinBaseP , pbc , tc4                      , costai )  ; pbc += costai ;               /*M*/
                                costai = 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postThreadName    ) ; thirdC::c_memcpyIF( tinBaseP , pbc , ((tinFullS&)tinBaseCopy).postThreadName   , costai )  ; pbc += costai ;               /*C*/
                                ZE( countT , costai ) ;
                
                                thirdC::c_memcpyIF( tinBaseP , pbc , (byteT*)&((tinFullS&)tinBaseCopy).monitor , sizeof( monitorS ) ) ; pbc += sizeof( monitorS ) ; /*B*/
                                costaVarying += 1 + tc4.csF( tinBaseP ) ;
                                TN( tc4 , "" ) ; tc4 = T("[")+T((countT*)((tinFullS&)tinBaseCopy).c4Tell)+T("]") ;
                                //etRock.traceF( tinBaseP , T("tmReportF a/ e") ) ; //U:: TO FIND A BUG
                                _IO_
                            {
                            if( /*!head.cStepsNew &&*/ !( F(((tinFullS&)tinBaseCopy).flagsThreadMode3) & flTHREADmODE3_MONITORdOnOTrEPORToNmE ) && !bQuitEatingP )

                            }
                                CONoUTrAW( os ) ;
                                OStEXTAK( os , "\"\r\n" ) ;
                                OStEXTA(  os , ((tinFullS&)tinBaseCopy).postThreadName ) ;
                                OStEXTAK( os , "\"" ) ;
                                OStEXTC(  os , ((tinFullS&)tinBaseCopy).monitor.idThread , 0 ) ;
                                OStEXTAK( os , "suppressing detail for thread " ) ;
                                OStEXT(  os , TUCK ) ;
                            {
                            if( F(((tinFullS&)tinBaseCopy).flagsThreadMode3) & flTHREADmODE3_MONITORdOnOTrEPORToNmE )

                            //etRock.traceF( tinBaseP , T("reporting on tinFullS [idThread,postThreadName]:    ")+TF2(((tinFullS&)tinBaseCopy).monitor.idThread,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+T(((tinFullS&)tinBaseCopy).postThreadName) ) ;
                
                            tinBaseS&   tinBaseCopy     = *(tinBaseS*)( pbFrom + sizeof( copyHeadS ) ) ;
                            copyHeadS& head     = *(copyHeadS*)pbFrom ;
                            byteT* pbFrom = (byteT*)&(countT&)swTinCopy ;
                            cLeverOsTid = swTinCopy.leverF( tinBaseP , idf ) ;
                            //etRock.traceF( tinBaseP , T("tmReportF a/ f") ) ; //U:: TO FIND A BUG
                            _IO_
                        {
                        for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                        ZE( countT , idAdamLath     ) ;
                        ZE( countT , idAdamRootLath ) ;

                        *(countT*)pbc =  timeR2                                                                                                                             ; pbc += sizeof( countT ) ;     /*A*/
                        *(countT*)pbc =  timeR1                                                                                                                             ; pbc += sizeof( countT ) ;     /*A*/
                        *(countT*)pbc = 1  /*IDfORMAT*/                                                                                                                     ; pbc += sizeof( countT ) ;     /*A*/
                        putNegAM( *(countT*)pbc , FINGERnEG_BKmONITOR )                                                                                                     ; pbc += sizeof( countT ) ;     /*A*/
                        //etRock.traceF( tinBaseP , T("tmReportF a/ g") ) ; //U:: TO FIND A BUG
                        _IO_
                    {
                    if( pbc && !bQuitEatingP )
                    //CONoUTrAW3( "[cbBookOut]: " , cbBookOut , "\r\n" ) ;
                    byteT* pbc = pbBookOut ;
                    PUSE.newF( tinBaseP , LF , pbBookOut , cbBookOut ) ; ___( pbBookOut ) ;
                    ZE( byteT* , pbBookOut ) ;
                    //etRock.traceF( tinBaseP , T("tmReportF a/ h") ) ; //U:: TO FIND A BUG

                    }
                        countT foo = 2 ;
                    {
                    if( cFlavorsToReport )

                    ;

                        + costaVarying
                        + sizeof( monitorS ) * (countT)cFlavorsToReport /*B*/
                        4 * sizeof( countT )                    /*A*/

                    cbBookOut =
                    //etRock.traceF( tinBaseP , T("tmReportF a/ i") ) ; //U:: TO FIND A BUG

                    }
                        }
                            ACCsIZE( pIdProgressNest )                                                                                                                                      /*L*/
                            ACCsIZE( pEIPInNest )                                                                                                                                           /*K*/
                            ACCsIZE( pIdInNest )                                                                                                                                            /*J*/
                            ACCsIZE( pFlagsThreadLevelMode )                                                                                                                                /*I*/
                            ACCsIZE( pLFstep )                                                                                                                                              /*H*/
                            ACCsIZEmONITOR( pLFnest )                                                       
            
                            costaVarying += 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTellIf     ) ;                                                                                       /*F*/
                            costaVarying += 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTellWait   ) ;                                                                                       /*E*/
                            costaVarying += 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postTell       ) ;                                                                                       /*D*/
                            costaVarying += 1 + tc4.csF( tinBaseP ) ;                                                                                                                           /*M*/
                            costaVarying += 1 + thirdC::c_strlenIF( tinBaseP , ((tinFullS&)tinBaseCopy).postThreadName ) ;                                                                                       /*C*/
                            TN( tc4 , "" ) ; tc4 = T("[")+T((countT*)((tinFullS&)tinBaseCopy).c4Tell)+T("]") ;
                            //etThread.traceF( tinBaseP , T("report on me [idMemorySpaceP,cFlavorsToReport]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavorsToReport,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                            cFlavorsToReport ++ ;
                        {
                        if( tinBaseCopy.idTypeTin == ifcIDtYPEtIN_FULL && /*!head.cStepsNew &&*/ !( F(((tinFullS&)tinBaseCopy).flagsThreadMode3) & flTHREADmODE3_MONITORdOnOTrEPORToNmE ) )

                        tinBaseS&  tinBaseCopy = *(tinBaseS*)( pbFrom + sizeof( copyHeadS ) ) ;
                        copyHeadS& head = *(copyHeadS*)pbFrom ;
                        byteT* pbFrom = (byteT*)&(countT&)swTinCopy ;
                        cLeverOsTid = swTinCopy.leverF( tinBaseP , idf ) ;
                        //etThread.traceF( tinBaseP , T("swTinCopy [idMemorySpaceP,idf]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                    ZE( countT , cFlavorsToReport ) ;
                    //etThread.traceF( tinBaseP , T("swTinCopy [idMemorySpaceP,cFlavors]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                    countT cFlavors = swTinCopy.cFlavorsF( tinBaseP ) ;
                    ZE( countT , costaVarying ) ;
                    //etRock.traceF( tinBaseP , T("tmReportF a/ j") ) ; //U:: TO FIND A BUG
                    _IO_
                {
                if( !bQuitEatingP )
                ZE( countT , cbBookOut ) ;
                ZE( byteT* , pbBookOut ) ;
                ZE( boolT , bEvent ) ;
                //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  5\r\n" ) ;
                //etRock.traceF( tinBaseP , T("tmReportF a/ k") ) ; //U:: TO FIND A BUG

                memorySpaceP.grab.ungrabF( tinBaseP ) ;

                }
                    }
                        }
                            }
                                while( ~hWalk && !bQuitEatingP ) ;
                                }
                                    PUSE( tinBaseP , pbCopyMetaHead ) ;
                                    PUSE( tinBaseP , pbCopySex ) ;
                                    }
                                        //else if( bChatter ) { CONoUTrAW( "IGNORED sw\r\n" ) ; }
                                        }
                                            }
                                                PUSE( tinBaseP , pbCopyMetaBitsOwned ) ;
                                                }
                                                    //etThread.traceF( tinBaseP , T("from meta head [osPid,expCbDrop,expSlots,cSlotsAvoidLo,cSlotsAvoidHi,postName]:    ")+TF2(entry.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF3(pCopyMetaHead->expCbDrop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,2)+T("    ")+TF3(pCopyMetaHead->expSlots,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,2)+T("    ")+TF3(pCopyMetaHead->cSlotsAvoidLo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,2)+T("    ")+TF3(pCopyMetaHead->cSlotsAvoidHi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,2)+T("    ")+T(pCopyMetaHead->postName) ) ;
                                                    //etThread.traceF( tinBaseP , T("[osPid,expCbDrop,expSlots,postName]:    ")+TF2(entry.osPid,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(entry.expCbDrop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(entry.expSlots,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+T(entry.postName) ) ;

                                                    }
                                                        }
                                                            }
                                                                pbzGrainCode[ offg ] = '9' ;    // sexC META
                                                            {
                                                            for( countT offg = offGrainStart ; offg < offGrainEnd ; offg ++ ) 

                                                            countT offGrainEnd   = (countT)pCopySex->pbMetaEnd / cbGrain ;
                                                            countT offGrainStart = (countT)pCopySex->pbMeta    / cbGrain ;
                                                        {
                                                        if( pCopySex->pbMeta < pCopySex->pbMetaEnd && (countT)pCopySex->pbMetaEnd < cbGrainSpace )

                                                        }
                                                            }
                                                                pbzGrainCode[ offg ] = '8' ;    // sexC DATA
                                                            {
                                                            for( countT offg = offGrainStart ; offg < offGrainEnd ; offg ++ ) 

                                                            countT offGrainEnd   = (countT)pCopySex->pbDataEnd / cbGrain ;
                                                            countT offGrainStart = (countT)pCopySex->pbData    / cbGrain ;
                                                        {
                                                        if( pCopySex->pbData < pCopySex->pbDataEnd && (countT)pCopySex->pbDataEnd < cbGrainSpace )

                                                        sRptSex << (strokeS*)( TF3(cOwned,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3(pCopyMetaHead->expCbDrop,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3(pCopyMetaHead->expSlots,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3(pCopySex->flagsStatePrivate,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3(pCopyMetaHead->cSlotsAvoidLo,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3(pCopyMetaHead->cSlotsAvoidHi,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED,9)+TF3((countT)pCopySex->pbData,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+T(" ")+TF3((countT)pCopySex->pbDataEnd,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED|flFORMAT_FILLzE|flFORMAT_FOREIGN,8)+T(" ")+T(pCopyMetaHead->postName)+tcr ) ;

                                                        }
                                                            if( !bIgnoreLo && !bIgnoreHi && pbCopyMetaBitsOwned[ offb / SB ] & mask ) cOwned ++ ;

                                                            //if( bIgnoreHi && !( pbCopyMetaBitsOwned[ offb / SB ] & mask ) ) etThread.traceF( tinBaseP , T("error: expected ownership bit not found (high)") ) ;
                                                            //if( bIgnoreLo && !( pbCopyMetaBitsOwned[ offb / SB ] & mask ) ) etThread.traceF( tinBaseP , T("error: expected ownership bit not found (low)") ) ;

                                                            boolT bIgnoreHi = offb >= cSlots - pCopyMetaHead->cSlotsAvoidHi ;
                                                            boolT bIgnoreLo = offb <           pCopyMetaHead->cSlotsAvoidLo ;

                                                            byteT mask = (byteT)( 1 << offb % SB ) ;
                                                        {
                                                        for( countT offb = 0 ; offb < cSlots ; offb ++ )
                                                        countT cSlots = 1 << pCopyMetaHead->expSlots ;
                                                        ZE( countT , cOwned ) ;
                                                    {
                                                    if( bGotBits )

                                                    }
                                                        thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopyMetaBitsOwned , cbaMetaBitsOwned , bGotBits , (voidT*)pCopySex->pbzMetaBitsOwned , entry.osPid ) ;
                                                        _IO_
                                                    {
                                                    ZE( boolT , bGotBits ) ;
                                                {
                                                if( pbCopyMetaBitsOwned )

                                                PUSE.newF( tinBaseP , LF , pbCopyMetaBitsOwned , cbaMetaBitsOwned ) ; ___( pbCopyMetaBitsOwned ) ;
                                                countT cbaMetaBitsOwned = 1 + ( 1 << pCopyMetaHead->expSlots ) / SB ;
                                                ZE( byteT* , pbCopyMetaBitsOwned ) ;
                                            {
                                            if( pCopyMetaHead )

                                            }
                                                if( bOk ) pCopyMetaHead = (sexHeadS*)pbCopyMetaHead ; ;
                                                }
                                                    thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopyMetaHead , sizeof( sexHeadS ) , bOk , (voidT*)pCopySex->pzMetaHead , entry.osPid ) ;
                                                    _IO_
                                                {
                                                ZE( boolT , bOk ) ;
                                            {
                                            ZE( sexHeadS* , pCopyMetaHead ) ;
                                        {
                                        if( pCopySex ) // pCopySex IS EITHER 0 OR A VALID IMAGE OF A sexC (U:: ADD FINGERPRINT CHECK LIKE tinFullS)
                                            
                                        }
                                            if( bOk ) pCopySex = (sexC*)pbCopySex ; ;
                                            }
                                                thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopySex , sizeof( sexC ) , bOk , (voidT*)entry.pSex , entry.osPid ) ;
                                                _IO_
                                            {
                                            ZE( boolT , bOk ) ;
                                        {
                                        ZE( sexC* , pCopySex ) ;
                                    {
                                    if( pbCopySex && pbCopyMetaHead )
                                    PUSE.newF( tinBaseP , LF , pbCopyMetaHead , sizeof( sexHeadS ) ) ; ___( pbCopyMetaHead ) ;
                                    PUSE.newF( tinBaseP , LF , pbCopySex      , sizeof( sexC     ) ) ; ___( pbCopySex      ) ;
                                    ZE( byteT* , pbCopyMetaHead ) ;
                                    ZE( byteT* , pbCopySex ) ;

                                    byteT* pbzGrainCode = (byteT*)&(countT&)sw_pbzGrainCode ;
                                    if( !sw_pbzGrainCode.idSlotOfLeverF( tinBaseP , cLeverGrainCode ) ) etThread.memSetF( tinBaseP , (byteT*)&(countT&)sw_pbzGrainCode , cbGrainCode , '.' ) ;
                                    cLeverGrainCode = entry.osPid ;

                                    sexEntryS& entry = *(sexEntryS*)&memorySpaceP.swsSex.downF( tinBaseP , hWalk ) ;
                                {
                                do
                                handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                        {
                        if( cPlates )
                        sRptSex << (strokeS*)( T("[cPlates]:    ")+TF2(cPlates,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;
                        countT cPlates = memorySpaceP.swsSex ;
            
                        sRptSex << (strokeS*)( tcr+tcr+textC( tinBaseP , TAG( TAGiDnULL ) , flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED , memorySpaceP.pczLeverAdam , flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED , 0 , 0 , 0 )+tcr+tcr+T("cOwned   expCbSlo expSlots flagsSta cSlotsLo cSlotsHi pbData   pbDataEn postName")+tcr+tcr ) ;
                        memorySpaceP.pczLeverAdam = (countT*)memorySpaceP.swsSex.leverF( tinBaseP , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                    sRptSex << (strokeS*)( T("[cFlavors]:    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr+tcr ) ;
                    countT cFlavors = memorySpaceP.swsSex.cFlavorsF( tinBaseP ) ;
                    _IO_
                {
                if( !bQuitEatingP )
                //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  6\r\n" ) ;
                //etRock.traceF( tinBaseP , T("tmReportF b/ ") ) ; //U:: TO FIND A BUG

                }
                    }
                        }
                            }
                                while( ~hWalk && !bQuitEatingP ) ;
                                }
                                    }
                                        }
                                            pbzGrainCode[ offg ] = '7' ;    // napkinC
                                        {
                                        for( countT offg = offGrainStart ; offg < offGrainEnd ; offg ++ ) 

                                        countT offGrainEnd   = (countT)( entry.pbData + entry.cbData ) / cbGrain ;
                                        countT offGrainStart = (countT)  entry.pbData                  / cbGrain ;
                                    {
                                    if( (countT)entry.pbData + entry.cbData < cbGrainSpace )

                                    sRptNapkin << (strokeS*)( T(entry.postName)+tcr ) ;

                                    byteT* pbzGrainCode = (byteT*)&(countT&)sw_pbzGrainCode ;
                                    if( !sw_pbzGrainCode.idSlotOfLeverF( tinBaseP , cLeverGrainCode ) ) etThread.memSetF( tinBaseP , (byteT*)&(countT&)sw_pbzGrainCode , cbGrainCode , ' ' ) ;
                                    cLeverGrainCode = entry.osPid ;

                                    napkinEntryS& entry = *(napkinEntryS*)&memorySpaceP.swsNapkin.downF( tinBaseP , hWalk ) ;
                                {
                                do
                                handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                        {
                        if( cPlates )
                        sRptNapkin << (strokeS*)( T("[cPlates]:    ")+TF2(cPlates,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr ) ;
                        countT cPlates = memorySpaceP.swsNapkin ;
            
                        sRptNapkin << (strokeS*)( tcr+tcr+textC( tinBaseP , TAG( TAGiDnULL ) , flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED , memorySpaceP.pczLeverAdam , flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED , 0 , 0 , 0 )+tcr+tcr+T("postName")+tcr+tcr ) ;
                        memorySpaceP.pczLeverAdam = (countT*)memorySpaceP.swsNapkin.leverF( tinBaseP , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors && !bQuitEatingP ; idf ++ )
                    sRptNapkin << (strokeS*)( T("[cFlavors]:    ")+TF2(cFlavors,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tcr+tcr ) ;
                    countT cFlavors = memorySpaceP.swsNapkin.cFlavorsF( tinBaseP ) ;
                    _IO_
                {
                if( !bQuitEatingP )
                //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  7\r\n" ) ;
                //etRock.traceF( tinBaseP , T("tmReportF c/ ") ) ; //U:: TO FIND A BUG

                }
                    }
                        }
                            }
                                while( ~hWalk && !bQuitEatingP ) ;
                                }
                                    PUSE( tinBaseP , pbCopy ) ;
                                    }
                                        //else if( bChatter ) { CONoUTrAW( "IGNORED sw\r\n" ) ; }
                                        }
                                            //if( bChatter ) { CONoUTrAW( "COPIED sw\r\n" ) ; }
            
                                            thirdC::c_memcpyIF( tinBaseP , pbTo + sizeof( copyHeadS ) , (byteT*)pCopy , sizeof( tinFullS ) ) ;
            
                                                                                                    entry.idStepLath = ((tinFullS*)pCopy)->monitor.idStep ;
                                            head.cStepsNew = ((tinFullS*)pCopy)->monitor.idStep - entry.idStepLath ;
            
                                            head.idAdam     = memorySpaceP.pczLeverAdam[ 1 ] ;
                                            head.idAdamRoot = memorySpaceP.pczLeverAdam[ 0 ] ;
            
                                            copyHeadS& head = *(copyHeadS*)pbTo ;
            
                                            byteT* pbTo = (byteT*)&(countT&)swTinCopy ;
                                            cLeverOsTid = entry.osTid ;
                                            //etThread.traceF( tinBaseP , T("copying to swTinCopy [idMemorySpaceP,idf]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                        {
                                        if( pCopy&& !bQuitEatingP ) // pCopy IS EITHER 0 OR A VALID IMAGE OF A tinFullS
                                            
                                        }
                                            }
                                                }
                                                    //U::LOG postThreadName AND idThread

                                                    //LOGrAW9( "tmReportF/detected odor while sniffing tinFullS again to verify [bOk,fingerprint,entry.idSerial,idSerial]: " , bOk , "    " , pc2[ 0 ] , "    " , entry.idSerial , "    " , pc2[ 1 ] , "\r\n" ) ;
                                                    pCopy = 0 ;
                                                    //etThread.traceF( tinBaseP , T("U:: 1 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                                {
                                                if( !bOk || getNegAM( pc2[ 0 ] ) != FINGERnEG_TINs || entry.idSerial != pc2[ 1 ] )
                                                }
                                                    thirdC::dosReadProcessMemoryIF( tinBaseP , (byteT*)pc2 , sizeof pc2 , bOk , (voidT*)( (byteT*)entry.ip ) , entry.osPid ) ;
                                                    _IO_
                                                {
                                                bOk = 0 ;
                                                countT pc2[ 2 ] ; //fingerprint idSerial MUST BE AT OFFSETS 0 4
                                                //etThread.traceF( tinBaseP , T("U:: 2 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                            {
                                            else
                                            }
                                                //U::LOG postThreadName AND idThread

                                                //LOGrAW9( "tmReportF/detected odor while sniffing tinFullS full [bOk,fingerprint,entry.idSerial,idSerial]: " , bOk , "    " , pCopy->fingerprint , "    " , entry.idSerial , "    " , pCopy->idSerial , "\r\n" ) ;
                                                pCopy = 0 ;
                                                //etThread.traceF( tinBaseP , T("U:: 3 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                            {
                                            if( !bOk || getNegAM( pCopy->fingerprint ) != FINGERnEG_TINs || entry.idSerial != pCopy->idSerial )
                                            }
                                                thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , sizeof( tinFullS ) , bOk , (voidT*)entry.ip , entry.osPid ) ;
                                                _IO_
                                            {
                                            ZE( boolT , bOk ) ;
                                            //etThread.traceF( tinBaseP , T("U:: 4 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                        {
                                        if( !entry.bIda && !bQuitEatingP )
                                        tinBaseS* pCopy = (tinBaseS*)pbCopy ;
                                        //etThread.traceF( tinBaseP , T("U:: 5 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                                        //U:: INSPECT pCopy->idTypeTin AND HANDLE CORRECTLY IF NOT tinFullS
                                    {
                                    if( pbCopy )
                                    PUSE.newF( tinBaseP , LF , pbCopy , sizeof( tinFullS ) ) ; ___( pbCopy ) ;
                                    ZE( byteT* , pbCopy ) ;
                    
                                    //}
                                    //    CONoUTrAW( ostoSay ) ;
                                    //
                                    //    OStEXTAK( ostoSay , "\"\r\n" ) ;
                                    //    OStEXTA(  ostoSay , entry.postThreadName ) ;
                                    //    OStEXTAK( ostoSay , " , \"" ) ;
                                    //    OStEXTC(  ostoSay , entry.osTid , 0 ) ;
                                    //    OStEXTAK( ostoSay , " , " ) ;
                                    //    OStEXTC(  ostoSay , entry.idTin , 0 ) ;
                                    //    OStEXTAK( ostoSay , " , " ) ;
                                    //    OStEXTC(  ostoSay , entry.idThread , 0 ) ;
                                    //    OStEXTAK( ostoSay , "i [idThread,idTin,osTid,postThreadName]: " ) ;
                                    //    OStEXT(  ostoSay , TUCK ) ;
                                    //
                                    //    bChatter = 1 ;
                                    //{
                                    //if( !etThread.strCompareF( tinBaseP , T(entry.postThreadName) , T("tm1F") ) )
                                    //ZE( boolT , bChatter ) ;

                                    tinEntryS& entry = *(tinEntryS*)&memorySpaceP.swsTin.downF( tinBaseP , hWalk ) ;
                                    //etThread.traceF( tinBaseP , T("U:: 6 [idf]:    ")+TF2(idf,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
                                {
                                do
                                handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                        {
                        if( cPlates )

                        //etThread.traceF( tinBaseP , T("swsTin [idMemorySpaceP,cPlates,pczLeverAdam]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(cPlates,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+T("    ")+TF2(*memorySpaceP.pczLeverAdam,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                        countT cPlates = memorySpaceP.swsTin ;
            
                        memorySpaceP.pczLeverAdam = (countT*)memorySpaceP.swsTin.leverF( tinBaseP , idf ) ;
                    {
                    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                    countT cFlavors = memorySpaceP.swsTin.cFlavorsF( tinBaseP ) ;
                    _IO_
                {
                if( !bQuitEatingP )
                //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  8\r\n" ) ;
                //etRock.traceF( tinBaseP , T("tmReportF d/ ") ) ; //U:: TO FIND A BUG

                memorySpaceP.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            
                //CONoUTrAW7( "[cbGrainCode,cColsGrainCode,cRowsGrainCode]: " , cbGrainCode , " " , cColsGrainCode , " " , cRowsGrainCode , "\r\n" ) ;

                switchC sw_pbzGrainCode( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , cLeverGrainCode , 0 , cbGrainCode ) ;
                ZE( countT , cLeverGrainCode ) ;

                while( cColsGrainCode * cRowsGrainCode < cbGrainCode ) cRowsGrainCode ++ ;
                while( cColsGrainCode * cRowsGrainCode > cbGrainCode ) cRowsGrainCode -- ;
                countT cRowsGrainCode = cColsGrainCode ;
                if( cColsGrainCode < TUCK ) cColsGrainCode = TUCK ;
                while( cColsGrainCode * cColsGrainCode < cbGrainCode ) cColsGrainCode ++ ;
                countT cColsGrainCode = thirdC::c_sqrtIF( cbGrainCode ) ;
                countT cbGrainCode = cbGrainSpace / cbGrain ;
                countT cbGrain = 1 << thirdC::os_expCbAllocationGrain_IF( tinBaseP ) ;
                countT cbGrainSpace = BM_HIGH ; //ONLY LOWER HALF IS ACCESSIBLE TO APPLICATIONS IN WINDOWS (WIN32)

                #endif

                    soulC sRptLog(    tinBaseP , TAG( TAGiDnULL ) ) ; sRptLog    << (strokeS*)T("\r\nLog\r\n\r\n") ;
                    soulC sRptEvent(  tinBaseP , TAG( TAGiDnULL ) ) ; sRptEvent  << (strokeS*)T("\r\nEvent Tally\r\n\r\n") ;
                    soulC sRptTin(    tinBaseP , TAG( TAGiDnULL ) ) ; sRptTin    << (strokeS*)T("\r\nThreads\r\n\r\n") ;
                    soulC sRptSex(    tinBaseP , TAG( TAGiDnULL ) ) ; sRptSex    << (strokeS*)T("\r\n\r\nSex (Slot Extents) (Heap)\r\n") ;
                    soulC sRptNapkin( tinBaseP , TAG( TAGiDnULL ) ) ; sRptNapkin << (strokeS*)T("\r\n\r\nNapkin (Shared Memory)\r\n") ;
                    soulC sRptAdd(    tinBaseP , TAG( TAGiDnULL ) ) ; sRptAdd    << (strokeS*)T("\r\nAddress Space Usage\r\n") ;
                    soulC sRptTitle(  tinBaseP , TAG( TAGiDnULL ) ) ; sRptTitle  << (strokeS*)( T("Glass: Memory Space ")+TF2(idMemorySpaceP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(bSnapShot?" Snapshot":" Minute")+T(" Overview\r\n")+T(bSnapShot?"Snapshot":"Minute by minute")+T(" overview of the state of this home\r\nMinutes since gen: ")+TF2(idCycle,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\nMinute: ")+TF2(idMinute,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n\r\n") ) ;

                #else

                    soulC sRptLog(    tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptLog    ) ; sRptLog    << (strokeS*)T("\r\nLog\r\n\r\n") ;
                    soulC sRptEvent(  tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptEvent  ) ; sRptEvent  << (strokeS*)T("\r\nEvent Tally\r\n\r\n") ;
                    soulC sRptTin(    tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptTin    ) ; sRptTin    << (strokeS*)T("\r\nThreads\r\n\r\n") ;
                    soulC sRptSex(    tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptSex    ) ; sRptSex    << (strokeS*)T("\r\n\r\nSex (Slot Extents) (Heap)\r\n") ;
                    soulC sRptNapkin( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptNapkin ) ; sRptNapkin << (strokeS*)T("\r\n\r\nNapkin (Shared Memory)\r\n") ;
                    soulC sRptAdd(    tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptAdd    ) ; sRptAdd    << (strokeS*)T("\r\nAddress Space Usage\r\n") ;
                    soulC sRptTitle(  tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ostoFileRptTitle  ) ; sRptTitle  << (strokeS*)( T("Glass: Memory Space ")+TF2(idMemorySpaceP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(bSnapShot?" Snapshot":" Minute")+T(" Overview\r\n")+T(bSnapShot?"Snapshot":"Minute by minute")+T(" overview of the state of this home\r\nMinutes since gen: ")+TF2(idCycle,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\nMinute: ")+TF2(idMinute,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T("\r\n\r\n") ) ;

                #if !defined( NEVERdEFINED )
                // PRODUCTION: USE jotC (TO ACCOMMODATE LARGE REPORTS)
                // WHEN THAT IS FIXED, CHANGE THE NEXT LINE SO THAT JOT IS USED
                //U:: soulC::operator <<() DOES NOT WORK WHEN THE RHS soulC INSTANCE USES JOT

                OStEXTC(  ostoFileRptLog    , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptLog    , ".soul.rpt.log." ) ;
                OStEXTC(  ostoFileRptLog    , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptLog    , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptEvent  , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptEvent  , ".soul.rpt.event." ) ;
                OStEXTC(  ostoFileRptEvent  , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptEvent  , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptTin    , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptTin    , ".soul.rpt.tin." ) ;
                OStEXTC(  ostoFileRptTin    , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptTin    , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptSex    , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptSex    , ".soul.rpt.sex." ) ;
                OStEXTC(  ostoFileRptSex    , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptSex    , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptNapkin , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptNapkin , ".soul.rpt.napkin." ) ;
                OStEXTC(  ostoFileRptNapkin , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptNapkin , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptAdd    , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptAdd    , ".soul.rpt.add." ) ;
                OStEXTC(  ostoFileRptAdd    , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptAdd    , TUCK >> 3 ) ;

                OStEXTC(  ostoFileRptTitle  , idMemorySpaceP , 0 ) ;
                OStEXTAK( ostoFileRptTitle  , ".soul.rpt.title." ) ;
                OStEXTC(  ostoFileRptTitle  , idCycle , 0 ) ;               // TO UNIQUIFY FOR ROBUSTNESS (IF REUSE THE SAME NAME THEN FAILURE TO DELETE A BACKING FILE WOULD AFFECT THE NEXT CYCLE)
                OStEXT(   ostoFileRptTitle  , TUCK >> 3 ) ;

                // bQuitEatingP IS NOT TESTED HERE BECAUSE WE WANT WO LATH REPORT SO THAT WE CAN SEE THE FINAL EVENTS

                etThread.traceF( tinBaseP , T("generating and writing ")+T(bSnapShot?"snapshot":"minute")+T(" report [idMemorySpaceP,idCycle]:    ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(idCycle,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;

                idCycle ++ ;

                //LOGrAW7( "tmReportF [fliPendingSnapShotRequestP,bSnapShot,idMemorySpaceP]: " , fliPendingSnapShotRequestP , " " , bSnapShot , " " , idMemorySpaceP , "\r\n" ) ;
                //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  9\r\n" ) ;
                _IO_
            {
            if( !bQuitEatingP )

            if( bSerialize ) bCompileReportP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;  // AN OPTIMIZATION TO SERIALIZE USE OF CPU AND ADDRESS SPACE ; 20210707@1737: CONDITIONALLY DISABLED SERIALIZATION SO CAN GET QUICK REPORTS DURING TERMINATION

            bSerialize = 0 ; //20240707@1046: SUPPRESS SERIALIZATION BECAUSE WITH CURRENT Intel i3 CHIPS THERE IS PLENTY OF CPU HORSEPOWER
            boolT bSerialize = !ether ;

            _IO_
        {
        if( ( bChatterP || bSnapShot ) && !bQuitEatingP )

        }
            //) ) ;
            //        : "not napping, because a minute has passed"
            //        ? "not napping, because i have been fired"
            //    : bQuitEatingP
            //    ? "not napping, because a snapshot has been requested"
            //etRock.traceF( tinBaseP , T( bSnapShot
            bSnapShot = fliPendingSnapShotRequestP & fliMyBit ;

            }
                else etThread.osSleepF( tinBaseP , TUCK * 0x40 ) ;
                }
                    break ;
                    timeR2 = timeN2 ;
                    timeR1 = timeN1 ;
                    idMinute = idMinuteTry ;
                {
                if( bDo )

                if( !bDo && ( /*ether ||*/ idMinute != idMinuteTry ) ) bDo = 1 ;    //20221027@1544: NAWWH: 20210706@1608: IF ether THEN DO REPEATEDLY WITHOUT NAPPING, TO REVEAL WHICH THREADS TAKE THE LONGEST TO SHUT DOWN

                else if( idFoTock ) idFoTock = 0 ;
                }
                    }
                        bDo = 1 ;
                        idFoTock = idFoTockTry ;
                    {
                    if( !idFoTock || idFoTock != idFoTockTry )
                {
                if( F(home.flagsUtility) & flHOMEsuTILITY_SNAPsHOT )
                ZE( boolT , bDo ) ;

                countT idFoTockTry = timeN1 >> 0x12 ;        
                countT idMinuteTry = timeN1 >> 0x16 ;    // 8:TUCK 01:TOCK 81:TICK 61:MINUTE(QUARTERTICK)
                // 8:TUCK 01:TOCK 81:TICK 61:MINUTE(QUARTERTICK)

                etThread.osTimeNowF( tinBaseP ,  timeN1 , timeN2 ) ;
                ZE( sCountT , timeN2 ) ;
                ZE( countT  , timeN1 ) ;
            {
            while( !bQuitEatingP && !etThread && !( fliPendingSnapShotRequestP & fliMyBit ) ) // SNAPsHOT REQUEST IS OBEYED IMMEDIATELY

            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        ZE( boolT   , bSnapShot ) ;
        ZE( sCountT , timeR2 ) ;
        ZE( countT  , timeR1 ) ;

        //LOGrAW3( "tmReportF 1 [flHOMEsuTILITY_SNAPsHOT]: " , F(home.flagsUtility) & flHOMEsuTILITY_SNAPsHOT , "\r\n" ) ;
        //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  a\r\n" ) ;
        //etRock.traceF( tinBaseP , T("tmReportF e/ [idMemorySpaceP]: ")+TF2(idMemorySpaceP,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
        _IO_
    {
    while( !bQuitEatingP )
    THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING ) //bCompileReportP ADDED 20180108@1021
    //etRock.traceF( tinBaseP , T("tmReportF f/ ") ) ; //U:: TO FIND A BUG
    ZE( countT , idFoTock ) ; // THIS IS USED ONLY IF flHOMEsuTILITY_SNAPsHOT
    countT idMinute = idMinuteZeP ;
    ZE( countT , idCycle ) ;
    TN( tcr , "\r\n" ) ;

    switchC swTinCopy( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , cLeverOsTid , 0 , sizeof( copyHeadS ) + sizeof( tinFullS ) ) ;
    ZE( countT , cLeverOsTid ) ;

    //booksC bkReport( tinBaseP , TAG( TAGiDnULL ) , tBooks , ifcIDsTATEsPACE_MULTIPLEaDAMS , flBOOKSc_WRITER , TICK ) ; //A SEPARATE BOOKS OBJECT IS USED FOR EACH MEMORY SPACE TO ELIMINATE SERIALIZATION COLLISIONS; WHICH ARE SUPPORTED BUT WHY TAKE A CHANCE WITH THE GLASS2!
    //bkReport IS COMMENTED OUT BECAUSE NEVER USED AND CONSUMES SSD SPACE AND WEAR AND TEAR OF SSD
    tBooks = T("minute.reports.memoryspace.")+TF3(idMemorySpaceP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN,3) ;
    TN( tBooks , "" ) ;
    TN( tb4 , "    " ) ;

    etThread.osThreadSwitchingDesireF( tinBaseP , ifcTHREADpRIORITY_LAZIEST ) ; //CHANGE TO RUSH IF NEED TO ANALYZE BEHAVIOR INVOLVING CPU PEGGING

    ((tinFullS&)tinBaseP).c4Tell.c1 = idMemorySpaceP ;

    const flagsT fliMyBit = 1 << idMemorySpaceP - ifcIDmEMORYsPACE_min - cSkip ;       //A:ASSUME: THE NUMBER OF NONRESERVED MEMORY SPACE VALUES IS NOT GREATER THAN THE NUMBER OF BITS IN A flagsT INSTANCE

    ;
        : 0
        ? ifcIDmEMORYsPACE_RESERVEDmAX - ifcIDmEMORYsPACE_RESERVEDmIN + 1
    countT cSkip = idMemorySpaceP > ifcIDmEMORYsPACE_RESERVEDmAX

    homeS& home = homeS::homeIF() ;
    //CONoUTrAW3( "tmReportF " , idMemorySpaceP , ":  b\r\n" ) ;
    //etRock.traceF( tinBaseP , T("tmReportF g/ ") ) ; //U:: TO FIND A BUG

    //etRock.traceF( tinBaseP , T("tmReportF h/ ") ) ; //U:: TO FIND A BUG
    etherC& etRock = etherC::etRockIF( tinBaseP ) ;

    //}
    //    etRock.traceF( tinBaseP , T("tmReportF / i just called TRACEmYtHREAD") ) ; //U:: TO FIND A BUG
    //    TRACEmYtHREAD ;
    //{
    //if( idMemorySpaceP == 2 )

    etThread.delF( tinBaseP , pcArgP ) ;
    boolT&        bChatterP                  =        *(boolT*)pcArgP[ 0xb ] ;
    textC&        tEventP                    =        *(textC*)pcArgP[ 0xa ] ;
    countT&       osTidEventP                =       *(countT*)pcArgP[ 0x9 ] ;
    countT&       osPidEventP                =       *(countT*)pcArgP[ 0x8 ] ;
    batonC&       bCompileReportP            =       *(batonC*)pcArgP[ 0x7 ] ;
    osTextT*      postSnapShotRequestP       =       (osTextT*)pcArgP[ 0x6 ] ;
    flagsT&       fliPendingSnapShotRequestP =       *(flagsT*)pcArgP[ 0x5 ] ;
    countT        idMinuteZeP                =                 pcArgP[ 0x4 ] ;
    memorySpaceS& memorySpaceP               = *(memorySpaceS*)pcArgP[ 0x3 ] ;
    stackC&       stPeriodDataP              =       *(stackC*)pcArgP[ 0x2 ] ;
    countT        idMemorySpaceP             =                 pcArgP[ 0x1 ] ;
    boolT&        bQuitEatingP               =        *(boolT*)pcArgP[ 0x0 ] ;
    countT* pcArgP = (countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmReportF )

    }
        thirdC::c_memcpyIF( tinBaseP , pbc , (byteT*)pci , costai ) ; pbc += costai ;                       \
        costai = sizeof( countT ) * ( 1 + thirdC::c_strlenIF( tinBaseP , pci ) ) ;                          \
        ((tinFullS&)tinBaseCopy).get_##arrayP##_F( tinBaseP , pci , cci + 1 ) ;                           \
        countT pci[ cci + 1 ] ;                                                                             \
        const countT cci = sizeof ((tinFullS&)tinBaseP).monitor.##arrayP ;                                \
    {                                                                                                       \
                                                                                                            \
#define WRITEaRRAYmONITOR(arrayP)                                                                           \

    }
        thirdC::c_memcpyIF( tinBaseP , pbc , (byteT*)pci , costai ) ; pbc += costai ;                       \
        costai = sizeof( countT ) * ( 1 + thirdC::c_strlenIF( tinBaseP , pci ) ) ;                          \
        ((tinFullS&)tinBaseCopy).get_##arrayP##_F( tinBaseP , pci , cci + 1 ) ;                           \
        countT pci[ cci + 1 ] ;                                                                             \
        const countT cci = sizeof ((tinFullS&)tinBaseP).##arrayP ;                                        \
    {                                                                                                       \
                                                                                                            \
#define WRITEaRRAY(arrayP)                                                                                  \

    }
        costaVarying += sizeof( countT ) * ( 1 + thirdC::c_strlenIF( tinBaseP , pci ) ) ;                   \
        ((tinFullS&)tinBaseCopy).get_##arrayP##_F( tinBaseP , pci , cci + 1 ) ;                           \
        countT pci[ cci + 1 ] ;                                                                             \
        const countT cci = sizeof ((tinFullS&)tinBaseP).##arrayP ;                                        \
    {                                                                                                       \
                                                                                                            \
#define ACCsIZE(arrayP)                                                                                     \

    }
        costaVarying += sizeof( countT ) * ( 1 + thirdC::c_strlenIF( tinBaseP , pci ) ) ;                   \
        ((tinFullS&)tinBaseCopy).get_##arrayP##_F( tinBaseP , pci , cci + 1 ) ;                           \
        countT pci[ cci + 1 ] ;                                                                             \
        const countT cci = sizeof ((tinFullS&)tinBaseP).monitor.##arrayP ;                                \
    {                                                                                                       \
                                                                                                            \
#define ACCsIZEmONITOR(arrayP)                                                                              \

;
}
    countT cStepsNew ;
    countT idAdam ;
    countT idAdamRoot ;
{
struct copyHeadS

DONE( tmcMonitorServerF )
}
    }
        DEL( psoP ) ;
        }
            }
                sOut.removeAllF( tinBaseP ) ;
                psoP->writeF( tinBaseP , sOut ) ;
                sIn.removeAllF( tinBaseP ) ;
    
                }
                    #endif

                    }
                        break ;
    
                        etThread.delF( tinBaseP , psttName ) ;
                        }
                            //etThread.strokeF( tinBaseP , T("walked  ")+TF1(idMemorySpace)+T(" name \"")+T(psttName)+T("\"\r\n") ) ;
                            THREADmODE3rESTORE
                            poo.walkF( tinBaseP , ifcIDtYPEpOOLoLDwALK_MONITORwALK1 , info ) ;
                            THREADmODE3oN( flTHREADmODE3_MARKnEWdROPSqUIETdURINGwALK )
                            //etThread.strokeF( tinBaseP , T("walking ")+TF1(idMemorySpace)+T(" name \"")+T(psttName)+T("\"\r\n") ) ;
                            countT info = (countT)&c8i ;
                            count8S c8i( (countT)&sOut , 0/*idDrop*/ ) ;
                        {
                        if( !POOP )
                        //etThread.strokeF( tinBaseP , T("this poolOld has ")+TF1(head.cdUsed)+T(" drops in memory [")+TF1(c_pbPool)+T(",")+TF1(c_pbPool+head.offHighWater)+T(",")+TF1(c_pbPool+head.cbPool-1)+T("]\r\n") ) ;
                        countT c_pbPool = (countT)poo.pbPool ;
                        //etThread.strokeF( tinBaseP , T("received request to walk a poolOld in space ")+TF1(idMemorySpace)+T(" name \"")+T(psttName)+T("\"\r\n") ) ;
                        const poolOldHeaderS& head = poo ;
                        p oolC poo( tinBaseP , TAG( TAGiDnULL ) , T(psttName) ) ;
    
                        sIn >> psttName ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                        sIn >> idMemorySpace ;
                        ZE( countT , idMemorySpace ) ;
    
                        sOut << (countT)ifcIDrEPLYmONITOR_POOLoLDwALK1 ;
                    {
                    case ifcIDcMDmONITOR_POOLoLDwALK1 : //U::REPLACE THIS WITH ORTHOGONAL FUNCTIONALITY (REPLY WITH POOLoLD ADDRESS; FORCE CLIENT TO REQUEST IMAGES AND TO DO ITS OWN INSPECTION)
                    }
                        break ;
    
                        etThread.delF( tinBaseP , psttName ) ;
                        //if( !POOP ) sOut.shiftLeftF( tinBaseP , ifcIDtYPEsOULiTEM_countTptr , (countT*)&(poolOldHeaderS&)poo , sizeof( poolOldHeaderS ) / sizeof( countT ) ) ;
                        p oolC poo( tinBaseP , TAG( TAGiDnULL ) , T(psttName) ) ;
    
                        //etThread.strokeF( tinBaseP , T("received request for the header of space ")+TF1(idMemorySpace)+T(" name \"")+T(psttName)+T("\"\r\n") ) ;
                        sIn >> psttName ; ___( psttName ) ;
                        ZE( strokeS* , psttName ) ;
                        sIn >> idMemorySpace ;
                        ZE( countT , idMemorySpace ) ;
    
                        sOut << (countT)ifcIDrEPLYmONITOR_POOLoLDhEADER ;
                    {
                    case ifcIDcMDmONITOR_POOLoLDhEADER : //U::REPLACE THIS WITH ORTHOGONAL FUNCTIONALITY (REPLY WITH POOLoLD ADDRESS; FORCE CLIENT TO REQUEST IMAGES AND TO DO ITS OWN INSPECTION)

                    #if defined( NEVERdEFINED )
                    //COMMENTED OUT WHEN poolC WAS REWRITTEN

                    }
                        break ;

                        swMemorySpaceP.ungrabF( tinBaseP ) ;
                        }
                            }
                                while( !stName.third && ~hDown ) ;
                                }
                                    sOut << psttn ;
                                    strokeS* psttn = (strokeS*)stName.downF( tinBaseP , hDown ) ;
                                {
                                do
                                handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                            {
                            if( stName )
                            sOut << (countT)stName ;
        
                            }
                                }
                                    while( !stTemp.third && ~hDown ) ;
                                    }
                                        if( !ids ) etThread.delF( tinBaseP , psttn ) ;
                                        stName.sinkF( tinBaseP , ids , psttn , flSTACKsINK_UNIQUE ) ;
                                        ZE( countT , ids ) ;
                                        strokeS*& psttn = *(strokeS**)&stTemp.downF( tinBaseP , hDown ) ;
                                    {
                                    do
                                    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                {
                                if( stTemp )
            
                                memorySpace.grab.ungrabF( tinBaseP ) ;
                                }
                                    while( !memorySpace.stPool.third && ~hDown ) ;
                                    }
                                        stTemp << psttn ;
                                        //etThread.strokeF( tinBaseP , T("entry.postName: \"")+T(entry.postName)+T("\"\r\n") ) ;
                                        etThread.strMakeF( tinBaseP , LF , psttn , T(entry.postName) ) ; ___( psttn ) ;
                                        ZE( strokeS* , psttn ) ;
                                        poolOldEntryS& entry = *(poolOldEntryS*)&memorySpace.stPool.downF( tinBaseP , hDown ) ;
                                    {
                                    do
                                    handleC hDown( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                {
                                if( memorySpace.stPool )
                                memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
            
                                stackC stTemp( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
                            {
                            stackC stName( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;

                            memorySpaceS& memorySpace = *(memorySpaceS*)&(countT&)swMemorySpaceP ;
                            sOut << cLeverIdMemoryP ;
                            cLeverIdMemoryP = swMemorySpaceP.leverF( tinBaseP , idfm ) ;
                        {
                        for( countT idfm = 1 ; idfm <= cFlavorsMemory ; idfm ++ )
                        sOut << cFlavorsMemory ;
                        countT cFlavorsMemory = swMemorySpaceP.cFlavorsF( tinBaseP ) ;
                        swMemorySpaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                        sOut << (countT)ifcIDrEPLYmONITOR_POOLoLDnAMES ;
                    {
                    case ifcIDcMDmONITOR_POOLoLDnAMES : //U::REPLACE THIS WITH ORTHOGONAL FUNCTIONALITY (REPLY WITH POOLoLD ADDRESS; FORCE CLIENT TO REQUEST IMAGES AND TO DO ITS OWN INSPECTION)
                    }
                        break ;

                        swMemorySpaceP.ungrabF( tinBaseP ) ;
                        }
                            memorySpace.grab.ungrabF( tinBaseP ) ;
                            }
                                sOut << (countT)memorySpace.swTallySay ;
                                sOut << memorySpace.cLeverSay ;
                                memorySpace.cLeverSay = memorySpace.swTallySay.leverF( tinBaseP , idf ) ;
                            {
                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                            sOut << cFlavors ;
                            countT cFlavors = memorySpace.swTallySay.cFlavorsF( tinBaseP ) ;
                            memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                            memorySpaceS& memorySpace = *(memorySpaceS*)&(countT&)swMemorySpaceP ;
                            sOut << cLeverIdMemoryP ;
                            cLeverIdMemoryP = swMemorySpaceP.leverF( tinBaseP , idfm ) ;
                        {
                        for( countT idfm = 1 ; idfm <= cFlavorsMemory ; idfm ++ )
                        sOut << cFlavorsMemory ;
                        countT cFlavorsMemory = swMemorySpaceP.cFlavorsF( tinBaseP ) ;
                        swMemorySpaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        sOut << (countT)ifcIDrEPLYmONITOR_SAYtALLIES ;
                    {
                    case ifcIDcMDmONITOR_SAYtALLIES :
                    }
                        break ;

                        swMemorySpaceP.ungrabF( tinBaseP ) ;
                        }
                            memorySpace.grab.ungrabF( tinBaseP ) ;
                            }
                                }
                                    while( ~hWalk ) ;
                                    }
                                        sOut << (countT)entry.ip ;
                                        sOut << (countT)entry.bIda ;
                                        sOut << (countT)entry.osPid ;
                                        tinEntryS& entry = *(tinEntryS*)&memorySpace.swsTin.downF( tinBaseP , hWalk ) ;
                                    {
                                    do
                                    handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
                                {
                                if( cPlates )
                                sOut << cPlates ;
                                countT cPlates = memorySpace.swsTin ;
                                memorySpace.pczLeverAdam = (countT*)memorySpace.swsTin.leverF( tinBaseP , idf ) ;
                            {
                            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
                            sOut << cFlavors ; //U::CLIENT CODE IS OBSOLETE BECAUSE IT DOESNT KNOW ABOUT cFlavors AND THAT MULTIPLE FLAVORS FOLLOW
                            countT cFlavors = memorySpace.swsTin.cFlavorsF( tinBaseP ) ;
                            memorySpace.grab.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;

                            memorySpaceS& memorySpace = *(memorySpaceS*)&(countT&)swMemorySpaceP ;
                            sOut << cLeverIdMemoryP ;
                            cLeverIdMemoryP = swMemorySpaceP.leverF( tinBaseP , idfm ) ;
                        {
                        for( countT idfm = 1 ; idfm <= cFlavorsMemory ; idfm ++ )
                        sOut << cFlavorsMemory ;
                        countT cFlavorsMemory = swMemorySpaceP.cFlavorsF( tinBaseP ) ;
                        swMemorySpaceP.grabF( tinBaseP , TAG( TAGiDnULL ) ) ;
                        sOut << (countT)ifcIDrEPLYmONITOR_tinFullS ;
                    {
                    case ifcIDcMDmONITOR_tinFullS :
                    }
                        break ;

                        ((tinFullS&)tinBaseP).pEtScratch->delF( tinBaseP , pbCopy ) ;
                        if( bOk ) sOut.shiftLeftF( tinBaseP , ifcIDtYPEsOULiTEM_byteTptr , pbCopy , cbAt ) ;
                        sOut << bOk ;
                        sOut << (countT)ifcIDrEPLYmONITOR_IMAGE ;

                        if( pbCopy ) thirdC::dosReadProcessMemoryIF( tinBaseP , pbCopy , cbAt , bOk , pvAt , osPid ) ;
                        ((tinFullS&)tinBaseP).pEtScratch->newF( tinBaseP , LF , pbCopy , cbAt ) ; ___( pbCopy ) ;
                        ZE( boolT , bOk ) ;
                        ZE( byteT* , pbCopy ) ;

                        sIn >> cbAt ;
                        ZE( countT , cbAt ) ;
                        sIn >> *(countT*)&pvAt ;
                        ZE( voidT* , pvAt ) ;
                        sIn >> osPid ;
                        ZE( countT , osPid ) ;
                    {
                    case ifcIDcMDmONITOR_IMAGE :
                {
                switch( idCmd )
                sIn >> idCmd ;
                ZE( countT , idCmd ) ;
            {
            else
            if( POOP ) { POOPR DEL( psoP ) ; }
    
            psoP->readF( tinBaseP , sIn ) ;
        {
        while( !POOP && !etThread && !ether && psoP )
        soulC sOut( tinBaseP , TAG( TAGiDnULL ) ) ;
        soulC sIn(  tinBaseP , TAG( TAGiDnULL ) ) ;
    
        psoP->etherF( tinBaseP , *((tinFullS&)tinBaseP).pEtScratch ) ;
        SCOOPS
    {
    IFsCRATCH

    ((tinFullS&)tinBaseP).c4Tell.c1 = cLeverIdMemoryP ;

    switchC& swMemorySpaceP  = *(switchC*)pTaskP->c3 ;
    countT&  cLeverIdMemoryP =  *(countT*)pTaskP->c2 ;
    socketC* psoP            =  (socketC*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
TELL( "setting up" )
TASK( tmcMonitorServerF ) //REN tmServerF

//20230315@1040: ADDED bChatterP AND tmChatterF SO CAN ENABLE THE GENERATION OF MINUTE REPORTS BY CREATING A SEMAPPHORE FILE
//20230306@0731: DISABLED TO REDUCE BATTERY AND SSD USAGE
//20230306@0731: ENABLED TO GLASS PRODUCTION
//20230212@1503: DISABLED TO REDUCE BATTERY AND SSD USAGE (U::ENHANCE TO USE A SEMAPHORE FILE TO REQUEST REPORTS)
//20221029@1834: ENABLED REPORTING FOR PRODUCTION
//20191006@1847: ENABLED FOR TESTING AND DEBUGGING
//U:: IT IS BEING UNCOMMENTED ONLY TO INVESTIGATE WHETHER THIS CODE IS THE CULPRIT FOR LONG QUIT TIMES
//U:: IN PRODUCTION, THE IFDEF SHOULD BE COMMENTED OUT SO THAT THE CODE IS TESTED BY PRODUCTION
//U:: 20190129: USING THE BATON MIGHT ALSO IMPACT QUIT QUALITY SO AT THIS TIME THE IFDEF IS BEING UNCOMMENTED
//U::WORKAROUND: THE USE OF THE BATON IN THE NEXT LINE REQUIRES REGRESSION DEBUGGING.  THE GOAL IS TO REDUCE ADDRESS SPACE FOOTPRINT TO HOPEVULLY ELIMMINATE THE ADDRESS SPACE EXHAUSTION BLAMMO ON FACTORY3
//CHATTER (MINUTE REPORTS)

#include postADAMhEADER

/*1*//*ifcIDaDAM_2GLASS2 2*//*1*/

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
