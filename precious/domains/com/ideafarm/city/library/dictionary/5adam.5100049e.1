
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    }
        }
            }
                etThread.winSetTitleF( tinBaseP , TF1(state.idMe)+tb+TF1(++state.cThreads)+tb+TF1(cThreads) ) ;
                cAll ++ ;
                cThreads ++ ;
            {
            if( !etThread )
            etThread.osThreadF( tinBaseP , countTC() , tmNullF ) ;
        {
        else
        if( cThreads > 0x10 ) ether.osSleepF( tinBaseP , TOCK ) ;
    {
    while( !ether && !etThread )
    ZE( countT , cAll ) ;
    TN( tb , " " ) ;

    if( !( F(napDebug.flagsSharedMemory) & flOPENsHAREDmEMORYrESULT_ALREADYeXISTED ) ) napDebug.formattingIsDoneF( tinBaseP ) ;
    napkinC napDebug( tinBaseP , LF , (byteT*)bits , "2a40104/1" , 0 , 1 ) ;
    bitsC bits( tinBaseP , CbITSlIFI , 0 , 1 ) ;
    //boxC boxDebug( tinBaseP , etThread , T("///ideafarm/ephemeral/domains/com/ideafarm/debug/")+TF1(DDNUMB)+T("/1") ) ; //U::CONJ: WILL LOCK UP DURING CT

    //U::{ countT idAdam = DDNUMB ; etThread.ifcHireF( tinBaseP , T("tool.gorilla.monitor.1.cell.generations") , idAdam , 0 , flHIRE_DISPLAYaUTO , nicNameC() ) ; }
    stateS state( tinBaseP , etThread ) ;
{

TODO

DONE( tmNullF )
cThreads -- ;
}
    etThread.osSleepF( tinBaseP , TOCK ) ;
    if( !( F(napDebug.flagsSharedMemory) & flOPENsHAREDmEMORYrESULT_ALREADYeXISTED ) ) napDebug.formattingIsDoneF( tinBaseP ) ;
    napkinC napDebug( tinBaseP , LF , (byteT*)bits , "2a40104/1" , 0 , 1 ) ;
    bitsC bits( tinBaseP , CbITSlIFI , 0 , 1 ) ;
    //boxC boxDebug( tinBaseP , etThread , T("///ideafarm/ephemeral/domains/com/ideafarm/debug/")+TF1(DDNUMB)+T("/2") ) ; //U::CONJ: WILL LOCK UP DURING CT
{
TASK( tmNullF )

countT cThreads ;

}
{                                                                                                                                                       \
stateC( tinBaseP , etherP , sizeof *this , 0 , translateStateF )                                                                                            \
stateS::stateS( tin0S& tinBaseP , etherC& etherP ) :                                                                                                         \
                                                                                                                                                            \
TRANSLATEsTATE_END                                                                                                                                      \
    state.idMe ++ ;                                                                                                                                     \
TRANSLATEsTATE_MIDDLE                                                                                                                                   \
    case 1 : { state.idMe = stateOther.idMe ; state.cThreads = stateOther.cThreads ; }                                                                                           \
TRANSLATEsTATE_BEGIN( stateS , 1 )                                                                                                                      \
                                                                                                                                                            \
;                                                                                                                                                       \
}                                                                                                                                                       \
    stateS( tin0S& tinBaseP , etherC& etherP ) ;                                                                                                             \

    countT cThreads ;                                                                                                                                                            \
    countT idMe ;                                                                                                                                       \
    countT idVersion ;                                                                                                                                  \
{                                                                                                                                                       \
struct stateS : public stateC                                                                                                                           \

/*1*/WAKEhIDE( "tool.gorilla.monitor.1.cell.generations" )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

