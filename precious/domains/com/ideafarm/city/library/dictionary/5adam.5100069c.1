
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;

etThread.traceF( tinBaseP , T("[csttMaxOld,csttMaxNew]: ")+TF2(csttMaxOld,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+TF2(csttMaxNew,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;

etThread.diskWalkF( tinBaseP , cDirs , cFiles , T("///a/ideafarm.home.101/IdeaFarm (tm)/2.1. Drop Files Here To Archive Them/") , bQuit , diskWalkRenameCBF , pcArg ) ;
ZE( countT , bQuit ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;

countT pcArg[] = { (countT)&tTimeLath , (countT)&cDone , (countT)&idLath , (countT)&csttMaxOld , (countT)&csttMaxNew , (countT)&tFormatOld , (countT)&tFormatNew } ;
TN( tFormatNew , "!ideafarm.5." ) ;
TN( tFormatOld , "!ideafarm.4." ) ;
ZE( countT , csttMaxNew ) ;
ZE( countT , csttMaxOld ) ;
ZE( countT , idLath ) ;
ZE( countT , cDone ) ;
TN( tTimeLath , "" ) ;

TODO

}
    return 0 ;

    ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttShort3 ) ;
    ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttShort2 ) ;
    ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttShort1 ) ;
    ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttShort ) ;
    ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttPath ) ;

    }
        }
            ((tinNormalS&)tinBaseP).pEther->delF( tinBaseP , psttNew ) ;

            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttNew ) ;

            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttShort3 ) ;
            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttShort2 ) ;
            //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttShort1 ) ;

            else                                 ((tinNormalS&)tinBaseP).pEther->diskMoveFileOrDirF( tinBaseP , psttNew , tNameOld) ;
            if( psttNew->idAdam > IPDOSmAXpATH ) etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("remove ")+TF2(psttNew->idAdam-IPDOSmAXpATH,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" from: ")+T(psttShort) ) ;

            if( csttMaxNewP < psttNew->idAdam ) csttMaxNewP = psttNew->idAdam ;

            ((tinNormalS&)tinBaseP).pEther->strFuseF( tinBaseP , psttNew , psttShort3 ) ;
            ((tinNormalS&)tinBaseP).pEther->strFuseF( tinBaseP , psttNew , TF3(++idLathP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES|flFORMAT_FOREIGN|flFORMAT_FILLzE,2)+T(".") ) ;
            ((tinNormalS&)tinBaseP).pEther->strFuseF( tinBaseP , psttNew , psttShort2 ) ;
            ((tinNormalS&)tinBaseP).pEther->strFuseF( tinBaseP , psttNew , tFormatNewP ) ;
            ((tinNormalS&)tinBaseP).pEther->strFuseF( tinBaseP , psttNew , psttPath ) ;
            ((tinNormalS&)tinBaseP).pEther->strMakeF( tinBaseP , LF , psttNew , 0 , TUCK << 2 ) ; ___( psttNew ) ;
            ZE( strokeS* , psttNew ) ;

            }
                idLathP    = 0 ;
                tTimeLathP = T(psttShort2) ;
            {
            if( ((tinNormalS&)tinBaseP).pEther->strCompareF( tinBaseP , tTimeLathP , psttShort2 ) )
        {
        )
            psttShort2[ CSpREFIX - 1 + 0xe ].idAdam == '.'
            &&
            psttShort2[ CSpREFIX - 1 + 9   ].idAdam == '@'
            &&
            !((tinNormalS&)tinBaseP).pEther->strCompareF( tinBaseP , tFormatOldP , psttShort1 )
        (
        if

        ((tinNormalS&)tinBaseP).pEther->strSubstringF( tinBaseP , psttShort3 , idf , idl , psttShort ) ; ___( psttShort3 ) ;
        idl = 0 ;
        ((tinNormalS&)tinBaseP).pEther->strSubstringF( tinBaseP , psttShort2 , idf , idl , psttShort ) ; ___( psttShort2 ) ;
        idl = 0x1a ;
        ((tinNormalS&)tinBaseP).pEther->strSubstringF( tinBaseP , psttShort1 , idf , idl , psttShort ) ; ___( psttShort1 ) ;
        countT idl = 0xc ;
        countT idf = 1 ;
    {
    if( psttShort->idAdam >= 0x1b )
    ZE( strokeS* , psttShort3 ) ;
    ZE( strokeS* , psttShort2 ) ;
    ZE( strokeS* , psttShort1 ) ;

    // !ideafarm.4.19991228@0000.!.note.ttt
    // !ideafarm.4.19991228@0000.000b3751.c44d5e6f.2f9afda7.scanner.!.19991228@0000.notarized.declaration.of.legal.name.change.0600x0761.jpg
    // |----------||------------||-->
    // 123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0
    // 0              1               2               3               4

    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttShort ) ;
    //etherC::etRockIF( tinBaseP ).traceF( tinBaseP , psttPath ) ;

    if( csttMaxOldP < psttShort->idAdam ) csttMaxOldP = psttShort->idAdam ;

    ___( psttShort ) ;
    ___( psttPath ) ;
    ((tinNormalS&)tinBaseP).pEther->strBisectF( tinBaseP , psttPath , psttShort , tNameOld , 0 , - 1 , flSTRbISECT_APPENDdELIMITER ) ;
    ZE( strokeS* , psttShort ) ;
    ZE( strokeS* , psttPath ) ;

    TN( tNameOld , ifFileNameC( tinBaseP , *((tinNormalS&)tinBaseP).pEther , postNameP ) ) ;

    if( !( cDoneP % TUCK ) ) etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("[cDoneP]: ")+TF2(cDoneP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
    cDoneP ++ ;

    textC&  tFormatNewP =  *(textC*)pcArgP[ 6 ] ;
    textC&  tFormatOldP =  *(textC*)pcArgP[ 5 ] ;
    countT& csttMaxNewP = *(countT*)pcArgP[ 4 ] ; 
    countT& csttMaxOldP = *(countT*)pcArgP[ 3 ] ; 
    countT& idLathP     = *(countT*)pcArgP[ 2 ] ; 
    countT& cDoneP      = *(countT*)pcArgP[ 1 ] ; 
    textC&  tTimeLathP =   *(textC*)pcArgP[ 0 ] ;
{
boolT diskWalkRenameCBF( tinBaseS& tinBaseP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

/*1*/WAKEsHOWtEXT( "tool.rename.archive.format.4.to.5" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

