
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


#endif

    }
        ((tinFullS&)tinBaseP).cYield = 0 ;
        thirdC::dosPriorityIF( tinBaseP , idDesireSave ) ;
        }
            }
                ++ s ; thirdC::osThreadYieldIF( tinBaseP , TAG( TAGiDnULL ) ) ;
            {
            while( cYield -- )
            sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
        {
        cYield = cYield % cMaxP + 1 ;
        countT cYield = ((tinFullS&)tinBaseP).ranUni % TUCK ;
        ((tinFullS&)tinBaseP).cYield = 0 ;
        thirdC::dosPriorityIF( tinBaseP , ifcTHREADpRIORITY_SPINLOCK ) ;
        const countT idDesireSave = thirdC::dosPriorityIF( tinBaseP ) ;
        if( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) { BLAMMOiD( 0x12121212 ) ; }
    {
    /*1*/voidT ranYieldF( tinBaseS& tinBaseP , countT cMaxP )/*1*/

#if defined( NEVERdEFINED )

/**/
*/
the caller must reset ((tinFullS&)tinBaseP).cYield outside of whatever loop, if any, i am called from
i will yield the cpu a random number [1,cMaxP] of times
\<A HREF=\"5.0c0002a.1.0.html\"\>definition\</A\>
\<A HREF=\"6.$ranYieldF.0.html\"\>instances\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

