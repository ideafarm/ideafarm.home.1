
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


DONE( tmRiverServeF )
}
    cClients -- ;
    DEL( pso ) ;

    TELL( "tmRiverServeF: cleaning up" )
    etThread = 0 ;
    }
        etThread.delF( tin0P , pbMsg ) ;
        if( !bClose ) river.writeMsgF( tin0P , pbMsg , cbMsg ) ;
        TELL( "writing the message just received to the river" )
        bClose = !etThread && cbMsg == tDry.csF( tin0P ) && !etThread.strCompareF( tin0P , T(pbMsg) , tDry ) ;
        pso->readMsgOkF( tin0P ) ;
        TELL( "acknowledging receipt of a message" )
        countT cbMsg = pso->readMsgF( tin0P , pbMsg ) ;
        TELL( "waiting for a message to arrive on a socket" )
        ZE( byteT* , pbMsg ) ;
    {
    while( !etThread && !bClose && !bDestroy )
    ZE( boolT , bClose ) ;
    TN( tDry , "!amDry" ) ;

    cClients ++ ;
    pso->etherF( tin0P , etThread ) ;
    countT&  cClients = *(countT*)pTaskP->c4 ;
    riverC&  river    = *(riverC*)pTaskP->c3 ;
    socketC* pso      = (socketC*)pTaskP->c2 ;
    boolT&   bDestroy = *(boolT*) pTaskP->c1 ;
    TELL( "setting up" )
{
if( pTaskP && pTaskP->c1 && pTaskP->c2 && pTaskP->c3 )
/*1*/TASK( tmRiverServeF )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

