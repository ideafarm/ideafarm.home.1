
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

}
    TELL( "destructing the dictionary" ) ;
    }
        //((thirdC&)etThread).logF( tin0P , T("deleting the terms from the dictionary\r\n") ) ;
        etThread.loafIF( tin0P ) ;
        TELL( "waiting to be fired" ) ;

        HIRE( T("city.dictionary.server") , 0x401048b , 0x1000000 , 0x401048b , 0x1000000 )
        TELL( "hiring b84" )

        etThread.etherCryF( tin0P ) ;
        //((thirdC&)etThread).logF( tin0P , T("the dictionary is ready for use by all processes on this host\r\n") ) ;
    {
    if( !ether && !etThread )

    }
        -- dict ;
        TELL( "marking dict as ready" ) ;
        etThread.delF( tin0P , pstt1m ) ;
        }
            etThread.delF( tin0P , psttw ) ;

            }
                }
                    if( !ids ) { PUSE( tin0P , *(byteT**)&psttpw ) ; }
                    dict.sinkF( tin0P , ids , psttpw , flSTACKsINK_UNIQUE ) ;
                    ZE( countT , ids ) ;
                {
                if( psttpw )
                etThread.memCopyF( tin0P , (byteT*)psttpw , (byteT*)psttw , cbw ) ;

                }
                    db.cbUsedReally = cbw ;
                    db.idType       = ifcIDtYPEdROPnOTE_strokeS ;
                    //DROPnOTErEF( psttpw ) ;
                {
                if( psttpw )
                strokeS* psttpw = (strokeS*)PUSE.poolNewF( tin0P , LF , cbw ) ; ___( psttpw ) ;
                countT cbw = sizeof( strokeS ) * ( CSpREFIX + psttw->idAdam ) ;
            {
            if( psttw )

            //((thirdC&)etThread).logF( tin0P , TF3(cTries-(++idTry),0,9)+T("\"")+T(psttw)+T("\"\r\n") ) ;

            etThread.strWordF( tin0P , psttw , psttc1 , sttq , sttDot , - 1 ) ; ___( psttw ) ;
            strokeS sttq( (countT)0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , psttw ) ;

            if( ether || etThread ) break ;
        {
        FORsTRINGSiN1( pstt1m )
        strokeS sttDot( '.' ) ;
        ZE( countT , idTry ) ;
        TELL( "handling each file" ) ;

        countT cTries = etThread.boxMenuF( tin0P , soul1m , T("///ideafarm/precious/domains/com/ideafarm/city/library/dictionary/3func.*") ) ; ___( pstt1m ) ;
        ZE( strokeS* , pstt1m ) ;
        TELL( "getting menu of func.* files" ) ;
    {
    dictionary1C dict( tin0P , etThread ) ;
    TELL( "constructing dict" ) ;

    etThread.boxPutF( tin0P , T("///ideafarm/ephemeral/0e30104/wait") , "if this file exists when 0e30104 starts, 0e30104 will wait until this file no longer exists" ) ;
    TELL( "writing wait file" ) ;

    //((thirdC&)etThread).logF( tin0P , T("IdeaFarm " "(tm) City Dictionary\r\ni load a dictionary with terms\r\n\r\n") ) ;

    stateS state( tin0P , etThread ) ;
{

TODO

STATE0

/*1*/WAKEhIDE( "city.dictionary.server" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

