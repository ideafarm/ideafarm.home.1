
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

THREADmODE2rESTORE
}
    ether.loafIF( tin0P ) ;

    }
        //}
        //    ++ s ; ether.osSleepF( tin0P , TOCK * 0x10 ) ;
        //    sleepC s( tin0P , TAG( TAGiDnULL ) ) ;
        //{

        etThread.delF( tin0P , psttd ) ;
        etThread.strokeF( tin0P , psttd ) ;
        strFaceF( tin0P , etThread , psttd , bs ) ; ___( psttd ) ;
        ZE( strokeS* , psttd ) ;

        tree.nearbyF( tin0P , bs ) ;
        branchesOldS bs ;
    {
    //for( ((tin9S&)tin0P).lever ForAdamToUse = 1 ; !ether && ((tin9S&)tin0P).lever ForAdamToUse <= 2 ; ((tin9S&)tin0P).lever ForAdamToUse ++ )
    
    tree.downF( tin0P ) ;
    
    tree.leftF( tin0P ) ;
    tree.upF( tin0P ) ;
    ~tree = tw222 ;
    
    tree.newKidF( tin0P , T("223C") ) ;
    tree.newKidF( tin0P , T("223B") ) ;
    tree.newKidF( tin0P , T("223A") ) ;
    ~tree = tw223 ;
    
    tree.newKidF( tin0P , T("222C") ) ;
    tree.newKidF( tin0P , T("222B") ) ;
    tree.newKidF( tin0P , T("222A") ) ;
    ~tree = tw222 ;
    
    tree.newKidF( tin0P , T("221C") ) ;
    tree.newKidF( tin0P , T("221B") ) ;
    tree.newKidF( tin0P , T("221A") ) ;
    ~tree = tw221 ;
    
    tree.leftF( tin0P ) ;
    tree.upF( tin0P ) ;
    ~tree = tw22 ;
    
    tree.newKidF( tin0P , T("23C") ) ;
    tree.newKidF( tin0P , T("23B") ) ;
    tree.newKidF( tin0P , T("23A") ) ;
    ~tree = tw23 ;
    
    tree.newKidF( tin0P , T("22C") ) ;
    tree.newKidF( tin0P , T("22B") ) ;
    tree.newKidF( tin0P , T("22A") ) ;
    ~tree = tw22 ;
    
    tree.newKidF( tin0P , T("21C") ) ;
    tree.newKidF( tin0P , T("21B") ) ;
    tree.newKidF( tin0P , T("21A") ) ;
    ~tree = tw21 ;
    
    tree.leftF( tin0P ) ;
    tree.upF( tin0P ) ;
    tree.kissF( tin0P ) ;
    ~tree = tw2 ;
    
    tree.newKidF( tin0P , T("3C") ) ;
    tree.newKidF( tin0P , T("3B") ) ;
    tree.newKidF( tin0P , T("3A") ) ;
    ~tree = tw3 ;
    
    tree.newKidF( tin0P , T("2C") ) ;
    tree.newKidF( tin0P , T("2B") ) ;
    tree.newKidF( tin0P , T("2A") ) ;
    ~tree = tw2 ;
    
    tree.newKidF( tin0P , T("1C") ) ;
    tree.newKidF( tin0P , T("1B") ) ;
    tree.newKidF( tin0P , T("1A") ) ;
    ~tree = tw1 ;

    TN( tw223 , "223" ) ;
    TN( tw222 , "222" ) ;
    TN( tw221 , "221" ) ;
    TN( tw23 , "23" ) ;
    TN( tw22 , "22" ) ;
    TN( tw21 , "21" ) ;
    TN( tw3 , "3" ) ;
    TN( tw2 , "2" ) ;
    TN( tw1 , "1" ) ;

    pTree = &tree ;
    treeOldC tree( tin0P , TAG( TAGiDnULL ) ) ;
{
THREADmODE2oN( flTHREADmODE2_ALLOWsTOPwHILEgRABBING )
//etThread.strokeF( tin0P , T("")+OLDmOVEtO(IDcOLiNIT(*pw),IDrOWiNIT(*pw)) ) ;

{ sadamCBFT pf = scbF ; } //VERIFY TYPE

TODO

}
    WINDOWrEFERENCEeND( pw )

    etherP.strFuseF( tin0P , psttP , T("")+//SCBA(scbF) ) ;

    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnKids      , bP.cDnKids      , bP.ppsttzUpKids      , bP.cUpKids      , rcr6 , rcr7 , rcr1 , rcr3 , rcr5 , rcr7 , 1 ) ;
    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnWives     , bP.cDnWives     , bP.ppsttzUpWives     , bP.cUpWives     , rcr5 , rcr6 , rcr1 , rcr3 , rcr5 , rcr7 , 0 ) ;
    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnBros      , bP.cDnBros      , bP.ppsttzUpBros      , bP.cUpBros      , rcr4 , rcr5 , rcr1 , rcr3 , rcr5 , rcr7 , 1 ) ;
    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnMoms      , bP.cDnMoms      , bP.ppsttzUpMoms      , bP.cUpMoms      , rcr3 , rcr4 , rcr1 , rcr3 , rcr5 , rcr7 , 0 ) ;
    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnDads      , bP.cDnDads      , bP.ppsttzUpDads      , bP.cUpDads      , rcr2 , rcr3 , rcr1 , rcr3 , rcr5 , rcr7 , 1 ) ;
    woLevelF( tin0P , etherP , psttP , bP.ppsttzDnGrandMoms , bP.cDnGrandMoms , bP.ppsttzUpGrandMoms , bP.cUpGrandMoms , rcr1 , rcr2 , rcr1 , rcr3 , rcr5 , rcr7 , 0 ) ;
        
    ) ; ___( psttP ) ;

        0x2000 //U::CALCULATE THE SIZE NEEDED FOR bP
        ,

        S2(0,scOld_OLDCMDpUSHlEFTwATER)
        S2(0,scOld_OLDCMDpUSHrIGHTwATER)                          +
        S2(0,scOld_OLDCMDpUSHlOWwATER)                            +
        S2(0,scOld_PUSHhIGHwATER)                           +

        // //OLDlINEtOrATIO(rcr7,rcr2) +
        // //OLDmOVEtOrATIO(rcr1,rcr2) +
        // 
        // //OLDlINEtOrATIO(rcr7,rcr6) +
        // //OLDmOVEtOrATIO(rcr1,rcr6) +
        // 
        // //OLDlINEtOrATIO(rcr7,rcr5) +
        // //OLDmOVEtOrATIO(rcr1,rcr5) +
        // 
        // //OLDlINEtOrATIO(rcr7,rcr4) +
        // //OLDmOVEtOrATIO(rcr1,rcr4) +
        // 
        // //OLDlINEtOrATIO(rcr7,rcr3) +
        // //OLDmOVEtOrATIO(rcr1,rcr3) +
        // 
        // //OLDlINEtOrATIO(rcr7,rcr2) +
        // //OLDmOVEtOrATIO(rcr1,rcr2) +
        // 
        // //OLDlINEtOrATIO(rcr5,rcr7) +
        // //OLDmOVEtOrATIO(rcr5,rcr1) +
        // 
        // //OLDlINEtOrATIO(rcr3,rcr7) +
        // //OLDmOVEtOrATIO(rcr3,rcr1) +
        // 
        // //OLDlINEtOrATIO(rcr1,rcr1) +
        // //OLDlINEtOrATIO(rcr1,rcr7) +
        // //OLDlINEtOrATIO(rcr7,rcr7) +
        // //OLDlINEtOrATIO(rcr7,rcr1) +
        // //OLDmOVEtOrATIO(rcr1,rcr1) +
        //THIS STUFF DOES NOT WORK

        T("")+S2('\f',sc_cFROMcONTROL)                            +

    etherP.strMakeF( tin0P , LF , psttP , 

    count01T rcr7 = (measureT)MAXscOUNT01T ;

    count01T rcr6 = (measureT)MAXscOUNT01T * ( .6667 + .04 ) ;
    count01T rcr5 = (measureT)MAXscOUNT01T / 3 * 2 ;

    count01T rcr4 = (measureT)MAXscOUNT01T * ( .3333 + .04 ) ;
    count01T rcr3 = (measureT)MAXscOUNT01T / 3 ;

    count01T rcr2 = (measureT)MAXscOUNT01T * .04 ;
    count01T rcr1 = 0 ;

    WINDOWrEFERENCEbEGIN( tin0P , pw )
    windowOldC*& pw = thirdC::pWinRootIF() ;
{
voidT strFaceF( tin0S& tin0P , etherC& etherP , strokeS*& psttP , branchesOldS& bP )

}
    return 1 ;
    if( psttSnipP && idsP && bNoDrawP && flagsP && wP.bDoomed && stInvalidP && scratchEventP.c8scratch.c1 && scratchAdamP.c8scratch.c1 && scratchSnipAdamP.c8scratch.c1 && scratchStrokeP.c8scratch.c1 ) ;

    }
        }
            break ;
            }
                }
                    }
                        break ;
                    {
                    case ifcIDtYPEaCTION_DOWN :
                {
                switch( idAction )

                const countT& idRow    = pcNotesP[ 5 ] ;
                const countT& idCol    = pcNotesP[ 4 ] ;
                const countT& idAction = pcNotesP[ 3 ] ;
                const countT& idTool   = pcNotesP[ 2 ] ;
            {
            if( pcNotesP[ 0 ] == 1 && pcNotesP[ 1 ] == 4 )
        {
        case ifcIDtYPEsTROKEcALLbACK_MOUSE :
        }
            break ;
            }
                }
                    }
                        etherP.delF( tin0P , psttd ) ;
                        etherP.strokeF( tin0P , psttd ) ;
                        strFaceF( tin0P , etherP , psttd , bs ) ; ___( psttd ) ;
                        ZE( strokeS* , psttd ) ;

                        pTree->nearbyF( tin0P , bs ) ;
                        branchesOldS bs ;
                    {
                    if( bFreshFace )

                    }
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->outF( tin0P ) ;
                            {
                            if( pTree->outF( tin0P , 1 ) )
                        {
                        case ifcIDtYPEtOOL_PAGEuPnUM :
                        case ifcIDtYPEtOOL_PAGEuP :
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->inF( tin0P ) ;
                            {
                            if( pTree->inF( tin0P , 1 ) )
                        {
                        case ifcIDtYPEtOOL_PAGEdOWNnUM :
                        case ifcIDtYPEtOOL_PAGEdOWN :
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->downF( tin0P ) ;
                                pTree->rightF( tin0P ) ;
                                pTree->upF( tin0P ) ;
                            {
                            if( pTree->upF( tin0P , 1 ) )
                        {
                        case ifcIDtYPEtOOL_RIGHTnUM :
                        case ifcIDtYPEtOOL_RIGHT :
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->downF( tin0P ) ;
                                pTree->leftF( tin0P ) ;
                                pTree->upF( tin0P ) ;
                            {
                            if( pTree->upF( tin0P , 1 ) )
                        {
                        case ifcIDtYPEtOOL_LEFTnUM :
                        case ifcIDtYPEtOOL_LEFT :
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->downF( tin0P ) ;
                            {
                            if( pTree->downF( tin0P , 1 ) )
                        {
                        case ifcIDtYPEtOOL_DOWNnUM :
                        case ifcIDtYPEtOOL_DOWN :
                        }
                            break ;
                            }
                                bFreshFace = 1 ;
                                pTree->upF( tin0P ) ;
                            {
                            if( pTree->upF( tin0P , 1 , 1 ) )
                        {
                        case ifcIDtYPEtOOL_UPnUM :
                        case ifcIDtYPEtOOL_UP :
                        }
                            break ;
                            else                                                                                 FIREmYSELF ;
                            if( F(thirdC::third_flagsModeProcess1I_IF()) & flMODEpROCESS1_IGNOREfIREbYoPERATOR ) etherP.traceF( tin0P , T("ignored firing by operator") ) ;
                        {
                        case ifcIDtYPEtOOL_ESCAPE :
                    {
                    switch( idKey )
                    ZE( boolT , bFreshFace ) ;
                {
                if( idAction == ifcIDtYPEaCTION_DOWN )

                const countT& idAction = pcNotesP[ 3 ] ;
                const countT& idKey = pcNotesP[ 2 ] ;
            {
            if( pcNotesP[ 0 ] == 1 && pcNotesP[ 1 ] == 2 )
        {
        case ifcIDtYPEsTROKEcALLbACK_KEYBOARD :
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_DESTROY   :
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_RENDERoFF :
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_RENDERoN :
        }
            break ;
        {
        case ifcIDtYPEsTROKEcALLbACK_RENDER :
    {
    switch( idTypeCallP )

    scratchSnipP.c8scratch.c8 = idSnipP ; //U::
    measureT& mRowMax = *(measureT*)&scratchSnipP.c8scratch.c6 ;
    measureT& mColMax = *(measureT*)&scratchSnipP.c8scratch.c5 ;
    measureT& mRowMin = *(measureT*)&scratchSnipP.c8scratch.c4 ;
    measureT& mColMin = *(measureT*)&scratchSnipP.c8scratch.c3 ;
    boolT&    bRender = scratchSnipP.c8scratch.c2 ;
    boolT&    bQuit   = scratchSnipP.c8scratch.c1 ;
{
boolT scbF( tin0S& tin0P , etherC& etherP , windowOldC& wP , stackC& stInvalidP , const countT idSnipP , const strokeS* const psttSnipP , const countT idsP , const flagsT flagsP , const boolT bNoDrawP , const countT idTypeCallP , const countT idEventP , const countT* const pcNotesP , scbScratchEventS& scratchEventP , scbScratchAdamS& scratchAdamP , scbScratchSnipS& scratchSnipP , scbScratchSnipAdamS& scratchSnipAdamP , scbScratchStrokeS& scratchStrokeP )

voidT strFaceF( tin0S& tin0P , etherC& etherP , strokeS*& psttP , branchesOldS& bP ) ;

treeOldC* pTree ;

}
    }
        ) ;

            S2(0,scOld_mmCLIPiD)
            T(ppsttzUpP[1])                                                                             +
            OLDmOVE( bMaleP ? CRiNITm : CRiNITf , bMaleP ? CRiNITm : CRiNITf )                             +
            //OLDmOVEtOrATIO(c3P,r1P)                                                                        +
    
            OLDcLIPtOpOP                                                                                   +
            OLDmOVE( -1 , -1 )                                                                             +
            //OLDmOVEtOrATIO(c4P,r2P)                                                                        +
    
            S2(0,scOld_PUSHoVERRIDEcOLrOW)                                            +
            OLDmOVE( 1 , 1 )                                                                               +
            //OLDmOVEtOrATIO(c3P,r1P)                                                                        +
            T("")                                                                                       +

        if( cUpP ) etherP.strFuseF( tin0P , psttP ,
    {
    if( ppsttzUpP )

    }
        ) ;

            S2(0,scOld_mmCLIPiD)
            T(ppsttzDnP[1])                                                                             +
            OLDmOVE( bMaleP ? CRiNITm : CRiNITf , bMaleP ? CRiNITm : CRiNITf )                             +
            //OLDmOVEtOrATIO(c1P,r1P)                                                                        +
    
            OLDcLIPtOpOP                                                                                   +
            OLDmOVE( -1 , -1 )                                                                             +
            //OLDmOVEtOrATIO(c2P,r2P)                                                                        +
    
            S2(0,scOld_PUSHoVERRIDEcOLrOW)                                            +
            OLDmOVE( 1 , 1 )                                                                               +
            //OLDmOVEtOrATIO(c1P,r1P)                                                                        +
            T("")                                                                                       +

        if( cDnP ) etherP.strFuseF( tin0P , psttP ,

        ) ;

            S2(0,scOld_mmCLIPiD)
            T(ppsttzDnP[0])                                                                             +
            OLDmOVE( bMaleP ? CRiNITm : CRiNITf , bMaleP ? CRiNITm : CRiNITf )                             +
            //OLDmOVEtOrATIO(c2P,r1P)                                                                        +
    
            OLDcLIPtOpOP                                                                                   +
            OLDmOVE( -1 , -1 )                                                                             +
            //OLDmOVEtOrATIO(c3P,r2P)                                                                        +
    
            S2(0,scOld_PUSHoVERRIDEcOLrOW)                                            +
            OLDmOVE( 1 , 1 )                                                                               +
            //OLDmOVEtOrATIO(c2P,r1P)                                                                        +
            T("")                                                                                       +

        etherP.strFuseF( tin0P , psttP ,
    {
    if( ppsttzDnP )
{
voidT woLevelF( tin0S& tin0P , etherC& etherP , strokeS*& psttP , const strokeS** const ppsttzDnP , const countT cDnP , const strokeS** const ppsttzUpP , const countT cUpP , const count01T r1P , const count01T r2P , const count01T c1P , const count01T c2P , const count01T c3P , const count01T c4P , const boolT bMaleP )

#define CRiNITf (0x2)
#define CRiNITm (0x4)

/*1*/WAKEhIDE( "doodle.hollywood.squares" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

