
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//

;
}
    }
        bGrabToPull -- ;

        }
            thirdC::c_memcpyIF( (byteT*)pP , pbCircle + offbi , cbElement ) ;
            countT offbi      = ( cOutBefore % cElements ) * cbElement ;
            countT cOutBefore = incv02AM( cOut ) ;
        {
        if( !bQuit )

        }
            ++ s ; thirdC::dosSleepWinkIF( tin0P , 0 ) ;

            if( cBacklog ) break ;
            countT cBacklog = *this ;
        {
        while( !bQuit )

        while( setIfZeAM( bGrabToPull , 1 ) ) { ++ s ; thirdC::dosSleepWinkIF( tin0P , 0 ) ; }
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        TINSL
    {
    inline voidT operator >>( voidT* pP )

    }
        bGrabToPush -- ;

        }
            thirdC::c_memcpyIF( pbCircle + offbo , (const byteT*)pP , cbElement ) ;
            countT offbo     = ( cInBefore % cElements ) * cbElement ;
            countT cInBefore = incv02AM( cIn ) ;
        {
        if( !bQuit )

        }
            ++ s ; thirdC::dosSleepWinkIF( tin0P , 0 ) ;

            if( cBacklog < cElements ) break ;
            countT cBacklog = *this ;
        {
        while( !bQuit )

        while( setIfZeAM( bGrabToPush , 1 ) ) { ++ s ; thirdC::dosSleepWinkIF( tin0P , 0 ) ; }
        sleepC s( tin0P , TAG( TAGiDnULL ) ) ;

        TINSL
    {
    inline voidT operator <<( voidT* pP )

    inline operator countT( voidT ) const { return cIn - cOut ; }

    }
        ether.newF( tin0P , LF , pbCircle , cbCircle ) ; ___( pbCircle ) ;
    {
    bGrabToPull( 0 )
    bGrabToPush( 0 ) ,
    cOut( 0 ) ,
    cIn( 0 ) ,
    pbCircle( 0 ) ,
    cbCircle( cbElementP * cElementsP ) ,
    cElements( cElementsP ) ,
    cbElement( cbElementP ) ,
    bQuit( bQuitP ) ,
    ether( etherP ) ,
    inline circleC( tin0S& tin0P , etherC& etherP , const boolT& bQuitP , const countT cbElementP = sizeof( countT ) , const countT cElementsP = TUCK ) :

    }
        ether.delF( tin0P , pbCircle ) ;
        TINSL
    {
    inline ~circleC( voidT )

    public :

    countT       bGrabToPull ;
    countT       bGrabToPush ;
    countT       cOut        ;
    countT       cIn         ;

    byteT*       pbCircle    ;
    const countT cbCircle    ;
    const countT cElements   ;
    const countT cbElement   ;
    const boolT& bQuit       ;
    etherC&      ether       ;
{
/*1*/class circleC/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
