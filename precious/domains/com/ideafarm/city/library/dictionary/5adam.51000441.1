
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


//VISIBLE

REST

}                                                                                                                                                      
    }
        etThread.ifcJobF( tinBaseP , stCourses , ifcIDaDAMoLD_CENTRALbANKtELLER , sOrder , stOrders , TF1(DDNUMB)+T("/gorilla.central.bank.teller/!changeAccountBalance") ) ;
        stOrders << new( 0 , tinBaseP , LF ) soulC( tinBaseP , TAG( TAGiDnULL ) ) ;
        stackC stOrders(  tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;
        stackC stCourses( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_FIFO | flSTACKc_GIVEsIGNnEWpLATE , ifcSTACKtYPE_PTR_soulC ) ;

        sOrder << pstt1_accountHolderNotes ;
        sOrder << pstt1_ifcDualTransactionNotes ;
        sOrder << (countT)unixDelta2 ;
        sOrder << unixDelta1 ;
        sOrder << (strokeS*)tEmail ;
        sOrder << (strokeS*)T("!changeAccountBalance") ;
        soulC sOrder( tinBaseP , TAG( TAGiDnULL ) , flSOUL_null , ifcIDcMDjOBoRDER_NAMED ) ;

        }
            etThread.strFuseSeparateF( tinBaseP , pstt1_accountHolderNotes      , T("<account holder's notes>")                  ) ; ___( pstt1_accountHolderNotes      ) ;
            etThread.strFuseSeparateF( tinBaseP , pstt1_ifcDualTransactionNotes , TF1(DDNUMB)+T(": gorilla stomp ")+TF1(idStomp) ) ; ___( pstt1_ifcDualTransactionNotes ) ;
            etThread.osTimeSubtractF( tinBaseP , unixDelta1 , unixDelta2 , TICK , 0 ) ;
        {
        ZE( strokeS* , pstt1_accountHolderNotes ) ;
        ZE( strokeS* , pstt1_ifcDualTransactionNotes ) ;
        ZE( sCountT , unixDelta2 ) ;
        ZE( countT , unixDelta1 ) ;
        TN( tEmail , "" ) ; tEmail = TF1(DDNUMB)+T(ifcEMAIL_MXsUFFIX "") ;
    {
    while( !ether && !etThread )
    ZE( countT , idStomp ) ;

    etThread.ifcChatF( tinBaseP , 0 , DDNUMB , jobFillCourseF , jobHearOrderF ) ;                                                                   
    stateS state( tinBaseP , etThread ) ;                                                                                                                  
{                                                                                                                                                      

TODO                                                                                                                                                   

STATE0                                                                                                                                                 

}
    if( ether && *((tinFullS&)tinBaseP).zEtScratch && cArgP && c8argP.c1 && sDataP && sNotesTextP && sNotesDataP && idChatSessionP ) ;

    }
        }
            break ;

            }
                }
                    break ;
                    etThread.delF( tinBaseP , psttJobType ) ;

                    else __1
                    }
                    {
                    if( !etThread.strCompareF( tinBaseP , psttJobType , T("!fooey") ) )

                    sOrderP >> psttJobType ; ___( psttJobType ) ;
                    ZE( strokeS* , psttJobType )
                {
                case ifcIDcMDjOBoRDER_NAMED :
                }
                    break ;

                    etThread.delF( tinBaseP , psttBody ) ;
                    etThread.delF( tinBaseP , psttFrom ) ;

                    }
                        etThread.delF( tinBaseP , postBody ) ;
                        etThread.delF( tinBaseP , psttu ) ;
                        etThread.boxPutUniqueF( tinBaseP , psttu , T("///ideafarm/ephemeral/backed.up.daily/domains/com/ideafarm/")+TF1(DDNUMB)+T("/in/ignored/in") , postBody , costBody ) ;
                        ZE( strokeS* , psttu ) ;

                        countT costBody = etThread.strMakeF( tinBaseP , LF , postBody , psttBody ) ; ___( postBody ) ;
                        ZE( osTextT* , postBody ) ;
                    {

                    sOrderP >> psttBody ; ___( psttBody ) ;
                    ZE( strokeS* , psttBody ) ;

                    __( idAdamTo - DDNUMB ) ;
                    __Z(  idAdamTo ) ;
                    sOrderP >> idAdamTo ;
                    ZE( countT , idAdamTo ) ;

                    __(  psttFrom && !psttFrom->idAdam ) ;
                    __Z( psttFrom ) ;
                    sOrderP >> psttFrom ; ___( psttFrom ) ;
                    ZE( strokeS* , psttFrom ) ;
                {
                case ifcIDcMDjOBoRDER_MAIL :
            {
            switch( idJobType )

            sOrderP >> idJobType ;
            ZE( countT , idJobType ) ;
        {
        case 1 :
    {
    switch( idCourseP )

    __( idAdamP - DDNUMB ) ;
{
voidT jobFillCourseF( tinBaseS& tinBaseP , etherC& ether , etherC& etThread , soulC& sDataP , soulC& sNotesTextP , soulC& sNotesDataP , const countT idCourseP , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

}
    if( cArgP && c8argP.c1 && sOrderP && ether && *((tinFullS&)tinBaseP).zEtScratch && idChatSessionP ) ;

    __( idAdamP - DDNUMB ) ;
{
voidT jobHearOrderF( tinBaseS& tinBaseP , etherC& ether , etherC& etThread , const countT idAdamP , const countT idChatSessionP , soulC& sOrderP , countT& cArgP , count8S& c8argP )

/*1*/WAKEhIDE( "tool.gorilla.central.bank.teller" )/*1*/
/**/
*/
\<A HREF=\"5.4440104.1.0.html\"\>definition\</A\>
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

