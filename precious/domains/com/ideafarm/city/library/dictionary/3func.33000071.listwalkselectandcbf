
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    return flLISTwALKcALLbACKrETURNcODE_DOnOTwALKmE ;

    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    }
        }
            }
                }
                    DELlIST( fieldEditParamOutC , pOut ) ;
                    listC::fieldIF( tinBaseP , pOut , hTo , pczField , _fe_pushC( record ) + _fe_modePushSinkC() + _fe_modeUniqueC() , LF ) ;
                    countT pczField[] = { LISTnAMEsYS_RECORD , 0 } ;                                                                                                                                                 \
                    ZE( fieldEditParamOutC* , pOut ) ;
        
                    listC::openIF( tinBaseP , hTo , pczTo ) ;
                    handleC hTo( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                    countT pczTo[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM4 , LISTnAMEsYS_TEMPORARY , LISTnAMEsYS_SELECTED , idNameToP , 0 } ;
        
                    puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;
                {
                //SINK UNIQUE A listingVSP for record INTO A TEMPORARY LIST
            {
            if( isListed )

            }
                ((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;
                isListed = selectHeP.isListedF( tinBaseP , record ) ;
                ((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = 0 ;
                puseC puseRecord( tinBaseP , *((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;
            {
            ZE( boolT , isListed ) ;

            __( !listingC::bIsListingIF( tinBaseP , &record ) ) ;
            const listingC& record = *(const listingC*)spRecord ;

            listingVSP spRecord = entry ;
            listing_listingVSP_C& entry = *(listing_listingVSP_C*)pListingP ;
        {
        else
        }
            }
                }
                    DELlIST( fieldEditParamOutC , pOut ) ;
                    listOfSetC::fieldIF( tinBaseP , pOut , hTo , pczField , _fe_pushC( record ) + _fe_modePushSinkC() + _fe_modeUniqueC() , LF ) ;
                    countT pczField[] = { LISTnAMEsYS_RECORD , 0 } ;                                                                                                                                                 \
                    ZE( fieldEditParamOutC* , pOut ) ;
        
                    listOfSetC::openIF( tinBaseP , hTo , pczTo ) ;
                    handleC hTo( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;
                    countT pczTo[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM4 , LISTnAMEsYS_TEMPORARY , LISTnAMEsYS_SELECTED , idNameToP , 0 } ;
        
                    puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;
                {
                //SINK UNIQUE A listingVSP for record INTO A TEMPORARY LIST
            {
            if( isListed )

            }
                ((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;
                isListed = selectHeP.isListedF( tinBaseP , record ) ;
                ((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = 0 ;
                puseC puseRecord( tinBaseP , *((tin9S&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;
            {
            ZE( boolT , isListed ) ;

            __( !listingOfSetC::bIsListingIF( tinBaseP , &record ) ) ;
            const listingOfSetC& record = *(const listingOfSetC*)(const listingC*)spRecord ;

            listingVSP spRecord = entry ;
            listingOfSet_listingVSP_C& entry = *(listingOfSet_listingVSP_C*)pListingP ;
        {
        if( bOfSet )
    {
    if( pListingP && !( pListingP->flagsF() & fliLISTINGc_MIXINlIST ) && pListingP->idTypeDatumF() == ifcIDtYPEmIXINdATUM_listingVSP )

    selectC&  selectHeP = *(selectC*)((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 1 ] ;
    countT    idNameToP =            ((tin9S&)tinBaseP).ta.pushed.u.listWalk.util.pcP[ 0 ] ;
    listingC* pListingP =            ((tin9S&)tinBaseP).ta.pushed.u.listWalk.cbf.pListingP ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    const boolT  bOfSet = F(flagsPoolFormat) & flPOOLfORMAT_SETS ;
    const flagsT flagsPoolFormat = !((tin9S&)tinBaseP).pPoolUse ? 0 : PUSE.flagsPoolFormatF() ;
    if( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) { BLAMMOiD( 0x12121212 ) ; }
{
/*1*/flagsT _export listWalkSelectAndCBF( tin0S& tinBaseP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

