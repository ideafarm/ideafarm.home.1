
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

while( !ether && cKidsGone < cKids ) { ++ s ; ether.osSleepF( tinBaseP , TOCK >> 2 ) ; }
sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;

{ countT cLaunch = cKids ; while( cLaunch -- ) ether.osThreadF( TaRG1( tmWorkF ) , (countT)&cKidsGone ) ; }

ZE( countT , cKidsGone ) ;
const countT cKids = thirdC::osProcessorsIF( tinBaseP ) << 1 ;

TODO

DONE( tmWorkF )
}
    inc02AM( cKidsGoneP ) ;

    }
        }
            ++ s ; ether.osSleepF( tinBaseP , TOCK ) ;
    
            ether.strokeF( tinBaseP , TF2(idKid,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+t1+TF2(cToDo,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+t2 ) ;
        {
        while( !ether && cToDo -- )
        countT cToDo = idKid << 2 ;
        sleepC s( tinBaseP , TAG( TAGiDnULL ) ) ;
    
        TN( t2 , " remain.\r\n" ) ;
        TN( t1 , ":  " ) ;
        countT idKid = 1 + incv02AM( idKidLath ) ;
        static countT idKidLath ;
    {

    countT& cKidsGoneP = *(countT*)pTaskP->c1 ;
{
if( pTaskP && pTaskP->c1 )
TASK( tmWorkF )

/*1*/WAKEsHOWtEXT( "ifcIDaDAM_STARTER2.worker.threads" )/*1*/
/**/
*/
this starter adam illustrates multithreading
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

