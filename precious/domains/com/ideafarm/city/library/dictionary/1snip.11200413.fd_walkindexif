
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


    }
        return flagsRC ;                                                                                                                                                                              \
                                                                                                                                                                                                      \
        ((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = 0 ;                                                                                                                         \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
            __NZ( pczIKVR ) ;                                                                                                                                                                         \
            PUSE( tinBaseP , *(byteT**)&pczIKVR ) ;                                                                                                                                                   \
            puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                           \
        {                                                                                                                                                                                             \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
                                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP = flagsSave ;                                                                                            \
            flagsRC          |= references.walkF( tinBaseP ) ;                                                                                                                                        \
                                ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP |= flLISTwALK_CALLERgRABBEDrOOT ;                                                                        \
            flagsT flagsSave  = ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP ;                                                                                                        \
            listC& references = *(listC*)hIKVR.osF( ifcIDtYPEhANDLE_LISTING ) ;                                                                                                                       \
        {                                                                                                                                                                                             \
        if( ~hIKVR )                                                                                                                                                                                  \
                                                                                                                                                                                                      \
        listC::openIF( tinBaseP , hIKVR , pczIKVR , flLISToPEN_IFeXISTS ) ;                                                                                                                           \
        handleC hIKVR( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_LISTING ) ;                                                                                                                      \
                                                                                                                                                                                                      \
        LNV( pczIKVR )                                                                                                                                                                                \
        THREADmODE3rESTORE                                                                                                                                                                            \
        dictionaryReplaceOsTextIF( tinBaseP , pczIKVR ) ;                                                                                                                                             \
        THREADmODE3oN( flTHREADmODE3_ALLOWdICTIONARYwHILEgRABBING )                                                                                                                                   \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
            PUSE( tinBaseP , *(byteT**)&pczIKV ) ;                                                                                                                                                    \
            }                                                                                                                                                                                         \
                pczIKVR[ ccIKV + 1 ] = 0 ;                                                                                                                                                            \
                pczIKVR[ ccIKV     ] = LISTnAMEsYS_RECORD ;                                                                                                                                           \
                thirdC::c_memcpyIF( tinBaseP , (byteT*)pczIKVR , (byteT*)pczIKV , sizeof( countT ) * ccIKV ) ;                                                                                        \
            {                                                                                                                                                                                         \
            if( !POOP )                                                                                                                                                                               \
            __Z( pczIKVR ) ;                                                                                                                                                                          \
            PUSE.newF( tinBaseP , LF , *(byteT**)&pczIKVR , sizeof( countT ) * ( ccIKV + 2 ) ) ; ___( pczIKVR ) ;                                                                                     \
            countT ccIKV = thirdC::c_strlenIF( tinBaseP , pczIKV ) ;                                                                                                                                  \
                                                                                                                                                                                                      \
            }                                                                                                                                                                                         \
                etherC::strStretchIF( tinBaseP , pczIKV , pczIK , valueP , cNetP ) ; ___( pczIKV ) ;                                                                                                  \
                countT pczIK[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM3 , LISTnAMEsYS_FIELDvALUEiNDEX , (countT)postMasterPool , LISTnAMEsYS_INDEXaPPLICATION , idKeyInIndex , 0 } ;            \
            {                                                                                                                                                                                         \
            ZE( countT* , pczIKV ) ;                                                                                                                                                                  \
                                                                                                                                                                                                      \
            puseC puseat( tinBaseP , ifcIDpOOL_ADAMtEMP ) ;                                                                                                                                           \
        {                                                                                                                                                                                             \
        ZE( countT* , pczIKVR ) ;                                                                                                                                                                     \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
            DELzOMBIE( pvspPostKey ) ;                                                                                                                                                                \
            idKeyInIndex = dictionaryQueryFromTextIF( tinBaseP , *pvspPostKey ) ;                                                                                                                     \
        {                                                                                                                                                                                             \
        if( !bLiteralKey )                                                                                                                                                                            \
                                                                                                                                                                                                      \
        puseC puseIndex( tinBaseP , idStateSpace == ifcIDsTATEsPACE_SINGLEaDAM( tinBaseP ) || idStateSpace == ifcIDsTATEsPACE_SCRATCH ? ifcIDpOOL_ADAMtEMP : ifcIDpOOL_HOMEtEMP ) ;                   \
        ((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord = &PUSE ;                                                                                                                     \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
            *pvspPostKey = dictionaryQueryFromIdIF( tinBaseP , idKeyP ) ;                                                                                                                             \
            pvspPostKey = new( 0 , tinBaseP , pbvsp , sizeof pbvsp ) blobVSP ;                                                                                                                        \
        {                                                                                                                                                                                             \
        if( !bLiteralKey )                                                                                                                                                                            \
        countT idKeyInIndex = idKeyP ;                                                                                                                                                                \
        ZE( blobVSP* , pvspPostKey ) ;                                                                                                                                                                \
        byteT pbvsp[ sizeof( blobVSP ) ] ;                                                                                                                                                            \
                                                                                                                                                                                                      \
        ;                                                                                                                                                                                             \
        )                                                                                                                                                                                             \
            LISTnAMEaPPmIN  <= idKeyP && idKeyP <= LISTnAMEaPPmAX                                                                                                                                     \
            ||                                                                                                                                                                                        \
            LISTnAMEsYS_min <= idKeyP && idKeyP <= LISTnAMEsYS_max                                                                                                                                    \
        (                                                                                                                                                                                             \
        boolT bLiteralKey =                                                                                                                                                                           \
                                                                                                                                                                                                      \
        const countT idStateSpace = PUSE.idStateSpaceF() ;                                                                                                                                            \
        const osTextT* postMasterPool = PUSE.postNameF( tinBaseP ) ;                                                                                                                                  \
                                                                                                                                                                                                      \
        }                                                                                                                                                                                             \
            if( POOP ) return flagsRC ;                                                                                                                                                               \
            __(  ((tinFullS&)tinBaseP).ta.retained.u.listWalk.walk.pPoolRecord ) ;                                                                                                                  \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pbHandleRootP ) ;                                                                                                                  \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.ppHandleRootP ) ;                                                                                                                  \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pHandleHiP ) ;                                                                                                                     \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pHandleLoP ) ;                                                                                                                     \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pOffWothP ) ;                                                                                                                      \
            FV( flLISTwALK , ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.flagsWalkP ) ;                                                                                                         \
            __(  ((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.cRecurseP ) ;                                                                                                                      \
            __( !((tinFullS&)tinBaseP).ta.pushed.u.listWalk.walk.pListWalkCBFP ) ;                                                                                                                  \
            __( !( F(((tinFullS&)tinBaseP).flagsThreadMode3) & flTHREADmODE3_TINaRGSpUSHED ) ) ; /*INTENDED TO FORCE APPLICATION CODE TO PUSH THE TIN ARGS AND SET THEM BEFORE EACH CALL TO ME*/    \
            { countT pczName[] = { idKeyP , 0 } ; LNV( pczName ) ; }                                                                                                                                  \
            __Z( idKeyP ) ;                                                                                                                                                                           \
            if( POOP ) return flagsRC ;                                                                                                                                                               \
            __( tinBaseP.idTypeTin - ifcIDtYPEtIN_FULL ) ;                                                                                                                                            \
            if( POOP ) return flagsRC ;                                                                                                                                                               \
        {                                                                                                                                                                                             \
        IFbEcAREFUL                                                                                                                                                                                   \
                                                                                                                                                                                                      \
        flagsT flagsRC = flLISTwALKrETURNcODE_null ;                                                                                                                                                  \
    {                                                                                                                                                                                                 \
    flagsT listC::walkIndexIF( tinBaseS& tinBaseP , const countT idKeyP , const typeP valueP , const countT cNetP )                                                                                   \
                                                                                                                                                                                                      \
#define FD_WALKiNDEXif(typeP)                                                                                                                                                                         \

// "FD": "FUNCTION DEFINITION"

/*1*//*FD_WALKiNDEXif(typeP)*//*1*/

/**/
*/
  this is the value being searched for
 valueP
  the name of the field
  must not be 0
 cNameP
 tinBaseP
args
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

