
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

}
    if( !cDeleted ) break ;

    }
        swsFileName.purgeF( tinBaseP ) ;

        }
            etThread.delF( tinBaseP , pb600 ) ;
            }
                while( ~hWalk ) ;
                }
                    }
                        etThread.delF( tinBaseP , pb0600 ) ;

                        }
                            break ;
                            etThread.delF( tinBaseP , pb0600 ) ;
                            cDeleted ++ ;
                            etThread.diskFileOrDirDeleteF( tinBaseP , psttz600 ) ;
                            etThread.traceF( tinBaseP , T("deleting ")+T(psttz600) ) ;
                        {
                        if( !POOP && !etThread.memCompareF( tinBaseP , pb600 , pb0600 , cLeverFileSize ) )

                        __( cb0600 - cLeverFileSize ) ;
                        etThread.boxGetShadowF( tinBaseP , pb0600 , cb0600 , psttfn ) ;
                        ZE( countT , cb0600 ) ;
                        ZE( byteT* , pb0600 ) ;
                    {
                    if( etThread.strCompareF( tinBaseP , psttz600 , psttfn ) && etThread.strIdF( tinBaseP , t0600 , psttfn ) )

                    strokeS* psttfn = (strokeS*)swsFileName.downF( tinBaseP , hWalk ) ;
                {
                do
                handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
            {
            if( !POOP )

            __( cb600 - cLeverFileSize ) ;
            etThread.boxGetShadowF( tinBaseP , pb600 , cb600 , psttz600 ) ;
            ZE( countT , cb600 ) ;
            ZE( byteT* , pb600 ) ;
        {
        if( psttz600 )

        }
            while( ~hWalk ) ;
            }
                }
                    break ;
                    psttz600 = psttfn ;
                {
                if( etThread.strIdF( tinBaseP , t600 , psttfn ) )
                strokeS* psttfn = (strokeS*)swsFileName.downF( tinBaseP , hWalk ) ;
            {
            do
            handleC hWalk( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_STACKwALK ) ;
        {
        ZE( strokeS* , psttz600 ) ;

        if( !( cRemain % TUCK ) ) etThread.traceF( tinBaseP , T("remaining flavors: ")+TF2(cRemain,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;
        countT cRemain = cFlavors - idf ;
        cLeverFileSize = swsFileName.leverF( tinBaseP , idf ) ;
    {
    for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
    countT cFlavors = swsFileName.cFlavorsF( tinBaseP ) ;
    TN( t0600 , ".0600x" ) ;
    TN( t600  , ".600x"  ) ;
    ZE( countT , cDeleted ) ;
    etThread.traceF( tinBaseP , T("inspecting size filesets") ) ;

    etThread.diskWalkF( tinBaseP , cDirs , cFiles , T("///a/ideafarm.home.101/IdeaFarm (tm)/2.1. Drop Files Here To Archive Them/") , bQuit , diskWalkZapDupsCBF , pcArg ) ;
    etThread.traceF( tinBaseP , T("walking archive") ) ;
    ZE( boolT , bQuit ) ;
    ZE( countT , cFiles ) ;
    ZE( countT , cDirs ) ;
{
for(;;)

countT pcArg[] = { (countT)&cLeverFileSize , (countT)&swsFileName } ;
switchStackC swsFileName( tinBaseP , etThread , TAG( TAGiDnULL ) , flSTACKc_DOnOTsERIALIZE , cLeverFileSize , flSTACKc_DOnOTsERIALIZE , ifcSTACKtYPE_PTR_strokeS ) ;
ZE( countT , cLeverFileSize ) ;

TODO

}
    return 1 ;

    DEL( pInfo ) ;

    }
        if( !ids ) ((tin9S&)tinBaseP).pEther->delF( tinBaseP , psttFileName ) ;
        swsFileNameP.sinkF( tinBaseP , ids , psttFileName , flSTACKsINK_UNIQUE ) ;
        ZE( countT , ids ) ;
        ((tin9S&)tinBaseP).pEther->strMakeF( tinBaseP , LF , psttFileName , tFileName ) ; ___( psttFileName ) ;
        ZE( strokeS* , psttFileName ) ;

        cLeverFileSizeP = pInfo->cbUsed ;
    {
    if( pInfo )

    ((tin9S&)tinBaseP).pEther->diskFileQueryF( tinBaseP , pInfo , hFile ) ; ___( pInfo ) ;
    ZE( infoFileS* , pInfo ) ;
    ((tin9S&)tinBaseP).pEther->fileOpenF( tinBaseP , hFile , countTC() , tFileName , ifcOPENaCCESS_R , 0 , flOPENdETAILS_LOCsEQ , ifcOPENhOW_nFeO ) ;
    handleC hFile( tinBaseP , TAG( TAGiDnULL ) , ifcIDtYPEhANDLE_FILE ) ;

    TN( tFileName , ifFileNameC( tinBaseP , *((tin9S&)tinBaseP).pEther , postNameP ) ) ;

    if( !( cFilesP % TUCK ) ) etherC::etRockIF( tinBaseP ).traceF( tinBaseP , T("[cDirs,cFiles]: ")+TF2(cDirsP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES)+T(" ")+TF2(cFilesP,flFORMAT_UNSIGNED|flFORMAT_NObIGITvALUES) ) ;

    switchStackC& swsFileNameP    = *(switchStackC*)pcArgP[ 1 ] ;
    countT&       cLeverFileSizeP =       *(countT*)pcArgP[ 0 ] ;
{
boolT diskWalkZapDupsCBF( tin0S& tinBaseP , countT& cDirsP , countT& cFilesP , boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )

//20140915@1840: MOVED FROM SCRATCH d TO PERMANENT ADAM ID

/*1*/WAKEsHOWtEXT( "scr" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

