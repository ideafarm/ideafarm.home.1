
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


}
    UNGRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )
    POPtINaRGS
    walkIF( tinP , pczName , flLISToPEN_null , idGrabLayerP ) ;
    countT pczName[] = { LISTnAMEsYS_ROOT , LISTnAMEsYS_ROOTsYSTEM2 , LISTnAMEsYS_DICTIONARY , 0 } ;
    ((tinNormalS&)tinP).ta.pushed.u.listWalk.util.pcP[ 0 ] = idP ;
    ((tinNormalS&)tinP).ta.pushed.u.listWalk.walk.flagsWalkP = flLISTwALK_null ;
    ((tinNormalS&)tinP).ta.pushed.u.listWalk.walk.pListWalkCBFP = listWalkForgetIdCBF ;
    PUSHtINaRGS

    grabitC grabitx( tinP , TAG( TAGiDnULL ) ) ;
    GRABtINaRGS( ifcIDtYPEtINaRGiNuSE_LIST )

    _IO_

    }
        if( POOP ) return ;
        __( ((tinNormalS&)tinP).monitor.cGrabbed && !( F(((tinNormalS&)tinP).flagsThreadMode3) & flTHREADmODE3_ALLOWdICTIONARYwHILEgRABBING ) ) ; // TO PREVENT DEADLOCKING, A THREAD MAY NOT BEGIN A WALK IN THE LIST TREE WHILE IT POSESSES A listingC ; THIS PROHIBITION IS MORE THAN NECESSARY BUT IS SIMPLE TO ENFORCE ; THE NECESSARY CONDITION IS TO PREVENT "BACKWARD" WALKING ; cGrabbed COUNTS ANY grabitC GRAB, NOT JUST GRABS OF listingC INSTANCES
        __Z( idP ) ;
        if( POOP ) return ;
    {
    IFbEcAREFUL
{
/*1*/voidT listC::dictionaryForgetIdIF( tinBaseS& tinP , const countT idP , const countT idGrabLayerP )/*1*/

/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

