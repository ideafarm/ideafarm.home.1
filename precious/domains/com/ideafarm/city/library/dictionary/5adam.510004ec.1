
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etThread.loafIF( tin0P ) ;

etThread.strokeF( tin0P , T("\felapsed time: ")+TT(timeB1,timeB2) ) ;
etThread.osTimeSubtractF( tin0P , timeB1 , timeB2 , timeA1 , timeA2 ) ;
etThread.osTimeNowF( tin0P , timeB1 , timeB2 ) ;
ZE( sCountT , timeB2 ) ;
ZE( countT , timeB1 ) ;

}
    etThread.delF( tin0P , psttw ) ;
    etThread.strokeF( tin0P , psttw ) ;

    for( countT idl = 1 ; idl <= 0x100 ; idl ++ ) etThread.strFuseF( tin0P , psttw , tNull+OLDmOVEtO(xx1,yy1)+OLDlINEtO(xx2+idl,yy2) ) ;

    etThread.strMakeF( tin0P , LF , psttw , tWoth+TF1(idt) , 0x10000 ) ; ___( psttw ) ;
    ZE( strokeS* , psttw ) ;

    }
        yy2 = 200 ;
        xx2 = 100 ;
        yy1 = 100 ;
        xx1 = 200 ;
    {
    else
    }
        yy2 = 200 ;
        xx2 = 200 ;
        yy1 = 100 ;
        xx1 = 100 ;
    {
    if( idt % 2 )
{
for( countT idt = 1 ; !ether && idt <= 0x10 ; idt ++ )

etThread.osTimeNowF( tin0P , timeA1 , timeA2 ) ;
ZE( sCountT , timeA2 ) ;
ZE( countT , timeA1 ) ;

ZE( countT , yy2 ) ;
ZE( countT , xx2 ) ;
ZE( countT , yy1 ) ;
ZE( countT , xx1 ) ;
TN( tNull , "" ) ;
TN( tWoth , "\f" ) ;

TODO

/*1*/WAKEhIDE( "tool.drawingspeedguage" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

