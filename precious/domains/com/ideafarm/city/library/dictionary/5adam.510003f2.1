
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

}
    }
        etThread.osSleepF( tin0P , TOCK * 0x20 , TOCK , flSLEEP_TALK ) ;
        etThread.strokeF( tin0P , T("\r" BLANK79 "\r") ) ;

        }
            }
                DEL( pCar ) ;
                }
                    etThread.delF( tin0P , psttEmail ) ;
                    }
                        etThread.strokeF( tin0P , T("activity report mailed to \"")+T(psttEmail)+T("\"\r\n") ) ;
                        etThread.delF( tin0P , postr ) ;

                        }
                            sOut.writeMsgF( tin0P , T(postr) ) ;
                            sOut.writeMsgF( tin0P , T("ideafarm.com//smtp/" ifcEMAIL_OLDfROM "/")+tTo ) ;
                            etThread.strokeF( tin0P , T("\"")+tTo+T("\"\r\n") ) ;
                            textC tTo = T(psttEmail)+T("/" ifcEMAIL_OLDfROM "") ;
                            sOut.connectF( tin0P , ifcPORToLD1oUTGOINGmAILBOX , 0x01010102 ) ;
                            socketC sOut( tin0P , ether , TAG( TAGiDnULL ) ) ;
                        {

                        { ZE( strokeS* , psttnu ) ; etThread.boxPutUniqueF( tin0P , psttnu , T("///ideafarm/ephemeral/4f30104/email") , postr , costr ) ; etThread.delF( tin0P , psttnu ) ; }

                        etThread.delF( tin0P , psttr2 ) ;
                        etThread.delF( tin0P , psttr1 ) ;
                        countT costr = etThread.strMakeF( tin0P , LF , postr , T(psttr1)+T(psttr2) ) ; ___( postr ) ;
                        ZE( osTextT* , postr ) ;

                        pCar->strF( tin0P , psttr2 ) ; ___( psttr2 ) ;
                        ZE( strokeS* , psttr2 ) ;

                        }
                            ) ; ___( psttr1 ) ;

                                "\r\n")
                                "\r\n"
                                ifcEMAIL_WEBsITEcONTACT " or see http://www.ideafarm.com .  Thank you.\r\n"
                                "is strongly opposed to spam.  If you received this in error, please contact\r\n"
                                "obtained citizenship in IdeaFarm (tm) City for your email address.  IdeaFarm " "(tm) City\r\n"
                                "You are receiving this report because you, or an impostxr who claimed to be you,\r\n"
                                T("Subject: Your Citizen Activity Report\r\n\r\n"

                            etThread.strMakeF( tin0P , LF , psttr1 ,
                        {
                        ZE( strokeS* , psttr1 ) ;
                    {
                    if( psttEmail )

                    }
                        if( !psttEmail ) etThread.ifcExternalEmailFromIdCitizenF( tin0P , psttEmail , 1 ) ;
                        if( pCar->idcHirer ) etThread.ifcExternalEmailFromIdCitizenF( tin0P , psttEmail , pCar->idcHirer ) ;
                    {
                    ZE( strokeS* , psttEmail ) ;
                {
                if( pCar )
                swCar = 0 ;
                carC* pCar = (carC*)(countT)swCar ;
                idcHirer = swCar.leverF( tin0P , idf ) ;
            {
            for( countT idf = 1 ; idf <= cFlavors ; idf ++ )
            countT cFlavors = swCar.cFlavorsF( tin0P ) ;

            etThread.delF( tin0P , pstt1m ) ;
            }
                etThread.delF( tin0P , pbSoul ) ;
                }
                    if( pCar ) *pCar += car ;

                    }
                        if( pCar ) swCar = (countT)pCar ;
                        pCar = new( 0 , tin0P , LF ) carC( tin0P , ether , idcHirer ) ; ___( pCar ) ;
                    {
                    if( !pCar )
                    carC* pCar = (carC*)(countT)swCar ;
                    idcHirer = car.idcHirer ;                

                    carC car( tin0P , ether , pbSoul ) ;
                {
                etThread.boxGetShadowF( tin0P , pbSoul , cbSoul , psttc1 ) ; ___( pbSoul ) ;
                ZE( countT , cbSoul ) ;
                ZE( byteT* , pbSoul ) ;
            {
            FORsTRINGSiN1( pstt1m )
            switchC swCar( tin0P , ether , TAG( TAGiDnULL ) , flSTACKc_null , idcHirer ) ;
            ZE( countT , idcHirer ) ;

            etThread.boxMenuF( tin0P , soul1m , tArcTo+T("*") ) ; ___( pstt1m ) ;
            ZE( strokeS* , pstt1m ) ;

            etThread.boxPourF( tin0P , tArcTo , tArcFrom , 0x10000 ) ;
            textC tArcTo = T("///ideafarm/ephemeral/4f30104/")+TF3(now.time2,flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T(".")+TF3(now.time1,flFORMAT_UNSIGNED|flFORMAT_FILLzE,8)+T("/") ;
            etThread.osTimeNowF( tin0P , now.time1 , now.time2 ) ;
            timeS now ;
        {
        if( idCycle == 1 || bNewHour )

        time2last = time2 ;
        time1last = time1 ;

        const boolT bNewDayEnd    = bNewHour && offHOUR( time1 ) == 0x5 ;
        const boolT bNewStrongEnd = bNewDay && ( offDAY( time2 ) == 0x6 || offDAY( time2 ) == 0xe ) ;

        const boolT bNewTick      = bNewHour   || offTICK(   time1 ) != offTICK(   time1last ) ;
        const boolT bNewHour      = bNewDay    || offHOUR(   time1 ) != offHOUR(   time1last ) ;
        const boolT bNewDay       = bNewStrong || offDAY(    time2 ) != offDAY(    time2last ) ;
        const boolT bNewStrong    = bNewQtr    || offSTRONG( time2 ) != offSTRONG( time2last ) ;
        const boolT bNewQtr       = bNewDuck   || offQTR(    time2 ) != offQTR(    time2last ) ;
        const boolT bNewDuck      =               offDUCK(   time2 ) != offDUCK(   time2last ) ;

        etThread.osTimeNowF( tin0P , time1 , time2 ) ;
        ZE( sCountT , time2 ) ;
        ZE( countT , time1 ) ;
        idCycle ++ ;
    {
    while( !ether )
    ZE( countT , idCycle ) ;

    TN( tArcFrom , "///ideafarm/ephemeral/3f30104/carC/" ) ;

    etThread.osTimeNowF( tin0P , time1last , time2last ) ;
    ZE( sCountT , time2last ) ;
    ZE( countT , time1last ) ;
    ZE( strokeS* , psttw ) ;

    etThread.strokeF( tin0P , T("IdeaFarm " "(tm) City Activity Reporter\r\ni report activity, and generate one billing line item per hirer, for each strong\r\n") ) ;
{
else
}
    etThread.strokeF( tin0P , T("Another ")+textIdFileC( tin0P , DDNAME )+T(" appears to be alive on this computer.  Only one is allowed.") ) ;
    etThread = 0  ;
{
if( etThread )
U:: USE napkinC OBJECT TO TEST FOR ALONENESS
batonC baton( tin0P , TAG( TAGiDnULL ) , T("4f30104") ) ;

TODO

/*1*/WAKEhIDE( "city.activity.reporter" )/*1*/
/**/
*/
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

