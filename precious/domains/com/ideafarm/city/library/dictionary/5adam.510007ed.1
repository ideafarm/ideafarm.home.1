
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST

etherC::loafIF( tinBaseP ) ;
etThread.traceF( tinBaseP , T("ok") ) ;

etThread.traceF( tinBaseP , T("mp3 [cHit]:    ")+TF2(cHit,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.traceF( tinBaseP , T("walked  ")+tRoot+T(" [cDirs,cFiles]:    ")+TF2(cDirs,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED)+tb4+TF2(cFiles,flFORMAT_NObIGITvALUES|flFORMAT_UNSIGNED) ) ;
etThread.diskWalkF( tinBaseP , cDirs , cFiles , tRoot , ether , flDISKwALK_null , workCBF , pcArgInner , 0 , 0 ) ;
ZE( countT , cFiles ) ;
ZE( countT , cDirs ) ;
etThread.traceF( tinBaseP , T("walking ")+tRoot ) ;

countT pcArgInner[] = { (countT)&etThread , (countT)&cHit , (countT)&tb4 , (countT)&tExtWant , (countT)&sttCR } ;

ZE( countT , cHit ) ;

strokeS sttCR( '\r' ) ;
TN( tExtWant , "currentname" ) ;
TN( tb4  , "    " ) ;
TN( tRoot , "///e/ideafarm.archives/" ) ;

TODO


}
    return 0 ;

    }
        }
            etherP.delF( tinBaseP , psttLine ) ;
            etherP.traceF( tinBaseP , tSay , flTRACE_NOpREFIX ) ;

            tSay += tb4P+T(psttLine) ;

            etherP.strWordF( tinBaseP , psttLine , T(pbw) , sttq , sttCRP , 1 , 0 ) ;
            strokeS sttq( 0 , sc_IGNOREqUOTES ) ;
            ZE( strokeS* , psttLine ) ;

            fwsIn.getF( tinBaseP , pbw , cbw , TUCK << 1 ) ;
            ZE( countT , cbw ) ;
            ZE( byteT* , pbw ) ;
            fileWindowsC fwsIn( tinBaseP , etherP , tName ) ;

            //etherP.traceF( tinBaseP , tShortest , flTRACE_NOpREFIX ) ;

            TN( tSay , (strokeS*)tShortest ) ;

            }
                etherP.delF( tinBaseP , psttnu ) ;
                etherP.delF( tinBaseP , psttShortest ) ;

                tShortest  = T(psttShortest) ;
                etherP.strBisectF( tinBaseP , psttShortest , psttnu , tName , T(".") , - 3 , flSTRbISECT_null ) ; ___( psttShortest ) ; ___( psttnu ) ;
                ZE( strokeS* , psttnu ) ;
                ZE( strokeS* , psttShortest ) ;
            {
            TN( tShortest  , "" ) ;

            cHitP ++ ;
        {
        if( bWant )

        boolT bWant = !etherP.strCompareF( tinBaseP , tExt , tExtWantP ) ;

        //etherP.traceF( tinBaseP , T("ext  :    ")+tExt ) ;

        }
            etherP.delF( tinBaseP , psttExt ) ;
            etherP.delF( tinBaseP , psttShorter ) ;
            tExt = T(psttExt) ;
            etherP.strConvertToLowerCaseF( tinBaseP , psttExt ) ;

            tShorter  = T(psttShorter) ;
            etherP.strBisectF( tinBaseP , psttShorter , psttExt , tName , T(".") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttShorter ) ; ___( psttExt ) ;
            ZE( strokeS* , psttExt ) ;
            ZE( strokeS* , psttShorter ) ;
        {
        TN( tExt , "" ) ;
        TN( tShorter  , "" ) ;

        }
            etherP.delF( tinBaseP , psttShort ) ;
            etherP.delF( tinBaseP , psttPath ) ;
            tShort = T(psttShort) ;
            tPath  = T(psttPath) ;
            etherP.strBisectF( tinBaseP , psttPath , psttShort , tName , T("/") , - 1 , flSTRbISECT_APPENDdELIMITER ) ; ___( psttPath ) ; ___( psttShort ) ;
            ZE( strokeS* , psttShort ) ;
            ZE( strokeS* , psttPath ) ;
        {
        TN( tShort , "" ) ;
        TN( tPath  , "" ) ;
                                                                            
        //etherP.traceF( tinBaseP , T("file :    ")+tName ) ;

        TN( tName , ifName ) ;
        ifFileNameC ifName( tinBaseP , *((tinNormalS&)tinBaseP).pEther , postNameP ) ;
    {
    else
    }
        //etherP.traceF( tinBaseP , T("directory:    ")+tName ) ;

        TN( tName , ifName ) ;
        ifFileNameC ifName( tinBaseP , etherP , postNameP ) ;
    {
    else if( postNameP[ thirdC::c_strlenIF( tinBaseP , postNameP ) - 1 ] == '\\' ) // IF DIRECTORY
    }
        //etherP.traceF( tinBaseP , T("scan completed for a directory") ) ;
    {
    if( !postNameP )

    strokeS& sttCRP    = *(strokeS*)pcArgP[ 4 ] ;
    textC&  tExtWantP  =   *(textC*)pcArgP[ 3 ] ;
    textC&  tb4P       =   *(textC*)pcArgP[ 2 ] ;
    countT& cHitP      =  *(countT*)pcArgP[ 1 ] ;
    etherC& etherP     =  *(etherC*)pcArgP[ 0 ] ;
{
boolT workCBF( tinBaseS& tinBaseP , countT& cDirsP , countT& cFilesP , const boolT& bQuitP , const osTextT* const postNameP , countT* const pcArgP , const countT* const pModuloDirsP , const countT* const pModuloFilesP )


/*1*/WAKEsHOWtEXT( "tool.accumulate.currentnames" )/*1*/
/**/
*/
parameter: !dir: the directory to scan, in ipdos file name format
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2024 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
