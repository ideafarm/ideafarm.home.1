
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
// Respecting the rights of other people is an important part of empowering one another.
//


REST
etThread.osProcessIdPhaseAdamF( tin0P , ifcIDpHASEhANDOFFoLD_SHUTTINGdOWN ) ;

#endif

etThread.delF( tin0P , pbClick ) ;
etThread.delF( tin0P , pbImage ) ;
etThread.delF( tin0P , pbFace  ) ;
etThread.delF( tin0P , postnu  ) ;

}
    etThread.osSleepF( tin0P , TUCK * 0x40 ) ;
    etThread.strokeF( tin0P , T("\r")+TF1(etThread.os_cAllKidThreadsI_IF(tin0P)-cKidsBefore)+T(" clients are currently being served") ) ;
{
while( etThread.os_cAllKidThreadsI_IF( tin0P ) > cKidsBefore )

}
    etThread = 0 ;
    }
        //U: CONJ: LEAK HERE pso
        if( pso && !ether ) { ZE( countT , tid ) ; etThread.osThreadF( tin0P , tid , tmServeF , 0 , 0  , flTHREADlAUNCH_null , 0 , 0 , (countT)pcp , (countT)pso ) ; }
        etThread.strokeF( tin0P , T("\r")+TF1(++idClient) ) ;
        sock.acceptF( tin0P , pso , idPortPeer , nnPeer , countTC() ) ;
        ZE( countT , idPortPeer ) ;
        nicNameC nnPeer ;
        ZE( socketC* , pso ) ;
    {
    while( !etThread )
    ZE( countT , idClient ) ;
    sock.listenF( tin0P ) ;
    sock.bindF( tin0P , 8006 ) ;
    socketC sock( tin0P , etThread , TAG( TAGiDnULL ) ) ;
{
while( !ether )
const countT cKidsBefore = etThread.os_cAllKidThreadsI_IF( tin0P ) ;

const countT pcp[] = { 0 , (countT)postnu , (countT)pbFace , cbFace , (countT)pbImage , cbImage , (countT)pbClick , cbClick , (countT)&cImages , (countT)&cClicks } ;
ZE( countT , cClicks ) ;
ZE( countT , cImages ) ;

etThread.newF( tin0P , LF , postnu , COSTnu ) ;
ZE( osTextT* , postnu ) ;

ZE( byteT* , pbClick ) ; ZE( countT , cbClick ) ; etThread.boxGetShadowF( tin0P , pbClick , cbClick , T("///ideafarm/ephemeral/tmp/7630104/reply.click") ) ; ___( pbClick ) ;
ZE( byteT* , pbImage ) ; ZE( countT , cbImage ) ; etThread.boxGetShadowF( tin0P , pbImage , cbImage , T("///ideafarm/ephemeral/tmp/7630104/reply.image") ) ; ___( pbImage ) ;
ZE( byteT* , pbFace  ) ; ZE( countT , cbFace  ) ; etThread.boxGetShadowF( tin0P , pbFace  , cbFace  , T("///ideafarm/ephemeral/tmp/7630104/reply.face" ) ) ; ___( pbFace  ) ;

LAUNCHhEAReNTER( tmHearEnterF , 8006 ) ;

etThread.strokeF( tin0P , T("\"Lena\"\r\n\r\nMediaPlex Http Server\r\n\r\npress the Enter key to fire me\r\n\r\n") ) ;

#if defined( NEVERdEFINED )

TODO

DONE( tmServeF )
}
    DEL( pso ) ;
    etThread = 0 ;
    if( !bAbort ) pso->readF( tin0P , (osTextT*)pcp[ 1 ] , COSTnu ) ;

    }
        default  : { bAbort = 1                                          ; break ; }
        }
            break ;
            etThread.delF( tin0P , postr ) ;
            pso->writeF( tin0P , postr , costr ) ;
            countT costr = etThread.strMakeF( tin0P , LF , postr , T("HTTP/1.0 200\r\nContent-Type: text/html\r\nContent-Length: ")+TF4(tBody.csF(tin0P),flFORMAT_NObASE,0,0xa)+T("\r\n\r\n")+tBody ) ; ___( postr ) ;
            ZE( osTextT* , postr ) ;
            textC tBody = tTitle+TF4(cImages,flFORMAT_NObASE,0xc,0xa)+T("    Impressions (estimate).  This is an estimate of the number of times someone viewed an image in this Datek Campaign.\r\n\r\n")+TF4(cClicks,flFORMAT_NObASE,0xc,0xa)+T("    Clicks.  This is the actual number of times that someone clicked into an image in this Datek Campaign.")+tFooter ;

            ) ;

                "Thank you for selling through the MediaPlex Advertising Network!</pre></html>"
                "\r\n"
                "To obtain assistance, see <A HREF=\"http://www.mediaplex.com\">here</A>!\r\n"
                "To view the MediaPlex Channel Sales Report for this campaign, click <A HREF=\"http://127.0.0.1:8008/r\">here</A>.\r\n"
                "To obtain a current version, click <A HREF=\"http://127.0.0.1:8006/r\">here</A>.\r\n"
                "This report was generated by the MediaPlex, Inc. Advertising Network for Datek Online\r\n"
                "\r\n"
                "\r\n"
                "\r\n"

            TN( tFooter ,

            ) ;

                "\r\n"
                "\r\n"
                "Results Summary:\r\n"
                "\r\n"
                "\r\n"
                "\r\n"
                "\r\n"
                "Description:    ...U:\r\n"
                "\r\n"
                "Scope:          This page reports the results of MediaPlex Campaign #143557.\r\n"
                "\r\n"
                "Short Title:    MediaPlex Channel Advertising Campaign Report: Campaign #143557\r\n"
                "\r\n"
                "\r\n"
                "<html><pre>Datek Online        \"Your tool to invest...\"\r\n"

            TN( tTitle ,

        {
        case 'r' :
        case 'c' : { pso->writeF( tin0P , (byteT*)pcp[ 6  ] , pcp[ 7 ] ) ; cClicks ++ ; break ; }
        case 'i' : { pso->writeF( tin0P , (byteT*)pcp[ 4  ] , pcp[ 5 ] ) ; cImages ++ ; break ; }
        case 'f' : { pso->writeF( tin0P , (byteT*)pcp[ 2  ] , pcp[ 3 ] ) ; break ; }
    {
    switch( postc[ 5 ] )
    ZE( boolT , bAbort ) ;

    pso->readF( tin0P , postc , sizeof postc ) ;
    osTextT postc[ 0x6 ] ;

    pso->etherF( tin0P , etThread ) ;
    countT&  cClicks = *(countT*)pcp[ 9 ] ;
    countT&  cImages = *(countT*)pcp[ 8 ] ;
    socketC* pso     = (socketC*)pTaskP->c2 ;
    countT*  pcp     = (countT*) pTaskP->c1 ;
{
//if( pTaskP && pTaskP->c1 && pTaskP->c2 )
TASK( tmServeF )

#define COSTnu 0x1000

tmHEAReNTER( tmHearEnterF )

/*1*/WAKEhIDE( "mediaplex.http.server.globe" )/*1*/
/**/
*/
listens to port 8006_9
http server
mediaplex
/*

//
// Respecting the rights of other people is an important part of empowering one another.
// This proprietary software was crafted at great expense and with great hardship by one man.  It took 33 years.
//
// Copyright (c) 1992-2025 Wo Of Ideafarm.  All rights reserved.  See https://github.com/ideafarm/ideafarm.home.1 for permitted uses.
//

